<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Butter-Fly-和田光司</title>
    <url>/blog/ef6a6c4d.html</url>
    <content><![CDATA[<h1>Butter-Fly - 和田光司</h1>
<p>ゴキゲンな蝶(ちょう)になってきらめく风(かぜ)に乗(の)って<br>
好想化做一只蝴蝶乘着微风振翅高飞</p>
<p>今(いま)すぐキミに会(あ)いに行(い)こう<br>
现在马上只想赶快和你见面</p>
<p>余计(よけい)な事(こと)なんて忘(わす)れた方(ほう)がマシさ<br>
烦心的事放在一边如果忘记那也无所谓</p>
<p>これ以上(いじょう)シャレてる时间(じかん)はない<br>
已经没有多余时间可以浪费</p>
<p>何(なに)がWOWWOWこの空(そら)に届(とど)くのだろう<br>
似乎有WOWWOW~什么事会在这片晴空下出现</p>
<p>だけどWOWWOW明日(あした)の予定(よてい)もわからない<br>
就算是WOWWOW~面对未知的明天勇敢去冒险</p>
<p>无限大(むげんだい)な梦(ゆめ)のあとの<br>
在无限延伸的梦想后面</p>
<p>何(なに)もない世(よ)の中(なか)じゃ<br>
穿越冷酷无情的世界</p>
<p>そうさ爱(いと)しい想(おも)いも负(ま)けそうになるけど<br>
不想要输给自己有你的美丽记忆会让我更加努力</p>
<p>Stayしがちなイメージだらけの頼(たよ)りない翼(つばさ)でも<br>
相信爱永远不会止息即使偶尔会遇上难题</p>
<p>きっと飞(と)べるさOnMyLove<br>
一定能化险为夷OnMyLove</p>
<p>ウカレタ蝶(ちょう)になって一途(いちず)な风(かぜ)に乗(の)って<br>
仿佛蝴蝶展开双翼一路迎着微风飞行</p>
<p>どこまでもキミに会(あ)いに行(い)こう<br>
直到我和你约定相见不再分离</p>
<p>暧昧(あいまい)な言叶(ことば)って意外(いがい)に便利(べんり)だって<br>
对你倾吐我的心意没想到你真的愿意</p>
<p>片头曲butterfly<br>
ゴキゲンな蝶(ちょう)になってきらめく风(かぜ)に乗(の)って<br>
好想化做一只蝴蝶乘着微风振翅高飞</p>
<p>今(いま)すぐキミに会(あ)いに行(い)こう<br>
现在马上只想赶快和你见面</p>
<p>余计(よけい)な事(こと)なんて忘(わす)れた方(ほう)がマシさ<br>
烦心的事放在一边如果忘记那也无所谓</p>
<p>これ以上(いじょう)シャレてる时间(じかん)はない<br>
已经没有多余时间可以浪费</p>
<p>何(なに)がWOWWOWこの空(そら)に届(とど)くのだろう<br>
似乎有WOWWOW~什么事会在这片晴空下出现</p>
<p>だけどWOWWOW明日(あした)の予定(よてい)もわからない<br>
就算是WOWWOW~面对未知的明天勇敢去冒险</p>
<p>无限大(むげんだい)な梦(ゆめ)のあとの<br>
在无限延伸的梦想后面</p>
<p>何(なに)もない世(よ)の中(なか)じゃ<br>
穿越冷酷无情的世界</p>
<p>そうさ爱(いと)しい想(おも)いも负(ま)けそうになるけど<br>
不想要输给自己有你的美丽记忆会让我更加努力</p>
<p>Stayしがちなイメージだらけの頼(たよ)りない翼(つばさ)でも<br>
相信爱永远不会止息即使偶尔会遇上难题</p>
<p>きっと飞(と)べるさOnMyLove<br>
一定能化险为夷OnMyLove</p>
<p>ウカレタ蝶(ちょう)になって一途(いちず)な风(かぜ)に乗(の)って<br>
仿佛蝴蝶展开双翼一路迎着微风飞行</p>
<p>どこまでもキミに会(あ)いに行(い)こう<br>
直到我和你约定相见不再分离</p>
<p>暧昧(あいまい)な言叶(ことば)って意外(いがい)に便利(べんり)だって<br>
对你倾吐我的心意没想到你真的愿意</p>
<p>【<ruby>终<rp>（</rp><rt>お</rt><rp>）</rp></ruby>わった】</p>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>生活</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker介绍</title>
    <url>/blog/6489f8a9.html</url>
    <content><![CDATA[<blockquote>
<p>相关网址：</p>
<p><a href="https://www.docker.com/">Docker 官网</a></p>
<p><a href="https://docs.docker.com/">Docker 文档地址</a></p>
<p><a href="https://hub.docker.com/">Docker 仓库地址</a></p>
</blockquote>
<h1>一、Docker 是什么</h1>
<p>Docker 就像一个命令不完整的轻量级的虚拟机，它将应用程序的代码、工具库、运行环境封装在一个容器中，我们到时候只需要执行一条命令即可，因此大大减轻了测试和部署的难度。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1656065889066.png" alt=""></p>
<h2 id="1-1-docker-vs-vmware">1.1 Docker VS VMware</h2>
<p>Docker 和 VMware 都是属于虚拟化技术</p>
<ul>
<li>VMware 虚拟的是一台或多台电脑，笨重（占用资源多，冗余步骤多【每次都要开机都要初始化】，启动速度慢）</li>
<li>Docker 虚拟的是镜像，镜像 = 最核心的环境（4m）+ JDK + MySQL + ……，直接运行镜像就可以了，小巧（Docker 容器模拟的并不是一个完整的操作系统，容器运行在操作系统之上，共享系统内核，相互之间使用沙箱机制，不会有任何接口，所以一个容器崩了，其他容器不受影响，当然也可以使用 Nginx 进行跨域关联起来）</li>
</ul>
<h2 id="1-2-镜像是什么">1.2 镜像是什么</h2>
<p>镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。</p>
<p>同时，就像代码可以保存到 GitHub 中开源，镜像也可以提交到 DockerHub 中</p>
<h2 id="1-3-镜像加载原理">1.3 镜像加载原理</h2>
<h3 id="1-3-1-unionfs-联合文件系统">1.3.1 UnionFS（联合文件系统）</h3>
<p>UnionFS（联合文件系统）是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下（unite serveral directories into a single virtual filesystem）。Union 文件系统是 Docker 镜像的基础。镜像可以通过分层来进行继承（不同镜像之间可以使用同一个底层系统，然后节省空间），基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。</p>
<p>特性：以此同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件叠加起来，这样最终的文件系统会包含所有底层的文件和目录。</p>
<h3 id="1-3-2-镜像加载原理">1.3.2 镜像加载原理</h3>
<p>docker 的镜像实际上由一层一层的文件系统组成，这种层级的文件系统 UnionFS。</p>
<h4 id="bootfs-boot-file-system">bootfs（boot file system）</h4>
<p>bootfs 主要包含 BootLoader 和 kernel，BootLoader 主要是引导加载 kernel，Linux 刚启动时会加载 bootfs 文件系统，在 Docker 镜像的最底层是 bootfs。这一层与我们典型的 Linux/Unix 系统是一样的，包含 boot 加载器和内核。当 boot 加载完成之后整个内核就都在内存中了，此时内存的使用权已由 bootfs 转交给内核，此时系统也会卸载 bootfs。</p>
<h4 id="rootfs-root-file-system">rootfs（root file system）</h4>
<p>rootfs 在 bootfs 之上。包含的就是典型 Linux 系统中的 /dev、/proc、/bin、/etc 等标准目录和文件。rootfs 就是各种不同的操作系统发行版，比如 Ubuntu，CentOS 等等。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1656399799960.png" alt=""></p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1649487227223.png" alt=""></p>
<p>例如：对于一个精简的 OS，rootfs 可以很小，只需要包含最基本的命令，工具和程序库就可以了，因为底层直接用 Host 的 kernel，自己只需要提供 rootfs 就可以了。由此可见对不同的 Linux 发行版，bootfs 基本是一致的，rootfs 会有差别，因此不同的发行版可以公用 bootfs。</p>
<h3 id="1-3-3-分层的理解">1.3.3 分层的理解</h3>
<p>在下载镜像的时候可以观察日志输出，可以看到是一层一层的在下载。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1649487257810.png" alt=""></p>
<p>思考：为什么 Docker 镜像要采用这种分层的结构？</p>
<p>最大的好处就是资源共享，比如有多个镜像都从相同的 Base 镜像构建而来，那么宿主机只需在磁盘上保留一份 base 镜像，同时内存中也只需要加载一份 base 镜像，这样就可以为所有的容器服务了，而且镜像的每一层都可以被共享。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看镜像分层</span></span><br><span class="line">[root@localhost ~]# docker image inspect tomcat:8.0</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: &quot;sha256:ef6a7c98d192507d6066dcf24e44bec66d07ec9cf7c55d8d3d1ea0a24660bdef&quot;,</span><br><span class="line">        &quot;RepoTags&quot;: [</span><br><span class="line">            &quot;tomcat:8.0&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;RepoDigests&quot;: [</span><br><span class="line">            &quot;tomcat@sha256:8ecb10948deb32c34aeadf7bf95d12a93fbd3527911fa629c1a3e7823b89ce6f&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;Parent&quot;: &quot;&quot;,</span><br><span class="line">        &quot;Comment&quot;: &quot;&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2018-09-12T20:42:22.931362721Z&quot;,</span><br><span class="line">        &quot;Container&quot;: &quot;537db43b9934d84b08d1226d9e86480c27d0e76eec5dd044cba72a8edc8e193f&quot;,</span><br><span class="line">        &quot;ContainerConfig&quot;: &#123;</span><br><span class="line">            &quot;Hostname&quot;: &quot;537db43b9934&quot;,</span><br><span class="line">            &quot;Domainname&quot;: &quot;&quot;,</span><br><span class="line">            &quot;User&quot;: &quot;&quot;,</span><br><span class="line">            &quot;AttachStdin&quot;: false,</span><br><span class="line">            &quot;AttachStdout&quot;: false,</span><br><span class="line">            &quot;AttachStderr&quot;: false,</span><br><span class="line">            &quot;ExposedPorts&quot;: &#123;</span><br><span class="line">                &quot;8080/tcp&quot;: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;Tty&quot;: false,</span><br><span class="line">            &quot;OpenStdin&quot;: false,</span><br><span class="line">            &quot;StdinOnce&quot;: false,</span><br><span class="line">            &quot;Env&quot;: [</span><br><span class="line">                &quot;PATH=/usr/local/tomcat/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;,</span><br><span class="line">                &quot;LANG=C.UTF-8&quot;,</span><br><span class="line">                &quot;JAVA_HOME=/docker-java-home/jre&quot;,</span><br><span class="line">                &quot;JAVA_VERSION=7u181&quot;,</span><br><span class="line">                &quot;JAVA_DEBIAN_VERSION=7u181-2.6.14-1~deb8u1&quot;,</span><br><span class="line">                &quot;CATALINA_HOME=/usr/local/tomcat&quot;,</span><br><span class="line">                &quot;TOMCAT_NATIVE_LIBDIR=/usr/local/tomcat/native-jni-lib&quot;,</span><br><span class="line">                &quot;LD_LIBRARY_PATH=/usr/local/tomcat/native-jni-lib&quot;,</span><br><span class="line">                &quot;OPENSSL_VERSION=1.1.0f-3+deb9u2&quot;,</span><br><span class="line">                &quot;GPG_KEYS=05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 713DA88BE50911535FE716F5208B0AB1D63011C7 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23&quot;,</span><br><span class="line">                &quot;TOMCAT_MAJOR=8&quot;,</span><br><span class="line">                &quot;TOMCAT_VERSION=8.0.53&quot;,</span><br><span class="line">                &quot;TOMCAT_SHA512=cd8a4e48a629a2f2bb4ce6b101ebcce41da52b506064396ec1b2915c0b0d8d82123091242f2929a649bcd8b65ecf6cd1ab9c7d90ac0e261821097ab6fbe22df9&quot;,</span><br><span class="line">                &quot;TOMCAT_TGZ_URLS=https://www.apache.org/dyn/closer.cgi?action=download&amp;filename=tomcat/tomcat-8/v8.0.53/bin/apache-tomcat-8.0.53.tar.gz \thttps://www-us.apache.org/dist/tomcat/tomcat-8/v8.0.53/bin/apache-tomcat-8.0.53.tar.gz \thttps://www.apache.org/dist/tomcat/tomcat-8/v8.0.53/bin/apache-tomcat-8.0.53.tar.gz \thttps://archive.apache.org/dist/tomcat/tomcat-8/v8.0.53/bin/apache-tomcat-8.0.53.tar.gz&quot;,</span><br><span class="line">                &quot;TOMCAT_ASC_URLS=https://www.apache.org/dyn/closer.cgi?action=download&amp;filename=tomcat/tomcat-8/v8.0.53/bin/apache-tomcat-8.0.53.tar.gz.asc \thttps://www-us.apache.org/dist/tomcat/tomcat-8/v8.0.53/bin/apache-tomcat-8.0.53.tar.gz.asc \thttps://www.apache.org/dist/tomcat/tomcat-8/v8.0.53/bin/apache-tomcat-8.0.53.tar.gz.asc \thttps://archive.apache.org/dist/tomcat/tomcat-8/v8.0.53/bin/apache-tomcat-8.0.53.tar.gz.asc&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Cmd&quot;: [</span><br><span class="line">                &quot;/bin/sh&quot;,</span><br><span class="line">                &quot;-c&quot;,</span><br><span class="line">                &quot;#(nop) &quot;,</span><br><span class="line">                &quot;CMD [\&quot;catalina.sh\&quot; \&quot;run\&quot;]&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;ArgsEscaped&quot;: true,</span><br><span class="line">            &quot;Image&quot;: &quot;sha256:1d3fb924acd246fd2804e5907fd81405abf7cc86072703417daf15bbf551f2e1&quot;,</span><br><span class="line">            &quot;Volumes&quot;: null,</span><br><span class="line">            &quot;WorkingDir&quot;: &quot;/usr/local/tomcat&quot;,</span><br><span class="line">            &quot;Entrypoint&quot;: null,</span><br><span class="line">            &quot;OnBuild&quot;: [],</span><br><span class="line">            &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;DockerVersion&quot;: &quot;17.06.2-ce&quot;,</span><br><span class="line">        &quot;Author&quot;: &quot;&quot;,</span><br><span class="line">        &quot;Config&quot;: &#123;</span><br><span class="line">            &quot;Hostname&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Domainname&quot;: &quot;&quot;,</span><br><span class="line">            &quot;User&quot;: &quot;&quot;,</span><br><span class="line">            &quot;AttachStdin&quot;: false,</span><br><span class="line">            &quot;AttachStdout&quot;: false,</span><br><span class="line">            &quot;AttachStderr&quot;: false,</span><br><span class="line">            &quot;ExposedPorts&quot;: &#123;</span><br><span class="line">                &quot;8080/tcp&quot;: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;Tty&quot;: false,</span><br><span class="line">            &quot;OpenStdin&quot;: false,</span><br><span class="line">            &quot;StdinOnce&quot;: false,</span><br><span class="line">            &quot;Env&quot;: [</span><br><span class="line">                &quot;PATH=/usr/local/tomcat/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;,</span><br><span class="line">                &quot;LANG=C.UTF-8&quot;,</span><br><span class="line">                &quot;JAVA_HOME=/docker-java-home/jre&quot;,</span><br><span class="line">                &quot;JAVA_VERSION=7u181&quot;,</span><br><span class="line">                &quot;JAVA_DEBIAN_VERSION=7u181-2.6.14-1~deb8u1&quot;,</span><br><span class="line">                &quot;CATALINA_HOME=/usr/local/tomcat&quot;,</span><br><span class="line">                &quot;TOMCAT_NATIVE_LIBDIR=/usr/local/tomcat/native-jni-lib&quot;,</span><br><span class="line">                &quot;LD_LIBRARY_PATH=/usr/local/tomcat/native-jni-lib&quot;,</span><br><span class="line">                &quot;OPENSSL_VERSION=1.1.0f-3+deb9u2&quot;,</span><br><span class="line">                &quot;GPG_KEYS=05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 713DA88BE50911535FE716F5208B0AB1D63011C7 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23&quot;,</span><br><span class="line">                &quot;TOMCAT_MAJOR=8&quot;,</span><br><span class="line">                &quot;TOMCAT_VERSION=8.0.53&quot;,</span><br><span class="line">                &quot;TOMCAT_SHA512=cd8a4e48a629a2f2bb4ce6b101ebcce41da52b506064396ec1b2915c0b0d8d82123091242f2929a649bcd8b65ecf6cd1ab9c7d90ac0e261821097ab6fbe22df9&quot;,</span><br><span class="line">                &quot;TOMCAT_TGZ_URLS=https://www.apache.org/dyn/closer.cgi?action=download&amp;filename=tomcat/tomcat-8/v8.0.53/bin/apache-tomcat-8.0.53.tar.gz \thttps://www-us.apache.org/dist/tomcat/tomcat-8/v8.0.53/bin/apache-tomcat-8.0.53.tar.gz \thttps://www.apache.org/dist/tomcat/tomcat-8/v8.0.53/bin/apache-tomcat-8.0.53.tar.gz \thttps://archive.apache.org/dist/tomcat/tomcat-8/v8.0.53/bin/apache-tomcat-8.0.53.tar.gz&quot;,</span><br><span class="line">                &quot;TOMCAT_ASC_URLS=https://www.apache.org/dyn/closer.cgi?action=download&amp;filename=tomcat/tomcat-8/v8.0.53/bin/apache-tomcat-8.0.53.tar.gz.asc \thttps://www-us.apache.org/dist/tomcat/tomcat-8/v8.0.53/bin/apache-tomcat-8.0.53.tar.gz.asc \thttps://www.apache.org/dist/tomcat/tomcat-8/v8.0.53/bin/apache-tomcat-8.0.53.tar.gz.asc \thttps://archive.apache.org/dist/tomcat/tomcat-8/v8.0.53/bin/apache-tomcat-8.0.53.tar.gz.asc&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Cmd&quot;: [</span><br><span class="line">                &quot;catalina.sh&quot;,</span><br><span class="line">                &quot;run&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;ArgsEscaped&quot;: true,</span><br><span class="line">            &quot;Image&quot;: &quot;sha256:1d3fb924acd246fd2804e5907fd81405abf7cc86072703417daf15bbf551f2e1&quot;,</span><br><span class="line">            &quot;Volumes&quot;: null,</span><br><span class="line">            &quot;WorkingDir&quot;: &quot;/usr/local/tomcat&quot;,</span><br><span class="line">            &quot;Entrypoint&quot;: null,</span><br><span class="line">            &quot;OnBuild&quot;: [],</span><br><span class="line">            &quot;Labels&quot;: null</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Architecture&quot;: &quot;amd64&quot;,</span><br><span class="line">        &quot;Os&quot;: &quot;linux&quot;,</span><br><span class="line">        &quot;Size&quot;: 356245923,</span><br><span class="line">        &quot;VirtualSize&quot;: 356245923,</span><br><span class="line">        &quot;GraphDriver&quot;: &#123;</span><br><span class="line">            &quot;Data&quot;: &#123;</span><br><span class="line">                &quot;LowerDir&quot;: &quot;/var/lib/docker/overlay2/5467095563d0eeb7800cbe149e38b134094b17d8aa7747a3489b3f4cceed84a8/diff:/var/lib/docker/overlay2/89de18b5ee2a1908787b40e6ad5bd86e42d33296f78800cc54db2884d5c58dd9/diff:/var/lib/docker/overlay2/cbb8e55d674460e4665642025d769aea683b17791cf63befd079ff2330b9970a/diff:/var/lib/docker/overlay2/953860e1c90c9c24927507effc2fdf1ba27d26c218e9739bca296e5104793f62/diff:/var/lib/docker/overlay2/8ddf5a9115e182e660f055eb223454d4159bf54b53258ba9d37fd3bb4369e21e/diff:/var/lib/docker/overlay2/4837f5a37d13a562d57675ee0d9c9fa1ef8edaa93b7b4a28cfce280fedcc3785/diff:/var/lib/docker/overlay2/297ed5eb5bca37cbf115cadd1c301c53b982ed69b79ddfbdbf0c54fa79fd1fcf/diff:/var/lib/docker/overlay2/b57865f8cfdecde7d7db93fe4eca53c71843206bf3299452096051233a515ac8/diff:/var/lib/docker/overlay2/0c28360e0ccb7f91776c5cc66f56b092f27618eda1f42549aac9f831ce73e3f8/diff:/var/lib/docker/overlay2/d159fa1ad10d5869ceaea96ba9b743d9ecd989431e9d9934edace1932f14826e/diff&quot;,</span><br><span class="line">                &quot;MergedDir&quot;: &quot;/var/lib/docker/overlay2/0576b5f7dd7201c4de9acdf0e52f895efe3b19c33cd4284823a009a22d9fbd86/merged&quot;,</span><br><span class="line">                &quot;UpperDir&quot;: &quot;/var/lib/docker/overlay2/0576b5f7dd7201c4de9acdf0e52f895efe3b19c33cd4284823a009a22d9fbd86/diff&quot;,</span><br><span class="line">                &quot;WorkDir&quot;: &quot;/var/lib/docker/overlay2/0576b5f7dd7201c4de9acdf0e52f895efe3b19c33cd4284823a009a22d9fbd86/work&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;Name&quot;: &quot;overlay2&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;RootFS&quot;: &#123;</span><br><span class="line">            &quot;Type&quot;: &quot;layers&quot;,</span><br><span class="line">            &quot;Layers&quot;: [</span><br><span class="line">                &quot;sha256:8c466bf4ca6ffdda8b7717b1cd6fe31109529ee64e626a003a224fb8bd2bc469&quot;,</span><br><span class="line">                &quot;sha256:daf45b2cad9af3ea091d4376d34fb597a9a67874d48fe5a485e1305df10b3157&quot;,</span><br><span class="line">                &quot;sha256:c596d5191368693d366c9b47cc20007efcedd0873691c8895d3684162d469447&quot;,</span><br><span class="line">                &quot;sha256:425325c72d902feb9c15b3c9204fc7c24435dfaea2e750db3acda5a11c569049&quot;,</span><br><span class="line">                &quot;sha256:fc6174f0df4a7466f749d9ae334872f38336bb761962ba15657b771116cb8546&quot;,</span><br><span class="line">                &quot;sha256:39a6e47c4ae6efdd2a0834d81c1bd2860a16cbe5c3c1de28934ee26721bd98c4&quot;,</span><br><span class="line">                &quot;sha256:81242e1e644e4d52602431e4c847f4e1ec599761f2ca082cfdf3c38508ddd9d4&quot;,</span><br><span class="line">                &quot;sha256:9f052711b40a241eec2783c062a743ad4f7870681024b375714cd277db497ec2&quot;,</span><br><span class="line">                &quot;sha256:f26731984f9bb4dc5f286008361729b717d51c2d60989c5e1b2d07d713d9de1f&quot;,</span><br><span class="line">                &quot;sha256:583dc95d65c92bd5b5fdb57c640f391435078ff6da2cc9653a7d32457d3cd8b7&quot;,</span><br><span class="line">                &quot;sha256:d0f3f4011f287adc910aada9e2fee49c67de366654ea7c02b47d36f9736442fc&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Metadata&quot;: &#123;</span><br><span class="line">            &quot;LastTagTime&quot;: &quot;0001-01-01T00:00:00Z&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h1>二、Docker 能做什么</h1>
<h2 id="2-1-多环境的部署切换">2.1 多环境的部署切换</h2>
<p>利用 Docker 能够原封不动地将【开发环境】中的一整套东西（JAR 包 + Jdk、Redis集群、MySQL集群、Hadoop 等）迁移到【测试环境】或【生产环境】中，再配合一定的自动化流程即可实现自动发布。</p>
<h1>三、Docker 资源汇总</h1>
<h2 id="docker-官方英文资源">Docker 官方英文资源</h2>
<ul>
<li><a href="http://www.docker.com">Docker 官网</a></li>
<li><a href="https://docs.docker.com/windows/">Docker windows 入门</a></li>
<li><a href="https://docs.docker.com/linux/">Docker Linux 入门</a></li>
<li><a href="https://docs.docker.com/mac/">Docker mac 入门</a></li>
<li><a href="https://docs.docker.com/engine/userguide/">Docker 用户指引</a></li>
<li><a href="http://blog.docker.com/">Docker 官方博客</a></li>
<li><a href="https://hub.docker.com/">Docker Hub</a></li>
<li><a href="https://www.docker.com/open-source">Docker 开源</a></li>
</ul>
<h2 id="docker-中文资源">Docker 中文资源</h2>
<ul>
<li><a href="http://www.docker.org.cn">Docker 中文网站</a></li>
<li><a href="http://www.docker.org.cn/book/install.html">Docker 安装手册</a></li>
<li><a href="https://blog.csphere.cn/archives/22">一小时 Docker 教程</a></li>
<li><a href="http://dockerpool.com/static/books/docker_practice/index.html">Docker 从入门到实践</a></li>
<li><a href="http://www.widuu.com/chinese_docker/index.html">Docker 中文指南</a></li>
</ul>
<h2 id="其他资源">其他资源</h2>
<ul>
<li><a href="http://www.jb51.net/list/list_256_1.htm">http://www.jb51.net/list/list_256_1.htm</a></li>
<li><a href="https://github.com/docker/docker">https://github.com/docker/docker</a></li>
<li><a href="https://wiki.openstack.org/wiki/Docker">https://wiki.openstack.org/wiki/Docker</a></li>
<li><a href="https://wiki.archlinux.org/index.php/Docker">https://wiki.archlinux.org/index.php/Docker</a></li>
</ul>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装与配置_Linux</title>
    <url>/blog/edc3fdf.html</url>
    <content><![CDATA[<blockquote>
<p><a href="https://docs.docker.com/">官方在线文档</a></p>
</blockquote>
<h1>一、Docker 安装</h1>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、查看</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、卸载旧版本</span></span><br><span class="line">[root@localhost ~]# yum remove docker</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">No Match for argument: docker</span><br><span class="line">No Packages marked for removal</span><br><span class="line"></span><br><span class="line">yum remove docker \</span><br><span class="line">docker-client \</span><br><span class="line">docker-client-latest \</span><br><span class="line">docker-common \</span><br><span class="line">docker-latest \</span><br><span class="line">docker-latest-logrotate \</span><br><span class="line">docker-logrotate \</span><br><span class="line">docker-engine</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、下载安装包</span></span><br><span class="line">yum install -y yum-utils</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3、设置镜像仓库</span></span><br><span class="line">yum-config-manager \</span><br><span class="line">--add-repo \</span><br><span class="line">https://download.docker.com/linux/centos/docker-ce.repo # 官网默认使用国外地址，慢</span><br><span class="line">yum-config-manager \</span><br><span class="line">--add-repo \</span><br><span class="line">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo # 国内阿里云镜像加速地址，快</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新yum软件包索引</span></span><br><span class="line">yum makecache fast</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4、安装Docker</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker-ce：ce表示社区版；ee表示企业版</span></span><br><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">5、启动Docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">6、判断Docker是否安装及启动成功</span></span><br><span class="line">docker version</span><br></pre></td></tr></table></figure>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1649487811778.png" alt=""></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">9、查看下载的镜像</span></span><br><span class="line">[root@localhost ~]# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID   CREATED   SIZE</span><br></pre></td></tr></table></figure>
<h1>二、Docker 卸载</h1>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载docker依赖</span></span><br><span class="line">[root@localhost ~]# yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除docker环境（这里是docker的默认工作路径）</span></span><br><span class="line">[root@localhost ~]# rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch</title>
    <url>/blog/d32d37e5.html</url>
    <content><![CDATA[<blockquote>
<p>参考网站：</p>
<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.5/index.html">Elasticsearch Guide [6.5] | Elastic</a></p>
<p><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html">Elasticsearch: 权威指南 | Elastic</a></p>
<p><a href="https://blog.csdn.net/wang7075202/article/details/111308905">es 中的 segment、translog、refresh、flush、fsync、commit poit 等概念介绍_es commit point_王大丫丫的博客-CSDN博客</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/205211099">【Elasticsearch 技术分享】—— 十张图看懂ES原理 ！明白为什么说：ES 是准实时的！ - 知乎 (zhihu.com)</a></p>
</blockquote>
<h1>一、Elasticsearch 概念介绍</h1>
<h2 id="1-1-索引-index">1.1 索引（Index）</h2>
<p>索引是相似结构的文档的集合，索引中的数据分散在分片上，类似于关系型数据库中的表（Table）。</p>
<h2 id="1-2-类型-type">1.2 类型（Type）</h2>
<p>在 ES6.0 版本中已经废除</p>
<h2 id="1-3-文档-document">1.3 文档（Document）</h2>
<p>文档是所有可搜索数据的最小单位，类似于关系型数据库中的记录（Row）</p>
<h2 id="1-4-集群-cluster">1.4 集群（Cluster）</h2>
<p>一个集群可以有一个或多个节点</p>
<h3 id="集群的状态">集群的状态</h3>
<ul>
<li>Green：主分片与副本都正常分配</li>
<li>Yellow：主分片全部正常分配，有副本分配未能正常分配</li>
<li>Red：有主分片未能分配</li>
</ul>
<h2 id="1-5-节点-node">1.5 节点（Node）</h2>
<p>节点其实就是一个 ES 实例，本质上是一个 Java 进程</p>
<h3 id="节点类型">节点类型</h3>
<ul>
<li>主节点（Master Node）</li>
<li>候选主节点（Master-eligible Node）</li>
<li>数据节点（Data Node）</li>
<li>协调节点（Coordinating Node）</li>
<li>冷热节点（Hot &amp; Warm Node）</li>
<li>机器学习节点（Machine Learning Node）</li>
<li>部落节点（Tribe Node）</li>
<li>预处理节点（Ingest Node）</li>
</ul>
<h2 id="1-6-映射-mapping">1.6 映射（Mapping）</h2>
<p>类似于关系型数据库中的表定义（Schema）</p>
<h2 id="1-7-字段-field">1.7 字段（Field）</h2>
<p>类似于关系型数据库中的字段（Column）</p>
<h2 id="1-8-分片-shard">1.8 分片（Shard）</h2>
<p>ES 将一个索引中的数据切分为多个分片，分片（Shard）是 Elasticsearch 的基本存储单元。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/ES%E5%88%86%E7%89%87.png" alt=""></p>
<ul>
<li>Elasticsearch 索引（Elasticsearch Index）由 n 个分片（Shard）组成</li>
<li>一个分片（Shard）其实就是一个 Lucene 索引（Lucene Index）</li>
<li>一个 Lucene 索引（Lucene Index）由 n 个段（Segment）组成</li>
</ul>
<p>所以当我们查询一个 Elasticsearch 索引时，查询会在所有分片上执行，继而到段，最后合并所有查询结果返回。</p>
<h3 id="分片类型">分片类型</h3>
<ul>
<li>主分片（Primary Shard）</li>
<li>副本分配（Replica Shard）</li>
</ul>
<h2 id="1-9-分段-segment">1.9 分段（Segment）</h2>
<p>Elasticsearch 可以对全文进行检索主要归功于【倒排索引（Inverted Index）】。倒排索引可以由关键词直接定位到对应的文档，其被写入磁盘后是不可改变的。倒排索引的不变性有几个好处：</p>
<ul>
<li>索引不能更新，所以不需要锁</li>
<li>由于索引不变，只要系统内存足够大，大部分读请求可以直接命中内存而不用请求磁盘，极大提高性能</li>
<li>如果使用了其他缓存工具，在缓存的有效周期内，索引始终有效</li>
<li>写入单个大的倒排索引允许数据被压缩，以减少磁盘 I/O 和需要被缓存到内存的索引的使用量</li>
</ul>
<p>同时由于倒排索引的不可变性，这意味着当需要新增文档的时候，需要对整个索引进行重建。而当数据更新频繁的时候，这问题更是会变成灾难。因此 Elasticsearc 使用了一种【近实时搜索（Real-time Search）】的策略，来处理这个问题。</p>
<p>而在 Lucene 中，单个倒排索引文件被称为 Segment，多个 Segment 汇总在一起称为 Lucene 的 Index，对应的就是 ES 的 Shard：</p>
<p><strong>1 × Shard = 1 × Lucene Index = n × Segment = n × n × Document</strong></p>
<h3 id="分段合并-segment-merge">分段合并（Segment Merge）</h3>
<p>由于自动刷新流程（refresh）每秒会创建一个新的 Segment，这样会导致短时间内的段数量暴增。而 Segment 数目太多会带来较大的麻烦。 每一个 Segment 都会消耗文件句柄、内存和 CPU 运行周期。更重要的是，每个搜索请求都必须轮流检查每个 Segment；所以 Segment 越多，搜索也就越慢。</p>
<p>在 ES 的后台运行一个任务，来检测当前磁盘中的 Segment ，对符合条件的 Segment 进行合并操作。小的段被合并到大的段，然后这些大的段再被合并到更大的段。段合并的时候会将那些旧的已删除文档从文件系统中清除。被删除的文档（或被更新文档的旧版本）不会被拷贝到新的大段中。</p>
<p>ES Merge 操作的对象，是位于 FileSystem Cache 尚未 flush 到磁盘的新段和已经 flush 到磁盘中的老段。</p>
<ol>
<li>每秒的刷新（refresh）操作会创建新的段并将段打开以供搜索使用</li>
<li>合并进程选择一小部分大小相似的段，并且在后台将它们合并到更大的段中（这并不会中断索引和搜索）</li>
</ol>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/elas_1110.png" alt="Two commited segments and one uncommited segment in the process of being merged into a bigger segment"></p>
<ol start="3">
<li>新段被 flush 到磁盘，<strong>写入一个包含新段且排除了旧的和较小的段的新的提交点（commit point）</strong></li>
<li>新段被打开搜索，老段删除（物理删除），合并结束</li>
</ol>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/elas_1111.png" alt="一旦合并结束，老的段被删除"></p>
<p>要注意的是，一个大的 Segment 的 Merge 操作是很消耗 CPU、IO 资源的，如果使用不当会影响到本身的 search 查询性能。ES 默认会控制 Merge 进程的资源占用以保证 Merge 期间 search 具有足够资源。</p>
<h3 id="分段合并默认策略">分段合并默认策略</h3>
<ul>
<li>index.merge.policy.floor_segment：默认 2MB，小于这个大小的 segment，优先被归并；</li>
<li>index.merge.policy.max_merge_at_once：默认一次最多归并 10 个 segment；</li>
<li>index.merge.policy.max_merge_at_once_explicit：默认 forcemerge 时一次最多归并 30 个 segment；</li>
<li>index.merge.policy.max_merged_segment：默认 5GB，大于这个大小的 segment，不用参与归并。force merge 除外</li>
</ul>
<h3 id="分段合并策略优化">分段合并策略优化</h3>
<ol>
<li>对于非实时业务可以加大 refresh 的时间间隔，减少 segment 的生成数量；</li>
<li>加大 flush 间隔，尽量让每次新生成的 segment 本身大小就比较大；</li>
<li>提前做好 force merge 减少业务高峰期的 merge 的操作</li>
</ol>
<blockquote>
<p><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/indexing-performance.html#segments-and-merging">索引优化技巧</a></p>
</blockquote>
<h2 id="1-10-刷盘-commit">1.10 刷盘（commit）</h2>
<h3 id="commit-vs-flush">commit VS flush</h3>
<p>在 Elasticsearch 中，flush 和 commit 是两个不同的操作。</p>
<ul>
<li>flush 操作是将内存中的数据刷新到磁盘上的过程。它确保了在节点崩溃或关闭时，数据不会丢失。flush 操作是一个轻量级的操作，它将内存中的数据写入磁盘，但不会等待数据被持久化到磁盘上。</li>
<li>commit 操作是将刷新的数据持久化到磁盘上的过程。它确保了数据在节点崩溃或关闭时的持久性。commit 操作是一个相对较重的操作，它会等待数据被完全持久化到磁盘上。</li>
</ul>
<p>简而言之，flush 操作是将内存中的数据<strong>写入磁盘</strong>，这个过程是可以异步的，即数据写入磁盘后不需要等待确认。而 commit 操作是将数据<strong>持久化到磁盘</strong>上，这个过程是同步的，需要等待数据被完全写入磁盘并确认后才返回。</p>
<h1>二、Elasticsearch Json 结构示例</h1>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;KJTnBYkB5GK1mQJI5u1p&quot;</span><span class="punctuation">,</span>            <span class="comment">// 文档唯一ID</span></span><br><span class="line">    <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;properties_camera_gn_2023_06&quot;</span><span class="punctuation">,</span> <span class="comment">// 文档所属索引名</span></span><br><span class="line">    <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span>                          <span class="comment">// 文档所属类型名</span></span><br><span class="line">    <span class="attr">&quot;_version&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span>                            <span class="comment">// 文档的版本信息</span></span><br><span class="line">    <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span>                              <span class="comment">// 评分，为相关打分，是这个文档在这次查询中的算分（暂时理解为与查询条件的相关性）</span></span><br><span class="line">    <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>                              <span class="comment">// 文档元素json数据，当搜索文档的时候，默认返回的就是_source这个字段</span></span><br><span class="line">        <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="number">1688021231207</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;deviceId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7a367c995e8044f8bd4fe3a042be789c&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;intValue&quot;</span><span class="punctuation">:</span> <span class="number">333</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;messageId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;871806074498596864&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;messageType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;system&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;property&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fdsa&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;propertyType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;int&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;timestamp&quot;</span><span class="punctuation">:</span> <span class="number">1688021231161</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;built-in&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;2023-06-29T06:47:11.207Z&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;deviceId&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;7a367c995e8044f8bd4fe3a042be789c&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;intValue&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">333</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;messageId&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;871806074498596864&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;messageType&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;system&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;property&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;fdsa&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;property.keyword&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;fdsa&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;propertyType&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;int&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;propertyType.keyword&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;int&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;timestamp&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;2023-06-29T06:47:11.161Z&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;built-in&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h1>三、Elasticsearch CRUD</h1>
<h2 id="3-1-增">3.1 增</h2>
<h3 id="index">Index</h3>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT my_index/_doc/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;user&quot;</span><span class="punctuation">:</span><span class="string">&quot;mike&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;comment&quot;</span><span class="punctuation">:</span><span class="string">&quot;You know, for search&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="create">Create</h3>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT my_index/_create/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;user&quot;</span><span class="punctuation">:</span><span class="string">&quot;mike&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;comment&quot;</span><span class="punctuation">:</span><span class="string">&quot;You know, for search&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">POST my_index/_doc（不指定 ID，则会自动生成）</span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;user&quot;</span><span class="punctuation">:</span><span class="string">&quot;mike&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;comment&quot;</span><span class="punctuation">:</span><span class="string">&quot;You know, for search&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="index-vs-create">Index VS Create</h3>
<p>Index 和 Create 插入时都会检测 _version，即通过 id 得出文档的版本号（只获取版本而不是 doc 的全部内容，能够从一定程度上减少系统的开销）。如果没有指定文档 id 直接 add 固然最好，但如果指定了文档 id，那么就要进行更耗时的 update 操作，不同的是：</p>
<ul>
<li>Index 如果没有指定 version，那对于已有的 doc，_version 会递增，并对文档进行覆盖。如果指定了 _version，但与已有文档的 _version 对不上，则插入失败；如果对得上，则覆盖，_version 递增。</li>
<li>Create 通过 version，判断出文档已存在，则直接插入失败，抛出一个已经存在的异常。</li>
</ul>
<h3 id="用途">用途</h3>
<p>在批量请求的时候最好使用 create 方式进行导入。</p>
<p>假如你批量导入一个大小为 500MB 的文件，中途突然网络中断，可能其中有 5 万条数据已经导入，那么第二次尝试导入的时候，如果选用 index 方式，那么前 5 万条数据又会重复导入，增加了很多额外的开销，如果是 create 的话，ES 针对 bulk 操作机制是忽略已经存在的（当然在 bulk 完成后会返回哪些数据是重复的），这样就不会重复被导入了。</p>
<h2 id="3-2-删-delete">3.2 删（Delete）</h2>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">DELETE my_index/_doc/<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>由于倒排索引（Inverted Index）的不可变性，即其分段（Segment）是不可变的，所以在进行删除操作的时候，文档 Document 并不会从 Segment 中移除。而是在每次 commit 或者 flush 的时候，在 .del 文件中列出被删除的 Document，然后在查询的时候，在查询结果返回之前会过滤掉这些被删除的 Document。（逻辑删除）</p>
<h2 id="3-3-改-update">3.3 改（Update）</h2>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST my_index/_update/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;user&quot;</span><span class="punctuation">:</span><span class="string">&quot;mike&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;comment&quot;</span><span class="punctuation">:</span><span class="string">&quot;You know, Elesticsearch&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>由于 Lucene 中的 update 其实就是覆盖替换，并不支持针对特定 Field 进行修改，因此 ES 中的 update 为了实现针对特定字段修改，在 Lucene 的基础上做了一些改动：</p>
<ol>
<li>
<p>每次 update 都会调用 InternalEngine 中的 get 方法，来获取整个文档信息；</p>
</li>
<li>
<p>对旧的 Document 标记被删除，写入到 .del 文件中（逻辑标记、逻辑删除）；</p>
</li>
<li>
<p>把带有新 Document 的 Segment 写入（增量保存）</p>
</li>
</ol>
<p>从而实现针对特定字段进行修改。但这也就导致了每次更新要获取一遍原始文档，性能上会有很大影响。</p>
<p>所以根据使用场景，有时候使用 index 会比 update 好很多。</p>
<h2 id="3-4-查-read">3.4 查（Read）</h2>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET my_index/_doc/<span class="number">1</span></span><br></pre></td></tr></table></figure>
<h1>四、Elasticsearch API</h1>
<h2 id="elasticsearch-bulk-api">Elasticsearch Bulk API</h2>
<p>在一个 REST 请求中，重新建立网络开销十分损耗性能，因此 ES 提供 Bulk API，支持在一次 API 调用中，对不同的索引进行操作，从而减少网络传输开销，提升写入速率。</p>
<p>它支持 Index、Create、Update、Delete 四种类型操作，可以在 URI 中指定索引，也可以在请求的方法体中进行。</p>
<p>同时多条操作中如果其中有一条失败，也不会影响其他的操作，并且返回的结果包括每一条操作执行的结果。</p>
<p>示例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST _bulk</span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span><span class="string">&quot;users&quot;</span><span class="punctuation">,</span><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span><span class="string">&quot;3&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;username&quot;</span><span class="punctuation">:</span><span class="string">&quot;wumx&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;delete&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span><span class="string">&quot;users&quot;</span><span class="punctuation">,</span><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span><span class="string">&quot;1&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;update&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span><span class="string">&quot;users&quot;</span><span class="punctuation">,</span><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span><span class="string">&quot;2&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="string">&quot;12&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;took&quot;</span><span class="punctuation">:</span> <span class="number">126</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;errors&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;items&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;users&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;_version&quot;</span><span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;result&quot;</span><span class="punctuation">:</span> <span class="string">&quot;updated&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;_shards&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">				<span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;successful&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;failed&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">			<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;_seq_no&quot;</span><span class="punctuation">:</span> <span class="number">28</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;_primary_term&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">200</span></span><br><span class="line">		<span class="punctuation">&#125;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;delete&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;users&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;_version&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;result&quot;</span><span class="punctuation">:</span> <span class="string">&quot;deleted&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;_shards&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">				<span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;successful&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;failed&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">			<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;_seq_no&quot;</span><span class="punctuation">:</span> <span class="number">29</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;_primary_term&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">200</span></span><br><span class="line">		<span class="punctuation">&#125;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;update&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;users&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">404</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;error&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">				<span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;document_missing_exception&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;reason&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[_doc][2]: document missing&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;index_uuid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;r6N_mV8VRwmxfc4TyoKIqA&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;shard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;users&quot;</span></span><br><span class="line">			<span class="punctuation">&#125;</span></span><br><span class="line">		<span class="punctuation">&#125;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>took 表示消耗了 93 毫秒，errors 为 true 表示在这些操作中错误发生，发现是 update 操作发生了错误，id 为 2 的文档不存在，所以报错了。</p>
<p>在使用 Bulk API 的时候，当 errors 为 true 时，需要把错误的操作修改掉，防止存到 ES 的数据有缺失。</p>
<h2 id="elasticsearch-mget-api">Elasticsearch _mget API</h2>
<p>批量查询需要指明要查询文档的 id，可以在一个 _mget 操作里查询不同索引的数据，可以减少网络连接所产生的开销，提高性能。</p>
<p>下面我们来实际操作下，输入以下代码执行，就可以得到文档 id 为 1,3 的数据。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /_mget</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;docs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;users&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;users&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;docs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;users:&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;_version&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;_seq_no&quot;</span><span class="punctuation">:</span> <span class="number">27</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;_primary_term&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;found&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;wupx&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="string">&quot;18&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;job&quot;</span><span class="punctuation">:</span> <span class="string">&quot;coder&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hello world&quot;</span></span><br><span class="line">		<span class="punctuation">&#125;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;users&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;_version&quot;</span><span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;_seq_no&quot;</span><span class="punctuation">:</span> <span class="number">24</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;_primary_term&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;found&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;wumx&quot;</span></span><br><span class="line">		<span class="punctuation">&#125;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="elasticsearch-fresh-api">Elasticsearch fresh API</h2>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 刷新所有索引</span></span><br><span class="line">POST /_refresh</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定刷新索引</span></span><br><span class="line">POST /index_name/_refresh</span><br></pre></td></tr></table></figure>
<h2 id="elasticsearch-flush-api">Elasticsearch flush API</h2>
<h1>五、总结与分析</h1>
<ol>
<li>ES 建立在高性能的 Lucene 基础之上，依据 Inverted Index 作为核心数据结构，实现了<strong>对海量数据的高效查询</strong>；</li>
<li>ES 通过引入分片概念，成功地将 Lucene 部署到分布式系统中，实现了<strong>分布式环境下的高可用</strong>；</li>
<li>ES 通过定时 refresh lucene in-momory-buffer 中的数据，实现了**【近实时】的写入和查询能力**；</li>
<li>ES 通过引入 translog，多副本机制（即：一个分片的主副分片不能分片在同一个节点上），以及定期执行 flush、Segment Merge 等操作，进一步保证了数据可靠性和较高的存储性能。</li>
</ol>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>中间件</tag>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch更新后延迟问题处理</title>
    <url>/blog/6d94e144.html</url>
    <content><![CDATA[<blockquote>
<p>参考网站：</p>
<p>[<a href="https://www.cnblogs.com/bigdata1024/p/15254164.html">Elasticsearch] ES更新问题踩坑记录 - chaplinthink - 博客园 (cnblogs.com)</a></p>
<p><a href="https://blog.csdn.net/qq_42764468/article/details/121252151">解决elasticsearch更新数据后不能立即刷新的问题_es更新后立马刷新_我一直在流浪的博客-CSDN博客</a></p>
</blockquote>
<h1>问题</h1>
<p>前端请求，对 ES 中的数据进行 update。然后进行查询刚刚操作完毕的数据，或者数据列表。</p>
<p>不过查询到的却是 update 前的数据。</p>
<h1>原因分析</h1>
<p>Elesticsearch 更新数据后会有延迟。</p>
<p>ES 实现的是一种【近实时搜索（Real-time Search）】的策略：</p>
<ol>
<li>ES 产生<strong>一个</strong>新分段（Segment），把数据缓存到 Index Buffer；</li>
<li>refresh：1s 后（默认配置），ES 清空写缓存，新段 write 到文件系统缓存（FileSystem Cache）；</li>
<li>flush：通过手工调用 flush 接口（POST /my-index-000001/_flush），或者操作系统通过一定策略（默认每隔 30 分钟或者 translog 达到一定大小的时候：由 index.translog.flush_threshold_size 控制，默认 512MB），将 Index Buffer 中的数据全部刷新到磁盘里的一个新的 Segment 中，清空 Index Buffer。然后调用 Lucene 的 commit 方法将所有内存中的 Segment 持久化（fsync）到磁盘，一个 commit point 写入磁盘中，同时清空 translog 日志文件。</li>
</ol>
<p><em>提交点（commit point）：记录当前所有可用的 Segment ，一个索引一般只有一个 commit point，而每个 commit point 都会维护一个 .del 文件（ ES 删除数据本质是不属于物理删除），当 ES 做删改操作时首先会在 .del 文件中声明某个 Document 已经被删除，文件内记录了在某个 Segment 内某个 Document 已经被删除，当查询请求过来时在 Segment 中被删除的文件是能够查出来的，但是当返回结果时会根据 commit point 维护的那个 .del 文件把已经删除的文档过滤掉。</em></p>
<p>这种策略可以大幅提升写入的效率。因为从 write 接口返回 success 开始，无论数据有没有被刷到磁盘，该数据已经对读取可见。</p>
<h1>处理方案</h1>
<p>方案一：修改 ES refresh 的间隔时间</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -XPUT  http://ip:9200/meta_es_data/_settings?pretty -d <span class="string">&#x27;&#123;&quot;refresh_interval&quot; : &quot;500ms&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>方案二：在每次更新操作后，休眠 1s</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">baseSearchService.update(docBean);</span><br><span class="line"> </span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
<p>方案三：在 ES 请求接口有请求后强制 refresh（当写测试的时候， 手动刷新很有用，但是不要在生产环境下每次索引一个文档都去手动刷新。 “相反，你的应用需要意识到 Elasticsearch 的近实时的性质，并接受它的不足” ~~~）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">request.setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE);</span><br></pre></td></tr></table></figure>
<h1>拓展</h1>
<h2 id="拓展一">拓展一</h2>
<p>ES 的 refresh 虽然可以配置刷新的时间，但是没必要，频繁的刷新会造成压力过大。</p>
<p>因为 ES 每次 refresh 都产生一个新段（Segment），频繁的 refresh 会导致段数量的暴增。段数量过多会导致过多的消耗文件句柄、内存和 CPU 时间；而且段的数量越多，查询的速度也会越慢。</p>
<p>虽然 ES 可以进行【段合并】，但是段的合并会消耗掉大量系统资源，尤其是磁盘 I/O。</p>
<h2 id="拓展二">拓展二</h2>
<p>ES 数据在更新的时候并不是在原来的数据上做修改的，而是找到该数据的索引 ID，把原来的数据删掉，再重新插入一条，但索引 ID 是相同的。</p>
<h2 id="拓展三">拓展三</h2>
<p>当删除、更新两个操作间隔很短时间执行，上一个数据还没有 refresh 到 FileSystem Cache 区域，就无法查询。</p>
<p><code>final TableDocBean docBean = baseSearchService.getById(id);</code>（获取不到数据，会导致数据更新失败）</p>
<h2 id="拓展四">拓展四</h2>
<p>由于系统是先缓存了一段数据才写，且新段不会立即刷入磁盘中，这两个过程如果出现某些意外情况（例如主机断电等），则会存在丢失数据的风险。通用的处理方法是【记录事务日志】，每次对 ES 进行操作时均记录事务日志，当 ES 启动的时候，重放 translog 中所有在最后一次提交后发生的变更操作。比如 HBase 等都有自己的事务日志。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/682547-20210911111058551-693695339.png" alt=""></p>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>中间件</tag>
        <tag>Elasticsearch</tag>
        <tag>工作记录</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo建站笔记</title>
    <url>/blog/61245e5.html</url>
    <content><![CDATA[<h1>环境准备</h1>
<blockquote>
<p><a href="https://hexo.io/zh-cn/docs/">文档 | Hexo</a></p>
</blockquote>
<ul>
<li><a href="http://nodejs.org/">Node.js</a> (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li>
<li><a href="http://git-scm.com/">Git</a></li>
<li><a href="https://www.aliyun.com/">阿里云OSS</a>【<a href="https://help.aliyun.com/document_detail/173535.htm?spm=a2c4g.450471.0.0.5f3331c9a6KFCy#concept-2558367">流量费用 (aliyun.com)</a>】</li>
</ul>
<h1>建站指令</h1>
<blockquote>
<p><a href="https://hexo.io/zh-cn/docs/commands">指令 | Hexo</a></p>
</blockquote>
<h1>使用主题</h1>
<p>在 Hexo 官网的主题页面选择自己想要的主题：<a href="https://hexo.io/themes/">Themes | Hexo</a></p>
<p>对应的主题内会有使用步骤说明</p>
<h1>使用插件</h1>
<h2 id="文章搜索插件">文章搜索插件</h2>
<p>安装 npm 包：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<p>然后将以下配置复制到博客根目录下的 <code>_config.yml</code> 里（注意不是 ayer 目录下的）：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br></pre></td></tr></table></figure>
<h2 id="rss-订阅插件">RSS 订阅插件</h2>
<p>安装 npm 包：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>
<p>然后将以下配置复制到你博客根目录下的 <code>_config.yml</code> 里（注意不是 ayer 目录下的）:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">hub:</span></span><br><span class="line">  <span class="attr">content:</span></span><br><span class="line">  <span class="attr">content_limit:</span> <span class="number">140</span></span><br><span class="line">  <span class="attr">content_limit_delim:</span> <span class="string">&quot; &quot;</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br></pre></td></tr></table></figure>
<h2 id="文章永久链接插件">文章永久链接插件</h2>
<p>Hexo 默认的静态 URL 格式是 <code>:year/:month/:day/:title</code>，也就是按照年、月、日、标题来生成固定链接的。如：<code>http://xxx.yy.com/2020/07/06/hello-world</code></p>
<p>这种默认配置的缺点就是一般文件名是中文，导致 url 链接里有中文出现，这会造成很多问题（例如 md 文件名改变后，访问链接也会跟着变），也不利于 seo，另外就是年月日都会有分隔符。</p>
<p>安装 npm 包：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install hexo-abbrlink --save</span></span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@2.3.2 (node_modules\fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)</span><br><span class="line"></span><br><span class="line">+ hexo-abbrlink@2.2.1</span><br><span class="line">added 5 packages from 9 contributors and audited 248 packages in 5.109s</span><br><span class="line"></span><br><span class="line">22 packages are looking for funding</span><br><span class="line">  run `npm fund` for details</span><br><span class="line"></span><br><span class="line">found 0 vulnerabilities</span><br></pre></td></tr></table></figure>
<p>修改 <code>_config.yml </code>文件中的配置项（记得把原来的 <code>permalink:</code> 删除掉）：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span></span><br><span class="line"><span class="comment"># url: http://example.com</span></span><br><span class="line"><span class="comment"># permalink: :year/:month/:day/:title/</span></span><br><span class="line"><span class="comment"># permalink_defaults:</span></span><br><span class="line"><span class="comment"># pretty_urls:</span></span><br><span class="line"><span class="comment">#   trailing_index: true # Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span></span><br><span class="line"><span class="comment">#   trailing_html: true # Set to false to remove trailing &#x27;.html&#x27; from permalinks</span></span><br><span class="line"><span class="comment"># hexo-abbrlink</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">blog/:abbrlink.html</span> <span class="comment"># 也可以直接写 :abbrlink/</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span> <span class="comment"># 算法： crc16(default) and crc32</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">hex</span> <span class="comment"># 进制： dec(default) and hex</span></span><br></pre></td></tr></table></figure>
<p>配置修改完后，需要清除掉之前已生成的网页，然后重新生成</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo clean</span></span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Deleted database.</span><br><span class="line">INFO  Deleted public folder.</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo g</span></span><br></pre></td></tr></table></figure>
<p>插件说明：</p>
<ul>
<li><code>alg</code>：算法（目前支持 <code>crc16</code> 和 <code>crc32</code> 算法，默认值是 <code>crc16</code>）</li>
<li><code>rep</code>：形式（生成的链接可以是十六进制格式也可以是十进制格式，默认值是十进制格式）</li>
</ul>
<p>生成链接样式：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># crc16 &amp; hex</span></span><br><span class="line"><span class="string">https://post.zz173.com/posts/66c8.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># crc16 &amp; dec</span></span><br><span class="line"><span class="string">https://post.zz173.com/posts/65535.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># crc32 &amp; hex</span></span><br><span class="line"><span class="string">https://post.zz173.com/posts/8ddf18fb.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># crc32 &amp; dec</span></span><br><span class="line"><span class="string">https://post.zz173.com/posts/1690090958.html</span></span><br></pre></td></tr></table></figure>
<h3 id="undefined">undefined</h3>
<p>如果出现 undefined 的情况，</p>
<ol>
<li>检查是否已经执行 hexo clean</li>
<li>检查 package.json 文件，看看是否已安装 hexo-abbrlink 插件</li>
</ol>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>生活</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK1.8之Lambda写法记录</title>
    <url>/blog/c0ad33ff.html</url>
    <content><![CDATA[<h1>List 转 Set</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; userList = Lists.newArrayList();</span><br><span class="line">Set&lt;String&gt; userNameSet1 = userList.stream().map(User::getUserName).collect(Collectors.toSet());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先过滤，再转Set</span></span><br><span class="line">Set&lt;String&gt; userNameSet2 = userList.stream().filter(u -&gt; u.getAge() &gt;= <span class="number">20</span>).map(User::getUserName).collect(Collectors.toSet());</span><br></pre></td></tr></table></figure>
<h1>List 转 Map</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; userList = Lists.newArrayList();</span><br><span class="line">Map&lt;String, List&lt;User&gt;&gt; userMap1 = userList.stream().collect(Collectors.groupingBy(User::getUserId));</span><br><span class="line"></span><br><span class="line">Map&lt;String, User&gt; userMap2 = userList.stream().collect(Collectors.toMap(User::getUserId, Function.identity()));</span><br><span class="line"></span><br><span class="line">Map&lt;String, User&gt; userMap3 = userList.stream().collect(Collectors.toMap(User::getUserId, User::getUserName));</span><br></pre></td></tr></table></figure>
<h1>List 过滤</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; userList = Lists.newArrayList();</span><br><span class="line">List&lt;String&gt; schoolIdList = Lists.newArrayList();</span><br><span class="line">List&lt;User&gt; stuUserList = userList.stream().filter(u -&gt; schoolIdList.contains(u.getSchoolId())).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>
<h1>根据实体类某个属性去重</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Collectors.collectingAndThen</span></span><br><span class="line">List&lt;User&gt; distinctList = userList.stream().collect(Collectors.collectingAndThen(Collectors.toCollection(() -&gt; <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(Comparator.comparing(User::getName))), ArrayList::<span class="keyword">new</span>));</span><br></pre></td></tr></table></figure>
<h1>Map 取 Key 补集和差集</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.common.collect.Maps;</span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Sets;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NapUtil</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取Map集合的差集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S,T&gt; Map&lt;S, T&gt; <span class="title function_">getDifferenceSetByGuava</span><span class="params">(Map&lt;S, T&gt; leftMap, Map&lt;S, T&gt; rightMap)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != leftMap &amp;&amp; <span class="literal">null</span> != rightMap) &#123;</span><br><span class="line"></span><br><span class="line">            Set&lt;S&gt; leftMapKey = leftMap.keySet();</span><br><span class="line">            Set&lt;S&gt; rightMapKey = rightMap.keySet();</span><br><span class="line">            Set&lt;S&gt; differenceSet = Sets.difference(leftMapKey, rightMapKey);</span><br><span class="line">            Map&lt;S, T&gt; result = Maps.newHashMap();</span><br><span class="line">            <span class="keyword">for</span> (S key : differenceSet) &#123;</span><br><span class="line">                result.put(key, leftMap.get(key));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取Map集合的并集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S,T&gt; Map&lt;S, T&gt; <span class="title function_">getUnionSetByGuava</span><span class="params">(Map&lt;S, T&gt; leftMap, Map&lt;S, T&gt; rightMap)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != leftMap &amp;&amp; <span class="literal">null</span> != rightMap) &#123;</span><br><span class="line"></span><br><span class="line">            Set&lt;S&gt; leftMapKey = leftMap.keySet();</span><br><span class="line">            Set&lt;S&gt; rightMapKey = rightMap.keySet();</span><br><span class="line">            Set&lt;S&gt; differenceSet = Sets.union(leftMapKey, rightMapKey);</span><br><span class="line">            Map&lt;S, T&gt; result = Maps.newHashMap();</span><br><span class="line">            <span class="keyword">for</span> (S key : differenceSet) &#123;</span><br><span class="line">                <span class="keyword">if</span> (leftMap.containsKey(key)) &#123;</span><br><span class="line">                    result.put(key, leftMap.get(key));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result.put(key, rightMap.get(key));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取Map集合的交集（String,String）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S,T&gt; Map&lt;S, T&gt; <span class="title function_">getIntersectionSetByGuava</span><span class="params">(Map&lt;S, T&gt; leftMap, Map&lt;S, T&gt; rightMap)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != leftMap &amp;&amp; <span class="literal">null</span> != rightMap) &#123;</span><br><span class="line"></span><br><span class="line">            Set&lt;S&gt; leftMapKey = leftMap.keySet();</span><br><span class="line">            Set&lt;S&gt; rightMapKey = rightMap.keySet();</span><br><span class="line">            Set&lt;S&gt; differenceSet = Sets.intersection(leftMapKey, rightMapKey);</span><br><span class="line">            Map&lt;S, T&gt; result = Maps.newHashMap();</span><br><span class="line">            <span class="keyword">for</span> (S key : differenceSet) &#123;</span><br><span class="line">                result.put(key, leftMap.get(key));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Map&lt;String, Person&gt; map1 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map1.put(<span class="string">&quot;a&quot;</span>, <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">1</span>));</span><br><span class="line">        map1.put(<span class="string">&quot;b&quot;</span>, <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">2</span>));</span><br><span class="line">        map1.put(<span class="string">&quot;c&quot;</span>, <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Person&gt; map2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map2.put(<span class="string">&quot;c&quot;</span>, <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">3</span>));</span><br><span class="line">        map2.put(<span class="string">&quot;d&quot;</span>, <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">4</span>));</span><br><span class="line">        map2.put(<span class="string">&quot;e&quot;</span>, <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Map&lt;String, Person&gt; diffMap1 = getDifferenceSetByGuava(map1, map2);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------差集结果,入参:A,B  出参:A-B后A中剩余的  -----------&quot;</span>);</span><br><span class="line">        diffMap1.forEach((k, v) -&gt; System.out.println(k + <span class="string">&quot;:&quot;</span> + v));</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Person&gt; diffMap2 = getDifferenceSetByGuava(map2, map1);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------差集结果,入参:B,A  出参:B-A后B中剩余的  -----------&quot;</span>);</span><br><span class="line">        diffMap2.forEach((k, v) -&gt; System.out.println(k + <span class="string">&quot;:&quot;</span> + v));</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Person&gt; unionMap = getUnionSetByGuava(map1, map2);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------并集结果-----------&quot;</span>);</span><br><span class="line">        unionMap.forEach((k, v) -&gt; System.out.println(k + <span class="string">&quot;:&quot;</span> + v));</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Person&gt; intersectionMap = getIntersectionSetByGuava(map1, map2);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------交结果-----------&quot;</span>);</span><br><span class="line">        intersectionMap.forEach((k, v) -&gt; System.out.println(k + <span class="string">&quot;:&quot;</span> + v));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK、JRE、JVM</title>
    <url>/blog/9e853523.html</url>
    <content><![CDATA[<h1>一、JDK、JRE、JVM 有什么关系？</h1>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1557711983254.png" alt=""></p>
<p>JDK（Java development toolkit）——相当于是 Java 的库函数，是编译、运行 Java 程序的工具包，是一切 Java 应用程序的基础，所有 Java 应用程序是构建在这个之上的。（汽车）</p>
<p>JRE（Java Runtime Environment）——Java 运行环境，也就是 Java 平台。所有的 Java 程序都要在 JRE 下才能运行。JDK 的工具也是 Java 程序，也需要 JRE 才能运行。（汽车动力系统）</p>
<p>JVM（Java Virtual Machine）——Java 虚拟机，是 JRE 的一部分。它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。JVM 有自己完善的硬件架构，如处理器、堆栈、寄存器等，还具有相应的指令系统。Java 语言最重要的特点就是跨平台运行。使用 JVM 就是为了支持与操作系统无关，实现跨平台。（汽车轮胎）</p>
<h1>二、JVM 虚拟机</h1>
<h2 id="2-1-jvm-基本结构">2.1  JVM 基本结构</h2>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/b2e6a2272094c3a0.png" alt=""></p>
<p><a href="https://www.yuque.com/liangxujian/ufl7zk/hh59qa">思维导图（语雀）</a></p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/2c33c8b5415c6652.png" alt=""></p>
<h2 id="2-2-jvm-线程共享区和非线程共享区">2.2 JVM 线程共享区和非线程共享区</h2>
<p>概括来说，<strong>JVM 初始运行的时候都会分配好 Method Area（方法区） 和Heap（堆） ，而 JVM 每遇到一个线程，就为其分配一个 Program Counter Register（程序计数器） , VM Stack（虚拟机栈）和Native Method Stack（本地方法栈），当线程终止时，三者（虚拟机栈，本地方法栈和程序计数器）所占用的内存空间也会被释放掉</strong>。</p>
<p>非线程共享的三个区域的生命周期与所属线程相同，而线程共享的区域与 JAVA 程序运行的生命周期相同，所以这也是系统垃圾回收的场所只发生在线程共享的区域（实际上对大部分虚拟机来说只发生在 Heap（堆区）上）的原因。</p>
<p>案例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppMain</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 运行时，JVM把AppMain的信息都放到方法区</span></span><br><span class="line"><span class="comment">     * main方法本身也放入方法区内</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// test1是引用，所以放到栈区中，而Sample是自定义对象，会被放到堆里</span></span><br><span class="line">        <span class="type">Sample</span> <span class="variable">test1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sample</span>(<span class="string">&quot;测试1&quot;</span>);</span><br><span class="line">        <span class="type">Sample</span> <span class="variable">test2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sample</span>(<span class="string">&quot;测试2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        test1.printName();</span><br><span class="line">        test2.printName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sample</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Sample</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * printName方法本身放到方法区中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printName</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1557710578795.png" alt=""></p>
<h2 id="2-3-jvm-启动流程-略">2.3 JVM 启动流程（略）</h2>
<ol>
<li>Java 虚拟机启动的命令是通过 java + xxx(类名，这个类中要有 main 方法)或者 javaw 启动的。</li>
<li>执行命令后，系统第一步做的就是装载配置，会在当前路径中寻找 JVM 的 config 配置文件。</li>
<li>找到 JVM 的 config 配置文件之后会去定位 jvm.dll 这个文件。这个文件就是 Java 虚拟机的主要实现。</li>
<li>当找到匹配当前版本的 jvm.dll 文件后，就会使用这个 dll 去初始化 JVM 虚拟机。获得相关的接口。之后找到 main 方法开始运行。</li>
</ol>
<h1>三、Java 执行过程</h1>
<h2 id="3-1-解释执行和编译执行">3.1 解释执行和编译执行</h2>
<p>解释执行：一边将程序翻译成计算机可以执行的指令，一边交给计算机执行，翻译一句，执行一句。<em>（饭馆点菜，上一个吃一个）</em></p>
<p>编译执行：将整个程序翻译成计算机及可以理解的指令，然后交给计算机执行。<em>（饭馆订桌，菜上齐后一并吃）</em></p>
<h2 id="3-2-java-的执行过程">3.2 Java 的执行过程</h2>
<p>Java 严格来讲是一种“半解释半编译”的语言</p>
<table>
<thead>
<tr>
<th>User.java</th>
</tr>
</thead>
<tbody>
<tr>
<td>↓*（javac源码编译器解释执行，即静态编译）*</td>
</tr>
<tr>
<td>User.class 字节码（ByteCode），ByteCode 是 JVM 唯一能够识别的指令，JVM 将 ByteCode 翻译成真正<br/>能够执行的机器码**（PS：在这一步同时还会有一些对我们编写的 Java 源码的优化操作）**</td>
</tr>
<tr>
<td>↓*（JVM 编译执行）*</td>
</tr>
<tr>
<td>机器码（machine code），这是电脑 CPU 可直接解读的数据，JVM 在不同的硬件平台上有不同实现，以<br/>达到所谓“一次编写，到处运行”的目标</td>
</tr>
</tbody>
</table>
<h2 id="3-3-java-运行比-c-慢？">3.3 Java 运行比 C++ 慢？</h2>
<p>这种说法是在 <strong>JIT 编译器</strong>出现之前的情况。</p>
<p>由于 Java 程序最初是仅仅通过解释器解释执行，即对字节码逐条解释执行，这种方式的执行速度相对会比较慢，<strong>尤其当某个方法或代码块运行的特别频繁时，这种方式的执行效率就显得很低</strong>。于是后来在虚拟机中引入了<strong>JIT 编译器（即时编译器，即时编译被内嵌于 java 字节码执行引擎之中，可以算的上是 jvm 的一个内存组件）</strong>，当虚拟机发现某个方法或代码块运行特别频繁时，就会把这些代码认定为“Hot Spot Code”（热点代码），为了提高热点代码的执行效率，在运行时，虚拟机将会把这些代码编译成与本地平台相关的机器码，并进行特别的优化，完成这项任务的正是 JIT 编译器。</p>
<h2 id="3-4-jit-编译器中的-c1-c2-即时编译器">3.4 JIT 编译器中的 C1、C2 即时编译器</h2>
<ul>
<li>C1 编译：将字节码编译为本地代码，进行简单、可靠的优化，如有必要将加入性能监控的逻辑。</li>
<li>C2 编译：也是将字节码编译为本地代码，但是会启用一些编译耗时较长的优化，<strong>甚至会</strong>根据性能监控信息进行一些不可靠的<strong>激进优化</strong>。C2 编译主要是针对<strong>热点代码</strong>，对之做出更优的编译。</li>
</ul>
<p><em>注：实施分层编译后，C1 和 C2 将会同时工作，许多代码会被</em><strong>多次编译</strong>*，用 C1 获取更高的编译速度，用 C2 来获取更好的编译质量，且在解释执行的时候解释器也无须再承担收集性能监控信息的任务*</p>
<h1>四、新生代、老年代、JavaCG 回收机制</h1>
<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>
<p>堆的内存模型大致为：</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1678097210489.png" alt=""></p>
<p>从图中可以看出： 堆大小 = 新生代 + 老年代。</p>
<p>JVM 三大性能调优参数： -Xms、-Xmx、-Xss</p>
<ul>
<li>参数 –Xms 指定堆的默认值（最小值），参数 -Xmx 指定堆的最大值；</li>
<li>参数 -Xss 指定每个线程分配的内存大小【JDK 1.4 为 256KB；JDK 1.5+ 为 1M】，这决定了进程的数量。</li>
</ul>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/JVM%E5%8F%82%E6%95%B0.png" alt=""></p>
<h2 id="4-1-新生代和老年代">4.1 新生代和老年代</h2>
<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为 1:2。其中，新生代 ( Young ) 被细分为 <strong>Eden</strong>（伊甸园）和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 <strong>from</strong> 和 <strong>to</strong>，以示区分。</p>
<p><em>注：JVM 每次只会使用 Eden 和其中的一块 Survivor 区域来为对象服务，所以无论什么时候，总是有一块 Survivor 区域是空闲着的。因此，新生代实际可用的内存空间为 9/10 ( 即90% )的新生代空间。（ from 和 to 区域位置是平等的）</em></p>
<h2 id="4-2-javacg-垃圾回收机制">4.2 JavaCG 垃圾回收机制</h2>
<p>Java 的垃圾回收机制使用的是分代收集算法。</p>
<ol>
<li>新创建的对象会被分配到 Eden 区；</li>
<li>Eden 区满了会触发一次 Minor GC，仍存活的对象复制到 From 区，年龄+1（对于一些比较大的对象，需要分配一块较大的内存空间，会直接进入到老年代），清空 Eden 区，此时 To 区是空的；</li>
<li>重复1、2步骤，直到 From 区满，触发一次 Minor GC，Eden 区和 From 区仍存活的对象复制到 To 区，年龄+1，清空 Eden 区和 From 区，同时交换 From 区和 To 区；</li>
<li>重复1、2、3步骤，直到对象年龄达到某个值（默认是 15 岁，可通过参数设置），则会进入到老年代。</li>
</ol>
<p>Full GC 是发生在<strong>老年代</strong>的垃圾收集动作，所采用的是<strong>标记-清除算法</strong>。</p>
<p>由于老年代的对象都是比较稳定的<strong>热点代码</strong>，所以不会那么容易被回收。因此，<strong>Full GC 发生的次数不会有 Minor GC 那么频繁，并且做一次 Full GC 要比进行一次 Minor GC 的时间会更长。</strong></p>
<p>*另外，*<strong>标记-清除算法收集垃圾的时候会产生许多的内存碎片</strong> <em>( 即不连续的内存空间 )，此后需要为较大的对象分配内存空间时，若无法找到足够的连续的内存空间，就会提前触发一次 GC 的收集动作。</em></p>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Java之BigDecimal</title>
    <url>/blog/6ff26fc7.html</url>
    <content><![CDATA[<blockquote>
<p>参考网站：<a href="https://blog.csdn.net/qq_37080455/article/details/98964856">java精确除法运算（BigDecimal）_bigdecimal 除法_Evan_su的博客-CSDN博客</a></p>
</blockquote>
<h1>一、BigDecimal 介绍</h1>
<p>Java 中提供了大数字（超过 16 位有效位）的操作类，即 java.math.BinInteger 类和 java.math.BigDecimal 类，用于高精度计算。</p>
<p>其中 BigInteger 类是针对大整数的处理类，而 BigDecimal 类则是针对大小数的处理类。</p>
<p>BigDecimal 类的实现用到了 BigInteger 类，不同的是 BigDecimal 加入了小数的概念。</p>
<p>float 和 Double 只能用来做科学计算或者是工程计算；在商业计算中，对数字精度要求较高，必须使用 BigInteger 类和 BigDecimal 类，它支持任何精度的定点数，可以用它来精确计算货币值。</p>
<p>BigDecimal 类创建的是对象，不能使用传统的 +、-、*、/ 等算术运算符直接对其进行数学运算，而必须调用其对应的方法。方法的参数也必须是 BigDecimal 类型的对象。</p>
<h1>二、BigDecimal 构造方法</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法一：不允许使用</span></span><br><span class="line">BigDecimal <span class="title function_">BigDecimal</span><span class="params">(<span class="type">double</span> d)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二：常用，推荐使用</span></span><br><span class="line">BigDecimal <span class="title function_">BigDecimal</span><span class="params">(String s)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法三：常用，推荐使用</span></span><br><span class="line"><span class="keyword">static</span> BigDecimal <span class="title function_">valueOf</span><span class="params">(<span class="type">double</span> d)</span>;</span><br></pre></td></tr></table></figure>
<p>注意：</p>
<ol>
<li>double 参数的构造方法，不允许使用！！！！因为它不能精确的得到相应的值，值会变大</li>
<li>String 构造方法是完全可预知的：写入 new BigDecimal(“0.1”) 将创建一个 BigDecimal，它正好等于预期的 0.1；因此，通常建议优先使用 String 构造方法</li>
<li>静态方法 valueOf(double val) 内部实现，仍是将 double 类型转为 String 类型；这通常是将 double（或 float）转化为 BigDecimal 的首选方法</li>
</ol>
<h1>三、BigDecimal 类型转换</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">toString()    <span class="comment">// 将 BigDecimal 对象的数值转换成字符串</span></span><br><span class="line">doubleValue() <span class="comment">// 将 BigDecimal 对象中的值以双精度数返回</span></span><br><span class="line">floatValue()  <span class="comment">// 将 BigDecimal 对象中的值以单精度数返回</span></span><br><span class="line">longValue()   <span class="comment">// 将 BigDecimal 对象中的值以长整数返回</span></span><br><span class="line">intValue()    <span class="comment">// 将 BigDecimal 对象中的值以整数返回</span></span><br></pre></td></tr></table></figure>
<h1>四、BigDecimal 常用方法</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 加法，求两个 BigDecimal 类型数据的和</span></span><br><span class="line">BigDecimal <span class="title function_">add</span><span class="params">(BigDecimal value)</span>;</span><br><span class="line"><span class="comment">// 减法，求两个 BigDecimal 类型数据的差</span></span><br><span class="line">BigDecimal <span class="title function_">subtract</span><span class="params">(BigDecimal value)</span>;</span><br><span class="line"><span class="comment">// 乘法，求两个 BigDecimal 类型数据的积</span></span><br><span class="line">BigDecimal <span class="title function_">multiply</span><span class="params">(BigDecimal  value)</span>;</span><br><span class="line"><span class="comment">// 除法，求两个 BigDecimal 类型数据的商</span></span><br><span class="line">BigDecimal <span class="title function_">divide</span><span class="params">(BigDecimal divisor)</span>;</span><br><span class="line"><span class="comment">// 求余数，求 BigDecimal 类型数据除以 divisor 的余数</span></span><br><span class="line">BigDecimal <span class="title function_">remainder</span><span class="params">(BigDecimal divisor)</span>;</span><br><span class="line"><span class="comment">// 最大数，求两个 BigDecimal 类型数据的最大值</span></span><br><span class="line">BigDecimal <span class="title function_">max</span><span class="params">(BigDecimal value)</span>;</span><br><span class="line"><span class="comment">// 最小数，求两个 BigDecimal 类型数据的最小值</span></span><br><span class="line">BigDecimal <span class="title function_">min</span><span class="params">(BigDecimal value)</span>;</span><br><span class="line"><span class="comment">// 绝对值，求 BigDecimal 类型数据的绝对值</span></span><br><span class="line">BigDecimal <span class="title function_">abs</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 相反数，求 BigDecimal 类型数据的相反数</span></span><br><span class="line">BigDecimal <span class="title function_">negate</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>
<h1>五、BigDecimal.divide()</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> divisor      除数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> scale        小数点后保留位数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> roundingMode 取舍规则</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">BigDecimal.divide(BigDecimal divisor, <span class="type">int</span> scale, RoundingMode roundingMode);</span><br><span class="line"></span><br><span class="line">bd2.divide(bd1, <span class="number">4</span>, BigDecimal.ROUND_HALF_UP).toString(); <span class="comment">// &quot;0.0200&quot;</span></span><br><span class="line"><span class="comment">// 商的小数点后位数是固定的，如果需要去除末尾多余的0，则使用下面方法</span></span><br><span class="line">bd2.divide(bd1, <span class="number">4</span>, BigDecimal.ROUND_HALF_UP).stripTrailingZeros().toPlainString(); <span class="comment">// &quot;0.02&quot;</span></span><br></pre></td></tr></table></figure>
<p>因为 BigDecimal 除法可能出现不能整除的情况，比如 4.5/1.3，这时会报错【java.lang.ArithmeticException: Non-terminating decimal expansion; no exact representable decimal result】。所以就需要用三个参数的除法方法，规定保留几位小数以及保留的方式，这样就可以避免异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">*ROUND_CEILING*</span><br><span class="line">Rounding mode to round towards positive infinity.</span><br><span class="line">向正无穷方向舍入</span><br><span class="line">正数：<span class="number">1.1</span> -&gt; <span class="number">2</span>   <span class="number">1.5</span>-&gt; <span class="number">2</span>   <span class="number">1.8</span>-&gt; <span class="number">2</span></span><br><span class="line">负数：-<span class="number">1.1</span>-&gt; -<span class="number">1</span>   -<span class="number">1.5</span>-&gt; -<span class="number">1</span>   -<span class="number">1.8</span>-&gt; -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">*ROUND_DOWN*</span><br><span class="line">Rounding mode to round towards zero.</span><br><span class="line">向零方向舍入</span><br><span class="line">正数：<span class="number">1.1</span> -&gt; <span class="number">2</span>   <span class="number">1.5</span>-&gt; <span class="number">2</span>   <span class="number">1.8</span>-&gt; <span class="number">2</span></span><br><span class="line">负数：-<span class="number">1.1</span>-&gt; -<span class="number">1</span>   -<span class="number">1.5</span>-&gt; -<span class="number">1</span>   -<span class="number">1.8</span>-&gt; -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">*ROUND_FLOOR*</span><br><span class="line">Rounding mode to round towards negative infinity.</span><br><span class="line">向负无穷方向舍入</span><br><span class="line">正数: <span class="number">1.1</span>-&gt; <span class="number">1</span>   <span class="number">1.5</span>-&gt; <span class="number">1</span>   <span class="number">1.8</span>-&gt; <span class="number">1</span></span><br><span class="line">负数: -<span class="number">1.1</span>-&gt; -<span class="number">2</span>   -<span class="number">1.5</span>-&gt; -<span class="number">2</span>   -<span class="number">1.8</span>-&gt; -<span class="number">2</span></span><br><span class="line"></span><br><span class="line">*ROUND_HALF_DOWN*</span><br><span class="line">Rounding mode to round towards <span class="string">&quot;nearest neighbor&quot;</span> unless both neighbors are equidistant, in which <span class="keyword">case</span> round down.</span><br><span class="line">向（距离）最近的一边舍入，除非两边（的距离）是相等。如果是这样，向下舍入, 例如 <span class="number">1.55</span> 保留一位小数结果为 <span class="number">1.5</span></span><br><span class="line">正数：<span class="number">1.5</span>-&gt; <span class="number">1</span>   <span class="number">1.6</span>-&gt; <span class="number">2</span></span><br><span class="line">负数：-<span class="number">1.5</span>-&gt; -<span class="number">1</span>   -<span class="number">1.6</span>-&gt; -<span class="number">2</span></span><br><span class="line"></span><br><span class="line">*ROUND_HALF_EVEN* </span><br><span class="line">Rounding mode to round towards the <span class="string">&quot;nearest neighbor&quot;</span> unless both neighbors are equidistant, in which <span class="keyword">case</span>, round towards the even neighbor.</span><br><span class="line">向（距离）最近的一边舍入，除非两边（的距离）是相等。如果是这样，如果保留位数是奇数，使用 ROUND_HALF_UP，如果是偶数，使用*ROUND_HALF_DOWN*（以 <span class="number">5</span> 为分界线，如果是 <span class="number">5</span>，则前一位变偶数）</span><br><span class="line"><span class="number">1.15</span>-&gt; <span class="number">1.2</span>   <span class="number">1.16</span>-&gt; <span class="number">1.2</span>   <span class="number">1.25</span>-&gt; <span class="number">1.2</span>   <span class="number">1.26</span>-&gt; <span class="number">1.3</span></span><br><span class="line"></span><br><span class="line">*ROUND_HALF_UP*</span><br><span class="line">Rounding mode to round towards <span class="string">&quot;nearest neighbor&quot;</span> unless both neighbors are equidistant, in which <span class="keyword">case</span> round up.</span><br><span class="line">向（距离）最近的一边舍入，除非两边（的距离）是相等。如果是这样，向上舍入, <span class="number">1.55</span> 保留一位小数结果为 <span class="number">1.6</span></span><br><span class="line">【四舍五入】</span><br><span class="line"></span><br><span class="line">*ROUND_UNNECESSARY*</span><br><span class="line">Rounding mode to <span class="keyword">assert</span> that the requested operation has an exact result, hence no rounding is necessary.</span><br><span class="line">计算结果是精确的，不需要舍入模式</span><br><span class="line"></span><br><span class="line">*ROUND_UP*</span><br><span class="line">Rounding mode to round away from zero.</span><br><span class="line">向远离 <span class="number">0</span> 的方向舍入</span><br><span class="line">正数：<span class="number">1.1</span>-&gt; <span class="number">2</span>   <span class="number">1.5</span>-&gt; <span class="number">2</span>   <span class="number">1.8</span>-&gt; <span class="number">2</span></span><br><span class="line">负数：-<span class="number">1.1</span>-&gt; -<span class="number">2</span>   -<span class="number">1.5</span>-&gt; -<span class="number">2</span>   -<span class="number">1.8</span>-&gt; -<span class="number">2</span></span><br></pre></td></tr></table></figure>
<h1>六、BigDecimal.setScale()</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BigDecimal <span class="title function_">setScale</span><span class="params">(<span class="type">int</span> newScale, RoundingMode roundingMode)</span>;</span><br><span class="line"></span><br><span class="line">BigDecimal <span class="title function_">setScale</span><span class="params">(<span class="type">int</span> newScale, <span class="type">int</span> roundingMode)</span>;</span><br><span class="line"></span><br><span class="line">BigDecimal <span class="title function_">setScale</span><span class="params">(<span class="type">int</span> newScale)</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestBigDecimal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;123.564&quot;</span>);</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;3.3&quot;</span>);</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">divide</span> <span class="operator">=</span> b1.divide(b2, <span class="number">10</span>, RoundingMode.HALF_UP);</span><br><span class="line">        System.out.println(divide);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java之String</title>
    <url>/blog/1f41d3c9.html</url>
    <content><![CDATA[<h1>一、特殊的 String 类</h1>
<ol>
<li>虽然是引用类型，但是可以像基础数据类型一样直接赋值（<code>String s = &quot;&quot;;</code>）</li>
<li>不可被继承，String 类被<code>final</code>修饰</li>
</ol>
<h1>二、String 常用方法</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回指定字符第一次出现的字符串内的索引，以指定的索引开始搜索</span></span><br><span class="line">String.indexOf(<span class="type">int</span> ch, <span class="type">int</span> fromIndex);</span><br><span class="line"><span class="comment">// int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回指定子字符串第一次出现的字符串内的索引</span></span><br><span class="line">String.indexOf(String str);</span><br><span class="line"><span class="comment">// int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回指定子串的第一次出现的字符串中的索引，从指定的索引开始</span></span><br><span class="line">String.indexOf(String str, <span class="type">int</span> fromIndex);</span><br><span class="line"><span class="comment">// int</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回指定字符的最后一次出现的字符串中的索引</span></span><br><span class="line">String.lastIndexOf(<span class="type">int</span> ch);</span><br><span class="line"><span class="comment">// int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回指定字符的最后一次出现的字符串中的索引，从指定的索引开始向后搜索</span></span><br><span class="line">String.lastIndexOf(<span class="type">int</span> ch, <span class="type">int</span> fromIndex);</span><br><span class="line"><span class="comment">// int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回指定子字符串最后一次出现的字符串中的索引</span></span><br><span class="line">String.lastIndexOf(String str);</span><br><span class="line"><span class="comment">// int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回指定子字符串的最后一次出现的字符串中的索引，从指定索引开始向后搜索</span></span><br><span class="line">String.lastIndexOf(String str, <span class="type">int</span> fromIndex);</span><br><span class="line"><span class="comment">// int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串是否匹配给定的正则表达式</span></span><br><span class="line">String.matches(String regex);</span><br><span class="line"><span class="comment">// boolean</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回从替换所有出现的导致一个字符串 oldChar在此字符串 newChar</span></span><br><span class="line">String.replace(<span class="type">char</span> oldChar, <span class="type">char</span> newChar);</span><br><span class="line"><span class="comment">// String</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将与字面目标序列匹配的字符串的每个子字符串替换为指定的字面替换序列</span></span><br><span class="line">String.replace(CharSequence target, CharSequence replacement);</span><br><span class="line"><span class="comment">// String</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用给定的替换替换与给定的 regular expression匹配的此字符串的每个子字符串</span></span><br><span class="line">String.replaceAll(String regex, String replacement);</span><br><span class="line"><span class="comment">// String</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用给定的替换替换与给定的 regular expression匹配的此字符串的第一个子字符串</span></span><br><span class="line">String.replaceFirst(String regex, String replacement);</span><br><span class="line"><span class="comment">// String</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将此字符串分割为给定的 regular expression的匹配</span></span><br><span class="line">String.split(String regex);</span><br><span class="line"><span class="comment">// String[]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将这个字符串拆分为给定的 regular expression的匹配</span></span><br><span class="line">String.split(String regex, <span class="type">int</span> limit);</span><br><span class="line"><span class="comment">// String[]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一个字符串，该字符串是此字符串的子字符串</span></span><br><span class="line">String.substring(<span class="type">int</span> beginIndex);</span><br><span class="line"><span class="comment">// String</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一个字符串，该字符串是此字符串的子字符串</span></span><br><span class="line">String.substring(<span class="type">int</span> beginIndex, <span class="type">int</span> endIndex);</span><br><span class="line"><span class="comment">// String</span></span><br></pre></td></tr></table></figure>
<h2 id="案例分析">案例分析</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> s2.intern();</span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="string">&quot;Hel&quot;</span> + <span class="string">&quot;lo&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">sa</span> <span class="operator">=</span> <span class="string">&quot;Hel&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="string">&quot;lo&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> sa + sb;</span><br><span class="line"></span><br><span class="line">System.out.println(s1 == s2);<span class="comment">// false</span></span><br><span class="line">System.out.println(s1 == s3);<span class="comment">// true</span></span><br><span class="line">System.out.println(s1 == s4);<span class="comment">// true</span></span><br><span class="line">System.out.println(s1 == s5);<span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<ul>
<li>String 的 intern() 方法会查找在常量池中是否存在一份 equal 相等的字符串，如果有则返回该字符串的引用，如果没有则添加自己的字符串进入常量池。<br>
(因为 s1 已经在常量池中创建了&quot;Hello&quot;字符串，所以 s2.intern() 的时候就去常量池中查找是否已经存在&quot;Hello&quot;，存在则直接=原来的字符串，不存在则是一个新的存在，所以 s3=s1)</li>
<li>虽然 s4 是动态拼接出来的，但所有参与拼接的部分都是已知的字面量，在编译期间，这种拼接会被优化，编译器直接帮你拼好，因此相等。<br>
（只有使用这种全部带引号、使用“+”连接产生的新字符串对象才会被加入字符串池中）<br>
（s4 在初始化的过程中，产生了一个或〇个对象，若常量池中早已存在该字符串，则直接指向常量池，否则使用字符串拼接优化，产生一个 StringBuffer 对象进行拼接，然后 toString()，存放到常量池中）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>().append(<span class="string">&quot;Hel&quot;</span>).append(<span class="string">&quot;lo&quot;</span>).toString()</span><br></pre></td></tr></table></figure>
<ul>
<li>虽然 s5 也是拼接，但 sa 和 sb 作为两个变量，都是不可预料的，并不会被优化，会存放到堆中。</li>
</ul>
<h1>三、Java 的字符串类比较</h1>
<p>String、StringBuffer、StringBuilder</p>
<ol>
<li>执行速度比较（例如字符串的组合速度）：<strong>StringBuilder &gt; StringBuffer &gt; String</strong></li>
<li>StringBuilder – 非线程安全；StringBuffer – 线程安全<br>
（因为 StringBuffer 为保证线程安全而牺牲了性能，所以当我们在不用考虑线程的情况下，尽量使用 StringBuilder）</li>
</ol>
<h2 id="总结">总结</h2>
<ul>
<li>如果要操作少量的数据 → String</li>
<li>不考虑线程安全处理字符串缓冲区下大量数据 → StringBuilder</li>
<li>需考虑线程安全处理字符串缓冲区下大量数据 → StringBuffer</li>
</ul>
<h1>四、Java 常量池与 String 类</h1>
<p>Java 中的常量池实际上分为两种形态：静态常量池和运行时常量池。<br>
静态常量池即是 *.class 文件中的常量池，用来存放方法名称、字段名称等。<br>
运行时常量池则是我们常说的常量池，用来存放常量（final 关键字修饰的变量）和字符串等，避免频繁的创建和销毁对象而影响系统性能，实现了对象的共享（即大家用的都是同一个东西）。</p>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Lombok注解记录</title>
    <url>/blog/47f664bf.html</url>
    <content><![CDATA[<h1>@Setter</h1>
<p>自动添加类中所有属性相关的 set() 方法</p>
<h1>@Getter</h1>
<p>自动添加类中所有属性相关的 get() 方法</p>
<h1>@Builder</h1>
<p>使得该类可以通过 builder（建造者模式）构建对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Student.builder().sno(<span class="string">&quot;001&quot;</span>).sname(<span class="string">&quot;admin&quot;</span>).sage(<span class="number">18</span>).sphone(<span class="string">&quot;110&quot;</span>).build();</span><br></pre></td></tr></table></figure>
<h1>@RequiredArgsConstructor</h1>
<p>生成一个该类的构造方法，禁止无参构造</p>
<h1>@ToString</h1>
<p>重写该类的 toString() 方法</p>
<h1>@EqualsAndHashCode</h1>
<p>重写该类的 equals() 和 hashCode() 方法</p>
<h2 id="callsuper-true">callSuper = true</h2>
<p>根据（子类自身的字段值 + 从父类继承的字段值）生成 hashcode</p>
<p>当两个子类对象比较时，如果生成的 hashcode 相同，equals() 返回 true。</p>
<h2 id="callsuper-false">callSuper = false</h2>
<p>根据（子类自身的字段值）生成 hashcode</p>
<p>当两个子类对象比较时，如果只有子类对象的本身的字段值相同，equals() 就返回 true（父类字段值可以不同）</p>
<h1>@Data</h1>
<p>= @Setter + @Getter + @RequiredArgsConstructor + @ToString + @EqualsAndHashCode</p>
<p>@Data 默认比较两个对象的 hashCode，需要依据业务要求显式重写 equals() 方法，或者类上加上注解：@EqualsAndHashCode(onlyExplicitlyIncluded = true)，然后为每一个需要比较的属性加上注解：@EqualsAndHashCode.Include</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(onlyExplicitlyIncluded = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cs</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="meta">@EqualsAndHashCode</span>.Include</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cs</span><span class="params">(<span class="type">int</span> id, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>@NoArgsConstructor</h1>
<p>生成无参的构造方法。</p>
<h2 id="staticname">staticName</h2>
<p>staticName 代表的是是否生成静态构造方法，也就是说当 staticName 属性有值时则会生成一个静态构造方法，这时无参构造方法会被私有，然后创建一个指定名称的静态构造方法，并且是公有的，如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编译前代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor(staticName = &quot;UserStatic&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfo</span>() &#123;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编译后代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfo</span>() &#123;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">UserInfo</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserStatic</span><span class="params">()</span> &#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserStatic</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="onconstructor">onConstructor</h2>
<p>经常写 Spring 或者 SpringBoot 代码的人应该知道，Spring 对于依赖注入提供了三种写法，分别是属性注入、Setter 方法注入以及构造器注入，但是在日常工作中我们更多采用的是依赖于 @Autowired 注解方式进行依赖注入，不过过多的依赖注入会使我们的代码过于冗长，甚至 Spring4.0 起就已经开始不推荐这种写法了，而是推荐使用 Setter 方法注入以及构造器注入，lombok 的生成构造器的方法就可以很方便的实现这种写法。</p>
<p>举一个通过构造器注入的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysLoginController</span>() &#123;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TokenUtils tokenUtils;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SysLoginService sysLoginService;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在这里 <span class="doctag">@Autowired</span> 是可以省略的，在这里使用只是为了介绍 onConstructor 参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SysLoginController</span> <span class="params">(TokenUtils tokenUtils, SysLoginService sysLoginService)</span> &#123;</span><br><span class="line">    	</span><br><span class="line">        <span class="built_in">this</span>.tokenUtils = tokenUtils;</span><br><span class="line">        <span class="built_in">this</span>.sysLoginService = sysLoginService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样注入 Bean 在数量较多时我们仍需编写大量代码，这个时候就可以使用 @RequiredArgsConstructor 注解来解决这个问题，至于为什么不使用 @AllArgsConstructor 注解是因为这个注解是针对所有参数的，而在这个情境下，我们只需构造 Bean 所对应的属性而不是非 Bean，所以我们只需在 Bean 对应的属性前加上 final 关键字进行修饰就可以只生成需要的有参构造函数，如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编译前</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor(onConstructor = @__(@Autowired))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysLoginController</span>() &#123;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TokenUtils tokenUtils;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SysLoginService sysLoginService;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编译后</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysLoginController</span>() &#123;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TokenUtils tokenUtils;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SysLoginService sysLoginService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SysLoginController</span> <span class="params">(TokenUtils tokenUtils, SysLoginService sysLoginService)</span> &#123;</span><br><span class="line">    	</span><br><span class="line">        <span class="built_in">this</span>.tokenUtils = tokenUtils;</span><br><span class="line">        <span class="built_in">this</span>.sysLoginService = sysLoginService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="access">access</h2>
<p>有的时候我们会使用单例模式，这个时候需要我们创造一个私有的无参构造方法，那么就可以使用 access 这样一个属性来设置构造起的权限，如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编译前代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor(access = AccessLevel.PRIVATE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfo</span>() &#123;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编译后代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfo</span>() &#123;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">UserInfo</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>access 可选等级：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">AccessLevel</span> &#123;</span><br><span class="line">    PUBLIC,</span><br><span class="line">    MODULE,</span><br><span class="line">    PROTECTED,</span><br><span class="line">    PACKAGE,</span><br><span class="line">    PRIVATE,</span><br><span class="line">    NONE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">AccessLevel</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="force">force</h2>
<p>当类中有被 final 关键字修饰的字段未被初始化时，编译器会报错，这时也可以设置 force 属性为 true 来为字段根据类型生成一个默认值 0/false/null，这样编译器就不会再报错了，如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编译前代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor(force = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfo</span>() &#123;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String gender;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编译后代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfo</span>() &#123;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">UserInfo</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>@AllArgsConstructor</h1>
<p>生成全参的构造方法。</p>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Lombok</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Lombok</tag>
      </tags>
  </entry>
  <entry>
    <title>Lombok介绍</title>
    <url>/blog/b369cd6a.html</url>
    <content><![CDATA[<h1>一、Lombok 是什么</h1>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1672124784402-4a31184d-a98c-4c97-a15c-d0a900b54c4f.png" alt=""></p>
<p>Lombok 项目是一个 <strong>Java 库</strong>，它可以自动插入到编辑器和构建工具中，增强 Java 的性能。不需要再写 getter、setter 或 equals方法，只要有一个注解，你的类就有一个功能齐全的构建器、自动记录变量等等。</p>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Lombok</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Lombok</tag>
      </tags>
  </entry>
  <entry>
    <title>MQTT协议</title>
    <url>/blog/f7cf4724.html</url>
    <content><![CDATA[<blockquote>
<p>参考网站：<a href="https://zhuanlan.zhihu.com/p/421109780">MQTT协议，终于有人讲清楚了 - 知乎 (zhihu.com)</a></p>
</blockquote>
<h1>一、什么是 MQTT</h1>
<p>MQTT（Message Queuing Telemetry Transport，消息队列遥测传输协议），是一种基于发布/订阅（publish/subscribe）模式的“轻量级”通讯协议，该协议构建于 TCP/IP 协议上，由 IBM 在 1999 年发布。</p>
<p>MQTT 最大优点在于，用极少的代码和有限的带宽，为连接远程设备提供实时可靠的消息服务。</p>
<p>作为一种低开销、低带宽占用的即时通讯协议，使其在物联网、小型设备、移动应用等方面有较广泛的应用。</p>
<h1>二、MQTT 相关名词</h1>
<h2 id="2-1-订阅和发布">2.1 订阅和发布</h2>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/e07f45c8a11e4d29a68d303532ebf0d7.png" alt="MQTT消息传递示例"></p>
<p>MQTT 使用的是发布/订阅消息模式，它提供了一对多的消息分发机制，从而实现与应用程序的解耦。</p>
<p>这是一种消息传递模式，消息不是直接从发送器发送到接收器（即点对点），而是由 MQTT server（或称为 MQTT Broker）分发的。</p>
<ul>
<li>MQTT 服务器负责消息的分发，因此必须是发布者（<code>Publisher</code>），而绝不是订阅者！</li>
<li>客户端可以发布消息（发送方）、订阅消息（接收方）或两者兼而有之</li>
</ul>
<h2 id="2-2-qos">2.2 QoS</h2>
<p>QoS（Quality of Service levels）服务质量是 MQTT 的一个重要特性。当我们使用 TCP/IP 时，连接已经在一定程度上受到保护。但是在无线网络中，中断和干扰很频繁，MQTT 在这里帮助避免信息丢失及其服务质量水平。这些级别在发布时使用。如果客户端发布到 MQTT 服务器，则客户端将是发送者，MQTT 服务器将是接收者。当 MQTT 服务器向客户端发布消息时，服务器是发送者，客户端是接收者。</p>
<h3 id="qos-0">QoS 0</h3>
<p>“<strong>至多一次</strong>”，消息发布依赖于底层TCP/IP网络。这一级别会发生消息丢失或重复，即：&lt;=1。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/image-20230804110705781.png" alt="QoS 0"></p>
<h3 id="qos-1">QoS 1</h3>
<p>“<strong>至少一次</strong>”，承诺消息将至少传送一次给订阅者，但消息重复可能会发生。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/image-20230804110216578.png" alt="QoS 1"></p>
<h3 id="qos-2">QoS 2</h3>
<p>“<strong>只有一次</strong>”，消息仅传送到目的地一次。为此，带有唯一消息 ID 的消息会存储两次，首先来自发送者，然后是接收者。QoS 2 在网络中具有最高的开销，因为在发送方和接收方之间需要两个流。这一级别可用于如下情况，在计费系统中，消息重复或丢失会导致不正确的结果。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/image-20230804110311518.png" alt="QoS 2"></p>
<h2 id="2-3-mqtt-数据包">2.3 MQTT 数据包</h2>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/6edadebd6ef74a05a76166bb4ad66215.png" alt="MQTT 数据包"></p>
<h3 id="2-3-1-固定头-fixed-header">2.3.1 固定头（Fixed header）</h3>
<p>存在于所有 MQTT 数据包中，表示数据包类型及数据包的分组类标识。</p>
<h4 id="消息类型-byte-1-bits-7-4">消息类型【byte 1（bits 7~4）】</h4>
<table>
<thead>
<tr>
<th>名称</th>
<th>值</th>
<th>报文流动方向</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>Reserved</td>
<td>0</td>
<td>不可用</td>
<td>保留位</td>
</tr>
<tr>
<td>CONNECT</td>
<td>1</td>
<td>客户端到服务器</td>
<td>客户端请求连接服务器</td>
</tr>
<tr>
<td>CONNACK</td>
<td>2</td>
<td>服务器到客户端</td>
<td>连接报文确认</td>
</tr>
<tr>
<td>PUBLISH</td>
<td>3</td>
<td>双向</td>
<td>发布消息</td>
</tr>
<tr>
<td>PUBACK</td>
<td>4</td>
<td>双向</td>
<td>QoS 1 消息发布收到确认</td>
</tr>
<tr>
<td>PUBREC</td>
<td>5</td>
<td>双向</td>
<td>发布收到（保证第一部分）</td>
</tr>
<tr>
<td>PUBREL</td>
<td>6</td>
<td>双向</td>
<td>发布释放（保证第二部分）</td>
</tr>
<tr>
<td>PUBCOMP</td>
<td>7</td>
<td>双向</td>
<td>QoS 2 消息发布完成（保证第三部分）</td>
</tr>
<tr>
<td>SUBSCRIBE</td>
<td>8</td>
<td>客户端到服务器</td>
<td>客户端请求订阅</td>
</tr>
<tr>
<td>SUBACK</td>
<td>9</td>
<td>服务器到客户端</td>
<td>订阅请求报文确认</td>
</tr>
<tr>
<td>UNSUBSCRIBE</td>
<td>10</td>
<td>客户端到服务器</td>
<td>客户端请求取消订阅</td>
</tr>
<tr>
<td>UNSUBACK</td>
<td>11</td>
<td>服务器到客户端</td>
<td>取消订阅报文确认</td>
</tr>
<tr>
<td>PINGREQ</td>
<td>12</td>
<td>客户端到服务器</td>
<td>PING 请求（心跳请求）</td>
</tr>
<tr>
<td>PINGRESP</td>
<td>13</td>
<td>服务器到客户端</td>
<td>PING 应答（心跳请求）</td>
</tr>
<tr>
<td>DISCONNECT</td>
<td>14</td>
<td>客户端到服务器</td>
<td>客户端断开连接</td>
</tr>
<tr>
<td>Reserved</td>
<td>15</td>
<td>不可用</td>
<td>保留位</td>
</tr>
</tbody>
</table>
<h4 id="标识位-byte-1-bits-3-0">标识位【byte 1（bits 3~0）】</h4>
<ul>
<li>DUP：控制报文的重复分发标志</li>
<li>QoS：PUBLISH 报文的服务质量等级（00、01、10、11）</li>
<li>RETAIN：PUBLISH 报文的保留标志</li>
</ul>
<table>
<thead>
<tr>
<th>控制报文</th>
<th>固定报头标志</th>
<th>Bit 3</th>
<th>bit 2</th>
<th>bit 1</th>
<th>bit 0</th>
</tr>
</thead>
<tbody>
<tr>
<td>Reserved</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>CONNECT</td>
<td>Reserved</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>CONNACK</td>
<td>Reserved</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>PUBLISH</td>
<td>Used in MQTT 3.1.1</td>
<td>DUP</td>
<td>QoS</td>
<td>QoS</td>
<td>RETAIN</td>
</tr>
<tr>
<td>PUBACK</td>
<td>Reserved</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>PUBREC</td>
<td>Reserved</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>PUBREL</td>
<td>Reserved</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>PUBCOMP</td>
<td>Reserved</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>SUBSCRIBE</td>
<td>Reserved</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>SUBACK</td>
<td>Reserved</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>UNSUBSCRIBE</td>
<td>Reserved</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>UNSUBACK</td>
<td>Reserved</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>PINGREQ</td>
<td>Reserved</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>PINGRESP</td>
<td>Reserved</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>DISCONNECT</td>
<td>Reserved</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>Reserved</td>
<td>Reserved</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="剩余长度">剩余长度</h4>
<p>剩余长度是一个可变字节整数，表示当前控制报文中剩余的字节数，包括可变报头和有效载荷中的数据。</p>
<h3 id="2-3-2-可变头-variable-header">2.3.2 可变头（Variable header）</h3>
<p>可变报头位于固定报头和有效载荷之间，可变报头的内容根据报文类型的不同而不同。通常都包括一个 2 字节的数据包标识字段，这些类型的包有：PUBLISH (QoS &gt; 0)、PUBACK、PUBREC、PUBREL、PUBCOMP、SUBSCRIBE、SUBACK、UNSUBSCRIBE、UNSUBACK</p>
<h3 id="2-3-3-消息体-payload">2.3.3 消息体（Payload）</h3>
<p>Payload 有效载荷位于 MQTT 数据包的第三部分，CONNECT、SUBSCRIBE、SUBACK、UNSUBSCRIBE 这四种类型包含有效载荷。</p>
<ul>
<li>CONNECT 有效载荷内容主要是：客户端的 ClientID、订阅的主题、Message 以及用户名和密码</li>
<li>SUBSCRIBE 有效载荷内容是：主题过滤器指明需要订阅的 Topic 以及 QoS</li>
<li>SUBACK 有效载荷内容是：服务器对于 SUBSCRIBE 所申请的主题及 QoS 进行确认和回复</li>
<li>UNSUBSCRIBE 有效载荷内容是：客户端想要取消订阅的主题过滤器</li>
</ul>
<h1>三、MQTT 工作流程</h1>
<h1>四、MQTT VS Socket</h1>
<p>WebSocket 是一种网络传输协议，位于 OSI 模型的<code>应用层</code>。可在单个 TCP 连接上进行全双工通信，能更好的节省服务器资源和带宽并达到实时通信，客户端和服务器只需要完成<code>一次握手</code>，两者之间就可以创建持久性的连接，并进行<code>双向数据传输</code>。</p>
<p>MQTT 协议是一种消息队列传输协议，位于 OSI 模型的<code>应用层</code>。采用订阅、发布机制，订阅者只接收自己已经订阅的数据，非订阅数据则不接收，既保证了必要的数据的交换，又避免了无效数据造成的储存与处理。</p>
<h2 id="4-1-通信模型不同">4.1 通信模型不同</h2>
<p>MQTT 和 WebSocket 的底层都是使用 TCP 协议确保可靠传输数据，都支撑双向通信。但 WebSocket 是一种简单的报文协议，仅仅定义了<code>会话的发起方式</code>和<code>报文格式及类型</code>，只是在 TCP 协议之上实现了简单的报文通信。而 MQTT 则是一种比较复杂的消息协议，MQTT 不仅规定了具体的协议编码，还规定了客户端和服务器的通信模型。从这个意义上讲，MQTT over WebSocket，即 MQTT 可以工作在 WebSocket 之上。</p>
<h2 id="4-2-报文结构不同">4.2 报文结构不同</h2>
<p>MQTT 和 WebSocket 都使用二进制编码（有别于 HTTP 这一类基于文本编码的协议），但 WebSocket 的报文要远比 MQTT 的简单。</p>
<h2 id="4-3-使用场景不同">4.3 使用场景不同</h2>
<p>MQTT 是为了物联网场景设计的，基于 TCP 的 Pub/Sub（订阅/发布）协议，有许多为物联网优化的特性，比如适应不同网络的 QoS、层级主题、遗言等等。</p>
<p>WebSocket 是为了 HTML5 应用方便与服务器双向通讯而设计的协议，HTTP 握手然后转 TCP 协议，用于取代之前的 Server Push、Comet、长轮询等老旧实现。</p>
<p>两者的交集在于，如何通过 HTML5 应用来作为 MQTT 的客户端，以便接受设备消息或者向设备发送信息。那么此时，MQTT over WebSocket 自然成了最合理的途径了。</p>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>协议</category>
        <category>物联网</category>
      </categories>
      <tags>
        <tag>物联网</tag>
      </tags>
  </entry>
  <entry>
    <title>Memories-大槻真希(大槻マキ)</title>
    <url>/blog/f3109477.html</url>
    <content><![CDATA[<h1>Memories - <ruby>大槻<rp>（</rp><rt>おおつき</rt><rp>）</rp></ruby><ruby>真希<rp>（</rp><rt>まき</rt><rp>）</rp></ruby>（大槻マキ）</h1>
<p><ruby>小<rp>（</rp><rt>ちい</rt><rp>）</rp></ruby>さな<ruby>頃<rp>（</rp><rt>ころ</rt><rp>）</rp></ruby>には<ruby>宝<rp>（</rp><rt>たから</rt><rp>）</rp></ruby>の<ruby>地図<rp>（</rp><rt>ちず</rt><rp>）</rp></ruby>が<br>
小时候藏宝图</p>
<p><ruby>頭<rp>（</rp><rt>あたま</rt><rp>）</rp></ruby>の<ruby>中<rp>（</rp><rt>なか</rt><rp>）</rp></ruby>に<ruby>浮<rp>（</rp><rt>う</rt><rp>）</rp></ruby>かんでいて<br>
总是浮现在脑海中</p>
<p>いつでも<ruby>探<rp>（</rp><rt>さが</rt><rp>）</rp></ruby>した<ruby>キセキ<rp>（</rp><rt>きせき</rt><rp>）</rp></ruby>の<ruby>場所<rp>（</rp><rt>ばしょ</rt><rp>）</rp></ruby>を<br>
永远在寻找奇迹之地</p>
<p><ruby>知<rp>（</rp><rt>し</rt><rp>）</rp></ruby>らない<ruby>誰<rp>（</rp><rt>だれ</rt><rp>）</rp></ruby>かに<ruby>負<rp>（</rp><rt>ま</rt><rp>）</rp></ruby>けないよに<br>
不输给远方的某人</p>
<p><ruby>今<rp>（</rp><rt>いま</rt><rp>）</rp></ruby>ではほこりだらけの<ruby>毎日<rp>（</rp><rt>まいにち</rt><rp>）</rp></ruby><br>
现在的每一天都充满尘埃</p>
<p>いつの<ruby>日<rp>（</rp><rt>ひ</rt><rp>）</rp></ruby>かすべての<br>
等到哪一天这所有的一切</p>
<p><ruby>時<rp>（</rp><rt>とき</rt><rp>）</rp></ruby>に<ruby>身<rp>（</rp><rt>み</rt><rp>）</rp></ruby>を<ruby>委<rp>（</rp><rt>まか</rt><rp>）</rp></ruby>せるだけ<br>
都随风逝去</p>
<p>もしも<ruby>世界<rp>（</rp><rt>せかい</rt><rp>）</rp></ruby>が<ruby>変<rp>（</rp><rt>か</rt><rp>）</rp></ruby>わるのなら<br>
如果世界能够改变</p>
<p><ruby>何<rp>（</rp><rt>なに</rt><rp>）</rp></ruby>も<ruby>知<rp>（</rp><rt>し</rt><rp>）</rp></ruby>らない<ruby>頃<rp>（</rp><rt>ころ</rt><rp>）</rp></ruby>の<ruby>私<rp>（</rp><rt>わたし</rt><rp>）</rp></ruby>に<br>
请带着我回到</p>
<p><ruby>連<rp>（</rp><rt>つ</rt><rp>）</rp></ruby>れていって<br>
一无所知的过去</p>
<p><ruby>思<rp>（</rp><rt>おも</rt><rp>）</rp></ruby>い<ruby>出<rp>（</rp><rt>で</rt><rp>）</rp></ruby>が<ruby>色<rp>（</rp><rt>いろ</rt><rp>）</rp></ruby>あせないように<br>
但愿美好回忆永不退色</p>
<p><ruby>小<rp>（</rp><rt>ちい</rt><rp>）</rp></ruby>さな<ruby>頃<rp>（</rp><rt>ころ</rt><rp>）</rp></ruby>から<ruby>歌<rp>（</rp><rt>うた</rt><rp>）</rp></ruby>を<ruby>唄<rp>（</rp><rt>うた</rt><rp>）</rp></ruby>って<br>
小时候唱起的歌</p>
<p><ruby>夢見<rp>（</rp><rt>ゆめみ</rt><rp>）</rp></ruby>る<ruby>心<rp>（</rp><rt>こころ</rt><rp>）</rp></ruby>あたためてた<br>
温暖着梦想的心</p>
<p>みんなで<ruby>真似<rp>（</rp><rt>まね</rt><rp>）</rp></ruby>した<br>
大家模仿过的</p>
<p><ruby>秘密<rp>（</rp><rt>ひみつ</rt><rp>）</rp></ruby>の<ruby>メロディー<rp>（</rp><rt>めろでぃー</rt><rp>）</rp></ruby><br>
秘密的旋律</p>
<p><ruby>今度<rp>（</rp><rt>こんど</rt><rp>）</rp></ruby>は<ruby>上手<rp>（</rp><rt>じょうず</rt><rp>）</rp></ruby>に<ruby>聞<rp>（</rp><rt>き</rt><rp>）</rp></ruby>こえるように<br>
下一次一定会更加的动听</p>
<p><ruby>今<rp>（</rp><rt>いま</rt><rp>）</rp></ruby>ではため<ruby>息<rp>（</rp><rt>いき</rt><rp>）</rp></ruby>ついてばかりで<br>
现在的我仍在不断叹息</p>
<p><ruby>誰<rp>（</rp><rt>だれ</rt><rp>）</rp></ruby>もまだ<ruby>本当<rp>（</rp><rt>ほんとう</rt><rp>）</rp></ruby>の<br>
我们都还未抓住</p>
<p><ruby>夢<rp>（</rp><rt>ゆめ</rt><rp>）</rp></ruby>さえつかめないまま<br>
各自真正的梦想</p>
<p>もしも<ruby>時代<rp>（</rp><rt>じだい</rt><rp>）</rp></ruby>が<ruby>戻<rp>（</rp><rt>もど</rt><rp>）</rp></ruby>るのなら<br>
如果时间可以倒流</p>
<p><ruby>涙<rp>（</rp><rt>なみだ</rt><rp>）</rp></ruby>を<ruby>知<rp>（</rp><rt>し</rt><rp>）</rp></ruby>った<ruby>頃<rp>（</rp><rt>ころ</rt><rp>）</rp></ruby>の<ruby>私<rp>（</rp><rt>わたし</rt><rp>）</rp></ruby>に<br>
请带着我回到</p>
<p><ruby>連<rp>（</rp><rt>つ</rt><rp>）</rp></ruby>れていって<br>
初识泪水的那一刻</p>
<p>せつなさが<ruby>追<rp>（</rp><rt>お</rt><rp>）</rp></ruby>いつかないように<br>
但愿可以成功摆脱悲伤</p>
<p>もしも<ruby>世界<rp>（</rp><rt>せかい</rt><rp>）</rp></ruby>が<ruby>変<rp>（</rp><rt>か</rt><rp>）</rp></ruby>わるのなら<br>
如果世界能够改变</p>
<p><ruby>何<rp>（</rp><rt>なに</rt><rp>）</rp></ruby>も<ruby>知<rp>（</rp><rt>し</rt><rp>）</rp></ruby>らない<ruby>頃<rp>（</rp><rt>ころ</rt><rp>）</rp></ruby>の<ruby>私<rp>（</rp><rt>わたし</rt><rp>）</rp></ruby>に<br>
请带着我回到</p>
<p><ruby>連<rp>（</rp><rt>つ</rt><rp>）</rp></ruby>れていって<br>
一无所知的过去</p>
<p><ruby>思<rp>（</rp><rt>おも</rt><rp>）</rp></ruby>い<ruby>出<rp>（</rp><rt>で</rt><rp>）</rp></ruby>が<ruby>色<rp>（</rp><rt>いろ</rt><rp>）</rp></ruby>あせないように<br>
但愿美好回忆永不退色</p>
<p><ruby>連<rp>（</rp><rt>つ</rt><rp>）</rp></ruby>れていって<br>
请带我走吧</p>
<p>せつなさが<ruby>追<rp>（</rp><rt>お</rt><rp>）</rp></ruby>いつかないように<br>
但愿可以成功摆脱悲伤</p>
<p>【<ruby>终<rp>（</rp><rt>お</rt><rp>）</rp></ruby>わった】</p>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>生活</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL之CRUD</title>
    <url>/blog/45b6c374.html</url>
    <content><![CDATA[<h1>一、查询库中所有表和表中所有字段</h1>
<h2 id="查询中所有的表和表注释">查询中所有的表和表注释</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TABLE_NAME, TABLE_COMMENT</span><br><span class="line"><span class="keyword">FROM</span> INFORMATION_SCHEMA.TABLES</span><br><span class="line"><span class="keyword">WHERE</span> table_schema <span class="operator">=</span> <span class="string">&#x27;库名&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="查询表中所有字段和注释">查询表中所有字段和注释</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name, column_comment</span><br><span class="line"><span class="keyword">FROM</span> INFORMATION_SCHEMA.COLUMNS</span><br><span class="line"><span class="keyword">WHERE</span> table_name <span class="operator">=</span> <span class="string">&#x27;表名&#x27;</span> <span class="keyword">AND</span> table_schema <span class="operator">=</span> <span class="string">&#x27;库名&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h1>二、对数据的增删改</h1>
<h2 id="增加">增加</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tabel_name(column_a, column_b, ...) <span class="keyword">VALUES</span>(value_a, value_b, ...);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> newemp(empno, ename, job, mgr, hiredate, sal, comm, deptno) <span class="keyword">VALUES</span>(<span class="number">7933</span>, <span class="string">&#x27;zs&#x27;</span>, <span class="string">&#x27;CLERK&#x27;</span>, <span class="string">&#x27;7902&#x27;</span>, <span class="string">&#x27;1982-01-24&#x27;</span>, <span class="number">2000</span>, <span class="keyword">NULL</span>, <span class="number">30</span>);</span><br></pre></td></tr></table></figure>
<h2 id="批量插入">批量插入</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> newemp(empno, ename, job, mgr, hiredate, sal, comm, deptno) </span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">7933</span>, <span class="string">&#x27;zs&#x27;</span>, <span class="string">&#x27;CLERK&#x27;</span>, <span class="string">&#x27;7902&#x27;</span>, <span class="string">&#x27;1982-01-24&#x27;</span>, <span class="number">2000</span>, <span class="keyword">NULL</span>, <span class="number">30</span>),</span><br><span class="line">      (<span class="number">7934</span>, <span class="string">&#x27;ls&#x27;</span>, <span class="string">&#x27;CLERK&#x27;</span>, <span class="string">&#x27;7903&#x27;</span>, <span class="string">&#x27;1983-10-24&#x27;</span>, <span class="number">2000</span>, <span class="keyword">NULL</span>, <span class="number">30</span>),</span><br><span class="line">      (<span class="number">7935</span>, <span class="string">&#x27;ww&#x27;</span>, <span class="string">&#x27;CLERK&#x27;</span>, <span class="string">&#x27;7904&#x27;</span>, <span class="string">&#x27;1984-01-24&#x27;</span>, <span class="number">2000</span>, <span class="keyword">NULL</span>, <span class="number">30</span>);</span><br></pre></td></tr></table></figure>
<h2 id="避免重复值插入">避免重复值插入</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ON DUPLICATE KEY：针对 id 和 唯一索引。插入失败则会更新原数据</span></span><br><span class="line"><span class="comment">-- 依赖索引，跳过且update重复数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">table</span> (a,b,c) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) <span class="keyword">ON</span> DUPLICATE KEY <span class="keyword">UPDATE</span> c<span class="operator">=</span>c<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- insert ignore：判断的是主键或者索引是否重复，重复着不处理（不会报错）</span></span><br><span class="line"><span class="comment">-- 依赖索引，跳过</span></span><br><span class="line"><span class="keyword">INSERT</span> IGNORE <span class="keyword">INTO</span> log_domain (id) <span class="keyword">VALUES</span>(<span class="number">45</span>);</span><br><span class="line"><span class="keyword">INSERT</span> IGNORE <span class="keyword">INTO</span> `student` (`id`, `sno`, `sname`, `birthday`) <span class="keyword">VALUES</span>(<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;2018005&#x27;</span>,<span class="string">&#x27;Amy&#x27;</span>,<span class="string">&#x27;2011-11-11&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- replace into：等同于先删除再插入，所以每一次影响记录为两条。也是针对索引</span></span><br><span class="line"><span class="comment">-- 依赖索引，删除重复数据然后insert新数据</span></span><br><span class="line">REPLACE <span class="keyword">INTO</span> log_domain (NAME) <span class="keyword">VALUES</span>(&quot;aaa&quot;);</span><br></pre></td></tr></table></figure>
<h2 id="删除">删除</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> ...;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> newemp <span class="keyword">WHERE</span> empno<span class="operator">=</span><span class="number">7899</span>;</span><br></pre></td></tr></table></figure>
<h2 id="修改">修改</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> table_name <span class="keyword">SET</span> column_a<span class="operator">=</span>value_a, column_b<span class="operator">=</span>value_b, ... <span class="keyword">WHERE</span> ...;</span><br><span class="line"><span class="keyword">UPDATE</span> newemp <span class="keyword">SET</span> SAL<span class="operator">=</span>SAL<span class="operator">+</span><span class="number">5000</span> <span class="keyword">WHERE</span> ENAME<span class="operator">=</span><span class="string">&#x27;梁%&#x27;</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">month</span>(BIR);</span><br></pre></td></tr></table></figure>
<h1>三、对数据表的增删改</h1>
<h2 id="增加">增加</h2>
<ul>
<li>增加数据表字段</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> 新字段名称 数据类型;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> fasp_t_pm_dept_agency <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> IS_DELETED <span class="type">INTEGER</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;0-未删除；1-删除&#x27;</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> (</span><br><span class="line">    username <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>, </span><br><span class="line">    address <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;地址&#x27;</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>增加主键约束</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 主键名称 <span class="keyword">PRIMARY</span> KEY(设主键的列名);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> pk_eno <span class="keyword">PRIMARY</span> KEY(eno);</span><br></pre></td></tr></table></figure>
<ul>
<li>增加外键约束</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 建表前</span></span><br><span class="line"><span class="keyword">FOREIGN</span> KEY(从表字段名) <span class="keyword">REFERENCES</span> 主表名(主表字段名);</span><br><span class="line"><span class="comment">-- 建表后</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 从表名 <span class="keyword">CONSTRAINT</span> 外键名 <span class="keyword">FOREIGN</span> KEY(从表字段) <span class="keyword">REFERENCES</span> 主表名(主表字段名);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> dept <span class="keyword">CONSTRAINT</span> fk_employee_dept <span class="keyword">FOREIGN</span> KEY(dept_no) <span class="keyword">REFERENCES</span> employee(dept_no);</span><br></pre></td></tr></table></figure>
<h2 id="删除">删除</h2>
<ul>
<li>删除数据表字段</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> 字段名;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp <span class="keyword">DROP</span> tel;</span><br></pre></td></tr></table></figure>
<ul>
<li>删除主键约束</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY 外键约束名称;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY fk_emp_dept;</span><br></pre></td></tr></table></figure>
<ul>
<li>删除外键约束</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> 字段名;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> employee <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> fk_employee_dept;</span><br></pre></td></tr></table></figure>
<h2 id="修改">修改</h2>
<p>注：如果 UPDATE 语句中 WHERE 条件走的是索引，则对该表施加的就是行锁；如果 SQL 语句没有走索引，则会全表扫描，行锁无法实现（行锁是通过索引加载的），取而代之的是表锁，即在此 UPDATE  语句执行完之前，任何对该表的 UPDATE 操作都是不允许的</p>
<ul>
<li>修改表名</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 旧表名称 RENAME 新表名称;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> employee RENAME emp;</span><br></pre></td></tr></table></figure>
<ul>
<li>修改字段的数据类型</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 MODIFY 字段名称 新数据类型;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp MODIFY salary <span class="type">INT</span>(<span class="number">11</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>修改字段名称</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 CHANGE 旧字段名称  新字段名称  新数据类型;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp CHANGE name empName <span class="type">VARCHAR</span>(<span class="number">20</span>);</span><br></pre></td></tr></table></figure>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL之Date</title>
    <url>/blog/3ebaa5b9.html</url>
    <content><![CDATA[<blockquote>
<p>天 - 周 - 月 - 季度 - 年</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> NOW(); <span class="comment">-- 2021-02-20 18:21:22</span></span><br><span class="line"><span class="keyword">SELECT</span> CURDATE(); <span class="comment">-- 2021-02-20</span></span><br><span class="line"><span class="keyword">SELECT</span> CURTIME(); <span class="comment">-- 18:21:22</span></span><br><span class="line">DATE_FORMAT <span class="comment">-- 日期格式化</span></span><br><span class="line">DATE_SUB <span class="comment">-- 日期减去指定的时间间隔</span></span><br><span class="line">DATE_ADD <span class="comment">-- 日期添加指定的时间间隔</span></span><br><span class="line"><span class="comment">-- 今天</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> TO_DAYS(column_name) <span class="operator">=</span> TO_DAYS(NOW());</span><br><span class="line"><span class="comment">-- 昨天</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> TO_DAYS(NOW()) <span class="operator">-</span> TO_DAYS(column_name) <span class="operator">&lt;=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 七天内的数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> DATE_SUB(CURDATE(), <span class="type">INTERVAL</span> <span class="number">7</span> <span class="keyword">DAY</span>) <span class="operator">&lt;=</span> <span class="type">DATE</span>(column_name);</span><br><span class="line"><span class="comment">-- 30天内的数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> DATE_SUB(CURDATE(), <span class="type">INTERVAL</span> <span class="number">30</span> <span class="keyword">DAY</span>) <span class="operator">&lt;=</span> <span class="type">DATE</span>(column_name);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询本周的数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> YEARWEEK(DATE_FORMAT(column_name, <span class="string">&#x27;%Y-%m-%d&#x27;</span>)) <span class="operator">=</span> YEARWEEK(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> WEEKOFYEAR(DATE_FORMAT(column_name, <span class="string">&#x27;%y-%m-%d&#x27;</span>)) <span class="operator">=</span> WEEKOFYEAR(NOW())</span><br><span class="line"><span class="comment">-- 查询上周的数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> YEARWEEK(DATE_FORMAT(column_name, <span class="string">&#x27;%Y-%m-%d&#x27;</span>)) <span class="operator">=</span> YEARWEEK(NOW()) <span class="operator">-</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询本月的数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> DATE_FORMAT(column_name, <span class="string">&#x27;%Y%m&#x27;</span>) <span class="operator">=</span> DATE_FORMAT(CURDATE(), <span class="string">&#x27;%Y%m&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> DATE_FORMAT(column_name, <span class="string">&#x27;%Y-%m&#x27;</span>) <span class="operator">=</span> DATE_FORMAT(NOW(), <span class="string">&#x27;%Y-%m&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="keyword">YEAR</span>(DATE_FORMAT(column_name, <span class="string">&#x27;%y-%m-%d&#x27;</span>)) <span class="operator">=</span> <span class="keyword">YEAR</span>(NOW()) <span class="keyword">AND</span> <span class="keyword">MONTH</span>(DATE_FORMAT(column_name, <span class="string">&#x27;%y-%m-%d&#x27;</span>)) <span class="operator">=</span> <span class="keyword">MONTH</span>(NOW());</span><br><span class="line"><span class="comment">-- 查询本月的数据（忽略年度的月度数据）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="keyword">MONTH</span>(DATE_FORMAT(column_name, <span class="string">&#x27;%y-%m-%d&#x27;</span>)) <span class="operator">=</span> <span class="keyword">MONTH</span>(NOW());</span><br><span class="line"><span class="comment">-- 查询上个月的数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> PERIOD_DIFF(DATE_FORMAT(NOW(), <span class="string">&#x27;%Y%m&#x27;</span>), DATE_FORMAT(column_name, <span class="string">&#x27;%Y%m&#x27;</span>)) <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> DATE_FORMAT(column_name, <span class="string">&#x27;%Y-%m&#x27;</span>) <span class="operator">=</span> DATE_FORMAT(DATE_SUB(CURDATE(), <span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">MONTH</span>), <span class="string">&#x27;%Y-%m&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> DATE_FORMAT(column_name, <span class="string">&#x27;%Y%m&#x27;</span>) <span class="operator">=</span> DATE_FORMAT(DATE_SUB(CURDATE(), <span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">MONTH</span>), <span class="string">&#x27;%Y%m&#x27;</span>);</span><br><span class="line"><span class="comment">-- 查询某年某月数据（2017年10月份）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> DATE_FORMAT(column_name, <span class="string">&#x27;%Y-%m&#x27;</span>) <span class="operator">=</span> <span class="string">&#x27;2017-10&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> DATE_FORMAT(column_name, <span class="string">&#x27;%Y-%m&#x27;</span>) <span class="operator">=</span> DATE_FORMAT(<span class="string">&#x27;2017-10-05&#x27;</span>, <span class="string">&#x27;%Y-%m&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询本季度数据（忽略年度的季度数据）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> QUARTER(column_name) <span class="operator">=</span> QUARTER(NOW());</span><br><span class="line"><span class="comment">-- 查询上季度数据（忽略年度的季度数据）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> QUARTER(column_name) <span class="operator">=</span> QUARTER(DATE_SUB(NOW(), <span class="type">INTERVAL</span> <span class="number">1</span> QUARTER));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询半年内的数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> column_name <span class="keyword">BETWEEN</span> DATE_SUB(NOW(), <span class="type">INTERVAL</span> <span class="number">6</span> <span class="keyword">MONTH</span>) <span class="keyword">AND</span> NOW();</span><br><span class="line"><span class="comment">-- 查询本年的数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="keyword">YEAR</span>(column_name) <span class="operator">=</span> <span class="keyword">YEAR</span>(NOW());</span><br><span class="line"><span class="comment">-- 查询去年的数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="keyword">YEAR</span>(column_name) <span class="operator">=</span> <span class="keyword">YEAR</span>(DATE_SUB(NOW(), <span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">YEAR</span>));</span><br></pre></td></tr></table></figure>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty介绍</title>
    <url>/blog/ccddcb1a.html</url>
    <content><![CDATA[<blockquote>
<p><a href="https://github.com/netty/netty">Github 项目地址</a></p>
</blockquote>
<h1>一、Netty 是什么</h1>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/aa911f591044.png" alt=""></p>
<p>Netty 是由 JBOSS 提供的一个 <strong>Java 开源框架</strong>，现为 Github 上的独立项目。Netty 提供异步的、事件驱动的网络应用程序框架和工具，用以快速开发高性能、高可靠性的网络服务器和客户端程序。</p>
<p>也就是说，Netty 是一个<strong>基于 NIO 的客户、服务器端的编程框架</strong>，使用 Netty 可以确保你快速和简单的开发出一个网络应用，例如实现了某种协议的客户、服务端应用。Netty 相当于简化和流线化了网络应用的编程开发过程，例如：基于 TCP 和 UDP 的 Socket 服务开发。</p>
<p>“快速”和“简单”并不用产生维护性或性能上的问题。Netty 是一个吸收了多种协议（包括 FTP、SMTP、HTTP 等各种二进制文本协议）的实现经验，并经过相当精心设计的项目。最终，Netty 成功的找到了一种方式，在保证易于开发的同时还保证了其应用的性能，稳定性和伸缩性。</p>
<h1>二、BIO 和 NIO 和 AIO</h1>
<blockquote>
<p>摘录自博客：</p>
<p><a href="https://juejin.cn/post/6844903985158045703">如何理解BIO、NIO、AIO的区别？ - 掘金 (juejin.cn)</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/386745556">这是我看过对bio，nio，aio解释的最透彻的文章！！！ - 知乎 (zhihu.com)</a></p>
</blockquote>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/BIO%E3%80%81NIO%E3%80%81AIO.jpg" alt=""></p>
<h2 id="2-1-java-中的-io-原理">2.1 Java 中的 IO 原理</h2>
<p>首先 Java 中的 IO 都是依赖操作系统内核进行的，我们程序中的 IO 读写其实调用的是操作系统内核中的 read&amp;write 两大系统调用。</p>
<p>那内核是如何进行 IO 交互的呢？</p>
<ol>
<li>网卡收到经过网线传来的网络数据，并将网络数据写到内存中。</li>
<li>当网卡把数据写入到内存后，网卡向 CPU 发出一个中断信号，操作系统便能得知有新数据到来，再通过网卡中断程序去处理数据。</li>
<li>将内存中的网络数据写入到对应 socket 的接收缓冲区中。</li>
<li>当接收缓冲区的数据写好之后，应用程序开始进行数据处理。</li>
</ol>
<p>对应抽象到 Java 的 socket 代码简单示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SocketServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 监听指定的端口</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">8080</span>;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(port);</span><br><span class="line">        <span class="comment">// server将一直等待连接的到来</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> server.accept();</span><br><span class="line">        <span class="comment">// 建立好连接后，从socket中获取输入流，并建立缓冲区进行读取</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = inputStream.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//获取数据进行处理</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="number">0</span>, len, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// socket、server，流关闭操作，省略不表</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到这个过程和底层内核的网络 IO 很类似，主要体现在 accept() 等待从网络中的请求到来然后 bytes[] 数组作为缓冲区等待数据填满后进行处理。而 BIO、NIO、AIO 之间的区别就在于这些操作是同步还是异步，阻塞还是非阻塞。</p>
<p>所以我们引出同步异步，阻塞与非阻塞的概念。</p>
<h2 id="2-2-同步与异步">2.2 同步与异步</h2>
<p>同步和异步指的是一个执行流程中每个方法是否必须依赖前一个方法完成后才可以继续执行。假设我们的执行流程中：依次是方法一和方法二。</p>
<p>同步指的是调用一旦开始，调用者必须等到方法调用返回后，才能继续后续的行为。即方法二一定要等到方法一执行完成后才可以执行。</p>
<p>异步指的是调用立刻返回，调用者不必等待方法内的代码执行结束，就可以继续后续的行为。（具体方法内的代码交由另外的线程执行完成后，可能会进行回调）。即执行方法一的时候，直接交给其他线程执行，不由主线程执行，也就不会阻塞主线程，所以方法二不必等到方法一完成即可开始执行。</p>
<p>同步与异步关注的是方法的执行方是主线程还是其他线程，主线程的话需要等待方法执行完成，其他线程的话无需等待立刻返回方法调用，主线程可以直接执行接下来的代码。</p>
<p><a href="https://www.zhihu.com/question/452184164/answer/1930227093">同步与异步</a>是从多个线程之间的协调来实现效率差异。</p>
<blockquote>
<p>为什么需要异步呢？笔者认为异步的本质就是为了解决主线程的阻塞，所以网上很多讨论把同步异步、阻塞非阻塞进行了四种组合，其中一种就有异步阻塞这一情形，如果异步也是阻塞的？那为什么要特地进行异步操作呢？</p>
</blockquote>
<h2 id="2-3-阻塞与非阻塞">2.3 阻塞与非阻塞</h2>
<p>阻塞与非阻塞指的是单个线程内遇到同步等待时，是否在原地不做任何操作。</p>
<p>阻塞指的是遇到同步等待后，一直在原地等待同步方法处理完成。</p>
<p>非阻塞指的是遇到同步等待，不在原地等待，先去做其他的操作，隔段时间再来观察同步方法是否完成。</p>
<p>阻塞与非阻塞关注的是线程是否在原地等待。</p>
<blockquote>
<p>笔者认为阻塞和非阻塞仅能与同步进行组合。而异步天然就是非阻塞的，而这个非阻塞是对主线程而言。（可能有人认为异步方法里面放入阻塞操作的话就是异步阻塞，但是思考一下，正是因为是阻塞操作所以才会将它放入异步方法中，不要阻塞主线程）</p>
</blockquote>
<h2 id="2-4-例子讲解">2.4 例子讲解</h2>
<blockquote>
<p>海底捞很好吃，但是经常要排队。我们就以生活中的这个例子进行讲解。</p>
</blockquote>
<ul>
<li>A 顾客去吃海底捞，就这样干坐着等了一小时，然后才开始吃火锅。(BIO)</li>
<li>B 顾客去吃海底捞，他一看要等挺久，于是去逛商场，每次逛一会就跑回来看有没有排到他。于是他最后既购了物，又吃上海底捞了。（NIO）</li>
<li>C 顾客去吃海底捞，由于他是高级会员，所以店长说，你去商场随便玩吧，等下有位置，我立马打电话给你。于是 C 顾客不用干坐着等，也不用每过一会儿就跑回来看有没有等到，最后也吃上了海底捞（AIO）</li>
</ul>
<blockquote>
<p>哪种方式更有效率呢？是不是一目了然呢？</p>
</blockquote>
<h2 id="2-5-bio">2.5 BIO</h2>
<p>BIO 全称是 Blocking IO，是 JDK1.4 之前的传统 IO 模型，本身是同步阻塞模式。线程发起 IO 请求后，一直阻塞 IO，直到缓冲区数据就绪后，再进入下一步操作。针对网络通信都是一请求一应答的方式，虽然简化了上层的应用开发，但在性能和可靠性方面存在着巨大瓶颈，试想一下如果每个请求都需要新建一个线程来专门处理，那么在高并发的场景下，机器资源很快就会被耗尽。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/BIO%E9%80%9A%E4%BF%A1%E6%A8%A1%E5%9E%8B%E5%9B%BE.jpg" alt=""></p>
<h2 id="2-6-nio">2.6 NIO</h2>
<p>NIO 也叫 Non-Blocking IO 是同步非阻塞的 IO 模型。线程发起 IO 请求后，立即返回（非阻塞 IO）。同步指的是必须等待 IO 缓冲区内的数据就绪，而非阻塞指的是，用户线程不原地等待 IO 缓冲区，可以先做一些其他操作，但是要定时轮询检查 IO 缓冲区数据是否就绪。</p>
<p>Java 中的 NIO 是 new IO 的意思。其实是 NIO 加上 IO 多路复用技术。普通的 NIO 是线程轮询查看一个 IO 缓冲区是否就绪，而 Java 中的 new IO 指的是线程轮询地去查看一堆 IO 缓冲区中哪些就绪，这是一种 IO 多路复用的思想。IO 多路复用模型中，将检查 IO 数据是否就绪的任务，交给系统级别的 select 或 epoll 模型，由系统进行监控，减轻用户线程负担。</p>
<p>NIO 主要有 buffer、channel、selector 三种技术的整合，通过零拷贝的 buffer 取得数据，每一个客户端通过 channel 在 selector（多路复用器）上进行注册。服务端不断轮询 channel 来获取客户端的信息。channel 上有 connect、accept（阻塞）、read（可读）、write（可写）四种状态标识。根据标识来进行后续操作。所以一个服务端可接收无限多的 channel。不需要新开一个线程。大大提升了性能。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/NIO%E9%80%9A%E4%BF%A1%E6%A8%A1%E5%9E%8B%E5%9B%BE.jpg" alt=""></p>
<blockquote>
<p>NIO 的三大核心 API：Buffer、Channel、Selector</p>
</blockquote>
<h3 id="原生-nio-的一些缺点">原生 NIO 的一些缺点</h3>
<p>JDK 原生的 NIO 并不好用，除了编程复杂、编程模型难之外，它还有以下让人诟病的问题：</p>
<ul>
<li>JDK 的 NIO 底层由 epoll 实现，该实现饱受诟病的空轮询 BUG 会导致 CPU 飙升 100%</li>
<li>项目庞大后，自行实现的 NIO 很容易出现各类 BUG，维护成本较高</li>
</ul>
<p><strong>Netty 的出现很大程度上改善了 JDK 原生 NIO 所存在的一些让人难以忍受的问题。</strong></p>
<h2 id="2-7-aio">2.7 AIO</h2>
<p>AIO 是真正意义上的异步非阻塞 IO 模型。上述 NIO 实现中，需要用户线程定时轮询，去检查 IO 缓冲区数据是否就绪，占用应用程序线程资源，其实轮询相当于还是阻塞的，并非真正解放当前线程，因为它还是需要去查询哪些 IO 就绪。而真正的理想的异步非阻塞 IO 应该让内核系统完成，用户线程只需要告诉内核，当缓冲区就绪后，通知我或者执行我交给你的回调函数。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/v2-5ccdc3d77174498be63efffc0e4f7783_r.jpg" alt=""></p>
<p>AIO 可以做到真正的异步的操作，但实现起来比较复杂，支持纯异步 IO 的操作系统非常少，目前也就 windows 是 IOCP 技术实现了，而在 Linux 上，底层还是是使用的 epoll 实现的。</p>
<p>与 NIO 不同，当进行读写操作时，只需直接调用 API 的 read 或 write 方法即可。这两种方法均为异步的，对于读操作而言，当有流可读取时，操作系统会将可读的流传入 read 方法的缓冲区，并通知应用程序；对于写操作而言，当操作系统将 write 方法传递的流写入完毕时，操作系统主动通知应用程序。即可以理解为， read/write 方法都是异步的，完成后会主动调用回调函数。 在 JDK1.7 中，这部分内容成为 AIO。</p>
<h2 id="2-8-适用场景分析">2.8 适用场景分析</h2>
<p>BIO 方式适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4 以前的唯一选择，但程序直观简单易理解。</p>
<p>NIO 方式适用于连接数目多且连接比较短（轻操作）的架构，比如聊天服务器，并发局限于应用中，编程比较复杂，JDK1.4 开始支持。</p>
<p>AIO 方式使用于连接数目多且连接比较长（重操作）的架构，比如相册服务器，充分调用 OS 参与并发操作，编程比较复杂，JDK7 开始支持。</p>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Netty</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Netty</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx介绍</title>
    <url>/blog/deab9856.html</url>
    <content><![CDATA[<h1>一、Nginx 是什么</h1>
<p>Nginx 是一个 web 服务器，也可以用来做【负载均衡】及【反向代理】使用，目前使用最多的就是负载均衡。</p>
<h2 id="负载均衡">负载均衡</h2>
<p>负载均衡就是把请求分摊到集群的多个服务上执行，例如在那个集约化改造项目的时候，我们就使用了 Nginx 的负载均衡功能，然后使用的是 ip_hash 的策略，保证每个访客访问的是同一个服务器，由此解决了 session 的问题。</p>
<h2 id="反向代理">反向代理</h2>
<p>反向代理就是用户只需要把请求发给特定的反向代理服务器，由 Nginx 完成对请求的分发处理，例如一个商场项目，分为商品（shopping）、订单（order）、交易（business）等服务，但是对客户端来说只需要正常的访问，然后在 url 中标识要请求的服务即可。</p>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty学习</title>
    <url>/blog/cfd68dd0.html</url>
    <content><![CDATA[<h1>一、Buffer（缓冲区）</h1>
<p>IO 面向流（Stream oriented），NIO 面向缓冲区（Buffer oriented）。</p>
<p>Buffer 是一个对象，它包含一些要写入或者要读出的数据。在面向流的 I/O 中可以将数据直接写入或者将数据直接读到 Stream 对象中。虽然 Stream 中也有 Buffer 开头的扩展类，但只是流的包装类，还是从流读到缓冲区，而 NIO 却是直接读到 Buffer 中进行操作。</p>
<p>在 NIO 厍中，所有数据都是用缓冲区处理的。在读取数据时，它是直接读到缓冲区中的；在写入数据时，写入到缓冲区中。任何时候访问 NIO 中的数据，都是通过缓冲区进行操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Buffer</span> &#123;</span><br><span class="line">    <span class="comment">// 关系: mark &lt;= position &lt;= limit &lt;= capacity</span></span><br><span class="line">    <span class="comment">// 标记字节内容中的某个元素，配合reset()方法可以从这个标记的位置反复读取内容</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">mark</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 下一个要被读写的byte元素的下标索引</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">position</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 缓冲区中第一个不能读写的元素的数组下标索引，也可以认为是缓冲区中实际元素的数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> limit;</span><br><span class="line">    <span class="comment">// 缓冲区能够容纳元素的最大数量，这个值在缓冲区创建时被设定，而且不能够改变</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> capacity;</span><br><span class="line">    <span class="type">long</span> address; <span class="comment">// Used only by direct buffers，直接内存的地址</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ……</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="1-1-bytebuffer">1.1 ByteBuffer</h2>
<p>最常用的缓冲区是 ByteBuffer，一个 ByteBuffer 提供了一组功能用于操作 byte 数组。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ByteBuffer</span> <span class="keyword">extends</span> <span class="title class_">Buffer</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;ByteBuffer&gt; &#123;</span><br><span class="line">    <span class="comment">// 仅限堆内内存使用</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">byte</span>[] hb;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> offset;</span><br><span class="line">    <span class="type">boolean</span> isReadOnly;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="1-2-bytebuffer-api">1.2 ByteBuffer.API</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 申请堆外内存（直接内存，少一次拷贝，读写效率高，分配效率低，不受 GC 影响）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ByteBuffer <span class="title function_">allocateDirect</span><span class="params">(<span class="type">int</span> capacity)</span></span><br><span class="line"><span class="comment">// 申请堆内内存（读写效率低，分配效率高，受到 GC 的影响）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ByteBuffer <span class="title function_">allocate</span><span class="params">(<span class="type">int</span> capacity)</span> </span><br><span class="line"><span class="comment">// 原始字节包装成ByteBuffer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ByteBuffer <span class="title function_">wrap</span><span class="params">(<span class="type">byte</span>[] array, <span class="type">int</span> offset, <span class="type">int</span> length)</span></span><br><span class="line"><span class="comment">// 原始字节包装成ByteBuffer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ByteBuffer <span class="title function_">wrap</span><span class="params">(<span class="type">byte</span>[] array)</span></span><br><span class="line"><span class="comment">// 创建共享此缓冲区内容的新字节缓冲区</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title function_">duplicate</span><span class="params">()</span></span><br><span class="line"><span class="comment">// 分片，创建一个新的字节缓冲区</span></span><br><span class="line"><span class="comment">// 新ByteBuffer的开始位置是此缓冲区的当前位置position</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title function_">slice</span><span class="params">()</span></span><br><span class="line"><span class="comment">// 获取字节内容</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">byte</span> <span class="title function_">get</span><span class="params">()</span></span><br><span class="line"><span class="comment">// 从ByteBuffer偏移offset的位置，获取length长的字节数组，然后返回当前ByteBuffer对象</span></span><br><span class="line"><span class="keyword">public</span> ByteBuffer <span class="title function_">get</span><span class="params">(<span class="type">byte</span>[] dst, <span class="type">int</span> offset, <span class="type">int</span> length)</span></span><br><span class="line"><span class="comment">// 设置byte内存</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title function_">put</span><span class="params">(<span class="type">byte</span> b)</span>;</span><br><span class="line"><span class="comment">// 以offset为起始位置设置length长src的内容，并返回当前ByteBuffer对象</span></span><br><span class="line"><span class="keyword">public</span> ByteBuffer <span class="title function_">put</span><span class="params">(<span class="type">byte</span>[] src, <span class="type">int</span> offset, <span class="type">int</span> length)</span>;</span><br><span class="line"><span class="comment">// 将没有读完的数据移到到缓冲区的初始位置，position设置为最后一没读字节数据的下个索引，limit重置为capacity</span></span><br><span class="line"><span class="comment">// 读-&gt;写模式，相当于flip的反向操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title function_">compact</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 是否是直接内存</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">boolean</span> <span class="title function_">isDirect</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 转换缓冲区为写模式</span></span><br><span class="line"><span class="keyword">public</span> ByteBuffer <span class="title function_">clear</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>
<ol>
<li>创建大小为 10 的 ByteBuffer 对象</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ByteBuffer</span> <span class="variable">bf</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">10</span>);</span><br></pre></td></tr></table></figure>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1943529272.jpg" alt=""></p>
<ol start="2">
<li>写入数据</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ByteBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">buf.put(<span class="string">&quot;csc&quot;</span>.getBytes());</span><br></pre></td></tr></table></figure>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/2064948393.jpg" alt=""></p>
<ol start="3">
<li>调用 flip 转换缓冲区为读模式</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">buf.flip();</span><br></pre></td></tr></table></figure>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/L2RlZmF1bHQvaW5.jpg" alt=""></p>
<ol start="4">
<li>读取缓冲区中到内容，buf.get()</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println((<span class="type">char</span>) buf.get());</span><br></pre></td></tr></table></figure>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/EwTmpOa09HRmhZVG.jpg" alt=""></p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/pT0RJME5qSm1Zemsw.jpg" alt=""></p>
<ol start="5">
<li>调用 clear() 或 compact() 转换缓冲区为写模式，循环至步骤 1</li>
</ol>
<p>除了 ByteBuffer，还有其他的一些缓冲区，事实上，每一种 Java 基本类型（除了 Boolean 类型）都对应有一种缓冲区。</p>
<h2 id="1-3-scattering-reads-分散读取">1.3 Scattering Reads（分散读取）</h2>
<p>需要在已知所需文本信息长度的前提下，将文本分割后，分散填充至不同的 buffer 中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 读取一个文本文件 HelloWord.txt，然后将数据填充至多个 buffer</span></span><br><span class="line"><span class="keyword">try</span> (<span class="type">RandomAccessFile</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="string">&quot;HelloWorld.txt&quot;</span>, <span class="string">&quot;rw&quot;</span>)) &#123;</span><br><span class="line">	<span class="type">FileChannel</span> <span class="variable">channel</span> <span class="operator">=</span> file.getChannel();</span><br><span class="line">	<span class="type">ByteBuffer</span> <span class="variable">bba</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">3</span>);</span><br><span class="line">	<span class="type">ByteBuffer</span> <span class="variable">bbb</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">3</span>);</span><br><span class="line">	<span class="type">ByteBuffer</span> <span class="variable">bbc</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">5</span>);</span><br><span class="line">	channel.read(<span class="keyword">new</span> <span class="title class_">ByteBuffer</span>[]&#123;bba, bbb, bbc&#125;);</span><br><span class="line">	bba.flip();</span><br><span class="line">	bbb.flip();</span><br><span class="line">	bbc.flip();</span><br><span class="line">	debugAll(bba);</span><br><span class="line">	debugAll(bbb);</span><br><span class="line">	debugAll(bbc);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">	<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="1-4-gatering-writes-集中写入">1.4 Gatering Writes（集中写入）</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ByteBuffer</span> <span class="variable">bba</span> <span class="operator">=</span> StandardCharsets.UTF_8.encode(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="type">ByteBuffer</span> <span class="variable">bbb</span> <span class="operator">=</span> StandardCharsets.UTF_8.encode(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"><span class="type">ByteBuffer</span> <span class="variable">bbc</span> <span class="operator">=</span> StandardCharsets.UTF_8.encode(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> (<span class="type">FileChannel</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="string">&quot;HelloWorld.txt&quot;</span>, <span class="string">&quot;rw&quot;</span>).getChannel()) &#123;</span><br><span class="line">	file.write(<span class="keyword">new</span> <span class="title class_">ByteBuffer</span>[]&#123;bba, bbb, bbc&#125;);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">	<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="1-5-综合案例">1.5 综合案例</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line">	<span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">	buffer.put(<span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>, <span class="number">100</span>&#125;);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	网络上有多条数据发送给服务器，数据之间使用 \n 进行分离</span></span><br><span class="line"><span class="comment">	但由于某种原因这些数据在接收时，被进行了重新组合，例如原始数据有3条为</span></span><br><span class="line"><span class="comment">		Hello,world\n</span></span><br><span class="line"><span class="comment">		I&#x27;m zhangsan\n</span></span><br><span class="line"><span class="comment">		How are you?\n</span></span><br><span class="line"><span class="comment">	变成了下面的两个 byteBuffer（黏包，半包）</span></span><br><span class="line"><span class="comment">		Hello,world\nI&#x27;m zhangsan\nHo</span></span><br><span class="line"><span class="comment">		w are you?\n</span></span><br><span class="line"><span class="comment">	现在要求变写程序，将错乱的数据恢复成原始的按 \n 分隔的数据</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="type">ByteBuffer</span> <span class="variable">source</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">64</span>);</span><br><span class="line">	source.put(<span class="string">&quot;Hello,world\nI&#x27;m zhangsan\nHo&quot;</span>.getBytes());</span><br><span class="line">	split(source);</span><br><span class="line">	source.put(<span class="string">&quot;w are you?\n&quot;</span>.getBytes());</span><br><span class="line">	split(source);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">split</span><span class="params">(ByteBuffer source)</span> &#123;</span><br><span class="line">	source.flip();</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; source.limit(); i++) &#123;</span><br><span class="line">		<span class="comment">// 找到一条完整的消息</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">new</span> <span class="title class_">String</span>(<span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;source.get(i)&#125;).equals(<span class="string">&quot;\n&quot;</span>)) &#123;</span><br><span class="line">			<span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> i + <span class="number">1</span> - source.position();</span><br><span class="line">			<span class="type">ByteBuffer</span> <span class="variable">target</span> <span class="operator">=</span> ByteBuffer.allocate(length);</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; length; j++) &#123;</span><br><span class="line">				target.put(source.get());</span><br><span class="line">			&#125;</span><br><span class="line">			debugAll(target);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	source.compact();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>二、Channel（通道）</h1>
<p>NIO 通过 Channel（通道）进行读写。</p>
<p>通道是双向的，可读也可写，而流的读写是单向的。</p>
<p>无论读写，通道只能和 Buffer 交互。因为 Buffer，通道可以异步地读写。</p>
<h2 id="2-1-filechannel">2.1 FileChannel</h2>
<blockquote>
<p>FileChannel 只能工作在阻塞模式下</p>
</blockquote>
<h3 id="获取">获取</h3>
<p>不能直接打开 FileChannel，必须通过 FileInputStream、FileOutputStream 或者 RandomAccessFile 来获取 FileChannel，它们都有 getChannel 方法。</p>
<ul>
<li>通过 FileInputStream 获取的 channel 只能读</li>
<li>通过 FileOutputStream 获取的 channel 只能写</li>
<li>通过 RandomAccessFile 获取的 channel 是否能读写，根据构造时的传入读写模式参数决定</li>
</ul>
<h3 id="读取">读取</h3>
<p>会从 channel 读取数据填充 ByteBuffer，返回值表示读到了多少字节，-1 表示到达了文件的末尾</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">readBytes</span> <span class="operator">=</span> channel.read(buffer);</span><br></pre></td></tr></table></figure>
<h3 id="写入">写入</h3>
<p>SocketChannel</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ...;</span><br><span class="line">buffer.put(...); <span class="comment">// 存入数据</span></span><br><span class="line">buffer.flip();   <span class="comment">// 切换读模式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测 buffer 中还有没有剩余数据</span></span><br><span class="line"><span class="keyword">while</span>(buffer.hasRemaining) &#123;</span><br><span class="line">    channel.write(buffer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 while 中调用 channel.write 是因为 write 方法并不能保证一次将 buffer 中的内容全部写入 channel</p>
<h3 id="关闭">关闭</h3>
<p>channel 必须关闭，不过调用了 FileInputStream、FileOutputStream 或者 RandomAccessFile 的 close 方法会间接地调用 channel 的 close 方法。</p>
<h3 id="位置">位置</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取当前位置</span></span><br><span class="line"><span class="type">long</span> <span class="variable">pos</span> <span class="operator">=</span> channel.position();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置当前位置</span></span><br><span class="line"><span class="type">long</span> <span class="variable">newPos</span> <span class="operator">=</span> ...;</span><br><span class="line">channel.position(newPos);</span><br></pre></td></tr></table></figure>
<p>设置当前位置时，如果设置为文件的末尾</p>
<ul>
<li>这时读取会返回 -1</li>
<li>这时写入，会追加内容，但要注意如果 position 超过了文件末尾，再写入时在新内容和原末尾之间会有空洞(00)</li>
</ul>
<h1>三、Selector（选择器）</h1>
<p>NIO 有选择器，而 IO 没有。</p>
<p>选择器满足了单个线程处理多个通道的效果，因此大大减少了线程的数量。</p>
<p>因为线程之间的切换对于操作系统来说是昂贵的（每次切换线程都要重新读取线程之前的状态、值、上下文等信息），因此选择器提高了系统的效率。</p>
<h1>三、一些关键类</h1>
<h2 id="serverbootstrap">ServerBootstrap</h2>
<p>Netty 建立服务端的辅助类。</p>
<h2 id="channel">Channel</h2>
<p>频道、通道的意思。</p>
<p>是传入（入站）或者传出（出站）数据的载体。</p>
<p>可以被打开或者被关闭，连接或者断开连接。</p>
<p>在内部会为每个 Channel 分配一个 EventLoop，用以处理所有事件。</p>
<h2 id="eventloop">EventLoop</h2>
<h2 id="eventloopgroup">EventLoopGroup</h2>
<p>是一组 EventLoop</p>
<h2 id="future">Future</h2>
<h2 id="channelhandle">ChannelHandle</h2>
<p>通道处理者，是所有处理入站和出站数据的应用程序逻辑的容器。</p>
<h3 id="channelhandleradapter">ChannelHandlerAdapter</h3>
<h3 id="channelinboundhandleradapter">ChannelInboundHandlerAdapter</h3>
<p>Netty 接收数据 Handler 处理器。</p>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Netty</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Netty</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx安装与使用</title>
    <url>/blog/c3825a32.html</url>
    <content><![CDATA[<blockquote>
<p>参考网站：<a href="https://blog.csdn.net/w410589502/article/details/70787468">linux nginx安装以及配置</a></p>
</blockquote>
<h1>一、Nginx Linux 版本的基本使用</h1>
<p>下载地址：<a href="http://nginx.org">Nginx官方网址</a></p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1565086188620.png" alt="1565086188620"></p>
<p><em>其中，mainline 表示主线（最新）版本；stable 表示稳定版本</em></p>
<p>或者</p>
<p>在 Linux 中使用 wget 命令下载：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -c https://nginx.org/download/nginx-1.16.0.tar.gz</span><br></pre></td></tr></table></figure>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1565086440569.png" alt="1565086440569"></p>
<h1>二 安装步骤</h1>
<h2 id="2-1-解压安装包">2.1 解压安装包</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf nginx-1.16.0.tar.gztar -zxvf nginx-1.16.0.tar.gz</span><br></pre></td></tr></table></figure>
<h2 id="2-2-进入安装目录">2.2 进入安装目录</h2>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1564470825825.png" alt="1564470825825"></p>
<h2 id="2-3-nginx-配置">2.3 Nginx 配置</h2>
<h3 id="2-3-1-使用默认配置-推荐">2.3.1 使用默认配置（推荐）</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure./configure</span><br></pre></td></tr></table></figure>
<p>这时一般会出现错误，提示我们添加 gcc 环境</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1564471268289.png" alt="1564471268289"></p>
<h4 id="2-3-1-1-安装-gcc-环境">2.3.1.1 安装 gcc 环境</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install gcc-c++yum install gcc-c++</span><br></pre></td></tr></table></figure>
<p><em>注：若 Linux 系统版本是 aliyun，一般已经安装了 gcc 环境；而 centos7 等系统大都需要用户安装</em></p>
<h4 id="2-3-1-2-继续使用默认配置">2.3.1.2 继续使用默认配置</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装到指定路径</span></span><br><span class="line">./configure --prefix=/usr/local/nginx./configure</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装到指定路径</span></span><br><span class="line">./configure --prefix=/usr/local/nginx</span><br></pre></td></tr></table></figure>
<p>这里提示我们需要安装 PCRE 依赖库：</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1564473284232.png" alt="1564473284232"></p>
<h4 id="2-3-1-3-安装-pcre-依赖库">2.3.1.3 安装 PCRE 依赖库</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y pcre pcre-develyum install -y pcre pcre-devel</span><br></pre></td></tr></table></figure>
<p><em>PCRE（Perl Compatible Regular Expressions）是一个 Perl 库，包括 perl 兼容的</em><em><strong>正则表达式库*</strong></em>。nginx 的 http 模块使用 pcre 来解析正则表达式，所以需要在 linux 上安装 pcre 库，pcre-devel 是使用 pcre 开发的一个二次开发库。*</p>
<h4 id="2-3-1-4-安装-zlib-依赖库">2.3.1.4 安装 zlib 依赖库</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y zlib zlib-develyum install -y zlib zlib-devel</span><br></pre></td></tr></table></figure>
<p><em>zlib 库提供了很多种压缩和解压缩的方式， nginx 使用 zlib 对 http 包的内容进行 gzip ，所以需要在 Centos 上安装 zlib 库。</em></p>
<h4 id="2-3-1-5-安装-openssl-安全套接字层密码库">2.3.1.5 安装 OpenSSL 安全套接字层密码库</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y openssl openssl-develyum install -y openssl openssl-devel</span><br></pre></td></tr></table></figure>
<p><em>OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及 SSL 协议，并提供丰富的应用程序供测试或其它目的使用。</em></p>
<p><em>nginx 不仅支持 http 协议，还支持 https（即在 ssl 协议上传输 http），所以需要在 Centos 安装 OpenSSL 库。</em></p>
<h4 id="2-3-1-6-最后再次执行默认配置">2.3.1.6 最后再次执行默认配置</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure</span><br></pre></td></tr></table></figure>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1564473993088.png" alt="1564473993088"></p>
<p>成功！</p>
<p>同时，<code>./configure</code>命令会创建一个 Makefile 文件，为 C 语言提供编译需要</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1564474485304.png" alt="1564474485304"></p>
<h4 id="1-2-3-2-自定义配置-不推荐">1.2.3.2 自定义配置（不推荐）</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure \</span><br><span class="line">--prefix=/usr/local/nginx \</span><br><span class="line">--conf-path=/usr/local/nginx/conf/nginx.conf \</span><br><span class="line">--pid-path=/usr/local/nginx/conf/nginx.pid \</span><br><span class="line">--lock-path=/var/lock/nginx.lock \</span><br><span class="line">--error-log-path=/var/log/nginx/error.log \</span><br><span class="line">--http-log-path=/var/log/nginx/access.log \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">--http-client-body-temp-path=/var/temp/nginx/client \</span><br><span class="line">--http-proxy-temp-path=/var/temp/nginx/proxy \</span><br><span class="line">--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \</span><br><span class="line">--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \</span><br><span class="line">--http-scgi-temp-path=/var/temp/nginx/scgi./configure \</span><br><span class="line">--prefix=/usr/local/nginx \</span><br><span class="line">--conf-path=/usr/local/nginx/conf/nginx.conf \</span><br><span class="line">--pid-path=/usr/local/nginx/conf/nginx.pid \</span><br><span class="line">--lock-path=/var/lock/nginx.lock \</span><br><span class="line">--error-log-path=/var/log/nginx/error.log \</span><br><span class="line">--http-log-path=/var/log/nginx/access.log \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">--http-client-body-temp-path=/var/temp/nginx/client \</span><br><span class="line">--http-proxy-temp-path=/var/temp/nginx/proxy \</span><br><span class="line">--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \</span><br><span class="line">--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \</span><br><span class="line">--http-scgi-temp-path=/var/temp/nginx/scgi</span><br></pre></td></tr></table></figure>
<p><em>注：将临时文件目录指定为：/var/temp/nginx，需要在 /var 下创建 temp 及 nginx 目录</em></p>
<h4 id="1-2-3-3-编译并安装-nginx">1.2.3.3 编译并安装 Nginx</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make install</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span></span><br><span class="line">make &amp;&amp; make installmake install</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<p>make ：编译，它从 Makefile 中读取指令，然后编译。</p>
<p>make install ：安装，它从 Makefile 中读取指令，安装到指定的位置。</p>
<h4 id="1-2-3-4-查看安装路径">1.2.3.4 查看安装路径</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">whereis nginx</span><br></pre></td></tr></table></figure>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1564474774892.png" alt="1564474774892"></p>
<h4 id="1-2-3-5-安装目录文件分析">1.2.3.5 安装目录文件分析</h4>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1565089768083.png" alt="1565089768083"></p>
<ul>
<li>conf：配置文件</li>
<li>html：网页文件</li>
<li>logs：日志文件</li>
<li>sbin：主要二进制程序</li>
</ul>
<h2 id="2-4-启动-停止-nginx">2.4 启动、停止 Nginx</h2>
<p>进入 Nginx 安装目录（并不是 Nginx 的解压目录），执行命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./sbin/nginx # 启动</span><br><span class="line">./nginx # 启动</span><br><span class="line">./nginx -s stop # 停止（此方式相当于先查出nginx进程id再使用kill命令强制杀掉进程）</span><br><span class="line">./nginx -s quit # 停止（此方式停止步骤是待nginx进程处理任务完毕进行停止）</span><br><span class="line">./nginx -s reload # 在提供服务的时候，重新刷新配置文件</span><br><span class="line">kill -INT 5531 # 其中5531就是nginx的主进程号，这种方法叫做nginx信号控制</span><br><span class="line">kill -HUP 5531 # 软重启</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">其实在nginx启动后，会在logs下有一个nginx.pid文件用于记录主进程号</span></span><br><span class="line">kill -INT &#x27;cat logs/nginx.pid&#x27;</span><br><span class="line">kill -HUP &#x27;cat logs/nginx.pid&#x27;./sbin/nginx # 启动</span><br><span class="line">./nginx # 启动</span><br><span class="line">./nginx -s stop # 停止（此方式相当于先查出nginx进程id再使用kill命令强制杀掉进程）</span><br><span class="line">./nginx -s quit # 停止（此方式停止步骤是待nginx进程处理任务完毕进行停止）</span><br><span class="line">./nginx -s reload # 在提供服务的时候，重新刷新配置文件</span><br><span class="line">kill -INT 5531 # 其中5531就是nginx的主进程号，这种方法叫做nginx信号控制</span><br><span class="line">kill -HUP 5531 # 软重启</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">其实在nginx启动后，会在logs下有一个nginx.pid文件用于记录主进程号</span></span><br><span class="line">kill -INT &#x27;cat logs/nginx.pid&#x27;</span><br><span class="line">kill -HUP &#x27;cat logs/nginx.pid&#x27;</span><br></pre></td></tr></table></figure>
<h3 id="2-4-1-nginx-信号控制">2.4.1 Nginx 信号控制</h3>
<table>
<thead>
<tr>
<th>信号</th>
<th>信号说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>TERM, INT</td>
<td>Quick shutdown</td>
</tr>
<tr>
<td>QUIT</td>
<td>Graceful shutdown 优雅地关闭线程，即等请求结束后再关闭</td>
</tr>
<tr>
<td>KILL</td>
<td>Halts a stubborn process 停止一个顽固的过程</td>
</tr>
<tr>
<td>HUP</td>
<td>Configuration reload 配置重新加载 Start the new worker processes with a new configuration 使用新配置启动新的工作进程 Gracefully shutdown the old worker processes 优雅地关闭旧的工作进程，即工作中的暂时不变，先变工作中的进程 该命令也称为：软重启</td>
</tr>
<tr>
<td>USR1</td>
<td>Reopen the log files 重新打开日志文件 重读日志，在日志按月/日分割时有用 例如我需要每天一个日志文件，但nginx认的并不是文件名，而是内存节点 就算重命名或新建名称一致的文件，还是一直往旧日志文件上写，这时就用USER1</td>
</tr>
<tr>
<td>USR2</td>
<td>Upgrade Executable on the fly 动态升级可执行文件（平滑地升级）</td>
</tr>
<tr>
<td>WINCH</td>
<td>Gracefully shutdown the worker processes 正常关闭工作进程（配合USER2来进行升级）</td>
</tr>
</tbody>
</table>
<h3 id="2-4-2-查看-nginx-配置是否有误">2.4.2 查看 Nginx 配置是否有误</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./sbin/nginx -t./sbin/nginx -t</span><br></pre></td></tr></table></figure>
<h3 id="2-4-3-查看-nginx-是否启动成功">2.4.3 查看 Nginx 是否启动成功</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps aux|grep nginx</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">这里能够看到，nginx分为两个进程：主进程-子进程，子进程负责工作，主进程负责管控子进程</span></span><br></pre></td></tr></table></figure>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1564475996668.png" alt="1564475996668"></p>
<p>或者</p>
<p>看能不能访问 Nginx 欢迎首页</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1564479236790.png" alt="1564479236790"></p>
<p>同时，也可以在外部局域网内使用浏览器进行访问欢迎页面</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1564479385795.png" alt="1564479385795"></p>
<p><em>PS：如果 curl 访问成功了，但在外部访问失败，则应该是 Linux 防火墙对端口进行了拦截</em></p>
<h2 id="2-5-修改-nginx-端口号">2.5 修改 Nginx 端口号</h2>
<p>Nginx 的默认端口号为：80</p>
<h3 id="2-5-1-进入配置文件文件夹">2.5.1 进入配置文件文件夹</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/nginx/confcd /usr/local/nginx/conf</span><br></pre></td></tr></table></figure>
<p><em>注：这里是usr下的安装路径，不是我们解压的安装包路径</em></p>
<h3 id="2-5-2-备份配置文件-可略">2.5.2 备份配置文件（可略）</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp nginx.conf nginx.conf.backcp nginx.conf nginx.conf.back</span><br></pre></td></tr></table></figure>
<h3 id="2-5-3-编辑-nginx-conf-配置文件">2.5.3 编辑 nginx.conf 配置文件</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi nginx.conf</span><br></pre></td></tr></table></figure>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1564475593864.png" alt="1564475593864"></p>
<p>将端口号修改为 81（自定）；Esc + :wq（保存并退出）</p>
<p>记住需要重新启动（推荐）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./nginx -s quit</span><br><span class="line">./nginx./nginx -s quit</span><br><span class="line">./nginx</span><br></pre></td></tr></table></figure>
<p>或者</p>
<p>重新刷新配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./nginx -s reload./nginx -s reload</span><br></pre></td></tr></table></figure>
<h2 id="2-6-设置-nginx-开机自启动">2.6 设置 Nginx 开机自启动</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/rc.localvi /etc/rc.local</span><br></pre></td></tr></table></figure>
<h3 id="2-6-1-添加语句">2.6.1 添加语句</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1564476563993.png" alt="1564476563993"></p>
<h3 id="2-6-2-设置权限">2.6.2 设置权限</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod 755 /etc/rc.local</span><br></pre></td></tr></table></figure>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx配置</title>
    <url>/blog/ad720447.html</url>
    <content><![CDATA[<blockquote>
<p>参考网站：</p>
<p><a href="https://www.cnblogs.com/jingmoxukong/p/5945200.html">Nginx 简易教程</a></p>
<p><a href="https://www.jianshu.com/p/bed000e1830b">WEB请求处理二：Nginx请求反向代理</a></p>
</blockquote>
<h1>一、预热</h1>
<h2 id="1-1-反向代理是什么？">1.1 反向代理是什么？</h2>
<p>反向代理（Reverse Proxy）是指以代理服务器来接受 internet 上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给 internet 上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。</p>
<h2 id="1-2-正向代理是什么？">1.2 正向代理是什么？</h2>
<p>正向代理（Forward Proxy）又称转发代理，是一个位于客户端和原始服务器（origin server）之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标（原始服务器），然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端必须要进行一些特别的设置才能使用正向代理。</p>
<p><strong>客户端必须设置正向代理服务器，当然前提是要知道正向代理服务器的IP地址，还有代理程序的端口。</strong></p>
<h2 id="1-3-正向代理和反向代理区别">1.3 正向代理和反向代理区别</h2>
<ul>
<li>正向代理：客户端 &lt;一&gt; 代理 一&gt;服务端</li>
<li>反向代理：客户端 一&gt; 代理 &lt;一&gt;服务端</li>
</ul>
<h1>二、http 反向代理配置</h1>
<h2 id="2-1-解析域名反向代理到-webapp">2.1 解析域名反向代理到 webapp</h2>
<h3 id="2-1-1-配置-nginx-conf">2.1.1 配置 nginx.conf</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/nginx //进入nginx安装目录</span><br><span class="line">cd conf //进入conf目录</span><br><span class="line">mkdir vhost //创建vhost文件夹</span><br><span class="line">vim nginx.conf //修改nginx的配置文件cd /usr/local/nginx //进入nginx安装目录</span><br><span class="line">cd conf //进入conf目录</span><br><span class="line">mkdir vhost //创建vhost文件夹</span><br><span class="line">vim nginx.conf //修改nginx的配置文件</span><br></pre></td></tr></table></figure>
<p>在配置文件中添加该语句：include vhost/*.conf；（不能漏分号）</p>
<blockquote>
<p>这语句的意思是把 vhost 文件夹下的所有 .conf 文件加载过来（注意是 .conf 后缀名的文件），这么做的原因是方便以后维护，把每个域名做成一个 .conf 文件，通过主配置 include 进来，这样以后想维护某个域名，就只需直接对那个对应的 .conf 进行操作，而不会影响到其它的域名，且文件不会过于臃肿。这跟 Spring 的配置文件类似，Spring 配置文件通过把负责各个模块功能的文件 include 进去，从而避免配置文件过于复杂臃肿。</p>
</blockquote>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1564556248956.png" alt="1564556248956"></p>
<h3 id="2-1-2-添加一些域名来测试">2.1.2 添加一些域名来测试</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/hosts //编辑hosts文件</span><br></pre></td></tr></table></figure>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1564557183237.png" alt="1564557183237"></p>
<p>IP 地址为本机 IP，后面的域名按需修改</p>
<h3 id="2-1-3-创建-conf-文件">2.1.3 创建 .conf 文件</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd vhost //进入vhost文件夹，刚才在上文已经创建了的，里面没有内容，现在要添加内容</span><br><span class="line">vim www.taobao.com.conf //创建该文件并添加内容</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    autoindex on;</span><br><span class="line">    server_name www.taobao.com;</span><br><span class="line">    access_log /usr/local/nginx/logs/access.log combined;</span><br><span class="line">    index index.html index.htm index.jsp index.php;</span><br><span class="line">    <span class="comment">#error_page 404 /404.html;</span></span><br><span class="line">    <span class="keyword">if</span> ( <span class="variable">$query_string</span> ~* <span class="string">&quot;.*[\;&#x27;\&lt;\&gt;].*&quot;</span> )&#123;</span><br><span class="line">    	<span class="built_in">return</span> 404;</span><br><span class="line">    &#125;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:9999;</span><br><span class="line">        add_header Access-Control-Allow-Origin *;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1564557524022.png" alt="1564557524022"></p>
<p><em>其功能是当本机访问</em> <code>www.taobao.com</code> <em>域名时，将跳转到本地的 9999 端口的程序上，即 tomcat 欢迎页面</em></p>
<h3 id="2-1-4-刷新-nginx-服务器配置">2.1.4 刷新 Nginx 服务器配置</h3>
<p>esc + :wq 保存并退出</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">../../sbin/nginx -s reload../../sbin/nginx -s reload</span><br></pre></td></tr></table></figure>
<p>如果配置刷新失败，可以重启 Nginx</p>
<h3 id="2-1-5-测试效果">2.1.5 测试效果</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl www.taobao.com</span><br></pre></td></tr></table></figure>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1564558238760.png" alt="1564558238760"></p>
<p>反向代理成功！</p>
<h2 id="2-2-解析域名反向代理到本地文件">2.2 解析域名反向代理到本地文件</h2>
<h3 id="2-2-1-hosts-添加域名">2.2.1 hosts 添加域名</h3>
<h3 id="2-2-2-创建-conf-文件">2.2.2 创建 .conf 文件</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim image.baidu.com.conf //创建该文件并编辑</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    autoindex off;</span><br><span class="line">    server_name image.baidu.com;</span><br><span class="line">    access_log /usr/local/nginx/logs/access.log combined;</span><br><span class="line">    index index.html index.htm index.jsp index.php;</span><br><span class="line">    <span class="comment">#error_page 404 /404.html;</span></span><br><span class="line">    <span class="keyword">if</span> ( <span class="variable">$query_string</span> ~* <span class="string">&quot;.*[\;&#x27;\&lt;\&gt;].*&quot;</span> )&#123;</span><br><span class="line">    	<span class="built_in">return</span> 404;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ /(mmall_fe|mmall_admin_fe)/dist/view/* &#123;</span><br><span class="line">    deny all;</span><br><span class="line">    &#125;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root /ftpfile/;</span><br><span class="line">        add_header Access-Control-Allow-Origin *;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1564560275807.png" alt="1564560275807"></p>
<p>功能是当用户输入 <code>image.baidu.com</code> 的时候，转发到本地的 <code>/ftpfile/</code> 文件。</p>
<h3 id="2-2-3-刷新-nginx-服务器配置">2.2.3 刷新 Nginx 服务器配置</h3>
<h3 id="2-2-4-测试效果-略">2.2.4 测试效果（略）</h3>
<h1>三、负载均衡配置</h1>
<p>负载均衡是干嘛的？举个例子：我们的小网站，刚开始就一台 nginx 服务器，后来，随着业务量增大，用户增多，一台服务器已经不够用了，我们就又多加了几台服务器。那么这几台服务器如何调度？如何均匀的提供访问？这就是负载均衡。</p>
<p><strong>负载均衡的目的是为了解决单个节点压力过大，造成 Web 服务响应过慢，甚至严重的情况下导致服务瘫痪，无法正常提供服务。其好处是可以集群多台机器一起工作，并且对外的 IP 和域名是一样的，外界看起来就好像一台机器一样。</strong></p>
<h2 id="3-1-基于-weight-权重的负载">3.1 基于 weight 权重的负载</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ... 省略其它配置</span></span><br><span class="line"></span><br><span class="line">    upstream webservers&#123;</span><br><span class="line">        server 192.168.33.11 weight=10;</span><br><span class="line">        server 192.168.33.12 weight=10;</span><br><span class="line">        server 192.168.33.13 weight=10;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://tomcats;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ... 省略其它配置</span></span><br><span class="line">&#125;http &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ... 省略其它配置</span></span><br><span class="line"></span><br><span class="line">    upstream webservers&#123;</span><br><span class="line">        server 192.168.33.11 weight=10;</span><br><span class="line">        server 192.168.33.12 weight=10;</span><br><span class="line">        server 192.168.33.13 weight=10;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://tomcats;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ... 省略其它配置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参数：<code>max_fails</code>和<code>fail_timeout</code></p>
<ul>
<li>max_fails：允许请求失败的次数，默认为 1。当超过最大次数时，返回 proxy_next_upstream 模块定义的错误。</li>
<li>fail_timeout：在经历了 max_fails 次失败后，暂停服务的时间。max_fails 可以和 fail_timeout 一起使用，进行健康状态检查。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upstream webservers&#123;</span><br><span class="line">    server 192.168.33.11 weight=10 max_fails=2 fail_timeout=30s;</span><br><span class="line">    server 192.168.33.12 weight=10 max_fails=2 fail_timeout=30s;</span><br><span class="line">    server 192.168.33.13 weight=10 max_fails=2 fail_timeout=30s;</span><br><span class="line">&#125;upstream webservers&#123;</span><br><span class="line">    server 192.168.33.11 weight=10 max_fails=2 fail_timeout=30s;</span><br><span class="line">    server 192.168.33.12 weight=10 max_fails=2 fail_timeout=30s;</span><br><span class="line">    server 192.168.33.13 weight=10 max_fails=2 fail_timeout=30s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参数：<code>down</code>和<code>backup</code></p>
<ul>
<li>down：表示这台机器暂时不参与负载均衡。相当于注释掉了。</li>
<li>backup：表示这台机器是备用机器，是其他的机器不能用的时候，这台机器才会被使用，俗称备胎。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upstream webservers&#123;</span><br><span class="line">    server 192.168.33.11 down;</span><br><span class="line">    server 192.168.33.12 weight=10 max_fails=2 fail_timeout=30s;</span><br><span class="line">    server 192.168.33.13 backup;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/150410643.png" alt="150410643"></p>
<h2 id="3-2-基于-ip-hash-的负载">3.2 基于 ip_hash 的负载</h2>
<p>这种分配方式，<strong>每个请求按访问 IP 的 hash 结果分配</strong>，这样来自同一个 IP 的访客固定访问一个后端服务器，有效解决了动态网页存在的 session 共享问题。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upstream webservers&#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    server 192.168.33.11 weight=1 max_fails=2 fail_timeout=30s;</span><br><span class="line">    server 192.168.33.12 weight=1 max_fails=2 fail_timeout=30s;</span><br><span class="line">    server 192.168.33.13 down;</span><br><span class="line">&#125;upstream webservers&#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    server 192.168.33.11 weight=1 max_fails=2 fail_timeout=30s;</span><br><span class="line">    server 192.168.33.12 weight=1 max_fails=2 fail_timeout=30s;</span><br><span class="line">    server 192.168.33.13 down;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>ip_hash 模式下，最好不要设置 weight 参数</strong>，因为你设置了，就相当于手动设置了，将会导致很多的流量分配不均匀。</p>
<p><strong>ip_hash 模式下，backup 参数不可用</strong>，加了会报错，为啥呢？因为，本身我们的访问就是固定的了，其实，备用已经不管什么作用了。</p>
<h1>四、网站有多个 webapp 配置</h1>
<h1>五、https 反向代理配置</h1>
<h1>六、静态站点配置</h1>
<h1>七、搭建文件服务器</h1>
<h1>八、跨域解决方案</h1>
<h2 id="8-1-nginx-反向代理解决跨域">8.1 Nginx 反向代理解决跨域</h2>
<h3 id="8-1-1-nginx-处理跨域原理">8.1.1 Nginx 处理跨域原理</h3>
<p>a 网站向 b 网站请求 1.js 文件时，向 b 网站发送一个获取的请求，nginx 根据配置文件接收这个请求，代替 a 网站向 b 网站来请求这个资源，nginx 拿到这个资源后再返回给 a 网站，以此来解决了跨域问题。</p>
<h3 id="8-1-2-具体操作">8.1.2 具体操作</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/nginx //进入nginx安装\目录</span><br><span class="line">cd conf //进入conf目录</span><br><span class="line">vim nginx.conf //修改nginx的配置文件</span><br></pre></td></tr></table></figure>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1564649559457.png" alt="1564649559457"></p>
<p>其中 server 代表启动的一个服务，location 是一个定位规则。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 所有以/开头的地址，表示是所有请求</span></span><br><span class="line">location / &#123;</span><br><span class="line">	<span class="comment"># 去请求../html文件夹里的文件,其中..的路径在nginx里面有定义，安装的时候会有默认路径</span></span><br><span class="line">    root   html;</span><br><span class="line">    <span class="comment"># 首页响应地址 </span></span><br><span class="line">    index  index.html index.htm;</span><br><span class="line">&#125;<span class="comment"># 所有以/开头的地址，表示是所有请求</span></span><br><span class="line">location / &#123;</span><br><span class="line">	<span class="comment"># 去请求../html文件夹里的文件,其中..的路径在nginx里面有定义，安装的时候会有默认路径</span></span><br><span class="line">    root   html;</span><br><span class="line">    <span class="comment"># 首页响应地址 </span></span><br><span class="line">    index  index.html index.htm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由此可知，location 是 nginx 用来路由的入口，所以接下来要在 location 里面完成反向代理的配置。</p>
<p>现在假设是 <code>www.a.com/html/msg.html</code> 想请求 <code>www.b.com/api/?method=1&amp;para=2</code>；</p>
<p>ajax：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="string">&#x27;http://www.b.com/api/msg?method=1&amp;para=2&#x27;</span>;</span><br><span class="line">$.ajax (&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">    <span class="attr">url</span>: url,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>)&#123;..&#125;,</span><br><span class="line">    ....</span><br><span class="line">&#125;)<span class="keyword">var</span> url = <span class="string">&#x27;http://www.b.com/api/msg?method=1&amp;para=2&#x27;</span>;</span><br><span class="line">$.ajax (&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">    <span class="attr">url</span>: url,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>)&#123;..&#125;,</span><br><span class="line">    ....</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>这时会出现跨域的问题，所以修改一下请求的 url，让请求发在 nginx 的一个 url 下。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="string">&#x27;http://www.b.com/api/msg?method=1&amp;para=2&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> proxyurl = <span class="string">&#x27;msg?method=1&amp;para=2&#x27;</span>;</span><br><span class="line"><span class="comment">// 假如实际地址是：www.c.com/proxy/html/api/msg?method=1&amp;para=2;其中www.c.com是nginx主机地址</span></span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">    <span class="attr">url</span>: proxyurl,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>)&#123;..&#125;,</span><br><span class="line">    ....</span><br><span class="line">&#125;)<span class="keyword">var</span> url = <span class="string">&#x27;http://www.b.com/api/msg?method=1&amp;para=2&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> proxyurl = <span class="string">&#x27;msg?method=1&amp;para=2&#x27;</span>;</span><br><span class="line"><span class="comment">// 假如实际地址是：www.c.com/proxy/html/api/msg?method=1&amp;para=2;其中www.c.com是nginx主机地址</span></span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">    <span class="attr">url</span>: proxyurl,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>)&#123;..&#125;,</span><br><span class="line">    ....</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>再在刚才的路径中匹配到这个请求，我们在 location 下面再添加一个 location。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># &#x27;^~/proxy/html/&#x27;是一个匹配规则，用于拦截请求，匹配任何以 /proxy/html/开头的地址，匹配符合以后，停止往下搜索正则</span></span><br><span class="line">location ^~/proxy/html/&#123;</span><br><span class="line">	<span class="comment"># 代表重写拦截进来的请求，并且只能对域名后边的除去传递的参数外的字符串起作用。例如www.c.com/proxy/html/api/msg?method=1&amp;para=2中只对/proxy/html/api/msg重写</span></span><br><span class="line">	<span class="comment"># rewrite后面的参数是一个简单的正则：^/proxy/html/(.*)$，$1代表正则中的第一个()，$2代表第二个()的值,以此类推</span></span><br><span class="line">	<span class="comment"># break代表匹配一个之后停止匹配</span></span><br><span class="line">    rewrite ^/proxy/html/(.*)$ /<span class="variable">$1</span> <span class="built_in">break</span>;</span><br><span class="line">    <span class="comment"># proxy_pass表示把请求代理到其他主机</span></span><br><span class="line">    proxy_pass http://www.b.com/;</span><br><span class="line">&#125;<span class="comment"># &#x27;^~/proxy/html/&#x27;是一个匹配规则，用于拦截请求，匹配任何以 /proxy/html/开头的地址，匹配符合以后，停止往下搜索正则</span></span><br><span class="line">location ^~/proxy/html/&#123;</span><br><span class="line">	<span class="comment"># 代表重写拦截进来的请求，并且只能对域名后边的除去传递的参数外的字符串起作用。例如www.c.com/proxy/html/api/msg?method=1&amp;para=2中只对/proxy/html/api/msg重写</span></span><br><span class="line">	<span class="comment"># rewrite后面的参数是一个简单的正则：^/proxy/html/(.*)$，$1代表正则中的第一个()，$2代表第二个()的值,以此类推</span></span><br><span class="line">	<span class="comment"># break代表匹配一个之后停止匹配</span></span><br><span class="line">    rewrite ^/proxy/html/(.*)$ /<span class="variable">$1</span> <span class="built_in">break</span>;</span><br><span class="line">    <span class="comment"># proxy_pass表示把请求代理到其他主机</span></span><br><span class="line">    proxy_pass http://www.b.com/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="8-2-nginx-配置-cors-实现指定子域名跨域">8.2 Nginx 配置 CORS 实现指定子域名跨域</h2>
<h3 id="8-2-1-什么是-cors">8.2.1 什么是 CORS</h3>
<p>CORS 是一个 W3C 标准，全称是跨域资源共享（Cross-Origin Resource Sharing）。它允许浏览器向跨源服务器，发出 XMLHttpRequest 请求，从而克服了 AJAX 请求只能同源使用的限制。</p>
<p>当前几乎所有的浏览器（Internet Explorer 8+，Firefox 3.5+，Safari 4+ 和 Chrome 3+）都可通过名为跨域资源共享（Cross-Origin Resource Sharing）的协议支持 AJAX 跨域调用。</p>
<p>Chrome，Firefox，Opera，Safari 都使用的是 XMLHttpRequest2 对象，IE 使用 XDomainRequest。</p>
<p>简单来说就是跨域的目标服务器要返回一系列的 Headers，通过这些 Headers 来控制是否同意跨域。跨域资源共享（CORS）也是未来的跨域问题的标准解决方案。</p>
<p>CORS 提供如下 Headers，Request 包和 Response 包中都有一部分。</p>
<h4 id="http-response-header">HTTP Response Header</h4>
<ul>
<li>Access-Control-Allow-Origin</li>
<li>Access-Control-Allow-Credentials</li>
<li>Access-Control-Allow-Methods</li>
<li>Access-Control-Allow-Headers</li>
<li>Access-Control-Expose-Headers</li>
<li>Access-Control-Max-Age</li>
</ul>
<h4 id="http-request-header">HTTP Request Header</h4>
<ul>
<li>Access-Control-Request-Method</li>
<li>Access-Control-Request-Headers</li>
</ul>
<p>其中最敏感的就是 Access-Control-Allow-Origin 这个 Header，它是 W3C 标准里用来检查该跨域请求是否可以被通过（Access Control Check）。如果需要跨域，解决方法就是在资源的头中加入 Access-Control-Allow-Origin 指定你授权的域。</p>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>NodeJS简介</title>
    <url>/blog/ff8c64c0.html</url>
    <content><![CDATA[<blockquote>
<p>参考自博客：</p>
<p>相关网址：</p>
<p><a href="https://www.cnblogs.com/yinzhengjie/p/14219259.html">NodeJS简介</a></p>
<p><a href="https://nodejs.org/zh-cn/docs/">NodeJS doc</a></p>
</blockquote>
<h1>关于 NodeJS</h1>
<p>Node.js 是一个大部分基本模块都用 JavaScript 编写的，能够在服务器端运行的 JavaScript 的开放源代码，跨平台 JavaScript 运行环境。</p>
<p>Node.js 采用 Google 的 V8 引擎运行 JS 代码，使用事件驱动，非阻塞和异步 I/O 模型等技术来提高性能，可优化应用程序的传输量和规模。</p>
<h1>NodeJS 可以做什么</h1>
<ol>
<li>Web服务API，比如REST；</li>
<li>实时多人游戏；</li>
<li>后端的Web服务，例如跨域，服务器端的请求；</li>
<li>基于Web的应用；</li>
<li>多客户端的通信，如即时通信</li>
</ol>
<p>Node.js 是基于单线程实现的，但是后台拥有一个 I/O 线程池。可以说 Node.js 成也单线程，败也单线程，尽管单线程的处理效率很高，但也是有极限的。不过值得庆幸的是，Node.js 支持分布式，即单节点性能达到瓶颈，我们可以增加机器来解决性能问题。</p>
<p>综上所述，在超大并发的场景下，Node.js 并不太适合做后端的服务器开发语言，建议还是选择支持高并发的语言，比如 Java，C++，Golang 等。当然，Python 也是可以的，但由于 GIL 的存在，因此它在后端开发能力上相比 Java 和 Go，并没有特别可圈可点的地方。</p>
<h1>NodeJS VS JavaScript</h1>
<p>JavaScript 是在浏览器中运行的代码，他的作用域只在浏览器中，并不能超出浏览器所有的权限，而 Node.js 则跳出了浏览器的限制，可以像 Java，Python，Golang 这样的编程语言一样，可以直接和操作系统进行交互。</p>
<p>从 C/S 架构来说，JavaScript 是在客户端浏览器上渲染的程序，而 Node.js 既可以充当 Client 角色，也可以充当 Server 端角色。</p>
<h1>关于 npm</h1>
<p>npm 是 Node 的包管理器。</p>
<h1>关于 yarn</h1>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>NodeJS</category>
      </categories>
      <tags>
        <tag>NodeJS</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>NodeJS安装</title>
    <url>/blog/a3f5c67b.html</url>
    <content><![CDATA[<h1>NodeJS 下载</h1>
<p><a href="https://nodejs.org/en/">下载 NodeJS 的长期支持版本</a></p>
<p><a href="https://nodejs.org/en/about/releases/">查看 NodeJS 长期支持版本的生命周期</a></p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1671692583874-b094e213-b87b-4954-8775-efbc1d91ff24.png" alt=""></p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1671692611593-ae3989db-654e-4cc6-b36c-5e123ae233bd.png" alt=""></p>
<h1>NodeJS 安装</h1>
<p>一直 next 直至安装完成，安装位置建议：D:/nodejs/</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1671692749278-1f23235d-a537-45ce-9c76-ca2de0bf3900.png" alt=""></p>
<h1>NodeJS 安装完成检查</h1>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1671692930610-af309999-e17a-4346-b17a-b8e0f21e4c9a.png" alt=""></p>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>NodeJS</category>
      </categories>
      <tags>
        <tag>NodeJS</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>ONE DAY-The ROOTLESS</title>
    <url>/blog/29bc4ab0.html</url>
    <content><![CDATA[<h1>ONE DAY - The ROOTLESS</h1>
<p><ruby><rt></rt>雨<rp>（</rp><rt>あめ</rt><rp>）</rp><rt></rt>上<rp>（</rp><rt>あ</rt><rp>）</rp></ruby>がりの<ruby><rt></rt>空<rp>（</rp><rt>そら</rt><rp>）</rp></ruby>を<ruby><rt></rt>仰<rp>（</rp><rt>あお</rt><rp>）</rp></ruby>ぐ<ruby><rt></rt>度<rp>（</rp><rt>たび</rt><rp>）</rp></ruby><br>
每当仰望雨后的天空</p>
<p><ruby><rt></rt>泣<rp>（</rp><rt>な</rt><rp>）</rp></ruby>き<ruby><rt></rt>虫<rp>（</rp><rt>むし</rt><rp>）</rp></ruby>だった<ruby><rt></rt>頃<rp>（</rp><rt>ころ</rt><rp>）</rp></ruby>の<ruby><rt></rt>僕<rp>（</rp><rt>ぼく</rt><rp>）</rp></ruby>を<ruby><rt></rt>想<rp>（</rp><rt>おも</rt><rp>）</rp></ruby>う<br>
就会浮现出那个爱哭的自己</p>
<p><ruby><rt></rt>誰<rp>（</rp><rt>たれ</rt><rp>）</rp></ruby>かの<ruby><rt></rt>背<rp>（</rp><rt>せ</rt><rp>）</rp><rt></rt>中<rp>（</rp><rt>なが</rt><rp>）</rp></ruby>を<br>
某人的背影</p>
<p>がむしゃらに<ruby><rt></rt>追<rp>（</rp><rt>お</rt><rp>）</rp></ruby>いかけた<br>
曾经疯狂地追赶着某个人</p>
<p>「<ruby><rt></rt>強<rp>（</rp><rt>つよ</rt><rp>）</rp></ruby>くなりたい」って<br>
曾经希望能变得更强大</p>
<p><ruby><rt></rt>今<rp>（</rp><rt>いま</rt><rp>）</rp></ruby>は<ruby><rt></rt>風<rp>（</rp><rt>かぜ</rt><rp>）</rp></ruby>に<ruby><rt></rt>消<rp>（</rp><rt>き</rt><rp>）</rp></ruby>えた「ありがとう」<br>
现在消失在风中的那声谢谢你</p>
<p><ruby><rt></rt>僕<rp>（</rp><rt>ぼく</rt><rp>）</rp></ruby>は<ruby><rt></rt>強<rp>（</rp><rt>つよ</rt><rp>）</rp></ruby>くなれているのかな?<br>
我到底成长了没有呢</p>
<p><ruby><rt></rt>答<rp>（</rp><rt>こた</rt><rp>）</rp></ruby>えはまだ<ruby><rt></rt>出<rp>（</rp><rt>で</rt><rp>）</rp></ruby>そうにないからさ<br>
这个问题还没有确切的答案</p>
<p>やっぱりまだ<br>
还需要继续</p>
<p><ruby><rt></rt>歩<rp>（</rp><rt>ある</rt><rp>）</rp></ruby>いていくよ<br>
努力向前</p>
<p>さあ<ruby><rt></rt>行<rp>（</rp><rt>ゆ</rt><rp>）</rp></ruby>こう<br>
出发吧</p>
<p><ruby><rt></rt>立<rp>（</rp><rt>た</rt><rp>）</rp></ruby>ち<ruby><rt></rt>止<rp>（</rp><rt>ど</rt><rp>）</rp></ruby>まることなく<br>
永不停息</p>
<p><ruby><rt></rt>流<rp>（</rp><rt>なが</rt><rp>）</rp></ruby>れる<ruby><rt></rt>時<rp>（</rp><rt>とき</rt><rp>）</rp></ruby>に<ruby><rt></rt>負<rp>（</rp><rt>ま</rt><rp>）</rp></ruby>けないように<br>
为了不输给时代的浪潮</p>
<p><ruby><rt></rt>何度<rp>（</rp><rt>なんど</rt><rp>）</rp></ruby>も<ruby><rt></rt>立<rp>（</rp><rt>た</rt><rp>）</rp></ruby>ち<ruby><rt></rt>向<rp>（</rp><rt>む</rt><rp>）</rp></ruby>かい<ruby><rt></rt>続<rp>（</rp><rt>つづ</rt><rp>）</rp></ruby>けよう<br>
一次又一次奋勇向前</p>
<p><ruby><rt></rt>大<rp>（</rp><rt>たい</rt><rp>）</rp><rt></rt>切<rp>（</rp><rt>せつ</rt><rp>）</rp></ruby>なもの<ruby><rt></rt>失<rp>（</rp><rt>うしな</rt><rp>）</rp></ruby> いたくないから<br>
不想再失去重要的人</p>
<p><ruby><rt></rt>夕暮<rp>（</rp><rt>ゆうぐ</rt><rp>）</rp></ruby>れに<ruby><rt></rt>舞<rp>（</rp><rt>ま</rt><rp>）</rp></ruby>う<ruby><rt></rt>鳥<rp>（</rp><rt></rt><rp>）</rp></ruby>の<ruby><rt></rt>様<rp>（</rp><rt>よう</rt><rp>）</rp></ruby>に<br>
宛如夕阳下起舞的鸟儿</p>
<p><ruby><rt></rt>見<rp>（</rp><rt>み</rt><rp>）</rp></ruby>えない<ruby><rt></rt>明日<rp>（</rp><rt>あす</rt><rp>）</rp></ruby>を<ruby><rt></rt>探<rp>（</rp><rt>さが</rt><rp>）</rp></ruby>してる<br>
奋力追寻着未知的明日</p>
<p><ruby><rt></rt>躓<rp>（</rp><rt>つまず</rt><rp>）</rp></ruby>きながら <ruby><rt></rt>怖<rp>（</rp><rt>こわ</rt><rp>）</rp></ruby>くても<br>
纵使害怕受到挫折</p>
<p><ruby><rt></rt>足元<rp>（</rp><rt>あしもと</rt><rp>）</rp></ruby>に<ruby><rt></rt>目<rp>（</rp><rt>め</rt><rp>）</rp></ruby>は<ruby><rt></rt>落<rp>（</rp><rt>お</rt><rp>）</rp></ruby>と  さないよ<br>
也绝不付下视线  勇敢面对</p>
<p><ruby><rt></rt>諦<rp>（</rp><rt>あきら</rt><rp>）</rp></ruby>める<ruby><rt></rt>言葉<rp>（</rp><rt>ことば</rt><rp>）</rp></ruby>は<br>
虽然泄气的话</p>
<p><ruby><rt></rt>転<rp>（</rp><rt>こ</rt><rp>）</rp></ruby>がってるけど<br>
满口尽是</p>
<p><ruby><rt></rt>諦<rp>（</rp><rt>あきら</rt><rp>）</rp></ruby>めないゴールは<ruby><rt></rt>一<rp>（</rp><rt>ひと</rt><rp>）</rp></ruby>つだけ<br>
然而不愿放弃的目标唯有一个</p>
<p><ruby><rt></rt>喜<rp>（</rp><rt>よろこ</rt><rp>）</rp></ruby>び<ruby><rt></rt>悲<rp>（</rp><rt>かな</rt><rp>）</rp></ruby>しみ<ruby><rt></rt>乗<rp>（</rp><rt>の</rt><rp>）</rp></ruby>り<ruby><rt></rt>越<rp>（</rp><rt>こ</rt><rp>）</rp></ruby>えては<br>
经历过种种喜怒哀乐之后</p>
<p><ruby><rt></rt>少<rp>（</rp><rt>そこ</rt><rp>）</rp></ruby>しずつ<ruby><rt></rt>歩<rp>（</rp><rt>ある</rt><rp>）</rp></ruby>いてくよ<br>
再一步步稳定向前</p>
<p><ruby><rt></rt>果<rp>（</rp><rt>は</rt><rp>）</rp></ruby>てしない<ruby><rt></rt>空<rp>（</rp><rt>そら</rt><rp>）</rp></ruby>に<br>
把手伸向</p>
<p><ruby><rt></rt>手<rp>（</rp><rt>て</rt><rp>）</rp></ruby>をかざそう<br>
无边无际的天空吧</p>
<p>たった<ruby><rt></rt>一<rp>（</rp><rt>ひと</rt><rp>）</rp></ruby>つの<ruby><rt></rt>未来<rp>（</rp><rt>みらい</rt><rp>）</rp></ruby>を<ruby><rt></rt>信<rp>（</rp><rt>しん</rt><rp>）</rp></ruby>じながら<br>
内心坚信着唯独仅有的未来</p>
<p><ruby><rt></rt>戾<rp>（</rp><rt>もと</rt><rp>）</rp></ruby>らない <ruby><rt></rt>時<rp>（</rp><rt>とき</rt><rp>）</rp></ruby>は<ruby><rt></rt>移<rp>（</rp><rt>うつ</rt><rp>）</rp></ruby>ろうけど<br>
哪怕宝贵的时光已轻逝</p>
<p><ruby><rt></rt>大切<rp>（</rp><rt>たいせつ</rt><rp>）</rp></ruby>なもの<ruby><rt></rt>失<rp>（</rp><rt>うしな</rt><rp>）</rp></ruby> いたくないから<br>
我亦不愿再失去重要的人</p>
<p><ruby><rt></rt>僕<rp>（</rp><rt>ぼく</rt><rp>）</rp></ruby>の<ruby><rt></rt>中<rp>（</rp><rt>なか</rt><rp>）</rp></ruby>に<ruby><rt></rt>流<rp>（</rp><rt>なが</rt><rp>）</rp></ruby>れる<ruby><rt></rt>声<rp>（</rp><rt>かえ</rt><rp>）</rp></ruby>は<br>
响彻我胸口的声音</p>
<p>ずっとずっと<ruby><rt></rt>僕<rp>（</rp><rt>ぼく</rt><rp>）</rp></ruby>を<ruby><rt></rt>支<rp>（</rp><rt>ささ</rt><rp>）</rp></ruby>えてる<br>
一直一直都支撑着我</p>
<p>イタズラな<ruby><rt></rt>雨<rp>（</rp><rt>あめ</rt><rp>）</rp></ruby>が<ruby><rt></rt>邪魔<rp>（</rp><rt>じゃま</rt><rp>）</rp></ruby>するけど<br>
虽然那淘气的雨前来阻止</p>
<p><ruby><rt></rt>逃<rp>（</rp><rt>に</rt><rp>）</rp></ruby>げ<ruby><rt></rt>出<rp>（</rp><rt>だ</rt><rp>）</rp></ruby>さないから<br>
我也再不会逃避了</p>
<p>Oh</p>
<p>さあ<ruby><rt></rt>行<rp>（</rp><rt>ゆ</rt><rp>）</rp></ruby>こう<br>
好了出发吧</p>
<p><ruby><rt></rt>立<rp>（</rp><rt>た</rt><rp>）</rp></ruby>ち<ruby><rt></rt>止<rp>（</rp><rt>ど</rt><rp>）</rp></ruby>まることなく<br>
永不停息</p>
<p><ruby><rt></rt>流<rp>（</rp><rt>なが</rt><rp>）</rp></ruby>れる<ruby><rt></rt>時<rp>（</rp><rt>とき</rt><rp>）</rp></ruby>に<ruby><rt></rt>負<rp>（</rp><rt>ま</rt><rp>）</rp></ruby>けないように<br>
为了不输给时代的潮流</p>
<p><ruby><rt></rt>何度<rp>（</rp><rt>なんど</rt><rp>）</rp></ruby>も<ruby><rt></rt>立<rp>（</rp><rt>た</rt><rp>）</rp></ruby>ち<ruby><rt></rt>向<rp>（</rp><rt>む</rt><rp>）</rp></ruby>かい<ruby><rt></rt>続<rp>（</rp><rt>つづ</rt><rp>）</rp></ruby>けよう<br>
无论几度亦奋勇面对</p>
<p><ruby><rt></rt>大切<rp>（</rp><rt>たいせつ</rt><rp>）</rp></ruby>なもの<ruby><rt></rt>失<rp>（</rp><rt>うしな</rt><rp>）</rp></ruby> いたくないから<br>
只因不愿再失去重要的人</p>
<p><ruby><rt></rt>信<rp>（</rp><rt>しん</rt><rp>）</rp></ruby>じたその<ruby><rt></rt>先<rp>（</rp><rt>さき</rt><rp>）</rp></ruby>へと<br>
迈向深信的未来</p>
<p>【<ruby>终<rp>（</rp><rt>お</rt><rp>）</rp></ruby>わった】</p>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>生活</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>About Me</title>
    <url>/blog/f0b34752.html</url>
    <content><![CDATA[<blockquote>
<p>A programer, live in Guangzhou, China.</p>
</blockquote>
<p>姓名：老梁<br>
现居：广州<br>
GitHub: <a href="https://github.com/Liangxujian">Liangxujian</a><br>
QQ: 785770487<br>
邮箱: <a href="mailto:13692505204@163.com">13692505204@163.com</a></p>
<div style="text-align:center"><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/cat.jpg" width="300" height="300" style="width:300px; height:300px; border-radius:100%; overflow:hidden;"></div>
<p></br></br></br></br></p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Scrcpy手机投屏</title>
    <url>/blog/7b850af8.html</url>
    <content><![CDATA[<p><a href="https://www.yuque.com/liangxujian/rfusnk/gv83t6">Scrcpy手机投屏 (yuque.com)</a></p>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>生活</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>玩机</tag>
      </tags>
  </entry>
  <entry>
    <title>brave heart-宮崎歩</title>
    <url>/blog/2d18a782.html</url>
    <content><![CDATA[<h1>brave heart - 宮崎歩</h1>
<p><ruby>逃<rp>（</rp><rt>に</rt><rp>）</rp></ruby>げたりあきらめるコトは谁(だれ)も</p>
<p>一瞬(いっしゅん)あればできるから歩(ある)き続(つづ)けよう</p>
<p>君(きみ)にしかできないコトがある青(あお)い星(ほし)に</p>
<p>光(ひかり)がなくせぬように</p>
<p>つかめ!<ruby>描<rp>（</rp><rt>えが</rt><rp>）</rp></ruby>いた梦(ゆめ)を</p>
<p>まもれ!大事(だいじ)な友(とも)を</p>
<p>たくましい自分(じぶん)になれるさ</p>
<p>知(し)らないパワーが宿(やど)るハートに火(ひ)がついたら</p>
<p>どんな愿(ねが)いも嘘(うそ)じゃない</p>
<p>きっとかなうから…show me your brave heart</p>
<p>晴(は)れの日(ひ)ばかりじゃないからたまに</p>
<p>冷(つめ)たい雨(あめ)も振(ふ)るけれど伞(かさ)ひろげよう</p>
<p>生(い)き方(かた)に地図(ちず)なんかないけどだから自由(じゆう)</p>
<p>どこへだって行(い)ける、君(きみ)も</p>
<p>はしれ!风(かぜ)より速(はや)く</p>
<p>めざせ!空(そら)より远(とお)く</p>
<p>新(あたら)しい自分(じぶん)に逢(あ)えるさ</p>
<p>知(し)らない勇気(ゆうき)が眠(ねむ)るハートに気(き)がついたら</p>
<p>胸(むね)の中(なか)のどしゃ降(ぶ)りも</p>
<p>きっと止(と)むから…show me your brave heart</p>
<p>つかめ!眩(まぶ)しい明日(あした)を</p>
<p>まもれ!爱(あい)する人を</p>
<p>たくましい自分(じぶん)になれるさ</p>
<p>こわせ!弱気(よわき)な君(きみ)を</p>
<p>くずせ!ぶつかる壁(かべ)を</p>
<p>热(あつ)い鼓动(こどう)武器(ぶき)になるから</p>
<p>believe in your heart</p>
<p>【<ruby>终<rp>（</rp><rt>お</rt><rp>）</rp></ruby>わった】</p>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>生活</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx.conf文件解析</title>
    <url>/blog/b54088f4.html</url>
    <content><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">全局区</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">user  nobody;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">表示有1个工作的子进程，可以自行修改，但太大无益，因为都需要争夺CPU，设置为 CPU数*核数 最优</span></span><br><span class="line">worker_processes  1;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">error_log  logs/error.log;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">error_log  logs/error.log  info;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">一般是配置nginx进程与连接的特性，如几个同事工作</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">这里表示一个子进程worker最大允许有1024个连接</span></span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里配置http服务器的主要段</span></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line">    </span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">这是虚拟主机段</span></span><br><span class="line">    server &#123;</span><br><span class="line">    	# nginx监听哪个端口</span><br><span class="line">        listen       8081;</span><br><span class="line">        # nginx监听哪个域名</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">定位，把特殊的路径或文件再次定位，如image目录单独处理；.php单独处理等</span></span><br><span class="line">        location / &#123;</span><br><span class="line">        	# 默认</span><br><span class="line">            root   html;</span><br><span class="line">            # 默认主页</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    proxy_pass   http://127.0.0.1;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class="line">        # concurs with nginx&#x27;s one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       8000;</span><br><span class="line">    #    listen       somename:8080;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line">    include vhost/*.conf;</span><br><span class="line"></span><br><span class="line">    # HTTPS server</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       443 ssl;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #    ssl_certificate      cert.pem;</span><br><span class="line">    #    ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/blog/4a17b156.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="quick-start">Quick Start</h2>
<h3 id="create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<p></br></br></br></br></p>
]]></content>
  </entry>
  <entry>
    <title>世界が終るまでは･･･-WANDS</title>
    <url>/blog/a44a3538.html</url>
    <content><![CDATA[<h1>世界が終るまでは･･･（直到世界尽头）-WANDS</h1>
<p>大都会に</p>
<p>僕はもう一人で</p>
<p>投げ捨てられた</p>
<p>空きカンのようだ</p>
<p>互いのすべてを</p>
<p>知りつくすまでが</p>
<p>愛ならば いっそ</p>
<p>永久に眠ろうか</p>
<p>世界が終わるまでは</p>
<p>離れる事もない</p>
<p>そう願っていた</p>
<p>幾千の夜と</p>
<p>戻らない時だけが</p>
<p>何故輝いては</p>
<p>やつれ切った</p>
<p>心までも 壊す</p>
<p>はかなき想い</p>
<p>この tragedy night</p>
<p>そして人は</p>
<p>形を求めて</p>
<p>かけがえのない</p>
<p>何かを失う</p>
<p>欲望だらけの</p>
<p>街じゃ 夜空の</p>
<p>星屑も 僕らを 灯せない</p>
<p>世界が終わる前に</p>
<p>聞かせておくれよ</p>
<p>満開の花が</p>
<p>似合いの catastrophe</p>
<p>誰もが望みながら</p>
<p>永遠を信じない</p>
<p>なのに きっと</p>
<p>明日を夢見てる</p>
<p>はかなき日々と</p>
<p>この tragedy night</p>
<p>世界が終わるまでは</p>
<p>離れる事もない</p>
<p>そう願っていた</p>
<p>幾千の夜と</p>
<p>戻らない時だけが</p>
<p>何故輝いては</p>
<p>やつれ切った</p>
<p>心までも 壊す</p>
<p>はかなき想い</p>
<p>この tragedy night</p>
<p>この tragedy night</p>
<p>【<ruby>终<rp>（</rp><rt>お</rt><rp>）</rp></ruby>わった】</p>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>生活</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>nvm使用与报错</title>
    <url>/blog/dd102d8e.html</url>
    <content><![CDATA[<p>nvm 安装后建议修改镜像地址，否则 nodejs 下载会很慢</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\Windows\system32&gt; nvm node_mirror https://npm.taobao.org/mirrors/node/</span><br><span class="line"><span class="built_in">PS</span> C:\Windows\system32&gt; nvm npm_mirror https://npm.taobao.org/mirrors/npm/</span><br></pre></td></tr></table></figure>
<h1>nvm list</h1>
<p>查看已安装的 nodejs版本</p>
<h1>nvm install</h1>
<h1>nvm uninstall</h1>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\Windows\system32&gt; nvm list</span><br><span class="line"></span><br><span class="line">  * <span class="number">16.18</span>.<span class="number">0</span> (Currently <span class="keyword">using</span> 64-bit executable)</span><br><span class="line">    <span class="number">12.22</span>.<span class="number">12</span></span><br><span class="line"><span class="built_in">PS</span> C:\Windows\system32&gt; nvm install <span class="number">12.22</span>.<span class="number">12</span></span><br><span class="line">Downloading node.js version <span class="number">12.22</span>.<span class="number">12</span> (<span class="number">64</span><span class="literal">-bit</span>)...</span><br><span class="line">Complete</span><br><span class="line">Creating D:\nvm\temp</span><br><span class="line"></span><br><span class="line">Downloading npm version <span class="number">6.14</span>.<span class="number">16</span>... Complete</span><br><span class="line">Installing npm v6.<span class="number">14.16</span>...</span><br><span class="line"></span><br><span class="line">Installation complete. <span class="keyword">If</span> you want to use this version, <span class="built_in">type</span></span><br><span class="line"></span><br><span class="line">nvm use <span class="number">12.22</span>.<span class="number">12</span></span><br></pre></td></tr></table></figure>
<h1>nvm use 报错</h1>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\Windows\system32&gt; nvm list</span><br><span class="line"></span><br><span class="line">  * <span class="number">16.18</span>.<span class="number">0</span> (Currently <span class="keyword">using</span> 64-bit executable)</span><br><span class="line">    <span class="number">12.22</span>.<span class="number">12</span></span><br><span class="line"><span class="built_in">PS</span> C:\Windows\system32&gt; nvm use <span class="number">12.22</span>.<span class="number">12</span></span><br><span class="line"><span class="keyword">exit</span> status <span class="number">145</span>: Ŀ¼���ǿյġ�</span><br><span class="line"></span><br><span class="line"><span class="keyword">exit</span> status <span class="number">1</span>: ���ļ��Ѵ���ʱ���޷��������ļ���</span><br></pre></td></tr></table></figure>
<h2 id="exit-status-1-乱码">exit status 1: 乱码</h2>
<p>报错原因：当前的CMD窗口没有执行该命令的权限，需要使用管理员权限打开的窗口执行nvm use命令</p>
<p>报错原因：之前多次安装 node，出错了就删除包，再次安装，在 C:\Program Files 下是有一个 nodejs 的，但是由于已经删除了 node 的包，所以这个 nodejs 是个无效文件</p>
<p>报错解决：重新安装该版本 nodejs</p>
<h2 id="exit-status-5-乱码">exit status 5: 乱码</h2>
<p>报错原因：nvm 不是安装在 C 盘，且当前命令提示符窗口是 user 权限</p>
<p>报错解决：cmd 窗口使用管理员权限打开即可</p>
<h2 id="exit-status-145-乱码">exit status 145: 乱码</h2>
<p>报错原因：安装 nvm 或 nodejs 的文件本身或路径有误</p>
<p>报错解决：如果是覆盖旧的 nvm 安装，建议删除 nvm 文件夹，然后重新安装 nvm</p>
<ol>
<li>检查安装 nvm 路径与设置放置 nodejs 的路径或文件，是否出现空格或中文，比如默认安装路径 C:\Program Files 中出现了空格。如果有，更改路径或文件夹名称后再使用 nvm use</li>
<li>安装 nvm 前是否原本就有 nodejs 其它版本。如果有，且安装过程中选择合并了以前版本，可以删除 nvm 中所有 nodejs 版本（主要是安装 nvm 前就有的版本），重新安装所需 nodejs，再运行 nvm use</li>
</ol>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>NodeJS</category>
      </categories>
      <tags>
        <tag>NodeJS</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>事务的四种隔离级别</title>
    <url>/blog/ebc52c.html</url>
    <content><![CDATA[<ol>
<li>Read Uncommitted（读未提交）：保证了读取过程中不会读取到非法数据。</li>
<li>READ COMMITTED（读已提交）：大多数主流数据库的默认事务等级，保证了一个事务不会读到另一个并行事务已修改但仍未提交的数据，避免了“脏读”。该级别适用大多数系统。</li>
<li>REPEATABLE READ（可重复读）：保证了一个事务不会修改已经由另一个事务读取但未提交（回滚）的数据。避免了“脏读”和“不可重复读”，但是带来了更多的性能损失。</li>
<li>Serializable（串行化）：最严格的级别，事务串行执行，资源消耗最大。</li>
</ol>
<table border="1" style="table-layout:fixed;">
	<tr>
		<th style="text-align:center">隔离级别</th>
		<th style="text-align:center">脏读<br>Dirty reads</th>
		<th style="text-align:center">脏读<br>Dirty reads</th>
		<th style="text-align:center">幻读<br>phantom</th>
	</tr>
	<tr>
		<td>Read Uncommitted<br>读未提交（不加锁）</td>
		<td bgcolor="#73d13d" style="text-align:center">√</td>
		<td bgcolor="#73d13d" style="text-align:center">√</td>
		<td bgcolor="#73d13d" style="text-align:center">√</td>
	</tr>
	<tr>
		<td>READ COMMITTED<br>读已提交（RC）</td>
		<td bgcolor="#ff4d4f" style="text-align:center">×</td>
		<td bgcolor="#73d13d" style="text-align:center">√</td>
		<td bgcolor="#73d13d" style="text-align:center">√</td>
	</tr>
	<tr>
		<td>REPEATABLE READ<br>可重复读（RR）（默认）</td>
		<td bgcolor="#ff4d4f" style="text-align:center">×</td>
		<td bgcolor="#ff4d4f" style="text-align:center">×</td>
		<td bgcolor="#73d13d" style="text-align:center">√</td>
	</tr>
	<tr>
		<td>Serializable<br>串行化（全程加锁）</td>
		<td bgcolor="#ff4d4f" style="text-align:center">×</td>
		<td bgcolor="#ff4d4f" style="text-align:center">×</td>
		<td bgcolor="#ff4d4f" style="text-align:center">×</td>
	</tr>
</table>
<ul>
<li>脏读：读到了其他事务未提交的脏数据。<br>
例如：事务 B 执行过程中修改了数据 X，在未提交前，事务 A 也读取了 X，但事务 B 却回滚了，这样事务 A 就形成了脏读。</li>
<li>不可重复读：在一个事务内，最开始读到的数据和事务结束前任意时刻读到的同一批数据出现不一致的情况。<br>
例如：事务 A 先读取了一条数据，然后再执行逻辑的时候，事务 B 将这条数据改变了，然后事务 A 再次读取该数据，发现数据不匹配，这就是所谓的不可重复读。</li>
<li>幻读：事务的某次 select 操作得到的结果所表示的数据状态无法支撑其后续的业务操作。<br>
例如：事务 A select 某条记录是否存在，不存在，准备插入此记录，但执行 insert 操作的时候发现此记录已存在，此时就产生了幻读。</li>
</ul>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title>广州地铁</title>
    <url>/blog/ca50bba4.html</url>
    <content><![CDATA[<h1>广州市城市轨道交通第三期建设规划（2017-2023）</h1>
<p><img src="http://localhost:4000/assets/%E5%B9%BF%E5%B7%9E%E5%9C%B0%E9%93%81/homePage.jpg" alt=""></p>
<h2 id="地铁05号线">地铁05号线</h2>
<p><img src="http://localhost:4000/assets/%E5%B9%BF%E5%B7%9E%E5%9C%B0%E9%93%81/2.%E5%9C%B0%E9%93%81%E4%BA%94%E5%8F%B7%E7%BA%BF%E4%B8%9C%E5%BB%B6%E6%AE%B5%E5%B7%A5%E7%A8%8B%E7%BA%BF%E8%B7%AF%E5%B9%B3%E9%9D%A2%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" alt=""></p>
<h2 id="地铁07号线">地铁07号线</h2>
<p><img src="http://localhost:4000/assets/%E5%B9%BF%E5%B7%9E%E5%9C%B0%E9%93%81/4.%E5%9C%B0%E9%93%81%E4%B8%83%E5%8F%B7%E7%BA%BF%E4%BA%8C%E6%9C%9F%E5%B7%A5%E7%A8%8B%E7%BA%BF%E8%B7%AF%E5%B9%B3%E9%9D%A2%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" alt=""></p>
<h2 id="地铁13号线">地铁13号线</h2>
<h2 id="地铁21号线">地铁21号线</h2>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>生活</category>
        <category>日常</category>
      </categories>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Springboot获取本地图片字节流，传入前端显示</title>
    <url>/blog/a52cdf37.html</url>
    <content><![CDATA[<blockquote>
<p>参考网站：</p>
<p><a href="https://www.jianshu.com/p/477b11a0edfb">使用Springboot获取本地图片字节流，传入前端显示 - 简书 (jianshu.com)</a></p>
<p><a href="https://baeldung-cn.com/spring-controller-return-image-file">Returning an Image or a File with Spring | Baeldung中文网 (baeldung-cn.com)</a></p>
</blockquote>
<h1>需求</h1>
<p>前端请求，传入一个用户头像 ID，后端 SpringBoot 根据该 ID 查询第三方服务接口，然后把结果返回给前端。</p>
<h1>导包</h1>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-io/commons-io --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1>代码</h1>
<h2 id="controller">Controller</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/testController&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TestService testService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/getUserAvatar&quot;, produces = MediaType.IMAGE_JPEG_VALUE)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;<span class="type">byte</span>[]&gt; getUserAvatarById(<span class="meta">@RequestParam(&quot;userAvatarId&quot;)</span> <span class="meta">@ApiParam(&quot;用户ID&quot;)</span> String userAvatarId) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> testService.getUserAvatar(userAvatarId);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">        headers.setContentType(MediaType.IMAGE_JPEG);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(IOUtils.toByteArray(in), headers, HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="service">Service</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> okhttp3.MediaType;</span><br><span class="line"><span class="keyword">import</span> okhttp3.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> retrofit2.Response;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">TestService</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(TestServiceImpl.class);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TestApiClient apiClient;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> InputStream <span class="title function_">getUserAvatar</span><span class="params">(String userAvatarId)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        Response&lt;ResponseBody&gt; response = apiClient.getUserAvatar(userAvatarId);</span><br><span class="line">        <span class="type">ResponseBody</span> <span class="variable">body</span> <span class="operator">=</span> response.body();</span><br><span class="line">        <span class="keyword">if</span> (body == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> InputStream.nullInputStream();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">MediaType</span> <span class="variable">mediaType</span> <span class="operator">=</span> body.contentType();</span><br><span class="line">        <span class="keyword">if</span> (mediaType != <span class="literal">null</span> &amp;&amp; mediaType.type().contains(<span class="string">&quot;image&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> body.byteStream();</span><br><span class="line">        &#125;</span><br><span class="line">        logger.warn(<span class="string">&quot;getUserAvatar failure by userAvatarId = &#123;&#125;. &#123;&#125;&quot;</span>, userAvatarId, body.string());</span><br><span class="line">        <span class="keyword">return</span> InputStream.nullInputStream();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>工作记录</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>椰汁南瓜西米露</title>
    <url>/blog/c034f861.html</url>
    <content><![CDATA[<h1>材料</h1>
<h2 id="主料">主料</h2>
<ul>
<li>[ ] 南瓜（一小圈）</li>
<li>[ ] 西米露</li>
</ul>
<h2 id="配料">配料</h2>
<h2 id="调味料">调味料</h2>
<ul>
<li>[ ] 冰糖</li>
<li>[ ] 椰汁</li>
</ul>
<h1>步骤</h1>
<ol>
<li>烧开水下西米，搅拌均匀</li>
<li>上盖转小火 15 分钟，直到西米半透明只有中间白点，关火盖盖焖 25 分钟</li>
<li>南瓜去皮切块</li>
<li>西米捞出到冰水，防止粘到一起</li>
<li>南瓜块 + 冰糖 + 冷水，盖盖 15 分钟</li>
<li>放入西米 + 椰浆，搅拌均匀 End</li>
</ol>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>生活</category>
        <category>饮品</category>
      </categories>
      <tags>
        <tag>饮品</tag>
      </tags>
  </entry>
  <entry>
    <title>虾仁菌菇汤.md</title>
    <url>/blog/7353ca67.html</url>
    <content><![CDATA[<h1>材料</h1>
<h2 id="主料">主料</h2>
<ul>
<li>[ ] 娃娃菜（1 颗）</li>
<li>[ ] 新鲜虾仁（150g）</li>
<li>[ ] 番茄（1-2 个）</li>
<li>[ ] 金针菇</li>
<li>[ ] 香菇（2-3 个）</li>
</ul>
<h2 id="配料">配料</h2>
<ul>
<li>[ ] 葱</li>
<li>[ ] 蒜</li>
</ul>
<h2 id="调味料">调味料</h2>
<ul>
<li>[ ] 油</li>
<li>[ ] 盐</li>
<li>[ ] 胡椒粉</li>
</ul>
<h1>步骤</h1>
<ol>
<li>娃娃菜切掉根部，对半切开</li>
<li>番茄去皮六等分切，再切半</li>
<li>葱切葱花，蒜切蒜片</li>
<li>热油下一半葱花、蒜片、虾仁，炒至虾仁变色，装好备用</li>
<li>下油炒番茄，炒至出汁（可考虑加番茄酱）</li>
<li>放入金针菇、娃娃菜、香菇、清水，盖盖煮5分钟</li>
<li>放入虾仁，1勺盐+ 1勺胡椒粉调味</li>
<li>葱花点缀 End</li>
</ol>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>生活</category>
        <category>汤水</category>
      </categories>
      <tags>
        <tag>汤水</tag>
      </tags>
  </entry>
  <entry>
    <title>豆腐萝卜菌菇汤</title>
    <url>/blog/d2066371.html</url>
    <content><![CDATA[<h1>材料</h1>
<h2 id="主料">主料</h2>
<ul>
<li>[ ] 白萝卜</li>
<li>[ ] 老豆腐</li>
<li>[ ] 金针菇</li>
<li>[ ] 海鲜菇</li>
<li>[ ] 鸡蛋</li>
</ul>
<ul>
<li>虾皮 or 虾米</li>
</ul>
<h2 id="配料">配料</h2>
<ul>
<li>[ ] 葱</li>
</ul>
<h2 id="调味料">调味料</h2>
<ul>
<li>[ ] 盐</li>
</ul>
<h1>步骤</h1>
<ol>
<li>烧开水</li>
<li>金针菇、海鲜菇清洗</li>
<li>白萝卜去皮切粗条</li>
<li>老豆腐对角切三角形，太厚的话继续切薄</li>
<li>2 个鸡蛋打鸡蛋液淋到切好的豆腐上</li>
<li>下油煎豆腐至两面金黄，然后加入开水（，加虾皮 or 虾米）</li>
<li>加入金针菇 + 蟹味菇 + 白萝卜条，上盖中大火 10 分钟</li>
<li>葱切葱花</li>
<li>放盐调味，葱花点缀 End</li>
</ol>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/%E6%B5%B7%E9%B2%9C%E8%8F%87.jpg" alt="海鲜菇"></p>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>生活</category>
        <category>汤水</category>
      </categories>
      <tags>
        <tag>汤水</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK1.8之Lambda表达式</title>
    <url>/blog/77a7a861.html</url>
    <content><![CDATA[<h1>一、Lambda 表达式</h1>
<h2 id="1-1-基本格式">1.1 基本格式</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(参数列表)-&gt;&#123;代码&#125;</span><br></pre></td></tr></table></figure>
<h2 id="1-2-匿名内部类方式">1.2 匿名内部类方式</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 传统写法需要传参</span></span><br><span class="line">        <span class="type">RunnableRealization</span> <span class="variable">runnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RunnableRealization</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread01</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(runnable);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         稍微优化的【匿名内部类】写法，进一步优化就是lambda写法了</span></span><br><span class="line"><span class="comment">         匿名内部类的作用：</span></span><br><span class="line"><span class="comment">             1.避免匿名内部类定义过多；</span></span><br><span class="line"><span class="comment">             2.使代码看起来简洁</span></span><br><span class="line"><span class="comment">             3.简化代码，只留下核心逻辑</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread02</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * When an object implementing interface &lt;code&gt;Runnable&lt;/code&gt; is used</span></span><br><span class="line"><span class="comment">             * to create a thread, starting the thread causes the object&#x27;s</span></span><br><span class="line"><span class="comment">             * &lt;code&gt;run&lt;/code&gt; method to be called in that separately executing</span></span><br><span class="line"><span class="comment">             * thread.</span></span><br><span class="line"><span class="comment">             * &lt;p&gt;</span></span><br><span class="line"><span class="comment">             * The general contract of the method &lt;code&gt;run&lt;/code&gt; is that it may</span></span><br><span class="line"><span class="comment">             * take any action whatsoever.</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@see</span> Thread#run()</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;祖安狂人蒙多&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一次性的类，用在new Thread中充当Runnable对的实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RunnableRealization</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;祖安狂人蒙多&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="示例一">示例一</h2>
<p>在创建线程并启动时可以使用匿名内部类的写法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure>
<p>可以使用 Lambda 的格式对其进行修改。修改后如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;).start();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最简写法</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; System.out.println(<span class="string">&quot;hello world&quot;</span>)).start();</span><br></pre></td></tr></table></figure>
<h2 id="示例二">示例二</h2>
<p>现有方法定义如下，其中 IntBinaryOperator 是一个接口。先使用匿名内部类的写法调用该方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	calculateNum(<span class="keyword">new</span> <span class="title class_">IntBinaryOperator</span>() &#123;</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">applyAsInt</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> left + right;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">calculateNum</span><span class="params">(IntBinaryOperator operator)</span> &#123;</span><br><span class="line">	<span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">	<span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">	<span class="keyword">return</span> operator.applyAsInt(a, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Lambda 写法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	calculateNum((left, right) -&gt; &#123;</span><br><span class="line">		<span class="keyword">return</span> left + right;</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最简写法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	calculateNum((left, right) -&gt; left + right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="示例三">示例三</h2>
<p>现有方法定义如下，其中 IntPredicate 是一个接口。先使用匿名内部类的写法调用该方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	printNum(<span class="keyword">new</span> <span class="title class_">IntPredicate</span>() &#123;</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> value%<span class="number">2</span> == <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printNum</span><span class="params">(IntPredicate predicate)</span> &#123;</span><br><span class="line">	<span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i : arr) &#123;</span><br><span class="line">		<span class="keyword">if</span> (predicate.test(i)) &#123;</span><br><span class="line">			System.out.println(i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Lambda 写法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	printNum((value) -&gt; &#123;</span><br><span class="line">		<span class="keyword">return</span> value%<span class="number">2</span> == <span class="number">0</span>;</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最简写法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	printNum(value -&gt; value%<span class="number">2</span> == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="示例四">示例四</h2>
<p>现有方法定义如下，其中 Function 是一个接口。先使用匿名内部类的写法调用该方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	typeConver(<span class="keyword">new</span> <span class="title class_">Function</span>&lt;String, Integer&gt;() &#123;</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="keyword">public</span> Integer <span class="title function_">apply</span><span class="params">(String s)</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> Integer.valueOf(s);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;R&gt; R <span class="title function_">typeConver</span><span class="params">(Function&lt;String, R&gt; function)</span> &#123;</span><br><span class="line">	<span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">	<span class="type">R</span> <span class="variable">result</span> <span class="operator">=</span> function.apply(str);</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Lambda 写法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	typeConver((s) -&gt; &#123;</span><br><span class="line">		<span class="keyword">return</span> Integer.valueOf(s);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最简写法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	typeConver(Integer::valueOf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="示例五">示例五</h2>
<p>现有方法定义如下，其中 Int 是一个接口。先使用匿名内部类的写法调用该方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	foreachArr(<span class="keyword">new</span> <span class="title class_">IntConsumer</span>() &#123;</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">			System.out.println(value);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">foreachArr</span><span class="params">(IntConsumer consumer)</span> &#123;</span><br><span class="line">	<span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i : arr) &#123;</span><br><span class="line">		consumer.accept(i);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Lambda 写法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	foreachArr((value) -&gt; &#123;</span><br><span class="line">		System.out.println(value);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最简写法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	foreachArr(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>二、Stream 流</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">streamDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Stream</span> <span class="variable">stream</span> <span class="operator">=</span> Stream.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">    String[] strArray = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>&#125;;</span><br><span class="line">    stream = Stream.of(strArray);</span><br><span class="line">    stream = Arrays.stream(strArray);</span><br><span class="line">    List&lt;String&gt; list = Arrays.asList(strArray);</span><br><span class="line">    stream = list.stream();</span><br><span class="line">    <span class="comment">// 一个Stream流只可以使用一次，这段代码为了简洁而重复使用了数次，因此会抛出 stream has already been operated upon or closed 异常</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Stream&lt;String&gt; stream2 = Stream.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">        <span class="comment">// 转换成 Array</span></span><br><span class="line">        String[] strArray1 = stream2.toArray(String[]::<span class="keyword">new</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转换成 Collection</span></span><br><span class="line">        List&lt;String&gt; list1 = stream2.collect(Collectors.toList());</span><br><span class="line">        List&lt;String&gt; list2 = stream2.collect(Collectors.toCollection(ArrayList::<span class="keyword">new</span>));</span><br><span class="line">        <span class="type">Set</span> <span class="variable">set1</span> <span class="operator">=</span> stream2.collect(Collectors.toSet());</span><br><span class="line">        <span class="type">Stack</span> <span class="variable">stack1</span> <span class="operator">=</span> stream2.collect(Collectors.toCollection(Stack::<span class="keyword">new</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转换成 String</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> stream.collect(Collectors.joining()).toString();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-1-stream-中间操作符">2.1 Stream 中间操作符</h2>
<table>
<thead>
<tr>
<th>流方法</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>filter</td>
<td>用于通过设置的条件过滤出元素</td>
</tr>
<tr>
<td>distinct</td>
<td>返回一个元素各异（根据流所生成元素的hashCode和equals方法实现）的流</td>
</tr>
<tr>
<td>limit</td>
<td>会返回一个不超过给定长度的流</td>
</tr>
<tr>
<td>skip</td>
<td>返回一个扔掉了前n个元素的流</td>
</tr>
<tr>
<td>map</td>
<td>接受一个函数作为参数。这个函数会被应用到每个元素上，并将其映射成一个新的元素（使用映射一词，是因为它和转换类似，但其中的细微差别在于它是“创建一个新版本”而不是去“修改”）</td>
</tr>
<tr>
<td>flatMap</td>
<td>使用flatMap方法的效果是，各个数组并不是分别映射成一个流，而是映射成流的内容。所有使用map(Arrays::stream)时生成的单个流都被合并起来，即扁平化为一个流</td>
</tr>
<tr>
<td>sorted</td>
<td>返回排序后的流</td>
</tr>
</tbody>
</table>
<h3 id="stream-filter">stream().filter()</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">filterListDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;String&gt; accountList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    accountList.add(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">    accountList.add(<span class="string">&quot;jerry&quot;</span>);</span><br><span class="line">    accountList.add(<span class="string">&quot;beita&quot;</span>);</span><br><span class="line">    accountList.add(<span class="string">&quot;shuke&quot;</span>);</span><br><span class="line">    accountList.add(<span class="string">&quot;damu&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.1 业务要求：长度大于等于5的有效账号</span></span><br><span class="line">    <span class="keyword">for</span> (String account : accountList) &#123;</span><br><span class="line">        <span class="keyword">if</span> (account.length() &gt;= <span class="number">5</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;有效账号：&quot;</span> + account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.2 迭代方式进行操作</span></span><br><span class="line">    Iterator&lt;String&gt; it = accountList.iterator();</span><br><span class="line">    <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">account</span> <span class="operator">=</span> it.next();</span><br><span class="line">        <span class="keyword">if</span> (account.length() &gt;= <span class="number">5</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;it有效账号：&quot;</span> + account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.3 Stream结合lambda表达式，完成业务处理</span></span><br><span class="line">    List&lt;String&gt; validAccounts = accountList.stream().filter(s -&gt; s.length() &gt;= <span class="number">5</span>).collect(Collectors.toList());</span><br><span class="line">    System.out.println(validAccounts);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">filterArrayDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// arrays -&gt; stream</span></span><br><span class="line">    Integer[] nums = <span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;;</span><br><span class="line">    System.out.println(Arrays.asList(nums));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// filter(Predicate(T t)-&gt;Boolean) 接受一个参数，验证参数是否符合设置的条件</span></span><br><span class="line">    <span class="comment">// toArray() 从Stream类型抽取数据转换成数组</span></span><br><span class="line">    Integer[] nums2 = Stream.of(nums).filter(x -&gt; x % <span class="number">2</span> == <span class="number">0</span>).toArray(Integer[]::<span class="keyword">new</span>);</span><br><span class="line">    System.out.println(Arrays.asList(nums2));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="stream-distinct">stream().distinct()</h3>
<h3 id="stream-min-：取最小值">stream().min()：取最小值</h3>
<h3 id="stream-max-：取最大值">stream().max()：取最大值</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reduceDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; numList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    numList.add(<span class="number">1</span>);</span><br><span class="line">    numList.add(<span class="number">3</span>);</span><br><span class="line">    numList.add(<span class="number">2</span>);</span><br><span class="line">    numList.add(<span class="number">5</span>);</span><br><span class="line">    numList.add(<span class="number">4</span>);</span><br><span class="line">    numList.add(<span class="number">6</span>);</span><br><span class="line">    numList.add(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// min/max/distinct</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">minNum1</span> <span class="operator">=</span> numList.stream().min((o1, o2) -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> o1 - o2;</span><br><span class="line">    &#125;).get();</span><br><span class="line">    System.out.println(minNum1);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">minNum2</span> <span class="operator">=</span> numList.stream().min(Comparator.comparingInt(o -&gt; o)).get();</span><br><span class="line">    System.out.println(minNum2);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">maxNum</span> <span class="operator">=</span> numList.stream().max((o1, o2) -&gt; o1 - o2).get();</span><br><span class="line">    System.out.println(maxNum);</span><br><span class="line">    numList.stream().distinct().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="stream-limit">stream().limit()</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reduceDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; numList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    numList.add(<span class="number">1</span>);</span><br><span class="line">    numList.add(<span class="number">3</span>);</span><br><span class="line">    numList.add(<span class="number">2</span>);</span><br><span class="line">    numList.add(<span class="number">5</span>);</span><br><span class="line">    numList.add(<span class="number">4</span>);</span><br><span class="line">    numList.add(<span class="number">6</span>);</span><br><span class="line">    numList.add(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// limit</span></span><br><span class="line">    List&lt;Integer&gt; limitNum = numList.stream().limit(<span class="number">2</span>).collect(Collectors.toList());</span><br><span class="line">    System.out.println(limitNum);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="stream-skip">stream().skip()</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reduceDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; numList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    numList.add(<span class="number">1</span>);</span><br><span class="line">    numList.add(<span class="number">3</span>);</span><br><span class="line">    numList.add(<span class="number">2</span>);</span><br><span class="line">    numList.add(<span class="number">5</span>);</span><br><span class="line">    numList.add(<span class="number">4</span>);</span><br><span class="line">    numList.add(<span class="number">6</span>);</span><br><span class="line">    numList.add(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// skip</span></span><br><span class="line">    List&lt;Integer&gt; limitNum2 = numList.stream().skip(<span class="number">2</span>).collect(Collectors.toList());</span><br><span class="line">    System.out.println(limitNum2);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="stream-map">stream().map()</h3>
<p>接受一个函数作为参数。这个函数会被应用到每个元素上，并将其映射成一个新的元素。</p>
<p>（使用映射一词，是因为它和转换类似，但其中的细微差别在于它是“创建一个新版本”而不是去“修改”）</p>
<p><strong>map 是对流中的每一个元素进行处理。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mapDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="comment">// list -&gt; stream</span></span><br><span class="line">    System.out.println(list);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// map(Function(T, R)-&gt; R) 接受一个参数，通过运算得到转换后的数据</span></span><br><span class="line">    <span class="comment">// collect()</span></span><br><span class="line">    List&lt;Double&gt; list2 = list.stream().map(x -&gt; Math.pow(x, <span class="number">2</span>)).collect(Collectors.toList());</span><br><span class="line">    System.out.println(list2);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; nameList = Arrays.asList(<span class="string">&quot;zs&quot;</span>, <span class="string">&quot;ls&quot;</span>, <span class="string">&quot;ww&quot;</span>, <span class="string">&quot;zl&quot;</span>);</span><br><span class="line">    <span class="comment">// 字母转大写</span></span><br><span class="line">    nameList.stream().map(String::toUpperCase).collect(Collectors.toList()).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转换数据类型</span></span><br><span class="line">    list.stream().map(String::valueOf).collect(Collectors.toList()).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取平方</span></span><br><span class="line">    list.stream().map(n -&gt; n*n).collect(Collectors.toList()).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    List&lt;String&gt; strList = Arrays.asList(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;abc&quot;</span>, <span class="string">&quot;bc&quot;</span>, <span class="string">&quot;efg&quot;</span>, <span class="string">&quot;abcd&quot;</span>, <span class="string">&quot;jkl&quot;</span>, <span class="string">&quot;jkl&quot;</span>);</span><br><span class="line">    List&lt;String&gt; resultList = strList.stream().map(str -&gt; str + <span class="string">&quot;-itcast&quot;</span>).collect(Collectors.toList());</span><br><span class="line">    System.out.println(resultList);</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="stream-flatmap">stream().flatMap()</h3>
<p>使用 flatMap 方法的效果是，各个数组并不是分别映射成一个流，而是映射成流的内容。所有使用 map(Arrays::stream) 时生成的单个流都被合并起来，即扁平化为一个流。</p>
<p><strong>flatMap 流扁平化，就是把流中的每一个元素都转化成另一个流，然后把所有流汇聚起来成一个流。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">flatMapDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;String&gt; strList = Arrays.asList(<span class="string">&quot;a bc&quot;</span>, <span class="string">&quot;ab c&quot;</span>, <span class="string">&quot;b c&quot;</span>, <span class="string">&quot;efg&quot;</span>, <span class="string">&quot;abcd&quot;</span>, <span class="string">&quot;jkl&quot;</span>, <span class="string">&quot;jkl&quot;</span>);</span><br><span class="line">    <span class="comment">// List&lt;String&gt; resultList = strList.stream().flatMap(x -&gt; Arrays.asList(x.split(&quot; &quot;)).stream()).collect(Collectors.toList());</span></span><br><span class="line">    List&lt;String&gt; resultList = strList.stream().flatMap(x -&gt; Arrays.stream(x.split(<span class="string">&quot; &quot;</span>))).collect(Collectors.toList());</span><br><span class="line">    System.out.println(resultList);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="stream-sorted">stream().sorted()</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reduceDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; numList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    numList.add(<span class="number">1</span>);</span><br><span class="line">    numList.add(<span class="number">3</span>);</span><br><span class="line">    numList.add(<span class="number">2</span>);</span><br><span class="line">    numList.add(<span class="number">5</span>);</span><br><span class="line">    numList.add(<span class="number">4</span>);</span><br><span class="line">    numList.add(<span class="number">6</span>);</span><br><span class="line">    numList.add(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// sorted().一般在skip/limit或者filter之后进行</span></span><br><span class="line">    List&lt;Integer&gt; sortedNum = numList.stream().skip(<span class="number">2</span>).limit(<span class="number">5</span>).sorted().collect(Collectors.toList());</span><br><span class="line">    System.out.println(sortedNum);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-2-stream-终止操作符">2.2 Stream 终止操作符</h2>
<table>
<thead>
<tr>
<th>流方法</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>anyMatch</td>
<td>检查是否至少匹配一个元素，返回boolean</td>
</tr>
<tr>
<td>allMatch</td>
<td>检查是否匹配所有元素，返回boolean</td>
</tr>
<tr>
<td>noneMatch</td>
<td>检查是否没有匹配所有元素，返回boolean</td>
</tr>
<tr>
<td>findAny</td>
<td>将返回当前流中的任意元素</td>
</tr>
<tr>
<td>findFirst</td>
<td>返回第一个元素</td>
</tr>
<tr>
<td>forEach</td>
<td>遍历流</td>
</tr>
<tr>
<td>collect</td>
<td>收集器，将流转换为其他形式</td>
</tr>
<tr>
<td>reduce</td>
<td>可以将流中元素反复结合起来，得到一个值</td>
</tr>
<tr>
<td>count</td>
<td>返回流中元素总数</td>
</tr>
</tbody>
</table>
<h3 id="stream-anymatch">stream().anyMatch()</h3>
<h3 id="stream-allmatch">stream().allMatch()</h3>
<h3 id="stream-nonematch">stream().noneMatch()</h3>
<h3 id="stream-findany">stream().findAny()</h3>
<h3 id="stream-findfirst">stream().findFirst()</h3>
<h3 id="stream-foreach">stream().forEach()</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">forEachDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="comment">// forEach: 接受一个lambda表达式，在Stream每个元素上执行指定的操作</span></span><br><span class="line">    list.stream().filter(n -&gt; n % <span class="number">2</span> == <span class="number">0</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;b&quot;</span>, <span class="string">&quot;b&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;c&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;d&quot;</span>, <span class="string">&quot;d&quot;</span>);</span><br><span class="line">    map.forEach((k, v) -&gt; System.out.println(<span class="string">&quot;k=&quot;</span> + k + <span class="string">&quot;，v=&quot;</span> + v));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="stream-collect">stream().collect()</h3>
<h3 id="stream-reduce">stream().reduce()</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reduceDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; numList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    numList.add(<span class="number">1</span>);</span><br><span class="line">    numList.add(<span class="number">3</span>);</span><br><span class="line">    numList.add(<span class="number">2</span>);</span><br><span class="line">    numList.add(<span class="number">5</span>);</span><br><span class="line">    numList.add(<span class="number">4</span>);</span><br><span class="line">    numList.add(<span class="number">6</span>);</span><br><span class="line">    numList.add(<span class="number">6</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// reduce</span></span><br><span class="line">    Optional&lt;Integer&gt; sum1 = numList.stream().reduce((x, y) -&gt; x + y);</span><br><span class="line">    System.out.println(sum1.get());</span><br><span class="line">    Optional&lt;Integer&gt; sum2 = numList.stream().reduce(Integer::sum);</span><br><span class="line">    System.out.println(sum2.get());</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="stream-count">stream().count()</h3>
<h1>三、Lambda：函数式接口</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaDemo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        MobilePhone phone;</span><br><span class="line">        <span class="comment">// 所有的Lambda的类型都是一个接口，而Lambda表达式本身，就是这个接口的实现</span></span><br><span class="line">        phone = () -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;开机！&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        phone.powerOn();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MobilePhone</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">powerOn</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OppoPhone</span> <span class="keyword">implements</span> <span class="title class_">MobilePhone</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">powerOn</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Oppo手机开机！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>如果定义成实现类，就会报错</strong></p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1655199527943-7baca5ca-351d-4d7d-b004-583907ca7170.png" alt=""></p>
<h1>四、Lambda：方法与构造函数引用</h1>
<h2 id="4-1-实例对象-实例方法-类名-方法名">4.1 实例对象::实例方法（类名::方法名）</h2>
<p>如果两个方法，除了方法名之外，方法参数和返回类型都一致，就称为：方法签名一致</p>
<p>如果某个方法和接口里定义的函数恰好一致，就可以直接传入方法引用。</p>
<p>有点接口方法懒得实现了，然后直接借用其他方法的意思</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaDemo03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 原始的lambda写法</span></span><br><span class="line">        <span class="type">parseIntNum</span> <span class="variable">parseIntNum1</span> <span class="operator">=</span> (str) -&gt; Integer.parseInt(str);</span><br><span class="line">        System.out.println(parseIntNum1.pass(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">        <span class="comment">// 改进型lambda写法</span></span><br><span class="line">        <span class="type">parseIntNum</span> <span class="variable">parseIntNum2</span> <span class="operator">=</span> Integer::parseInt;</span><br><span class="line">        System.out.println(parseIntNum2.pass(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口定义</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">parseIntNum</span> &#123;</span><br><span class="line">    <span class="comment">// 定义一个String转化成Integer的方法</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">pass</span><span class="params">(String s)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果接口中存在有多个抽象方法，那么就不能直接通过接口来匹配到具体的函数，报错：is not a functional interface</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1655203558293-07ec7c2e-d5c3-4f87-a3b6-e581ec8163af.png" alt=""></p>
<h2 id="4-2-数据类型-new-方法返回值-new">4.2 数据类型::new（方法返回值::new）</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaDemo04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建长度为10的数组</span></span><br><span class="line">        <span class="comment">// 原始的lambda写法</span></span><br><span class="line">        IntFunction&lt;<span class="type">int</span>[]&gt; arr1 = <span class="keyword">new</span> <span class="title class_">IntFunction</span>&lt;<span class="type">int</span>[]&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span>[] apply(<span class="type">int</span> num) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[num];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        arr1.apply(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">// 改进型lambda写法</span></span><br><span class="line">        IntFunction&lt;<span class="type">int</span>[]&gt; arr2 = <span class="type">int</span>[]::<span class="keyword">new</span>;</span><br><span class="line">        arr2.apply(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>五、Lambda：作用域</h1>
<h2 id="5-1-基础类型变量">5.1 基础类型变量</h2>
<p>传入 lambda 的变量被隐式 final 所修饰，不能被修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaDemo05</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="string">&quot;666&quot;</span>;</span><br><span class="line">        <span class="type">StrToInt05</span> <span class="variable">sti</span> <span class="operator">=</span> (str -&gt; Integer.parseInt(str + temp));</span><br><span class="line">        System.out.println(sti.change(temp));</span><br><span class="line"><span class="comment">//        temp = &quot;000&quot;;</span></span><br><span class="line"><span class="comment">//        System.out.println(sti.change(temp));</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口定义</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">StrToInt05</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个String转化成Integer的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">change</span><span class="params">(String s)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1655462587971-b10e98a3-899e-4a54-90d4-d234e602c434.png" alt=""></p>
<h2 id="5-2-引用类型变量">5.2 引用类型变量</h2>
<p>如果是引用类型的话就不会报错，因为 Lambda 能够感知外部对引用类型变量的改变，不会出现数据不同步的问题（静态变量和实例变量也是不会报错）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaDemo06</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;111&quot;</span>);</span><br><span class="line">        <span class="type">StrToInt06</span> <span class="variable">sti</span> <span class="operator">=</span> (str -&gt; Integer.parseInt(list.get(<span class="number">0</span>)));</span><br><span class="line">        System.out.println(sti.change(<span class="string">&quot;000&quot;</span>));</span><br><span class="line">        list.set(<span class="number">0</span>, <span class="string">&quot;666&quot;</span>);</span><br><span class="line">        System.out.println(sti.change(<span class="string">&quot;000&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口定义</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">StrToInt06</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个String转化成Integer的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">change</span><span class="params">(String s)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>六、Lambda：访问局部变量</h1>
<h1>七、Lambda：访问对象字段与静态变量</h1>
<h1>八、Lambda：访问接口的默认方法</h1>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库事务</title>
    <url>/blog/587418e1.html</url>
    <content><![CDATA[<p>数据库事务就是一组 SQL 语句，这组 SQL 语句是一个逻辑工作单元。该单元<strong>作为一个整体永久性地修改</strong>或<strong>作为一个整体取消</strong>对数据库的修改。</p>
<p>定义事务的语句一般有三条：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span> TRANSACTION; <span class="comment">-- 表示事务开始</span></span><br><span class="line"><span class="keyword">COMMIT</span>;            <span class="comment">-- 表示事务提交</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;          <span class="comment">-- 表示事务回滚</span></span><br></pre></td></tr></table></figure>
<h1>一、 当前读和快照读</h1>
<h2 id="1-1-当前读">1.1 当前读</h2>
<p>当前读<strong>读取的是数据的最新版本</strong>，要保证其他并发事务不能修改当前记录，所以会对读取的记录进行加锁。</p>
<p>像 select …… lock in share mode（共享锁）；select …… for update，update，insert，delete（排他锁）这些操作都会触发当前读。</p>
<h2 id="1-2-快照读">1.2 快照读</h2>
<p>像不加锁的 select …… 操作就是快照读，即不加锁的非阻塞读。</p>
<p>快照读的前提是：<strong>隔离级别不是串行级别</strong>，串行级别下的快照读会退化成当前读。</p>
<p>之所以出现快照读的情况，是基于提高并发性能的考虑，快照读的实现是基于多版本并发控制，即 MVCC，可以认为 MVCC 是行锁的一个变种，但它在很多情况下，避免了加锁操作，降低了开销；既然是基于多版本，即快照读<strong>可能读到的并不一定是数据的最新版本，而有可能是之前的历史版本</strong>。</p>
<h1>二、MVCC（多版本并发控制）</h1>
<p>MVCC（Multi-Version Concurrency Control），即多版本并发控制，是 MySQL 事务隔离级别中的一个重要概念。</p>
<p>这是一种并发控制的方法，一般在数据库管理系统中，实现对数据库的并发访问，在编程语言中实现事务内存。</p>
<p>MVCC 在 MySQL InnoDB 中的实现主要是为了提高数据库并发性能，用更好的方式去处理读-写冲突，做到即使有读写冲突时，也能做到不加锁，非阻塞并发读。</p>
<p>这仅仅只是一种理想的概念，即：维持一个数据的多个版本，使得读写操作没有冲突。</p>
<p>快照读就是 MySQL 为了实现 MVCC 理想模型，的其中一个具体非阻塞读功能。</p>
<h2 id="2-1-mvcc-实现原理">2.1 MVCC 实现原理</h2>
<p>MySQL 4.1开始支持每个 InnoDB 引擎的表单独放到一个表空间里。InnoDB 通过使用 MVCC 来获取高并发性，并且实现 SQL 标准的 4 种隔离级别，同时使用一种被称为 next-key locking 的策略来避免幻读（phantom）现象。</p>
<p>除此之外 InnoDB 引擎还提供了插入缓存（insert buffer）、二次写（double write）、自适应哈西索引（adaptive hash index）、预读（read ahead）等高性能技术。</p>
<h3 id="2-1-1-隐式字段">2.1.1 隐式字段</h3>
<ul>
<li>DB_TRX_ID：6byte，创建或者最后一次修改该记录的事务 ID</li>
<li>DB_ROW_ID：6byte，隐藏主键【如果当前表有主键，则隐藏主键=主键；如果没有主键，则 InnoDB 会自动以 DB_ROW_ID 产生一个聚簇索引】</li>
<li>DB_ROLL_PTR：7byte，回滚指针【如果是新插入的数据，回滚指针为null】</li>
</ul>
<p>例如：insert 一条数据</p>
<table border="1" style="table-layout:fixed;">
	<tr>
		<th style="text-align:center" bgcolor="#91d5ff">name</th>
		<th style="text-align:center" bgcolor="#91d5ff">age</th>
		<th style="text-align:center" bgcolor="#91d5ff">gender</th>
		<th style="text-align:center" bgcolor="#ffa940">DB_TRX_ID</th>
		<th style="text-align:center" bgcolor="#ffa940">DB_ROLL_PTR</th>
		<th style="text-align:center" bgcolor="#ffa940">DB_ROW_ID</th>
	</tr>
	<tr align="center">
		<td bgcolor="#91d5ff">李四</td>
		<td bgcolor="#91d5ff">12</td>
		<td bgcolor="#91d5ff">man</td>
		<td bgcolor="#ffa940">1</td>
		<td bgcolor="#ffa940">1</td>
		<td bgcolor="#ffa940">null</td>
	</tr>
	<tr align="center">
		<td colspan="3">对用户可见</td>
		<td colspan="3">对用户不可见</td>
	</tr>
</table>
<h3 id="2-1-2-undolog-回滚日志">2.1.2 undolog（回滚日志）</h3>
<p>同一条数据，多次修改会存在多个历史版本，保存在 undolog 中，形成一个<strong>线性表（链表）</strong>。其中链首存储的是最新的历史记录，链尾是最早的历史记录。</p>
<p>数据表中有多条数据，多条数据发生了多次修改，那么则会存在多个链表。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> table_a <span class="keyword">SET</span> name <span class="operator">=</span> &quot;李四&quot;;</span><br></pre></td></tr></table></figure>
<table border="1" style="table-layout:fixed;">
	<tr>
		<th style="text-align:center" bgcolor="#40a9ff">name</th>
		<th style="text-align:center" bgcolor="#40a9ff">age</th>
		<th style="text-align:center" bgcolor="#40a9ff">gender</th>
		<th style="text-align:center" bgcolor="#ffa940">DB_TRX_ID</th>
		<th style="text-align:center" bgcolor="#ffa940">DB_ROLL_PTR</th>
		<th style="text-align:center" bgcolor="#ffa940">DB_ROW_ID</th>
	</tr>
	<tr align="center">
		<td bgcolor="#40a9ff">李四</td>
		<td bgcolor="#40a9ff">12</td>
		<td bgcolor="#40a9ff">man</td>
		<td bgcolor="#ffa940">2</td>
		<td bgcolor="#ffa940">1</td>
		<td bgcolor="#ffa940">0x123</td>
	</tr>
	<tr align="center">
		<td colspan="3">对用户可见</td>
		<td colspan="3">对用户不可见</td>
	</tr>
</table>
这时旧数据会保存到 undolog 中，新数据的【回滚指针（DB_ROLL_PTR）】指向 undolog 中旧数据的【回滚指针（DB_ROLL_PTR）】
<h3 id="2-1-3-readview-读视图">2.1.3 readview（读视图）</h3>
<p>事务在进行快照读（select ……）的时候，会产生【readview（读视图）】</p>
<p>事务在执行快照读的那一刻，会生成数据库系统当前的一个快照。记录并维护系统当前活跃事务的ID（当每个事务开启时，都会被分配一个ID, 这个ID是递增的，所以最新的事务，ID值越大）</p>
<ul>
<li>trx_list：系统活跃的事务 ID</li>
<li>up_limit_id：列表中事务最小的 ID</li>
<li>low_limit_id：系统尚未分配的下一个事务 ID</li>
</ul>
<p>当一个事务在进行快照读时，能否读取到其他事务刚刚 update 并 commit 的记录？</p>
<ol>
<li>首先判断 DB_TRX_ID 和 update_limit_id 的关系。如果 DB_TRX_ID &lt; update_limit_id，则当前事务能看到 DB_TRX_ID 所 commit 的记录；否则进入下个判断</li>
<li>接着判断 DB_TRX_ID 和 low_limit_id 的关系。如果 DB_TRX_ID &gt;= low_limit_id，则代表 DB_TRX_ID 所 commit 的记录是在生成 readview 之后，对于当前事务肯定是不可见的；反之进入下个判断</li>
<li>最后判断 DB_TRX_ID 和 trx_list 的关系。如果 DB_TRX_ID 存在于 【活跃事务（trx_list）】中，则代表在生成 readview 的时候，DB_TRX_ID 还是处在活跃状态，还没有 commit，因此 DB_TRX_ID update 的数据在当前事务是看不到的；如果不在，则说明这个事务在 readview 生成之前就已经 commit 了，那么DB_TRX_ID update 的结果是能够看见的</li>
</ol>
<h4 id="举个例子">举个例子</h4>
<table border="1" style="table-layout:fixed;">
	<tr align="center">
		<td>事务1</td>
		<td>事务2</td>
		<td>事务3</td>
		<td>事务4</td>
	</tr>
    <tr align="center">
		<td>begin（开启）</td>
		<td>begin（开启）</td>
		<td>begin（开启）</td>
		<td>begin（开启）</td>
	</tr>
    <tr align="center">
		<td></td>
		<td></td>
		<td></td>
		<td>update<br>commit</td>
	</tr>
    <tr align="center">
		<td></td>
		<td>select ……（快照读）</td>
		<td></td>
		<td></td>
	</tr>
</table>
<p>此时事务2能不能读取到事务4 commit 的记录？</p>
<p>分析：事务2 select ……（快照读）产生的 readview</p>
<table border="1" style="table-layout:fixed;">
	<tr>
		<td>low_limit_id</td>
		<td>1，2，3（因为4已经 commit，因此不是活跃事务）</td>
	</tr>
	<tr>
		<td>up_limit_id</td>
		<td>1</td>
	</tr>
	<tr>
		<td>low_limit_id</td>
		<td>5</td>
	</tr>
</table>
<table border="1" style="table-layout:fixed;">
	<tr>
		<td>DB_TRX_ID</td>
		<td>4</td>
	</tr>
</table>
<ol>
<li>4 &gt; 1（DB_TRX_ID &gt; update_limit_id），进入下个判断</li>
<li>4 &lt; 5（DB_TRX_ID &lt; low_limit_id），进入下个判断</li>
<li>4 不存在于 trx_list 中，事务2 select ……（快照读）能够看到事务4 commit 的记录。</li>
</ol>
<p>实际测试：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;autocommit&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="operator">|</span> autocommit    <span class="operator">|</span> <span class="keyword">ON</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> autocommit<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;autocommit&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="operator">|</span> autocommit    <span class="operator">|</span> OFF   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure>
<table border="1" style="table-layout:fixed;">
	<tr>
		<th style="text-align:center">窗口1</th>
		<th style="text-align:center">窗口2</th>
	</tr>
	<tr>
		<td>mysql> begin;<br>Query OK, 0 rows affected (0.00 sec)</td>
		<td>mysql> begin;<br>Query OK, 0 rows affected (0.00 sec)</td>
	</tr>
	<tr>
		<td>mysql> select * from tt17;<br>+----+------+------+<br>| id | name | age  |<br>+----+------+------+<br>|  1 | 1    |    1 |<br>|  2 | 2    |    2 |<br>|  3 | 3    |    3 |<br>+----+------+------+<br>3 rows in set (0.00 sec)</td>
		<td>mysql> select * from tt17;<br>+----+------+------+<br>| id | name | age  |<br>+----+------+------+<br>|  1 | 1    |    1 |<br>|  2 | 2    |    2 |<br>|  3 | 3    |    3 |<br>+----+------+------+<br>3 rows in set (0.00 sec)</td>
	</tr>
	<tr>
		<td></td>
		<td>mysql> update tt17 set name = "zhangsan";<br>Query OK, 3 rows affected (0.00 sec)<br>Rows matched: 3  Changed: 3  Warnings: 0<br><br>mysql> commit;<br>Query OK, 0 rows affected (0.04 sec)</td>
	</tr>
    <tr>
		<td>mysql> select * from tt17;<br>+----+------+------+<br>| id | name | age  |<br>+----+------+------+<br>|  1 | 1    |    1 |<br>|  2 | 2    |    2 |<br>|  3 | 3    |    3 |<br>+----+------+------+<br>3 rows in set (0.00 sec)</td>
		<td>mysql> select * from tt17;<br>+----+------+------+<br>| id | name | age  |<br>+----+------+------+<br>|  1 | 1    |    1 |<br>|  2 | 2    |    2 |<br>|  3 | 3    |    3 |<br>+----+------+------+<br>3 rows in set (0.00 sec)</td>
	</tr>
</table>
<p>此时，在实际测试中，事务2 select ……（快照读）看不到事务4 commit 的记录，与分析结果相反！(╬￣皿￣)</p>
<p>继续冷静分析：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> @<span class="variable">@transaction</span>_isolation;</span><br><span class="line">ERROR <span class="number">1193</span> (HY000): <span class="literal">Unknown</span> <span class="keyword">system</span> variable <span class="string">&#x27;transaction_isolation&#x27;</span></span><br><span class="line"><span class="comment">-- 这里可能会遇到 mysql-connector-java 的 jar 包版本高，而 mysql 版本低的情况。低版本的 mysql 只识别 tx_isolation，不识别 transaction_isolation</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> @<span class="variable">@tx</span>_isolation;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@tx</span>_isolation  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+</span></span><br><span class="line"><span class="operator">|</span> REPEATABLE<span class="operator">-</span>READ <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>可知当前数据的隔离级别为默认的可重复读（RR）。</p>
<p>因为<strong>可重复读（RR）和读已提交（RC）生成 readview 的时机是不同的</strong>。</p>
<ul>
<li>读已提交（RC）每次在进行 select ……（快照读）的时候都会生成新的 readview；</li>
<li>可重复读（RR）只有在第一次进行 select ……（快照读）的时候才会生成 readview，之后的读操作都只会用第一次生成的 readview</li>
</ul>
<p>在实际测试时，是先进行了一次 select ……（快照读），生成了 readview，与分析案例有出入，此时事务4仍然在 trx_list 中，在第三步判断时，commit 发生于生成快照读之后，因此看不到是正常现象。</p>
<p>总结：</p>
<ul>
<li>隔离级别为读已提交（RC）的时候，事务2 select ……（快照读）可以看到事务4 commit 的记录；</li>
<li>隔离级别为可重复读（RR）的时候，事务2 select ……（快照读）看不到事务4 commit 的记录</li>
</ul>
<h1>三、事务的 ACID 特性</h1>
<h2 id="3-1-a-atomicity-原子性">3.1 A【Atomicity（原子性）】</h2>
<p>一个事务中所包含的全部 SQL 语句是一个执行整体，不可分割，要么全执行，要么全取消。</p>
<p><strong>通过【回滚日志（undolog）】来实现</strong></p>
<h2 id="3-2-c-consistency-一致性">3.2 C【Consistency（一致性）】</h2>
<p>即数据库在事务操作前和事务处理后，其中的数据必须都要满足业务规范约束。如果在事务中出现错误，那么系统中的所有变化将自动地回滚，系统返回到原始状态。</p>
<p>（例如：银行转账，应先减后加，如果减后断电没有加上，不满足业务规范的约束，事务就要回滚，转账取消）</p>
<p><strong>依赖于其他三个特性来实现</strong></p>
<h2 id="3-3-i-isolation-隔离性">3.3 I【 Isolation（隔离性）】</h2>
<p>指的是多个事务并发地独立运行，而不能互相干扰，事务提交时根据当前数据库状态进行操作。</p>
<p><strong>通过【MVCC】来实现</strong></p>
<h3 id="3-3-1-四种隔离级别">3.3.1 四种隔离级别</h3>
<p><a href="https://liangxujian.github.io/blog/ebc52c.html">事务的四种隔离级别</a></p>
<h3 id="3-3-2-rr-和-rc">3.3.2 RR 和 RC</h3>
<p>MVCC 只在 RR 和 RC 两个隔离级别下工作。</p>
<ol>
<li>在 RR 隔离级别下，【事务A】对某些记录的第一次查询会生成一个【快照（readview）】，此后【事务A】对这些记录的查询会继续使用这个【快照（readview）】。这会导致在生成【快照（readview）】之后，其他事务对这些记录的修改对【事务A】不可见；</li>
<li>在 RC 隔离级别下，【事务B】对某些记录的第一次查询会生成一个【快照（readview）】，但是【事务B】之后对这些记录的查询都会重新生成一个【快照（readview）】。也就是说，其他事务对这些记录的修改对【事务B】可见；</li>
<li>RC 的性能比 RR 好，因为 RC 允许【不可重复读】和【幻读】。</li>
</ol>
<h3 id="3-3-3-怎么处理幻读">3.3.3 怎么处理幻读</h3>
<p>处理幻读有两种方案：</p>
<ul>
<li>将隔离级别提高到 Serializable 级别</li>
<li>加 Next-Key Lock 锁</li>
</ul>
<p>一般不会将数据库的隔离级别设置为 Serializable，加 Next-Key Lock 锁是比较常用的方法。</p>
<p>InnoDB 有三种锁算法：</p>
<ul>
<li>记录锁（Record Lock）：单个行记录加锁</li>
<li>间隙锁（Gap Lock）：锁定一个范围，但不含记录本身</li>
<li>临键锁（Next-Key Lock）：Record Lock + Gap Lock</li>
</ul>
<p>table_a 表中有如下数据：</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230423170339990.png" alt=""></p>
<p>这里可知有：</p>
<ul>
<li>间隙锁：（-∞，1）</li>
<li>记录锁：1</li>
<li>间隙锁：（1，10）</li>
<li>记录锁：10</li>
<li>间隙锁：（10，30）</li>
<li>记录锁：30</li>
<li>间隙锁：（30，+∞）</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- uid列为主键</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_a <span class="keyword">WHERE</span> uid <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="comment">-- 主键uid=10记录存在，只对id=10的记录加Record Lock</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_a <span class="keyword">WHERE</span> uid <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"><span class="comment">-- 主键uid=8记录不存在，加间隙锁Gap Lock：（1, 10）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_a <span class="keyword">WHERE</span> uid <span class="operator">&gt;</span> <span class="number">12</span>;</span><br><span class="line"><span class="comment">-- 主键使用范围查询，上锁范围为：（10,30）∪30∪（30，+∞）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- age列为索引列</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_a <span class="keyword">WHERE</span> age <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line"><span class="comment">-- 条件过滤对应记录存在，除了会对主键uid=10的记录加Record Lock，</span></span><br><span class="line"><span class="comment">-- 还会对普通索引字段加锁：[10，50]</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_a <span class="keyword">WHERE</span> age <span class="operator">=</span> <span class="number">40</span>;</span><br><span class="line"><span class="comment">-- 条件过滤对应记录不存在，只会对普通索引字段加锁：(30，50]</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_a <span class="keyword">WHERE</span> age <span class="operator">&gt;</span> <span class="number">40</span>;</span><br><span class="line"><span class="comment">-- 普通索引使用范围查询，上锁范围为：（30，+∞）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_a <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;AAA&#x27;</span>;</span><br><span class="line"><span class="comment">-- name列没有索引，则会进行全表扫描，所有记录都会加上临键锁，相当于锁表</span></span><br></pre></td></tr></table></figure>
<h2 id="3-4-d-durability-持久性">3.4 D【Durability（持久性）】</h2>
<p>也称为永久性，指的是事务在处理结束后，对数据库的修改是永久性的，即使系统故障也不会丢失。</p>
<p><strong>通过【redolog】来实现</strong></p>
<h3 id="3-4-1-数据更新流程">3.4.1 数据更新流程</h3>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230423170339991.png" alt=""></p>
<ol>
<li>执行器先从 InnoDB 引擎中找到数据，如果在 Buffer Pool 内存中则直接返回；如果不在则【随机读】查询磁盘文件后返回</li>
<li>执行器拿到数据之后会先修改数据，然后调用 InnoDB 引擎接口重新写入数据</li>
<li>InnoDB 引擎将数据更新到内存，同时【顺序写】数据到 redolog 中，此时 redolog 状态为 prepare</li>
<li>执行器生成这个操作的 binlog</li>
<li>执行器调用 InnoDB 引擎的事务提交接口，InnoDB 引擎把刚刚写完的 redolog 状态改为 commit，数据更新完成</li>
</ol>
<h3 id="3-4-2-随机读写-和-顺序读写">3.4.2 【随机读写】和【顺序读写】</h3>
<p>因为，【顺序读写】的效率远远高于【随机读写】。</p>
<p>所以，为了保证数据的一致性，会先将数据的更新结果【顺序写】入到 redolog 日志文件中，然后再将数据写入到对应的磁盘文件中【WAL（write ahead log）机制：先写日志，再写数据】。这样的设计，其效率优于直接随机读写磁盘文件。</p>
<p>由此可知，如果发生异常情况，导致实际数据未能写入到磁盘，只要日志文件保存成功了，那么数据就不会丢失，可以根据日志来进行数据恢复。</p>
<h3 id="3-4-3-数据恢复分析">3.4.3 数据恢复分析</h3>
<ul>
<li>redolog 处于 prepare 状态，binlog 未写入，干掉 redolog 的 prepare 状态，数据更新操作丢失、回滚；</li>
<li>redolog 处于 prepare 状态，binlog 已写入，redolog 的 prepare 状态改为 commit，更新数据提交</li>
</ul>
<h1>四、不能用于事务的操作</h1>
<ul>
<li>创建数据库（create database）</li>
<li>修改数据库（alter database）</li>
<li>删除数据库（drop database）</li>
<li>恢复数据库（restore database）</li>
<li>加载数据库（load database）</li>
<li>备份日志文件（backup log）</li>
<li>恢复日志文件（restore log）</li>
<li>更新统计数据（update statitics）</li>
<li>授权操作（grant）</li>
<li>复制事务日志（dump tran）</li>
<li>磁盘初始化（disk init）</li>
<li>更新使用sp_configure后的系统配置（reconfigure）</li>
</ul>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title>日语学习</title>
    <url>/blog/5cdb78f2.html</url>
    <content><![CDATA[<h1>平假</h1>
<h1>片假</h1>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ruby</span>&gt;</span>飯<span class="tag">&lt;<span class="name">rp</span>&gt;</span>（<span class="tag">&lt;/<span class="name">rp</span>&gt;</span><span class="tag">&lt;<span class="name">rt</span>&gt;</span>はん<span class="tag">&lt;/<span class="name">rt</span>&gt;</span><span class="tag">&lt;<span class="name">rp</span>&gt;</span>）<span class="tag">&lt;/<span class="name">rp</span>&gt;</span><span class="tag">&lt;/<span class="name">ruby</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ruby</span>&gt;</span>ご<span class="tag">&lt;<span class="name">rt</span>&gt;</span><span class="tag">&lt;/<span class="name">rt</span>&gt;</span>飯<span class="tag">&lt;<span class="name">rp</span>&gt;</span>（<span class="tag">&lt;/<span class="name">rp</span>&gt;</span><span class="tag">&lt;<span class="name">rt</span>&gt;</span>はん<span class="tag">&lt;/<span class="name">rt</span>&gt;</span><span class="tag">&lt;<span class="name">rp</span>&gt;</span>）<span class="tag">&lt;/<span class="name">rp</span>&gt;</span><span class="tag">&lt;/<span class="name">ruby</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ruby</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rt</span>&gt;</span><span class="tag">&lt;/<span class="name">rt</span>&gt;</span>月<span class="tag">&lt;<span class="name">rp</span>&gt;</span>（<span class="tag">&lt;/<span class="name">rp</span>&gt;</span><span class="tag">&lt;<span class="name">rt</span>&gt;</span>げつ<span class="tag">&lt;/<span class="name">rt</span>&gt;</span><span class="tag">&lt;<span class="name">rp</span>&gt;</span>）<span class="tag">&lt;/<span class="name">rp</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rt</span>&gt;</span><span class="tag">&lt;/<span class="name">rt</span>&gt;</span>曜<span class="tag">&lt;<span class="name">rp</span>&gt;</span>（<span class="tag">&lt;/<span class="name">rp</span>&gt;</span><span class="tag">&lt;<span class="name">rt</span>&gt;</span>よう<span class="tag">&lt;/<span class="name">rt</span>&gt;</span><span class="tag">&lt;<span class="name">rp</span>&gt;</span>）<span class="tag">&lt;/<span class="name">rp</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rt</span>&gt;</span><span class="tag">&lt;/<span class="name">rt</span>&gt;</span>日<span class="tag">&lt;<span class="name">rp</span>&gt;</span>（<span class="tag">&lt;/<span class="name">rp</span>&gt;</span><span class="tag">&lt;<span class="name">rt</span>&gt;</span>び<span class="tag">&lt;/<span class="name">rt</span>&gt;</span><span class="tag">&lt;<span class="name">rp</span>&gt;</span>）<span class="tag">&lt;/<span class="name">rp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ruby</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ruby</span>&gt;</span><span class="tag">&lt;<span class="name">rt</span>&gt;</span><span class="tag">&lt;/<span class="name">rt</span>&gt;</span>月<span class="tag">&lt;<span class="name">rp</span>&gt;</span>（<span class="tag">&lt;/<span class="name">rp</span>&gt;</span><span class="tag">&lt;<span class="name">rt</span>&gt;</span>げつ<span class="tag">&lt;/<span class="name">rt</span>&gt;</span><span class="tag">&lt;<span class="name">rp</span>&gt;</span>）<span class="tag">&lt;/<span class="name">rp</span>&gt;</span><span class="tag">&lt;<span class="name">rt</span>&gt;</span><span class="tag">&lt;/<span class="name">rt</span>&gt;</span>曜<span class="tag">&lt;<span class="name">rp</span>&gt;</span>（<span class="tag">&lt;/<span class="name">rp</span>&gt;</span><span class="tag">&lt;<span class="name">rt</span>&gt;</span>よう<span class="tag">&lt;/<span class="name">rt</span>&gt;</span><span class="tag">&lt;<span class="name">rp</span>&gt;</span>）<span class="tag">&lt;/<span class="name">rp</span>&gt;</span><span class="tag">&lt;<span class="name">rt</span>&gt;</span><span class="tag">&lt;/<span class="name">rt</span>&gt;</span>日<span class="tag">&lt;<span class="name">rp</span>&gt;</span>（<span class="tag">&lt;/<span class="name">rp</span>&gt;</span><span class="tag">&lt;<span class="name">rt</span>&gt;</span>び<span class="tag">&lt;/<span class="name">rt</span>&gt;</span><span class="tag">&lt;<span class="name">rp</span>&gt;</span>）<span class="tag">&lt;/<span class="name">rp</span>&gt;</span><span class="tag">&lt;/<span class="name">ruby</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1>称呼</h1>
<table>
<thead>
<tr>
<th>中文</th>
<th>日文</th>
<th>中文</th>
<th>日文</th>
</tr>
</thead>
<tbody>
<tr>
<td>你</td>
<td>あなた</td>
<td>你们</td>
<td>あなた<ruby><rt></rt>方<rp>（</rp><rt>かた</rt><rp>）</rp></ruby></td>
</tr>
<tr>
<td>我</td>
<td><ruby><rt></rt>私<rp>（</rp><rt>わたし</rt><rp>）</rp></ruby></td>
<td>我们</td>
<td><ruby><rt></rt>私<rp>（</rp><rt>わたし</rt><rp>）</rp></ruby>たち</td>
</tr>
<tr>
<td>他</td>
<td><ruby><rt></rt>彼<rp>（</rp><rt>かれ</rt><rp>）</rp></ruby></td>
<td>他们</td>
<td><ruby><rt></rt>彼<rp>（</rp><rt>かれ</rt><rp>）</rp></ruby>ら</td>
</tr>
<tr>
<td>她</td>
<td><ruby><rt></rt>彼女<rp>（</rp><rt>かのじょ</rt><rp>）</rp></ruby></td>
<td>她们</td>
<td><ruby><rt></rt>彼女<rp>（</rp><rt>かのじょ</rt><rp>）</rp></ruby>たち</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th></th>
<th>对面称呼</th>
<th>对外称呼</th>
</tr>
</thead>
<tbody>
<tr>
<td>爷爷、外公</td>
<td><ruby><rt></rt>爷<rp>（</rp><rt>じい</rt><rp>）</rp></ruby>ちゃん【当面称呼】<br/>そふ【对别人称呼】</td>
<td>お<ruby><rt></rt>爷<rp>（</rp><rt>じい</rt><rp>）</rp></ruby>さん</td>
</tr>
<tr>
<td>奶奶、外婆</td>
<td><ruby><rt></rt>婆<rp>（</rp><rt>ばあ</rt><rp>）</rp></ruby>ちゃん【当面称呼】<br/>そぼ【对别人称呼】</td>
<td>お<ruby><rt></rt>婆<rp>（</rp><rt>ばあ</rt><rp>）</rp></ruby>さん</td>
</tr>
<tr>
<td>父母</td>
<td><ruby><rt></rt>両<rp>（</rp><rt>りょう</rt><rp>）</rp><rt></rt>親<rp>（</rp><rt>しん</rt><rp>）</rp></ruby></td>
<td></td>
</tr>
<tr>
<td>爸爸</td>
<td><ruby><rt></rt>家父<rp>（</rp><rt>ちち</rt><rp>）</rp></ruby>【谦称，对外称呼：家父；当面称呼：爹】<br/><ruby><rt></rt>父<rp>（</rp><rt>ちち</rt><rp>）</rp><rt></rt>上<rp>（</rp><rt>うえ</rt><rp>）</rp></ruby>【尊称，对外或当面称呼都可】<br/><ruby><rt></rt>父<rp>（</rp><rt>とう</rt><rp>）</rp></ruby>さん、<ruby><rt></rt>父<rp>（</rp><rt>とう</rt><rp>）</rp></ruby>ちゃん【昵称：爸爸】<br/><ruby><rt></rt>老爹<rp>（</rp><rt>おやじ</rt><rp>）</rp></ruby>【昵称】<br/><ruby><rt></rt>粑粑<rp>（</rp><rt>パパ</rt><rp>）</rp></ruby>【小孩语系】</td>
<td>お<ruby><rt></rt>父<rp>（</rp><rt>とう</rt><rp>）</rp></ruby>さん【令尊（尊称）】<br/>お<ruby><rt></rt>父<rp>（</rp><rt>とう</rt><rp>）</rp></ruby>さま【令尊（最尊称）】</td>
</tr>
<tr>
<td>妈妈</td>
<td><ruby><rt></rt>家母<rp>（</rp><rt>はは</rt><rp>）</rp></ruby>【谦称，对外称呼：家母；当面称呼：娘】<br/><ruby><rt></rt>母<rp>（</rp><rt>はは</rt><rp>）</rp><rt></rt>上<rp>（</rp><rt>うえ</rt><rp>）</rp></ruby>【尊称，对外或当面称呼都可】<br/><ruby><rt></rt>母<rp>（</rp><rt>かあ</rt><rp>）</rp></ruby>さん、<ruby><rt></rt>母<rp>（</rp><rt>かあ</rt><rp>）</rp></ruby>ちゃん【昵称：妈妈】<br/><ruby><rt></rt>老妈<rp>（</rp><rt>おふくろ</rt><rp>）</rp></ruby>【昵称】<br/><ruby><rt></rt>麻麻<rp>（</rp><rt>ママ</rt><rp>）</rp></ruby>【小孩语系】</td>
<td>お<ruby><rt></rt>母<rp>（</rp><rt>かあ</rt><rp>）</rp></ruby>さん【令堂（尊称）】<br/>お<ruby><rt></rt>母<rp>（</rp><rt>かあ</rt><rp>）</rp></ruby>さま【令堂（最尊称）】</td>
</tr>
<tr>
<td>姐姐</td>
<td><ruby><rt></rt>姐<rp>（</rp><rt>あね</rt><rp>）</rp></ruby></td>
<td>お<ruby><rt></rt>姉<rp>（</rp><rt>ねい</rt><rp>）</rp></ruby>さん【一般性称呼】</td>
</tr>
<tr>
<td>哥哥</td>
<td><ruby><rt></rt>哥<rp>（</rp><rt>あに</rt><rp>）</rp></ruby>【类似于中文常用的：哥，大哥，师兄等】</td>
<td>お<ruby><rt></rt>兄<rp>（</rp><rt>にい</rt><rp>）</rp></ruby>さん【一般性称呼】<br/><ruby><rt></rt>兄<rp>（</rp><rt>にい</rt><rp>）</rp></ruby>さん【哥哥，小伙子】<br/>お<ruby><rt></rt>兄<rp>（</rp><rt>にい</rt><rp>）</rp></ruby>ちゃん</td>
</tr>
<tr>
<td>弟弟</td>
<td><ruby><rt></rt>弟<rp>（</rp><rt>おとうと</rt><rp>）</rp></ruby></td>
<td><ruby><rt></rt>弟<rp>（</rp><rt>おとうと</rt><rp>）</rp></ruby>さん</td>
</tr>
<tr>
<td>妹妹</td>
<td><ruby><rt></rt>妹<rp>（</rp><rt>いもうと</rt><rp>）</rp></ruby></td>
<td><ruby><rt></rt>妹<rp>（</rp><rt>いもうと</rt><rp>）</rp></ruby>さん</td>
</tr>
<tr>
<td>兄弟</td>
<td><ruby><rt></rt>兄弟<rp>（</rp><rt>きょうだい</rt><rp>）</rp></ruby></td>
<td></td>
</tr>
<tr>
<td>姐妹</td>
<td><ruby><rt></rt>姉妹<rp>（</rp><rt>しまい</rt><rp>）</rp></ruby></td>
<td></td>
</tr>
<tr>
<td>叔叔、舅舅</td>
<td><ruby><rt></rt>叔父<rp>（</rp><rt>おじ</rt><rp>）</rp></ruby></td>
<td><ruby><rt></rt>叔父<rp>（</rp><rt>おじ</rt><rp>）</rp></ruby>さん</td>
</tr>
<tr>
<td>婶婶、阿姨</td>
<td><ruby><rt></rt>叔母<rp>（</rp><rt>おば</rt><rp>）</rp></ruby></td>
<td><ruby><rt></rt>叔母<rp>（</rp><rt>おば</rt><rp>）</rp></ruby>さん</td>
</tr>
</tbody>
</table>
<h2 id="常用句子">常用句子</h2>
<table>
<thead>
<tr>
<th>中文</th>
<th>日文</th>
</tr>
</thead>
<tbody>
<tr>
<td>他有五个哥哥</td>
<td>かれにはお<ruby><rt></rt>兄<rp>（</rp><rt>にい</rt><rp>）</rp></ruby>さんが<ruby><rt></rt>五<rp>（</rp><rt>ご</rt><rp>）</rp><rt></rt>人<rp>（</rp><rt>じ</rt><rp>）</rp></ruby>います</td>
</tr>
<tr>
<td>我有三个兄弟</td>
<td><ruby><rt></rt>私<rp>（</rp><rt>わたし</rt><rp>）</rp></ruby>には<ruby><rt></rt>兄弟<rp>（</rp><rt>きょうだい</rt><rp>）</rp></ruby>が<ruby><rt></rt>三<rp>（</rp><rt>さん</rt><rp>）</rp><rt></rt>人<rp>（</rp><rt>じ</rt><rp>）</rp></ruby>います</td>
</tr>
<tr>
<td>他们是兄弟吗</td>
<td><ruby><rt></rt>彼<rp>（</rp><rt>かれ</rt><rp>）</rp></ruby>らは<ruby><rt></rt>兄弟<rp>（</rp><rt>きょうだい</rt><rp>）</rp></ruby>ですか</td>
</tr>
<tr>
<td>我们是兄弟</td>
<td><ruby><rt></rt>私<rp>（</rp><rt>わたし</rt><rp>）</rp></ruby>たちは<ruby><rt></rt>兄弟<rp>（</rp><rt>きょうだい</rt><rp>）</rp></ruby>です</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h1>数字</h1>
<table>
<thead>
<tr>
<th>整数</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td><ruby><rt></rt>一<rp>（</rp><rt>いち</rt><rp>）</rp></ruby></td>
<td><ruby><rt></rt>二<rp>（</rp><rt>に</rt><rp>）</rp></ruby></td>
<td><ruby><rt></rt>三<rp>（</rp><rt>さん</rt><rp>）</rp></ruby></td>
</tr>
<tr>
<td><ruby><rt></rt>四<rp>（</rp><rt>よん</rt><rp>）</rp></ruby> / <ruby><rt></rt>四<rp>（</rp><rt>し</rt><rp>）</rp></ruby></td>
<td><ruby><rt></rt>五<rp>（</rp><rt>ご</rt><rp>）</rp></ruby></td>
<td><ruby><rt></rt>六<rp>（</rp><rt>ろく</rt><rp>）</rp></ruby></td>
</tr>
<tr>
<td><ruby><rt></rt>七<rp>（</rp><rt>しち</rt><rp>）</rp></ruby> / <ruby><rt></rt>七<rp>（</rp><rt>なな</rt><rp>）</rp></ruby></td>
<td><ruby><rt></rt>八<rp>（</rp><rt>はち</rt><rp>）</rp></ruby></td>
<td><ruby><rt></rt>九<rp>（</rp><rt>く</rt><rp>）</rp></ruby> / <ruby><rt></rt>九<rp>（</rp><rt>きゅう</rt><rp>）</rp></ruby></td>
</tr>
<tr>
<td><ruby><rt></rt>十<rp>（</rp><rt>じゅう</rt><rp>）</rp></ruby></td>
<td><ruby><rt></rt>零<rp>（</rp><rt>ぜろ</rt><rp>）</rp></ruby> / <ruby><rt></rt>零<rp>（</rp><rt>れい</rt><rp>）</rp></ruby></td>
<td></td>
</tr>
<tr>
<td><ruby><rt></rt>十<rp>（</rp><rt>じゅう</rt><rp>）</rp><rt></rt>一<rp>（</rp><rt>いち</rt><rp>）</rp></ruby></td>
<td><ruby><rt></rt>二<rp>（</rp><rt>に</rt><rp>）</rp><rt></rt>十<rp>（</rp><rt>じゅう</rt><rp>）</rp></ruby></td>
<td><ruby><rt></rt>二<rp>（</rp><rt>に</rt><rp>）</rp><rt></rt>十<rp>（</rp><rt>じゅう</rt><rp>）</rp><rt></rt>一<rp>（</rp><rt>いち</rt><rp>）</rp></ruby></td>
</tr>
<tr>
<td><ruby><rt></rt>百<rp>（</rp><rt>ひゃく</rt><rp>）</rp></ruby></td>
<td></td>
<td></td>
</tr>
<tr>
<td><ruby><rt></rt>一百<rp>（</rp><rt>ひゃく</rt><rp>）</rp><rt><rt></rt>一十<rp>（</rp><rt>じゅう</rt><rp>）</rp><rt></rt>一<rp>（</rp><rt>いち</rt><rp>）</rp></ruby></td>
<td><ruby><rt></rt>一百<rp>（</rp><rt>ひゃく</rt><rp>）</rp><rt><rt></rt>二<rp>（</rp><rt>に</rt><rp>）</rp><rt></rt>十<rp>（</rp><rt>じゅう</rt><rp>）</rp><rt></rt>一<rp>（</rp><rt>いち</rt><rp>）</rp></ruby></td>
<td><ruby><rt></rt>两<rp>（</rp><rt>に</rt><rp>）</rp><rt><rt></rt>百<rp>（</rp><rt>ひゃく</rt><rp>）</rp></ruby></td>
</tr>
<tr>
<td><ruby><rt></rt>千<rp>（</rp><rt>せん</rt><rp>）</rp></ruby></td>
<td></td>
<td></td>
</tr>
<tr>
<td><ruby><rt></rt>一千<rp>（</rp><rt>せん</rt><rp>）</rp><rt></rt>一百<rp>（</rp><rt>ひゃく</rt><rp>）</rp></ruby></td>
<td><ruby><rt></rt>一千<rp>（</rp><rt>せん</rt><rp>）</rp><rt></rt>一百<rp>（</rp><rt>ひゃく</rt><rp>）</rp><rt></rt>一十<rp>（</rp><rt>じゅう</rt><rp>）</rp><rt></rt>一<rp>（</rp><rt>いち</rt><rp>）</rp></ruby></td>
<td><ruby><rt></rt>两<rp>（</rp><rt>に</rt><rp>）</rp><rt></rt>千<rp>（</rp><rt>せん</rt><rp>）</rp></ruby></td>
</tr>
<tr>
<td><ruby><rt></rt>万<rp>（</rp><rt>まん</rt><rp>）</rp></ruby></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>小数分数</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>0.1</td>
<td><ruby><rt></rt>零<rp>（</rp><rt>れい</rt><rp>）</rp><rt></rt>点<rp>（</rp><rt>てん</rt><rp>）</rp><rt></rt>一<rp>（</rp><rt>いち</rt><rp>）</rp></ruby></td>
</tr>
<tr>
<td>2/3</td>
<td><ruby><rt></rt>三<rp>（</rp><rt>さん</rt><rp>）</rp><rt></rt>分<rp>（</rp><rt>ふん</rt><rp>）</rp><rt></rt>之<rp>（</rp><rt>の</rt><rp>）</rp><rt></rt>二<rp>（</rp><rt>に</rt><rp>）</rp></ruby></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>人数</th>
</tr>
</thead>
<tbody>
<tr>
<td><ruby><rt></rt>一人<rp>（</rp><rt>ひとり</rt><rp>）</rp></ruby></td>
</tr>
<tr>
<td><ruby><rt></rt>两人<rp>（</rp><rt>ふたり</rt><rp>）</rp></ruby></td>
</tr>
</tbody>
</table>
<h1>时间</h1>
<table>
<thead>
<tr>
<th></th>
<th>前天</th>
<th>昨天</th>
<th>今天</th>
<th>明天</th>
<th>后天</th>
</tr>
</thead>
<tbody>
<tr>
<td>口语</td>
<td>おととい</td>
<td><ruby><rt></rt>昨日<rp>（</rp><rt>きのう</rt><rp>）</rp></ruby></td>
<td><ruby><rt></rt>今日<rp>（</rp><rt>きょう</rt><rp>）</rp></ruby></td>
<td><ruby><rt></rt>明日<rp>（</rp><rt>あした</rt><rp>）</rp></ruby></td>
<td><ruby><rt></rt>明後日<rp>（</rp><rt>あさって</rt><rp>）</rp></ruby></td>
</tr>
<tr>
<td>书面语</td>
<td>ぜんじつ</td>
<td><ruby><rt></rt>昨日<rp>（</rp><rt>さくじつ</rt><rp>）</rp></ruby></td>
<td><ruby><rt></rt>本日<rp>（</rp><rt>ほんじつ</rt><rp>）</rp></ruby></td>
<td><ruby><rt></rt>明日<rp>（</rp><rt>みょうにち</rt><rp>）</rp></ruby></td>
<td><ruby><rt></rt>明後日<rp>（</rp><rt>あさって</rt><rp>）</rp></ruby></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>上上周</th>
<th>上周</th>
<th>这周</th>
<th>下周</th>
<th>下下周</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>上上个月</th>
<th>上个月</th>
<th>这个月</th>
<th>下个月</th>
<th>下下个月</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>前年</th>
<th>去年</th>
<th>今年</th>
<th>明年</th>
<th>后年</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="时分秒">时分秒</h2>
<h2 id="星期">星期</h2>
<table>
<thead>
<tr>
<th>中文</th>
<th>日文</th>
</tr>
</thead>
<tbody>
<tr>
<td>星期日</td>
<td><ruby><rt></rt>日<rp>（</rp><rt>にち</rt><rp>）</rp><rt></rt>曜<rp>（</rp><rt>よう</rt><rp>）</rp><rt></rt>日<rp>（</rp><rt>び</rt><rp>）</rp></ruby></td>
</tr>
<tr>
<td>星期一</td>
<td><ruby><rt></rt>月<rp>（</rp><rt>げつ</rt><rp>）</rp><rt></rt>曜<rp>（</rp><rt>よう</rt><rp>）</rp><rt></rt>日<rp>（</rp><rt>び</rt><rp>）</rp></ruby></td>
</tr>
<tr>
<td>星期二</td>
<td><ruby><rt></rt>火<rp>（</rp><rt>か</rt><rp>）</rp><rt></rt>曜<rp>（</rp><rt>よう</rt><rp>）</rp><rt></rt>日<rp>（</rp><rt>び</rt><rp>）</rp></ruby></td>
</tr>
<tr>
<td>星期三</td>
<td><ruby><rt></rt>水<rp>（</rp><rt>すい</rt><rp>）</rp><rt></rt>曜<rp>（</rp><rt>よう</rt><rp>）</rp><rt></rt>日<rp>（</rp><rt>び</rt><rp>）</rp></ruby></td>
</tr>
<tr>
<td>星期四</td>
<td><ruby><rt></rt>木<rp>（</rp><rt>もく</rt><rp>）</rp><rt></rt>曜<rp>（</rp><rt>よう</rt><rp>）</rp><rt></rt>日<rp>（</rp><rt>び</rt><rp>）</rp></ruby></td>
</tr>
<tr>
<td>星期五</td>
<td><ruby><rt></rt>金<rp>（</rp><rt>きん</rt><rp>）</rp><rt></rt>曜<rp>（</rp><rt>よう</rt><rp>）</rp><rt></rt>日<rp>（</rp><rt>び</rt><rp>）</rp></ruby></td>
</tr>
<tr>
<td>星期六</td>
<td><ruby><rt></rt>土<rp>（</rp><rt>ど</rt><rp>）</rp><rt></rt>曜<rp>（</rp><rt>よう</rt><rp>）</rp><rt></rt>日<rp>（</rp><rt>び</rt><rp>）</rp></ruby></td>
</tr>
</tbody>
</table>
<h2 id="月份">月份</h2>
<h1>方位</h1>
<table>
<thead>
<tr>
<th>这</th>
<th>那</th>
<th>哪</th>
</tr>
</thead>
<tbody>
<tr>
<td><ruby>这里<rp>（</rp><rt>ここ</rt><rp>）</rp></ruby></td>
<td><ruby>那里<rp>（</rp><rt>そこ</rt><rp>）</rp></ruby></td>
<td><ruby>哪里<rp>（</rp><rt>どこ</rt><rp>）</rp></ruby></td>
</tr>
<tr>
<td><ruby>这是<rp>（</rp><rt>これは</rt><rp>）</rp></ruby></td>
<td><ruby>那是<rp>（</rp><rt>あれは</rt><rp>）</rp></ruby></td>
<td></td>
</tr>
<tr>
<td><ruby>在这里<rp>（</rp><rt>ここ</rt><rp>）</rp></ruby></td>
<td><ruby>在那里<rp>（</rp><rt>あそこ</rt><rp>）</rp></ruby></td>
<td><ruby>在哪里<rp>（</rp><rt>どこ</rt><rp>）</rp></ruby></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>左上</td>
<td><ruby>上<rp>（</rp><rt>ぅぇ</rt><rp>）</rp></ruby></td>
<td>右上</td>
</tr>
<tr>
<td>左</td>
<td>中</td>
<td>右</td>
</tr>
<tr>
<td>左下</td>
<td>下</td>
<td>右下</td>
</tr>
</tbody>
</table>
<h1>频率</h1>
<h1>颜色</h1>
<table>
<thead>
<tr>
<th>颜色</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>红色</td>
<td>白色</td>
</tr>
<tr>
<td>橙色</td>
<td>黑色</td>
</tr>
<tr>
<td>黄色</td>
<td>粉色</td>
</tr>
<tr>
<td>绿色</td>
<td></td>
</tr>
<tr>
<td>蓝色</td>
<td></td>
</tr>
<tr>
<td>青色</td>
<td></td>
</tr>
<tr>
<td>紫色</td>
<td></td>
</tr>
</tbody>
</table>
<h1>常用句子</h1>
<table>
<thead>
<tr>
<th>中文</th>
<th>日文</th>
</tr>
</thead>
<tbody>
<tr>
<td>我回来啦</td>
<td>ただいま</td>
</tr>
<tr>
<td>你回来了/欢迎回来</td>
<td>おかえり</td>
</tr>
<tr>
<td>欢迎回家/欢迎回来</td>
<td>お<ruby>帰<rp>（</rp><rt>かえ</rt><rp>）</rp></ruby>りなさい</td>
</tr>
<tr>
<td>欢迎光临</td>
<td>いらっしゃいませ</td>
</tr>
<tr>
<td>我开动了</td>
<td>いただきます</td>
</tr>
<tr>
<td>我吃饱了</td>
<td>ごちそうさまでした</td>
</tr>
<tr>
<td>我出去一下/我走了</td>
<td><ruby><rt></rt>行<rp>（</rp><rt>い</rt><rp>）</rp></ruby>ってきます</td>
</tr>
<tr>
<td>路上小心</td>
<td><ruby><rt></rt>行<rp>（</rp><rt>い</rt><rp>）</rp></ruby>ってらっしゃい</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h1>疑难句式</h1>
<table>
<thead>
<tr>
<th>中文</th>
<th>日文</th>
</tr>
</thead>
<tbody>
<tr>
<td>有狗吗</td>
<td><ruby>犬<rp>（</rp><rt>いぬ</rt><rp>）</rp></ruby>はいますか</td>
</tr>
<tr>
<td>没有狗</td>
<td><ruby>犬<rp>（</rp><rt>いぬ</rt><rp>）</rp></ruby>はいません</td>
</tr>
<tr>
<td>家里有窗户吗</td>
<td><ruby>家<rp>（</rp><rt>いえ</rt><rp>）</rp></ruby>にまどはありますか</td>
</tr>
<tr>
<td>家里有窗户</td>
<td><ruby>家<rp>（</rp><rt>いえ</rt><rp>）</rp></ruby>にまどがあります</td>
</tr>
<tr>
<td>你有几个弟弟</td>
<td>あなたの<ruby>弟<rp>（</rp><rt>おとうと</rt><rp>）</rp></ruby>さんは<ruby>何<rp>（</rp><rt>なん</rt><rp>）</rp></ruby><ruby>人<rp>（</rp><rt>にん</rt><rp>）</rp></ruby>ですか</td>
</tr>
<tr>
<td>你弟弟是谁</td>
<td>あなたの<ruby>弟<rp>（</rp><rt>おとうと</rt><rp>）</rp></ruby>さんは<ruby>誰<rp>（</rp><rt>だれ</rt><rp>）</rp></ruby>ですか</td>
</tr>
</tbody>
</table>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>生活</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker命令与操作</title>
    <url>/blog/3cd84c3d.html</url>
    <content><![CDATA[<blockquote>
<p><a href="https://docs.docker.com/reference/">Docker 命令官方文档</a></p>
<p><a href="http://edu.jb51.net/docker/docker-command-manual.html">Docker 命令大全 - 菜鸟学堂</a></p>
<p><a href="https://www.runoob.com/docker/docker-command-manual.html">Docker 命令大全 - 菜鸟教程</a></p>
</blockquote>
<h1>一、启动关闭命令</h1>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动Docker服务</span></span><br><span class="line">[root@localhost ~]# sudo systemctl start docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭Docker服务</span></span><br><span class="line">[root@localhost ~]# docker sudo systemctl stop docker</span><br><span class="line">[root@localhost ~]# docker sudo service docker stop</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启Docker服务</span></span><br><span class="line">[root@localhost ~]# sudo systemctl restart docker</span><br><span class="line">[root@localhost ~]# sudo service docker restart</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">守护进程重启Docker服务</span></span><br><span class="line">[root@localhost ~]# sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure>
<h2 id="1-1-启动-docker-遇到的问题">1.1 启动 Docker 遇到的问题</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# sudo systemctl start docker</span><br><span class="line">Error: Too many open files</span><br></pre></td></tr></table></figure>
<p>Too many open files 是 Linux 系统中常见的错误，从字面意思上看就是说程序打开的文件数量过多，不过这里的 files 不单是文件的意思，也包括打开的通讯链接（例如 socket），正在监听的端口等等，所以有时候也可以叫做句柄（handle），所以这个错误通常也可以叫做句柄数超出系统限制。引起的原因就是进程在某个时刻打开了超过系统限制的文件数量以及通讯链数。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前系统设置的最大句柄数</span></span><br><span class="line">[root@localhost ~]# ulimit -a</span><br></pre></td></tr></table></figure>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1665199865772.png" alt=""></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装lsof</span></span><br><span class="line">[root@localhost ~]# yum install lsof</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前句柄数量</span></span><br><span class="line">[root@localhost ~]# lsof|awk &#x27;&#123;print $2&#125;&#x27;|wc -l</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者（统计打开文件数量和进程pid）</span></span><br><span class="line">[root@localhost ~]# lsof|awk &#x27;&#123;print $2&#125;&#x27;|sort|uniq -c|sort -nr|more</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看某个进程下打开的文件和数量</span></span><br><span class="line">[root@localhost ~]# losf -p 进程ID</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span></span><br><span class="line">[root@localhost ~]# losf -p 进程ID |wc -l</span><br></pre></td></tr></table></figure>
<p>发现已建立了好多端口映射，应该是 k8s 生成的</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1665210387112.png" alt=""></p>
<p>可以考虑重启 k8s，另一个解决方法是加大系统对最大句柄数的限制，参考博客：<a href="https://blog.csdn.net/leiwuhen92/article/details/112004783">排查Too many open files问题</a></p>
<h1>二、状态查看命令</h1>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示docker的版本信息</span></span><br><span class="line">[root@localhost ~]# docker version</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示docker的系统信息，包括镜像和容器的数量</span></span><br><span class="line">[root@localhost ~]# docker info</span><br><span class="line"></span><br><span class="line">docker 命令 --help # docker命令帮助</span><br><span class="line">docker images --help</span><br></pre></td></tr></table></figure>
<h1>三、镜像命令</h1>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker images # 查看所有镜像</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可选项</span></span><br><span class="line">  -a, --all             Show all images (default hides intermediate images) # 列出所有镜像</span><br><span class="line">      --digests         Show digests # 略</span><br><span class="line">  -f, --filter filter   Filter output based on conditions provided # 略</span><br><span class="line">      --format string   Pretty-print images using a Go template # 略</span><br><span class="line">      --no-trunc        Don not truncate output # 略</span><br><span class="line">  -q, --quiet           Only show image IDs # 只显示镜像的ID</span><br></pre></td></tr></table></figure>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1649487938150.png" alt=""></p>
<ul>
<li>REPOSITORY：镜像的仓库源</li>
<li>TAG：镜像的标签</li>
<li>IMAGE ID：镜像的ID</li>
<li>……</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker search # 搜索docker镜像</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可选项</span></span><br><span class="line">  -f, --filter filter   Filter output based on conditions provided</span><br><span class="line">      --format string   Pretty-print search using a Go template</span><br><span class="line">      --limit int       Max number of search results (default 25)</span><br><span class="line">      --no-trunc        Don not truncate output</span><br><span class="line"></span><br><span class="line">docker search mysql --filter=stars=3000</span><br><span class="line">docker pull # 下载镜像</span><br><span class="line">docker pull 镜像名[:tag（版本）] # 默认下载最新版</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果不写tag指定版本，默认是最新的latest</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">因此以下命令等价</span></span><br><span class="line">docker pull mysql</span><br><span class="line">docker pull mysql:latest</span><br><span class="line">docker pull docker.io/library/mysql:latest</span><br><span class="line"></span><br><span class="line">[root@localhost docker]# docker pull mysql</span><br><span class="line">Using default tag: latest # 如果不写tag指定版本，默认是最新的latest</span><br><span class="line">latest: Pulling from library/mysql</span><br><span class="line">6ec7b7d162b2: Pull complete  # 分层下载（docker image的核心 联合文件系统（UnionFS））</span><br><span class="line">fedd960d3481: Pull complete </span><br><span class="line">7ab947313861: Pull complete </span><br><span class="line">64f92f19e638: Pull complete </span><br><span class="line">3e80b17bff96: Pull complete </span><br><span class="line">014e976799f9: Pull complete </span><br><span class="line">59ae84fee1b3: Pull complete </span><br><span class="line">ffe10de703ea: Pull complete </span><br><span class="line">657af6d90c83: Pull complete </span><br><span class="line">98bfb480322c: Pull complete </span><br><span class="line">6aa3859c4789: Pull complete </span><br><span class="line">1ed875d851ef: Pull complete </span><br><span class="line">Digest: sha256:78800e6d3f1b230e35275145e657b82c3fb02a27b2d8e76aac2f5e90c1c30873 # 镜像签名（防伪）</span><br><span class="line">Status: Downloaded newer image for mysql:latest</span><br><span class="line">docker.io/library/mysql:latest # 镜像真实地址</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">分层下载：重复的层不会反复下载，提高速度，减少内存</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除镜像的时候也只会删除多余的层而不是全部删掉</span></span><br><span class="line">[root@localhost docker]# docker pull mysql:5.7</span><br><span class="line">5.7: Pulling from library/mysql</span><br><span class="line">6ec7b7d162b2: Already exists </span><br><span class="line">fedd960d3481: Already exists </span><br><span class="line">7ab947313861: Already exists </span><br><span class="line">64f92f19e638: Already exists </span><br><span class="line">3e80b17bff96: Already exists </span><br><span class="line">014e976799f9: Already exists </span><br><span class="line">59ae84fee1b3: Already exists </span><br><span class="line">7d1da2a18e2e: Pull complete </span><br><span class="line">301a28b700b9: Pull complete </span><br><span class="line">529dc8dbeaf3: Pull complete </span><br><span class="line">bc9d021dc13f: Pull complete </span><br><span class="line">Digest: sha256:c3a567d3e3ad8b05dfce401ed08f0f6bf3f3b64cc17694979d5f2e5d78e10173</span><br><span class="line">Status: Downloaded newer image for mysql:5.7</span><br><span class="line">docker.io/library/mysql:5.7</span><br><span class="line">docker rmi # 删除镜像（rmi - remove image）</span><br><span class="line">docker rmi -f 镜像ID # 删除指定镜像</span><br><span class="line">docker rmi -f 镜像ID 镜像ID # 删除指定的多个镜像</span><br><span class="line">docker rmi -f $(docker images -aq) # 递归删除全部镜像</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可通过REPOSITORY或者IMAGE ID进行删除</span></span><br><span class="line"></span><br><span class="line">[root@localhost docker]# docker rmi -f $(docker images -aq)</span><br><span class="line">Untagged: mysql:latest</span><br><span class="line">Untagged: mysql@sha256:78800e6d3f1b230e35275145e657b82c3fb02a27b2d8e76aac2f5e90c1c30873</span><br><span class="line">Deleted: sha256:a347a59280467629ae4d70ce555e3f96faca8ff2ff8c57cacc8184bebb681f66</span><br><span class="line">Deleted: sha256:8c4db4ce0f63c9eec74a2e555bb7e2fa5e2de08389cbc747793aa30bc3ac04e1</span><br><span class="line">Deleted: sha256:6179be2adc547662cd0ef2cb032b85809ac68923b7ab9c71e5a21b88bbe7f542</span><br><span class="line">Deleted: sha256:17d702350e6aa7f240ca23090d24b059f5c324e292a77b5069225e76e0b51dd6</span><br><span class="line">Deleted: sha256:5c5f95733957fd96300b5265d6b2df728415ed62e7b4b30eadd7d836d48187bf</span><br><span class="line">Deleted: sha256:fbf118fadaf5230c8df9a3b51c608393a8f3adb99c089ea2db253438efab1a0e</span><br><span class="line">Deleted: sha256:43b82d704a10e6d022fa3f31a5f827a00e339ee21dd2849a9b120ab82be9af71</span><br><span class="line">Deleted: sha256:a4994702421d2b9a74c4f3810aa7ac09990e849905f23a1d8f358c826d58501f</span><br><span class="line">Deleted: sha256:36c598c7a6f90abf6d67cde4a58b0747bfbcc7441d3b782bdeea7cda8c9ad7b6</span><br><span class="line">Deleted: sha256:86f598b4f8200bdd4ae752f916154e4e29d5b4c211bb124eb150b9957a3e0141</span><br><span class="line">Deleted: sha256:9e979d97f92bf78a225c77c6b4ba74eb2e03efb95b19b69206cd17cee15a4b26</span><br><span class="line">Deleted: sha256:aff48ce4678f78d83d7e9bfb9e88cd951c3da52da08779e99b6082edd1cc66f3</span><br><span class="line">Deleted: sha256:87c8a1d8f54f3aa4e05569e8919397b65056aa71cdf48b7f061432c98475eee9</span><br><span class="line">Untagged: hello-world:latest</span><br><span class="line">Untagged: hello-world@sha256:1a523af650137b8accdaed439c17d684df61ee4d74feac151b5b337bd29e7eec</span><br><span class="line">Deleted: sha256:bf756fb1ae65adf866bd8c456593cd24beb6a0a061dedf42b26a993176745f6b</span><br></pre></td></tr></table></figure>
<h1>四、容器命令</h1>
<p>注意：有了镜像才可以创建容器，因此需要先下载一个 centos（这种基础版本的 centos 很多命令都是不完善的）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull centos</span><br></pre></td></tr></table></figure>
<h2 id="4-1-新建容器和启动-run">4.1 新建容器和启动（run）</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run [可选参数] image</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">【如果要运行的镜像不存在，docker会自动执行：docker pull 镜像名称】</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参数说明</span></span><br><span class="line">--name=&quot;Name&quot;          # 附带名字启动容器（方便区分）</span><br><span class="line">-d                     # 以后台的方式运行（docker容器使用后台运行，就必须要有一个前台进程，docker发现自己没有提供服务，就会自动停止）</span><br><span class="line">-it                    # 使用交互方式运行（即进入容器中进行操作）</span><br><span class="line">-p                     # 指定容器端口启动</span><br><span class="line">    -p ip:主机端口:容器端口</span><br><span class="line">    -p 主机端口:容器端口 # （常用）</span><br><span class="line">    -p 容器端口</span><br><span class="line">    容器端口</span><br><span class="line">-P                     # 随机指定端口</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例</span></span><br><span class="line">[root@localhost ~]# docker run -it --rm centos /bin/bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">【--<span class="built_in">rm</span>表示容器停止后即删除镜像，使用docker ps -a不会找到，这种方法一般用于测试使用】</span></span><br><span class="line">[root@localhost ~]# docker run -it centos /bin/bash</span><br><span class="line">[root@987ceaa1b6cc /]# ls</span><br><span class="line">bin  etc   lib    lost+found  mnt  proc  run   srv  tmp  var</span><br><span class="line">dev  home  lib64  media       opt  root  sbin  sys  usr</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从容器中退回主机</span></span><br><span class="line">[root@987ceaa1b6cc /]# exit</span><br><span class="line">exit</span><br><span class="line">[root@localhost /]# ls</span><br><span class="line">bin   dev  home  lib64  mnt  proc  run   srv  tmp  var</span><br><span class="line">boot  etc  lib   media  opt  root  sbin  sys  usr</span><br></pre></td></tr></table></figure>
<h2 id="4-2-容器查看命令-ps">4.2 容器查看命令（ps）</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps [可选参数]</span><br><span class="line">      # 列出当前正在运行的容器</span><br><span class="line">-a    # 列出当前正在运行的容器 + 带出历史运行过的容器</span><br><span class="line">-n=?  # 显示最近创建的几个容器</span><br><span class="line">-q    # 只显示容器的编号</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例</span></span><br><span class="line">[root@localhost /]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line">[root@localhost /]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE          COMMAND       CREATED          STATUS                       PORTS     NAMES</span><br><span class="line">987ceaa1b6cc   centos         &quot;/bin/bash&quot;   33 minutes ago   Exited (127) 5 minutes ago             gallant_stonebraker</span><br><span class="line">0f4a68190c7a   bf756fb1ae65   &quot;/hello&quot;      8 days ago       Exited (0) 8 days ago                  recursing_lovelace</span><br><span class="line">[root@localhost /]# docker ps -n=1</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED          STATUS                       PORTS     NAMES</span><br><span class="line">987ceaa1b6cc   centos    &quot;/bin/bash&quot;   33 minutes ago   Exited (127) 5 minutes ago             gallant_stonebraker</span><br></pre></td></tr></table></figure>
<h2 id="4-3-容器进入命令">4.3 容器进入命令</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it [容器ID || 容器的name] [/bin/bash || bash]</span><br><span class="line">docker attach 容器ID</span><br></pre></td></tr></table></figure>
<h2 id="4-4-容器退出命令-exit-p-q">4.4 容器退出命令（exit|^p + ^q）</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit          # 容器停止并退出</span><br><span class="line">Ctrl + p + q  # 容器不停止退出</span><br></pre></td></tr></table></figure>
<h2 id="4-5-容器删除命令-rm">4.5 容器删除命令（rm）</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm 容器ID                  # 根据ID删除指定容器（如果容器正在运行，则不可删除）</span><br><span class="line">docker rm -f 容器ID               # 根据ID强制删除指定容器</span><br><span class="line">docker rm $(docker ps -aq)       # 遍历删除所有容器</span><br><span class="line">docker rm -f $(docker ps -aq)    # 遍历强制删除所有容器</span><br><span class="line">docker ps -a -q|xargs docker rm  # 删除所有容器</span><br></pre></td></tr></table></figure>
<h2 id="4-6-容器启动和停止-start-stop">4.6 容器启动和停止（start|stop）</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker start 容器ID    # 启动容器</span><br><span class="line">docker restart 容器ID  # 重启容器</span><br><span class="line">docker stop 容器ID     # 停止当前容器</span><br><span class="line">docker kill 容器ID     # 强制停止当前容器</span><br><span class="line">docker pause 容器ID    # 暂停当前容器</span><br><span class="line">docker unpause 容器ID  # 启动暂停中的容器</span><br></pre></td></tr></table></figure>
<h1>五、其他常用命令</h1>
<h2 id="5-1-查看日志-logs">5.1 查看日志（logs）</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker logs -t -f --detail 显示日志的条数 容器ID</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">（-t表示显示时间戳；-f表示持续显示）</span></span><br><span class="line">[root@localhost ~]# docker logs --help</span><br><span class="line"></span><br><span class="line">Usage:  docker logs [OPTIONS] CONTAINER</span><br><span class="line"></span><br><span class="line">Fetch the logs of a container</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">      --details        Show extra details provided to logs</span><br><span class="line">  -f, --follow         Follow log output</span><br><span class="line">      --since string   Show logs since timestamp (e.g. 2013-01-02T13:23:37Z)</span><br><span class="line">                       or relative (e.g. 42m for 42 minutes)</span><br><span class="line">  -n, --tail string    Number of lines to show from the end of the logs</span><br><span class="line">                       (default &quot;all&quot;)</span><br><span class="line">  -t, --timestamps     Show timestamps</span><br><span class="line">      --until string   Show logs before a timestamp (e.g.</span><br><span class="line">                       2013-01-02T13:23:37Z) or relative (e.g. 42m for 42</span><br><span class="line">                       minutes)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">先编写一段shell脚本作为测试</span></span><br><span class="line">[root@localhost ~]# docker run -d centos /bin/sh -c &quot;while true;do echo liangxj;sleep 1;done&quot;</span><br><span class="line">22b9beab5965eacb2e8f646c1e096ffd10fa7355df47f3da8ff6244ca7497bfb</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE</span><br><span class="line">22b9beab5965   centos</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示日志</span></span><br><span class="line">[root@localhost ~]# docker logs -tf --tail 10 22b9beab5965</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# docker logs -tf -n 500 服务名称</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-f：持续输出</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-t：展示时间戳</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-n：展示多少行</span></span><br></pre></td></tr></table></figure>
<h2 id="5-2-查看容器中的进程信息-top">5.2 查看容器中的进程信息（top）</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker top 容器ID</span><br><span class="line">[root@localhost ~]# docker top 0388fc715003</span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY</span><br><span class="line">root                8956                8936                0                   01:38               ?</span><br><span class="line">root                9153                8956                0                   01:40               ?</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">PID：进程ID</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">PPID：父进程ID</span></span><br></pre></td></tr></table></figure>
<h2 id="5-3-查看进程元数据-inspect">5.3 查看进程元数据（inspect）</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker inspect 容器ID</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# docker inspect --help</span><br><span class="line"></span><br><span class="line">Usage:  docker inspect [OPTIONS] NAME|ID [NAME|ID...]</span><br><span class="line"></span><br><span class="line">Return low-level information on Docker objects</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -f, --format string   Format the output using the given Go template</span><br><span class="line">  -s, --size            Display total file sizes if the type is container</span><br><span class="line">      --type string     Return JSON for specified type</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# docker inspect 0388fc715003</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: &quot;0388fc715003a52ce493ee6ee915fb670681285fe07d61d35eeed23caa505be6&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2021-01-04T06:38:39.643094366Z&quot;,</span><br><span class="line">        &quot;Path&quot;: &quot;/bin/sh&quot;,</span><br><span class="line">        &quot;Args&quot;: [</span><br><span class="line">            &quot;-c&quot;,</span><br><span class="line">            &quot;while true;do echo liangxj;sleep 1;done&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;State&quot;: &#123;</span><br><span class="line">            &quot;Status&quot;: &quot;running&quot;,</span><br><span class="line">            &quot;Running&quot;: true,</span><br><span class="line">            &quot;Paused&quot;: false,</span><br><span class="line">            &quot;Restarting&quot;: false,</span><br><span class="line">            &quot;OOMKilled&quot;: false,</span><br><span class="line">            &quot;Dead&quot;: false,</span><br><span class="line">            &quot;Pid&quot;: 8956,</span><br><span class="line">            &quot;ExitCode&quot;: 0,</span><br><span class="line">            &quot;Error&quot;: &quot;&quot;,</span><br><span class="line">            &quot;StartedAt&quot;: &quot;2021-01-04T06:38:40.052078891Z&quot;,</span><br><span class="line">            &quot;FinishedAt&quot;: &quot;0001-01-01T00:00:00Z&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Image&quot;: &quot;sha256:300e315adb2f96afe5f0b2780b87f28ae95231fe3bdd1e16b9ba606307728f55&quot;,</span><br><span class="line">        &quot;ResolvConfPath&quot;: &quot;/var/lib/docker/containers/0388fc715003a52ce493ee6ee915fb670681285fe07d61d35eeed23caa505be6/resolv.conf&quot;,</span><br><span class="line">        &quot;HostnamePath&quot;: &quot;/var/lib/docker/containers/0388fc715003a52ce493ee6ee915fb670681285fe07d61d35eeed23caa505be6/hostname&quot;,</span><br><span class="line">        &quot;HostsPath&quot;: &quot;/var/lib/docker/containers/0388fc715003a52ce493ee6ee915fb670681285fe07d61d35eeed23caa505be6/hosts&quot;,</span><br><span class="line">        &quot;LogPath&quot;: &quot;/var/lib/docker/containers/0388fc715003a52ce493ee6ee915fb670681285fe07d61d35eeed23caa505be6/0388fc715003a52ce493ee6ee915fb670681285fe07d61d35eeed23caa505be6-json.log&quot;,</span><br><span class="line">        &quot;Name&quot;: &quot;/dreamy_carson&quot;,</span><br><span class="line">        &quot;RestartCount&quot;: 0,</span><br><span class="line">        &quot;Driver&quot;: &quot;overlay2&quot;,</span><br><span class="line">        &quot;Platform&quot;: &quot;linux&quot;,</span><br><span class="line">        &quot;MountLabel&quot;: &quot;&quot;,</span><br><span class="line">        &quot;ProcessLabel&quot;: &quot;&quot;,</span><br><span class="line">        &quot;AppArmorProfile&quot;: &quot;&quot;,</span><br><span class="line">        &quot;ExecIDs&quot;: null,</span><br><span class="line">        &quot;HostConfig&quot;: &#123;</span><br><span class="line">            &quot;Binds&quot;: null,</span><br><span class="line">            &quot;ContainerIDFile&quot;: &quot;&quot;,</span><br><span class="line">            &quot;LogConfig&quot;: &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;json-file&quot;,</span><br><span class="line">                &quot;Config&quot;: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;NetworkMode&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;PortBindings&quot;: &#123;&#125;,</span><br><span class="line">            &quot;RestartPolicy&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;no&quot;,</span><br><span class="line">                &quot;MaximumRetryCount&quot;: 0</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;AutoRemove&quot;: false,</span><br><span class="line">            &quot;VolumeDriver&quot;: &quot;&quot;,</span><br><span class="line">            &quot;VolumesFrom&quot;: null,</span><br><span class="line">            &quot;CapAdd&quot;: null,</span><br><span class="line">            &quot;CapDrop&quot;: null,</span><br><span class="line">            &quot;CgroupnsMode&quot;: &quot;host&quot;,</span><br><span class="line">            &quot;Dns&quot;: [],</span><br><span class="line">            &quot;DnsOptions&quot;: [],</span><br><span class="line">            &quot;DnsSearch&quot;: [],</span><br><span class="line">            &quot;ExtraHosts&quot;: null,</span><br><span class="line">            &quot;GroupAdd&quot;: null,</span><br><span class="line">            &quot;IpcMode&quot;: &quot;private&quot;,</span><br><span class="line">            &quot;Cgroup&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Links&quot;: null,</span><br><span class="line">            &quot;OomScoreAdj&quot;: 0,</span><br><span class="line">            &quot;PidMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Privileged&quot;: false,</span><br><span class="line">            &quot;PublishAllPorts&quot;: false,</span><br><span class="line">            &quot;ReadonlyRootfs&quot;: false,</span><br><span class="line">            &quot;SecurityOpt&quot;: null,</span><br><span class="line">            &quot;UTSMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;UsernsMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;ShmSize&quot;: 67108864,</span><br><span class="line">            &quot;Runtime&quot;: &quot;runc&quot;,</span><br><span class="line">            &quot;ConsoleSize&quot;: [</span><br><span class="line">                0,</span><br><span class="line">                0</span><br><span class="line">            ],</span><br><span class="line">            &quot;Isolation&quot;: &quot;&quot;,</span><br><span class="line">            &quot;CpuShares&quot;: 0,</span><br><span class="line">            &quot;Memory&quot;: 0,</span><br><span class="line">            &quot;NanoCpus&quot;: 0,</span><br><span class="line">            &quot;CgroupParent&quot;: &quot;&quot;,</span><br><span class="line">            &quot;BlkioWeight&quot;: 0,</span><br><span class="line">            &quot;BlkioWeightDevice&quot;: [],</span><br><span class="line">            &quot;BlkioDeviceReadBps&quot;: null,</span><br><span class="line">            &quot;BlkioDeviceWriteBps&quot;: null,</span><br><span class="line">            &quot;BlkioDeviceReadIOps&quot;: null,</span><br><span class="line">            &quot;BlkioDeviceWriteIOps&quot;: null,</span><br><span class="line">            &quot;CpuPeriod&quot;: 0,</span><br><span class="line">            &quot;CpuQuota&quot;: 0,</span><br><span class="line">            &quot;CpuRealtimePeriod&quot;: 0,</span><br><span class="line">            &quot;CpuRealtimeRuntime&quot;: 0,</span><br><span class="line">            &quot;CpusetCpus&quot;: &quot;&quot;,</span><br><span class="line">            &quot;CpusetMems&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Devices&quot;: [],</span><br><span class="line">            &quot;DeviceCgroupRules&quot;: null,</span><br><span class="line">            &quot;DeviceRequests&quot;: null,</span><br><span class="line">            &quot;KernelMemory&quot;: 0,</span><br><span class="line">            &quot;KernelMemoryTCP&quot;: 0,</span><br><span class="line">            &quot;MemoryReservation&quot;: 0,</span><br><span class="line">            &quot;MemorySwap&quot;: 0,</span><br><span class="line">            &quot;MemorySwappiness&quot;: null,</span><br><span class="line">            &quot;OomKillDisable&quot;: false,</span><br><span class="line">            &quot;PidsLimit&quot;: null,</span><br><span class="line">            &quot;Ulimits&quot;: null,</span><br><span class="line">            &quot;CpuCount&quot;: 0,</span><br><span class="line">            &quot;CpuPercent&quot;: 0,</span><br><span class="line">            &quot;IOMaximumIOps&quot;: 0,</span><br><span class="line">            &quot;IOMaximumBandwidth&quot;: 0,</span><br><span class="line">            &quot;MaskedPaths&quot;: [</span><br><span class="line">                &quot;/proc/asound&quot;,</span><br><span class="line">                &quot;/proc/acpi&quot;,</span><br><span class="line">                &quot;/proc/kcore&quot;,</span><br><span class="line">                &quot;/proc/keys&quot;,</span><br><span class="line">                &quot;/proc/latency_stats&quot;,</span><br><span class="line">                &quot;/proc/timer_list&quot;,</span><br><span class="line">                &quot;/proc/timer_stats&quot;,</span><br><span class="line">                &quot;/proc/sched_debug&quot;,</span><br><span class="line">                &quot;/proc/scsi&quot;,</span><br><span class="line">                &quot;/sys/firmware&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;ReadonlyPaths&quot;: [</span><br><span class="line">                &quot;/proc/bus&quot;,</span><br><span class="line">                &quot;/proc/fs&quot;,</span><br><span class="line">                &quot;/proc/irq&quot;,</span><br><span class="line">                &quot;/proc/sys&quot;,</span><br><span class="line">                &quot;/proc/sysrq-trigger&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;GraphDriver&quot;: &#123;</span><br><span class="line">            &quot;Data&quot;: &#123;</span><br><span class="line">                &quot;LowerDir&quot;: &quot;/var/lib/docker/overlay2/e2f71bff5cc0b5e32761153742315bdba576839119902c592f601f1162b9bae1-init/diff:/var/lib/docker/overlay2/8508e4e63830c2cd44cc90e39b2bcc4aaf442f8eecf36fa7ef8a343930481fdb/diff&quot;,</span><br><span class="line">                &quot;MergedDir&quot;: &quot;/var/lib/docker/overlay2/e2f71bff5cc0b5e32761153742315bdba576839119902c592f601f1162b9bae1/merged&quot;,</span><br><span class="line">                &quot;UpperDir&quot;: &quot;/var/lib/docker/overlay2/e2f71bff5cc0b5e32761153742315bdba576839119902c592f601f1162b9bae1/diff&quot;,</span><br><span class="line">                &quot;WorkDir&quot;: &quot;/var/lib/docker/overlay2/e2f71bff5cc0b5e32761153742315bdba576839119902c592f601f1162b9bae1/work&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;Name&quot;: &quot;overlay2&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Mounts&quot;: [],</span><br><span class="line">        &quot;Config&quot;: &#123;</span><br><span class="line">            &quot;Hostname&quot;: &quot;0388fc715003&quot;,</span><br><span class="line">            &quot;Domainname&quot;: &quot;&quot;,</span><br><span class="line">            &quot;User&quot;: &quot;&quot;,</span><br><span class="line">            &quot;AttachStdin&quot;: false,</span><br><span class="line">            &quot;AttachStdout&quot;: false,</span><br><span class="line">            &quot;AttachStderr&quot;: false,</span><br><span class="line">            &quot;Tty&quot;: false,</span><br><span class="line">            &quot;OpenStdin&quot;: false,</span><br><span class="line">            &quot;StdinOnce&quot;: false,</span><br><span class="line">            &quot;Env&quot;: [</span><br><span class="line">                &quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Cmd&quot;: [</span><br><span class="line">                &quot;/bin/sh&quot;,</span><br><span class="line">                &quot;-c&quot;,</span><br><span class="line">                &quot;while true;do echo liangxj;sleep 1;done&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Image&quot;: &quot;centos&quot;,</span><br><span class="line">            &quot;Volumes&quot;: null,</span><br><span class="line">            &quot;WorkingDir&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Entrypoint&quot;: null,</span><br><span class="line">            &quot;OnBuild&quot;: null,</span><br><span class="line">            &quot;Labels&quot;: &#123;</span><br><span class="line">                &quot;org.label-schema.build-date&quot;: &quot;20201204&quot;,</span><br><span class="line">                &quot;org.label-schema.license&quot;: &quot;GPLv2&quot;,</span><br><span class="line">                &quot;org.label-schema.name&quot;: &quot;CentOS Base Image&quot;,</span><br><span class="line">                &quot;org.label-schema.schema-version&quot;: &quot;1.0&quot;,</span><br><span class="line">                &quot;org.label-schema.vendor&quot;: &quot;CentOS&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;NetworkSettings&quot;: &#123;</span><br><span class="line">            &quot;Bridge&quot;: &quot;&quot;,</span><br><span class="line">            &quot;SandboxID&quot;: &quot;bb48a599f020d56f908d78b170da712209ac5ff3a185599f21da1bfa30c77ec0&quot;,</span><br><span class="line">            &quot;HairpinMode&quot;: false,</span><br><span class="line">            &quot;LinkLocalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">            &quot;LinkLocalIPv6PrefixLen&quot;: 0,</span><br><span class="line">            &quot;Ports&quot;: &#123;&#125;,</span><br><span class="line">            &quot;SandboxKey&quot;: &quot;/var/run/docker/netns/bb48a599f020&quot;,</span><br><span class="line">            &quot;SecondaryIPAddresses&quot;: null,</span><br><span class="line">            &quot;SecondaryIPv6Addresses&quot;: null,</span><br><span class="line">            &quot;EndpointID&quot;: &quot;bca90a216e8e4eaa7c7d105652509de996a1a9a786c0717758a90db24167ec4d&quot;,</span><br><span class="line">            &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class="line">            &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">            &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">            &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,</span><br><span class="line">            &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">            &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">            &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class="line">            &quot;Networks&quot;: &#123;</span><br><span class="line">                &quot;bridge&quot;: &#123;</span><br><span class="line">                    &quot;IPAMConfig&quot;: null,</span><br><span class="line">                    &quot;Links&quot;: null,</span><br><span class="line">                    &quot;Aliases&quot;: null,</span><br><span class="line">                    &quot;NetworkID&quot;: &quot;340b9bbe55d6cd8d6879ade40a0106da1eaec688dd9ef60c74479905422ccc22&quot;,</span><br><span class="line">                    &quot;EndpointID&quot;: &quot;bca90a216e8e4eaa7c7d105652509de996a1a9a786c0717758a90db24167ec4d&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class="line">                    &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,</span><br><span class="line">                    &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">                    &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">                    &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class="line">                    &quot;DriverOpts&quot;: null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="5-4-进入当前正在运行的容器-exec-attach">5.4 进入当前正在运行的容器（exec|attach）</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">一般容器都是使用后台方式运行，然后进入容器，修改配置</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式一</span></span><br><span class="line">docker exec -it 容器ID bashShell</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例</span></span><br><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS         PORTS     NAMES</span><br><span class="line">f88acc152e9e   centos    &quot;/bin/bash&quot;   4 minutes ago   Up 4 minutes             charming_jang</span><br><span class="line">[root@localhost ~]# docker exec -it f88acc152e9e /bin/bash</span><br><span class="line">[root@f88acc152e9e /]# </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式二</span></span><br><span class="line">docker attach 容器ID</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例</span></span><br><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS         PORTS     NAMES</span><br><span class="line">f88acc152e9e   centos    &quot;/bin/bash&quot;   7 minutes ago   Up 7 minutes             charming_jang</span><br><span class="line">[root@localhost ~]# docker attach f88acc152e9e</span><br><span class="line">[root@f88acc152e9e /]# </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">对比</span></span><br><span class="line">docker exec -it 容器ID bashShell  # 进入容器后开启一个新的终端，可以在里面操作（常用）</span><br><span class="line">docker attach 容器ID              # 进入容器正在执行的终端，不会启动新的进程</span><br></pre></td></tr></table></figure>
<h2 id="5-5-拷贝容器内的文件到主机上-cp">5.5 拷贝容器内的文件到主机上（cp）</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker cp 容器ID:容器内路径 主机上的目标路径</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意：无论容器是后台运行抑或是停止了，都可以从容器中把文件拷贝出来</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例</span></span><br><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS         PORTS     NAMES</span><br><span class="line">f88acc152e9e   centos    &quot;/bin/bash&quot;   4 minutes ago   Up 4 minutes             charming_jang</span><br><span class="line">[root@localhost ~]# docker exec -it f88acc152e9e /bin/bash</span><br><span class="line">[root@f88acc152e9e /]# ls  </span><br><span class="line">bin  etc   lib    lost+found  mnt  proc  run   srv  tmp  var</span><br><span class="line">dev  home  lib64  media       opt  root  sbin  sys  usr</span><br><span class="line">[root@f88acc152e9e /]# cd home</span><br><span class="line">[root@f88acc152e9e home]# ls</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">容器内新建文件</span></span><br><span class="line">[root@f88acc152e9e home]# touch liangxj.txt</span><br><span class="line">[root@f88acc152e9e home]# ls</span><br><span class="line">liangxj.txt</span><br><span class="line">[root@f88acc152e9e home]# exit</span><br><span class="line">exit</span><br><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS                      PORTS     NAMES</span><br><span class="line">f88acc152e9e   centos    &quot;/bin/bash&quot;              23 minutes ago   Exited (0) 24 seconds ago             charming_jang</span><br><span class="line">[root@localhost ~]# cd /home</span><br><span class="line">[root@localhost home]# ls</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拷贝容器内的文件到主机上</span></span><br><span class="line">[root@localhost home]# docker cp f88acc152e9e:/home/liangxj.txt /home</span><br><span class="line">[root@localhost home]# ls</span><br><span class="line">liangxj.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意：这里的拷贝是一个手动的过程，还可以使用 -V 卷的技术，实现容器内的文件夹与主机上的文件夹对应起来，自动同步</span></span><br></pre></td></tr></table></figure>
<h2 id="5-6-查看-docker-运行中的容器的实时数据流">5.6 查看 Docker 运行中的容器的实时数据流</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost home]# docker stats</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以查看运行中的容器占用的CPU和内存情况，与任务管理器类似</span></span><br></pre></td></tr></table></figure>
<h1>六、命令小结</h1>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1649488125279.png" alt=""></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">attach      Attach local standard input, output, and error streams to a running container # 当前shell下attach链接指定运行镜像</span><br><span class="line">build       Build an image from a Dockerfile                                              # 通过Dockerfile定制镜像</span><br><span class="line">commit      Create a new image from a container changes                                   # 提交当前容器为新的容器</span><br><span class="line">cp          Copy files/folders between a container and the local filesystem               # 从容器中拷贝指定文件或者目录到宿主机上</span><br><span class="line">create      Create a new container                                                        # 创建一个新的容器，同run，但不启动容器</span><br><span class="line">diff        Inspect changes to files or directories on a container filesystem             # 查看docker容器编号</span><br><span class="line">events      Get real time events from the server                                          # 从docker服务获取容器实时事件</span><br><span class="line">exec        Run a command in a running container                                          # 在已存在的容器上运行命令</span><br><span class="line">export      Export a container filesystem as a tar archive                                # 导出容器的内容流作为一个tar归档文件[对应import]</span><br><span class="line">history     Show the history of an image                                                  # 展示一个镜像形成历史</span><br><span class="line">images      List images                                                                   # 列出系统当前镜像</span><br><span class="line">import      Import the contents from a tarball to create a filesystem image               # 从tar包中的内容创建一个新的文件系统映像[对应export]</span><br><span class="line">info        Display system-wide information                                               # 显示系统相关信息</span><br><span class="line">inspect     Return low-level information on Docker objects                                # 查看容器详细信息</span><br><span class="line">kill        Kill one or more running containers                                           # kill指定docker容器</span><br><span class="line">load        Load an image from a tar archive or STDIN                                     # 从一个tar包中加载一个镜像[对应save]</span><br><span class="line">login       Log in to a Docker registry                                                   # 注册或者登陆一个docker源服务器</span><br><span class="line">logout      Log out from a Docker registry                                                # 从当前Docker registry退出</span><br><span class="line">logs        Fetch the logs of a container                                                 # 输出当前容器日志信息</span><br><span class="line">pause       Pause all processes within one or more containers                             # 暂停容器</span><br><span class="line">port        List port mappings or a specific mapping for the container                    # 查看映射端口对应的容器内部源端口</span><br><span class="line">ps          List containers                                                               # 列出容器列表</span><br><span class="line">pull        Pull an image or a repository from a registry                                 # 从docker镜像源服务器拉取指定镜像或者库镜像</span><br><span class="line">push        Push an image or a repository to a registry                                   # 推送指定镜像或者库镜像至docker源服务器</span><br><span class="line">rename      Rename a container                                                            # 重命名容器</span><br><span class="line">restart     Restart one or more containers                                                # 重启运行的容器</span><br><span class="line">rm          Remove one or more containers                                                 # 移除一个或者多个容器</span><br><span class="line">rmi         Remove one or more images                                                     # 移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或-f强制删除]</span><br><span class="line">run         Run a command in a new container                                              # 创建一个新的容器并运行一个命令</span><br><span class="line">save        Save one or more images to a tar archive (streamed to STDOUT by default)      # 保存一个镜像为一个tar包[对应load]</span><br><span class="line">search      Search the Docker Hub for images                                              # 在docker hub中搜索镜像</span><br><span class="line">start       Start one or more stopped containers                                          # 启动容器</span><br><span class="line">stats       Display a live stream of container(s) resource usage statistics               # 返回运行中的容器的实时数据流</span><br><span class="line">stop        Stop one or more running containers                                           # 停止容器</span><br><span class="line">tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE                         # 标记本地镜像，将其归入某一仓库</span><br><span class="line">top         Display the running processes of a container                                  # 查看容器中运行的进程信息</span><br><span class="line">unpause     Unpause all processes within one or more containers                           # 取消暂停容器</span><br><span class="line">update      Update configuration of one or more containers                                # 更新一个或多个容器的配置</span><br><span class="line">version     Show the Docker version information                                           # 查看docker版本号</span><br><span class="line">wait        Block until one or more containers stop, then print their exit codes          # 截取容器停止时的退出状态值</span><br></pre></td></tr></table></figure>
<h1>七、练习示例</h1>
<h2 id="7-1-docker-安装-nginx">7.1 Docker 安装 Nginx</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、dockerhub搜索镜像信息</span></span><br><span class="line">[root@localhost /]# docker search nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、下载镜像</span></span><br><span class="line">[root@localhost /]# docker pull nginx</span><br><span class="line">Using default tag: latest</span><br><span class="line">Error response from daemon: Get &quot;https://registry-1.docker.io/v2/&quot;: net/http: TLS handshake timeout</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里可能会下载镜像失败，增加配置daemo.json，指向国内镜像网站即可</span></span><br><span class="line">[root@localhost ~]# vi /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [</span><br><span class="line">    &quot;https://registry.docker-cn.com&quot;,</span><br><span class="line">    &quot;http://hub-mirror.c.163.com&quot;,</span><br><span class="line">    &quot;https://docker.mirrors.ustc.edu.cn&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改配置后需要重启docker服务</span></span><br><span class="line">[root@localhost ~]# service docker restart</span><br><span class="line">Redirecting to /bin/systemctl restart docker.service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3、运行镜像</span></span><br><span class="line">[root@localhost /]# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED       SIZE</span><br><span class="line">nginx        latest    ae2feff98a0c   3 weeks ago   133MB</span><br><span class="line">centos       latest    300e315adb2f   4 weeks ago   209MB</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">【这里提前参考Linux之Tomcat的笔记，配置防火墙，使得主机可以联通Linux虚拟机的9999端口】</span></span><br><span class="line">[root@localhost /]# docker run -d --name nginx01 -p 9999:80 nginx</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">【-d：后台启动；--name：命名容器；-p：端口映射（宿主机端口号:容器端口号）】</span></span><br><span class="line">6956c87154b0a7ee642719ff22fcb938b8556d5966315ecac81259e3e6c04bf5</span><br><span class="line">docker: Error response from daemon: driver failed programming external connectivity on endpoint nginx01 (3ee4feb43afd6f892828259da60044b35963ff190db3288a45af4f96c14f12cd):  (iptables failed: iptables --wait -t nat -A DOCKER -p tcp -d 0/0 --dport 9999 -j DNAT --to-destination 172.17.0.2:80 ! -i docker0: iptables: No chain/target/match by that name.</span><br><span class="line">(exit status 1)).</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">【这里启动报错（driver failed programming external connectivity on endpoint nginx01），因为Linux虚拟机更新并重启了虚拟机的firewall，docker服务启动时定义的自定义链DOCKER从iptables中被清掉了，影响了docker的正常工作，这时需要重启docker（注意启动失败的容器，否则容器名称重复还是会失败）】</span></span><br><span class="line">[root@localhost /]# systemctl restart docker</span><br><span class="line">[root@localhost /]# docker rm $(docker ps -aq)</span><br><span class="line">6956c87154b0</span><br><span class="line">[root@localhost /]# docker run -d --name nginx01 -p 9999:80 nginx</span><br><span class="line">7f5bfce90a0bc1f594cf90dc853ddf898ddbda51a59da9a4bd591f10846b7a11</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4、测试容器启动情况</span></span><br><span class="line">[root@localhost /]# curl localhost:9999</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">【这时，也可以在主机通过浏览器访问到nginx欢迎页面（虚拟机IP:9999）】</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">5、进入容器</span></span><br><span class="line">[root@localhost /]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     ……     PORTS                  NAMES</span><br><span class="line">7f5bfce90a0b   nginx     ……     0.0.0.0:9999-&gt;80/tcp   nginx01</span><br><span class="line">[root@localhost /]# docker exec -it 7f5bfce90a0b /bin/bash</span><br><span class="line">root@7f5bfce90a0b:/# whereis nginx</span><br><span class="line">nginx: /usr/sbin/nginx /usr/lib/nginx /etc/nginx /usr/share/nginx</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">6、退出容器</span></span><br><span class="line">root@7f5bfce90a0b:/# exit</span><br><span class="line">exit</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">7、停止容器</span></span><br><span class="line">[root@localhost /]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     ……     PORTS                  NAMES</span><br><span class="line">7f5bfce90a0b   nginx     ……     0.0.0.0:9999-&gt;80/tcp   nginx01</span><br><span class="line">[root@localhost /]# docker stop 7f5bfce90a0b</span><br><span class="line">7f5bfce90a0b</span><br><span class="line">[root@localhost /]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     ……     PORTS                  NAMES</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">【停止容器后，在Linux虚拟机curl不可访问nginx，在主机浏览器也无法访问nginx】</span></span><br></pre></td></tr></table></figure>
<h2 id="7-2-docker-安装-tomcat">7.2 Docker 安装 Tomcat</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、dockerhub搜索镜像信息</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、下载镜像</span></span><br><span class="line">[root@localhost ~]# docker pull tomcat</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">【或者下载指定的Tomcat版本镜像】</span></span><br><span class="line">[root@localhost ~]# docker pull tomcat:7.0</span><br></pre></td></tr></table></figure>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1656388454532.png" alt=""></p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1656388832415.png" alt=""></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3、运行镜像</span></span><br><span class="line">[root@localhost ~]# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED       SIZE</span><br><span class="line">tomcat       7.0       096d3f7bdb4a   2 weeks ago   533MB</span><br><span class="line">tomcat       latest    feba8d001e3f   2 weeks ago   649MB</span><br><span class="line">nginx        latest    ae2feff98a0c   3 weeks ago   133MB</span><br><span class="line">centos       latest    300e315adb2f   4 weeks ago   209MB</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动最新版本的tomcat镜像</span></span><br><span class="line">[root@localhost /]# docker run -d -p 9999:8080 --name tomcat01 tomcat</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者启动指定版本镜像：docker run -d -p 9999:8080 --name tomcat01 tomcat:7.0</span></span><br><span class="line">90b2563cd6b1aead7dba21718d866d6e7f46d667afd1d83441adfd4f6f8ee0e7</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入tomcat中进行查看</span></span><br><span class="line">[root@localhost /]# docker exec -it tomcat01 /bin/bash</span><br><span class="line">root@90b2563cd6b1:/usr/local/tomcat# ll</span><br><span class="line">bash: ll: command not found</span><br><span class="line">root@90b2563cd6b1:/usr/local/tomcat# ls -a</span><br><span class="line">.             CONTRIBUTING.md  README.md      bin   logs            webapps</span><br><span class="line">..            LICENSE          RELEASE-NOTES  conf  native-jni-lib  webapps.dist</span><br><span class="line">BUILDING.txt  NOTICE           RUNNING.txt    lib   temp            work</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">【注意：】</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">【1、在Tomcat容器中，发现Linux的命令少了（因为是阉割版，只保留最低需求）；】</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">【2、在Tomcat容器里，webapps是一个空的文件夹（因为阿里云里默认是最小的镜像，删除了所有不必要的东西，只保证最小的可运行环境）】</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">【第2点导致，虽然Tomcat容器启动成功了，但是在主机的浏览器中访问首页会报404，找不到目录】</span></span><br></pre></td></tr></table></figure>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1649488254408.png" alt=""></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@90b2563cd6b1:/usr/local/tomcat# cd webapps.dist/</span><br><span class="line">root@90b2563cd6b1:/usr/local/tomcat/webapps.dist# ls</span><br><span class="line">ROOT  docs  examples  host-manager  manager</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">【要解决访问Tomcat首页报404的问题，拷贝webapps.dist文件夹里的内容，到webapps即可】</span></span><br><span class="line">root@90b2563cd6b1:/usr/local/tomcat# cp -r webapps.dist/* webapps</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">【这里有一个情况，就是Tomcat中的项目文件会经常需要修改，因此可以在容器外部提供一个映射路径，webapps，在外部放置项目，就自动同步到内部】</span></span><br></pre></td></tr></table></figure>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1649488281049.png" alt=""></p>
<h2 id="7-3-docker-安装-es-和-kibana">7.3 Docker 安装 ES 和 Kibana</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、dockerhub搜索镜像信息</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、下载镜像并启动elasticsearch</span></span><br><span class="line">[root@localhost ~]# docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; elasticsearch:7.6.2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意：es暴露的端口很多；es十分耗内存；es的数据一般需要放置到安全目录！挂载</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3、测试es是否启动成功</span></span><br><span class="line">[root@localhost ~]# curl localhost:9200</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;eaeb13f0f20a&quot;,</span><br><span class="line">  &quot;cluster_name&quot; : &quot;docker-cluster&quot;,</span><br><span class="line">  &quot;cluster_uuid&quot; : &quot;LSgGyRUQSdy_MbxUbPyLKw&quot;,</span><br><span class="line">  &quot;version&quot; : &#123;</span><br><span class="line">    &quot;number&quot; : &quot;7.6.2&quot;,</span><br><span class="line">    &quot;build_flavor&quot; : &quot;default&quot;,</span><br><span class="line">    &quot;build_type&quot; : &quot;docker&quot;,</span><br><span class="line">    &quot;build_hash&quot; : &quot;ef48eb35cf30adf4db14086e8aabd07ef6fb113f&quot;,</span><br><span class="line">    &quot;build_date&quot; : &quot;2020-03-26T06:34:37.794943Z&quot;,</span><br><span class="line">    &quot;build_snapshot&quot; : false,</span><br><span class="line">    &quot;lucene_version&quot; : &quot;8.4.0&quot;,</span><br><span class="line">    &quot;minimum_wire_compatibility_version&quot; : &quot;6.8.0&quot;,</span><br><span class="line">    &quot;minimum_index_compatibility_version&quot; : &quot;6.0.0-beta1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4、查看docker中运行镜像的状态（每秒刷新），可以看到es十分占内存</span></span><br><span class="line">[root@localhost ~]# docker stats</span><br><span class="line">CONTAINER ID   NAME            CPU %     MEM USAGE / LIMIT     MEM %     NET I/O     BLOCK I/O        PIDS</span><br><span class="line">eaeb13f0f20a   elasticsearch   0.72%     1.234GiB / 1.781GiB   69.32%    648B / 0B   401MB / 1.76MB   46</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">5、增加内存限制，一般是通过修改es配置文件实现，而在docker中则通过启动是加入-e进行环境配置修改</span></span><br><span class="line">[root@localhost ~]# docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; -e ES_JAVA_OPTS=&quot;-Xms64m -Xmx512m&quot; elasticsearch:7.6.2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">6、检查es是否启动成功</span></span><br><span class="line">[root@localhost ~]# curl localhost:9200</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;4901e48b16b2&quot;,</span><br><span class="line">  &quot;cluster_name&quot; : &quot;docker-cluster&quot;,</span><br><span class="line">  &quot;cluster_uuid&quot; : &quot;Vvn5-B7xRBquRfiUZFqI5g&quot;,</span><br><span class="line">  &quot;version&quot; : &#123;</span><br><span class="line">    &quot;number&quot; : &quot;7.6.2&quot;,</span><br><span class="line">    &quot;build_flavor&quot; : &quot;default&quot;,</span><br><span class="line">    &quot;build_type&quot; : &quot;docker&quot;,</span><br><span class="line">    &quot;build_hash&quot; : &quot;ef48eb35cf30adf4db14086e8aabd07ef6fb113f&quot;,</span><br><span class="line">    &quot;build_date&quot; : &quot;2020-03-26T06:34:37.794943Z&quot;,</span><br><span class="line">    &quot;build_snapshot&quot; : false,</span><br><span class="line">    &quot;lucene_version&quot; : &quot;8.4.0&quot;,</span><br><span class="line">    &quot;minimum_wire_compatibility_version&quot; : &quot;6.8.0&quot;,</span><br><span class="line">    &quot;minimum_index_compatibility_version&quot; : &quot;6.0.0-beta1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">7、查看es的运行状态</span></span><br><span class="line">[root@localhost ~]# docker stats 4901e48b16b2</span><br><span class="line">CONTAINER ID   NAME            CPU %     MEM USAGE / LIMIT     MEM %     NET I/O     BLOCK I/O        PIDS</span><br><span class="line">4901e48b16b2   elasticsearch   0.32%     402.6MiB / 1.781GiB   22.08%    648B / 0B   190MB / 1.75MB   47</span><br></pre></td></tr></table></figure>
<h2 id="7-4-打包-jar">7.4 打包 jar</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost dockerdabao]# docker build -t target/dg-is-ga-server:30 --rm .</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">冒号后面为打包的版本号</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--<span class="built_in">rm</span>：整个构建过程成功后删除中间环节的容器</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">.：最后单独的点，意思为根据当前目录下的Dockerfile文件生成镜像</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打包前需要将Dockerfile文件放到根目录中，声明打包的规则</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将指定镜像保存成tar归档文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令：docker save [OPTIONS] IMAGE [IMAGE...]</span></span><br><span class="line">[root@localhost dockerdabao]# docker save -o my_ubuntu_v3.tar jb51/ubuntu:v3</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-o：输出到的文件</span></span><br></pre></td></tr></table></figure>
<h1>八、Docker 可视化操作</h1>
<h2 id="8-1-portainer-可视化容器管理工具">8.1 Portainer（可视化容器管理工具）</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 9999:9000 --restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=true portainer/portainer</span><br></pre></td></tr></table></figure>
<p>访问测试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">虚拟机</span></span><br><span class="line">curl localhost:9999</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">本机访问</span></span><br><span class="line">虚拟机IP:9999</span><br></pre></td></tr></table></figure>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1649488385369.png" alt=""></p>
<p>在界面中创建账号和密码：admin - admin@123</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1649488415443.png" alt=""></p>
<p>在界面中选择<code>Local</code>，然后点击<code>Connect</code>进入管理面板</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1649488465792.png" alt=""></p>
<p>一般不用可视化操作界面，界面信息及操作参考博客：<a href="http://www.yunweipai.com/34991.html">可视化图形工具Portainer</a></p>
<h2 id="8-2-rancher-docker-容器管理系统">8.2 Rancher（Docker 容器管理系统）</h2>
<blockquote>
<p>持续集成与持续部署（CI/CD）</p>
</blockquote>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>软件设计师</title>
    <url>/blog/e5eb39ed.html</url>
    <content><![CDATA[<blockquote>
<p>1GB = 1024MB = 1024 × 1024KB = 1024 × 1024 × 1024Byte（字节） = 1024 × 1024 × 1024 × 8bit（比特）</p>
<p>1 英文字母（不分大小写）= 1Byte</p>
<p>1 汉字 = 2 byte = 16 bit （这里不是很准确，当编码不同的时候，1个汉字所占的字节数也会有所不同，有些编码是占 2个字节，有些则不是，可能是 3个或者 4个）</p>
</blockquote>
<h1>一、计算机组成与体系结构</h1>
<h2 id="1-1-数据的表示-☆☆☆☆">1.1 数据的表示（☆☆☆☆）</h2>
<h3 id="1-1-1-不同进制转换">1.1.1 不同进制转换</h3>
<h4 id="r进制转十进制-按权展开法">R进制转十进制【按权展开法】</h4>
<ul>
<li>二进制转十进制：10100.01 = 1✕2<sup>4</sup> + 1✕2<sup>2</sup> + 1✕2<sup>-2</sup> = 16 + 4 + ¼ = 20.25</li>
<li>七进制转十进制：604.01 = 6✕7<sup>2</sup> + 4✕7<sup>0</sup> + 1✕7<sup>-2</sup> = 282 + 4 +  ¹⁄₄₉ ≈ 286.02</li>
</ul>
<h4 id="十进制转r进制-短除法">十进制转R进制【短除法】</h4>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1457844685.jpeg" alt=""></p>
<p>R进制转R进制</p>
<ul>
<li>二进制转八进制</li>
</ul>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/e7ff28000147480b852795a35a9d8134.png" alt=""></p>
<ul>
<li>八进制转二进制</li>
</ul>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/827dc89c0e6d4092ab7525370761b926.png" alt=""></p>
<ul>
<li>二进制转十六进制</li>
</ul>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/7739a5bb1eaa46d3a09e5e446d7fc4d8.png" alt=""></p>
<ul>
<li>十六进制转二进制</li>
</ul>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/e8b19570b3074f339c8989ff4ffbb6f8.png" alt=""></p>
<ul>
<li>其余二进制转七进制、七进制转二进制等需要十进制进行间接转换</li>
</ul>
<h3 id="1-1-2-原码-反码-补码-移码">1.1.2 原码、反码、补码、移码</h3>
<table>
<thead>
<tr>
<th>码制</th>
<th>数值【1】</th>
<th>数值【-1】</th>
<th>数值【1+(-1)】</th>
</tr>
</thead>
<tbody>
<tr>
<td>原码</td>
<td>0000 0001</td>
<td>1000 0001</td>
<td>1000 0010【-2 - ×】</td>
</tr>
<tr>
<td>反码</td>
<td>0000 0001</td>
<td>1111 1110</td>
<td>1111 1111【-127 - ×】</td>
</tr>
<tr>
<td>补码</td>
<td>0000 0001</td>
<td>1111 1111</td>
<td>0000 0000【0 - 正确】</td>
</tr>
<tr>
<td>移码</td>
<td>1000 0001</td>
<td>0111 1111</td>
<td>1000 0000【-0】</td>
</tr>
</tbody>
</table>
<p><em>由此可见，只有补码的【溢出数值】才是正确的加法运算，所以使用补码参与加减法运算。</em></p>
<h3 id="1-1-3-速记">1.1.3 速记</h3>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>正数的原码、反码、补码都相同</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>负数的反码除原码符号位外全部取反</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>负数的补码在反码的基础上</mtext><mo>+</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>移码的正负数只对补码的符号位取反</mtext></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{cases}
 正数的原码、反码、补码都相同 \\
 负数的反码除原码符号位外全部取反 \\
 负数的补码在反码的基础上+1 \\
 移码的正负数只对补码的符号位取反
\end{cases}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:5.76em;vertical-align:-2.63em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9500200000000008em;"><span style="top:-1.59999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-1.5949900000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.8899900000000003em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.1849900000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.2049900000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.1500100000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.29501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.59001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.885010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.905010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.20002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.45002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.1300000000000003em;"><span style="top:-5.130000000000001em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">正</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">原</span><span class="mord cjk_fallback">码</span><span class="mord cjk_fallback">、</span><span class="mord cjk_fallback">反</span><span class="mord cjk_fallback">码</span><span class="mord cjk_fallback">、</span><span class="mord cjk_fallback">补</span><span class="mord cjk_fallback">码</span><span class="mord cjk_fallback">都</span><span class="mord cjk_fallback">相</span><span class="mord cjk_fallback">同</span></span></span><span style="top:-3.6900000000000004em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">负</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">反</span><span class="mord cjk_fallback">码</span><span class="mord cjk_fallback">除</span><span class="mord cjk_fallback">原</span><span class="mord cjk_fallback">码</span><span class="mord cjk_fallback">符</span><span class="mord cjk_fallback">号</span><span class="mord cjk_fallback">位</span><span class="mord cjk_fallback">外</span><span class="mord cjk_fallback">全</span><span class="mord cjk_fallback">部</span><span class="mord cjk_fallback">取</span><span class="mord cjk_fallback">反</span></span></span><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">负</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">补</span><span class="mord cjk_fallback">码</span><span class="mord cjk_fallback">在</span><span class="mord cjk_fallback">反</span><span class="mord cjk_fallback">码</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">基</span><span class="mord cjk_fallback">础</span><span class="mord cjk_fallback">上</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span><span style="top:-0.8100000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">移</span><span class="mord cjk_fallback">码</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">正</span><span class="mord cjk_fallback">负</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">只</span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">补</span><span class="mord cjk_fallback">码</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">符</span><span class="mord cjk_fallback">号</span><span class="mord cjk_fallback">位</span><span class="mord cjk_fallback">取</span><span class="mord cjk_fallback">反</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.63em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<h2 id="1-2-数值表示范围">1.2 数值表示范围</h2>
<table>
<thead>
<tr>
<th>码制</th>
<th>定点整数</th>
<th>定点小数</th>
</tr>
</thead>
<tbody>
<tr>
<td>原码</td>
<td>- ( 2<sup>n-1</sup>-1 ) ~ + ( 2<sup>n-1</sup>-1 )<br>当n=8，-127 ~ +127<br>二进制：1111 1111 ~ 0111 1111</td>
<td>- ( 1-2<sup>-(n-1)</sup> ) ~ + ( 1-2<sup>-(n-1)</sup> )<br>当n=8，<br>二进制：-0.1111 1111 ~ +0.1111 1111</td>
</tr>
<tr>
<td>反码</td>
<td>- ( 2<sup>n-1</sup>-1 ) ~ + ( 2<sup>n-1</sup>-1 )</td>
<td>- ( 1-2<sup>-(n-1)</sup> ) ~ + ( 1-2<sup>-(n-1)</sup> )</td>
</tr>
<tr>
<td>补码</td>
<td>- 2<sup>n-1</sup> ~ + ( 2<sup>n-1</sup>-1 )<br>当 n = 8，-128 ~ +127<br>二进制：1000 0000 ~ 0111 1111<br>其中-128的补码为1000 0000是人为规定</td>
<td>- 1 ~ + ( 1-2<sup>-(n-1)</sup> )<br>当n=8时，<br>二进制：-1 ~ +0.1111 1111<br>其中-1的编码为1000 0000是人为规定</td>
</tr>
<tr>
<td>移码</td>
<td>- 2<sup>n-1</sup> ~ + ( 2<sup>n-1</sup>-1 )</td>
<td>- 1 ~ +( 1-2<sup>-(n-1)</sup> )</td>
</tr>
</tbody>
</table>
<h2 id="1-3-浮点数的运算">1.3 浮点数的运算</h2>
<p>浮点数表示：N = 尾数 * 基数<sup>阶码</sup></p>
<p>特点：</p>
<ol>
<li>一般尾数用【补码】，阶码用【移码】</li>
<li>対阶时，小数向大数看齐</li>
<li>尾数越长，表示数的精度更高；阶码越长，表示数的范围越大</li>
</ol>
<table>
<thead>
<tr>
<th></th>
<th>阶符</th>
<th>阶码（指数）</th>
<th>数符</th>
<th>尾数</th>
</tr>
</thead>
<tbody>
<tr>
<td>3.14 × 10<sup>3</sup></td>
<td>0</td>
<td>用移码表示</td>
<td>0</td>
<td>用补码表示</td>
</tr>
<tr>
<td>3.14 × 10<sup>-3 </sup></td>
<td>1</td>
<td>用移码表示</td>
<td>0</td>
<td>用补码表示</td>
</tr>
</tbody>
</table>
<h2 id="1-4-计算机结构">1.4 计算机结构</h2>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230408152925700.png" alt=""></p>
<h3 id="1-4-1-运算器与控制器-☆☆☆☆">1.4.1 运算器与控制器（☆☆☆☆）</h3>
<p>CPU = 运算器 + 控制器 + 寄存器组 + 内置总线</p>
<h3 id="1-4-2-速记">1.4.2 速记</h3>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>P</mi><mi>U</mi><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>运算器</mtext><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>算术逻辑单元</mtext><mi>A</mi><mi>L</mi><mi>U</mi><mtext>：数据的算术运算和逻辑运算</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>累加寄存器</mtext><mi>A</mi><mi>C</mi><mtext>：通用寄存器，为</mtext><mi>A</mi><mi>L</mi><mi>U</mi><mtext>提供一个工作区，用在暂存数据</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>数据缓冲寄存器</mtext><mi>D</mi><mi>R</mi><mtext>：写内存时，暂存指令或数据</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>状态条件寄存器</mtext><mi>P</mi><mi>S</mi><mi>W</mi><mtext>：存状态标志与控制标志（存在争议，也有将其归为控制器的）</mtext></mrow></mstyle></mtd></mtr></mtable></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>控制器</mtext><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>程序计数器</mtext><mi>P</mi><mi>C</mi><mtext>：存储下一条要执行指令的地址</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>指令寄存器</mtext><mi>I</mi><mi>R</mi><mtext>：存储从存储器中读取出来的，即将执行的指令</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>地址寄存器</mtext><mi>A</mi><mi>R</mi><mtext>：存储</mtext><mi>C</mi><mi>P</mi><mi>U</mi><mtext>当前要访问的指令的地址</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>指令译码器</mtext><mi>I</mi><mi>R</mi><mtext>：对指令中的操作码字段进行分析解释</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>时序部件：为每条指令按时间顺序提供时序控制信号</mtext></mstyle></mtd></mtr></mtable></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>寄存器组</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>内置总线</mtext></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">CPU
\begin{cases}
 运算器
     \begin{cases}
         算术逻辑单元ALU：数据的算术运算和逻辑运算 \\
         累加寄存器AC：通用寄存器，为 ALU 提供一个工作区，用在暂存数据 \\
         数据缓冲寄存器DR：写内存时，暂存指令或数据 \\
         状态条件寄存器PSW：存状态标志与控制标志（存在争议，也有将其归为控制器的）
     \end{cases}\\
 控制器 
      \begin{cases}
         程序计数器PC：存储下一条要执行指令的地址 \\
         指令寄存器IR：存储从存储器中读取出来的，即将执行的指令 \\
         地址寄存器AR：存储 CPU 当前要访问的指令的地址 \\
         指令译码器IR：对指令中的操作码字段进行分析解释 \\
         时序部件：为每条指令按时间顺序提供时序控制信号
     \end{cases}\\
 寄存器组 \\
 内置总线
\end{cases}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:15.840039999999998em;vertical-align:-7.670019999999997em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:8.050019999999998em;"><span style="top:3.5000099999999996em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:3.50501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:3.21001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:2.91501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:2.62001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:2.3250100000000002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:2.0300100000000003em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:1.7350100000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:1.4400100000000005em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:1.1450100000000005em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:0.8500100000000006em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:0.5550100000000007em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:0.26001000000000074em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-0.03498999999999919em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-0.3299899999999991em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-0.624989999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-0.919989999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.2149899999999991em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.5099899999999993em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.8049899999999994em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.0999899999999996em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.2049899999999996em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.1500099999999995em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.2950099999999996em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.5900099999999995em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.885009999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.180009999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.475009999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.770009999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-6.065009999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-6.360009999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-6.655009999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-6.950009999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-7.245009999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-7.540009999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-7.835009999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-8.130009999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-8.425009999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-8.720009999999998em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-9.015009999999998em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-9.310009999999998em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-9.605009999999998em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-9.900009999999998em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-10.005009999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-10.300019999999998em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:7.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:8.170020000000001em;"><span style="top:-10.890039999999999em;"><span class="pstrut" style="height:5.850020000000001em;"></span><span class="mord"><span class="mord cjk_fallback">运</span><span class="mord cjk_fallback">算</span><span class="mord cjk_fallback">器</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9500200000000008em;"><span style="top:-1.59999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-1.5949900000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.8899900000000003em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.1849900000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.2049900000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.1500100000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.29501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.59001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.885010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.905010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.20002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.45002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.1300000000000003em;"><span style="top:-5.130000000000001em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">算</span><span class="mord cjk_fallback">术</span><span class="mord cjk_fallback">逻</span><span class="mord cjk_fallback">辑</span><span class="mord cjk_fallback">单</span><span class="mord cjk_fallback">元</span><span class="mord mathdefault">A</span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mord cjk_fallback">：</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">据</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">算</span><span class="mord cjk_fallback">术</span><span class="mord cjk_fallback">运</span><span class="mord cjk_fallback">算</span><span class="mord cjk_fallback">和</span><span class="mord cjk_fallback">逻</span><span class="mord cjk_fallback">辑</span><span class="mord cjk_fallback">运</span><span class="mord cjk_fallback">算</span></span></span><span style="top:-3.6900000000000004em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">累</span><span class="mord cjk_fallback">加</span><span class="mord cjk_fallback">寄</span><span class="mord cjk_fallback">存</span><span class="mord cjk_fallback">器</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord cjk_fallback">：</span><span class="mord cjk_fallback">通</span><span class="mord cjk_fallback">用</span><span class="mord cjk_fallback">寄</span><span class="mord cjk_fallback">存</span><span class="mord cjk_fallback">器</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">为</span><span class="mord mathdefault">A</span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mord cjk_fallback">提</span><span class="mord cjk_fallback">供</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">工</span><span class="mord cjk_fallback">作</span><span class="mord cjk_fallback">区</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">用</span><span class="mord cjk_fallback">在</span><span class="mord cjk_fallback">暂</span><span class="mord cjk_fallback">存</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">据</span></span></span><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">据</span><span class="mord cjk_fallback">缓</span><span class="mord cjk_fallback">冲</span><span class="mord cjk_fallback">寄</span><span class="mord cjk_fallback">存</span><span class="mord cjk_fallback">器</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord cjk_fallback">：</span><span class="mord cjk_fallback">写</span><span class="mord cjk_fallback">内</span><span class="mord cjk_fallback">存</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">暂</span><span class="mord cjk_fallback">存</span><span class="mord cjk_fallback">指</span><span class="mord cjk_fallback">令</span><span class="mord cjk_fallback">或</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">据</span></span></span><span style="top:-0.8100000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">状</span><span class="mord cjk_fallback">态</span><span class="mord cjk_fallback">条</span><span class="mord cjk_fallback">件</span><span class="mord cjk_fallback">寄</span><span class="mord cjk_fallback">存</span><span class="mord cjk_fallback">器</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord cjk_fallback">：</span><span class="mord cjk_fallback">存</span><span class="mord cjk_fallback">状</span><span class="mord cjk_fallback">态</span><span class="mord cjk_fallback">标</span><span class="mord cjk_fallback">志</span><span class="mord cjk_fallback">与</span><span class="mord cjk_fallback">控</span><span class="mord cjk_fallback">制</span><span class="mord cjk_fallback">标</span><span class="mord cjk_fallback">志</span><span class="mord cjk_fallback">（</span><span class="mord cjk_fallback">存</span><span class="mord cjk_fallback">在</span><span class="mord cjk_fallback">争</span><span class="mord cjk_fallback">议</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">也</span><span class="mord cjk_fallback">有</span><span class="mord cjk_fallback">将</span><span class="mord cjk_fallback">其</span><span class="mord cjk_fallback">归</span><span class="mord cjk_fallback">为</span><span class="mord cjk_fallback">控</span><span class="mord cjk_fallback">制</span><span class="mord cjk_fallback">器</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">）</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.63em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-4.410020000000002em;"><span class="pstrut" style="height:5.850020000000001em;"></span><span class="mord"><span class="mord cjk_fallback">控</span><span class="mord cjk_fallback">制</span><span class="mord cjk_fallback">器</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.85002em;"><span style="top:-0.6999900000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-0.6949900000000002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-0.9899900000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.2849900000000003em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.5799900000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.8749900000000006em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.1699900000000008em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.2049900000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.1500100000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.29501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.59001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.885010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.180010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.475010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.770010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.80501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-6.10002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.3500199999999998em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.8500000000000005em;"><span style="top:-5.850000000000001em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">程</span><span class="mord cjk_fallback">序</span><span class="mord cjk_fallback">计</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">器</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord cjk_fallback">：</span><span class="mord cjk_fallback">存</span><span class="mord cjk_fallback">储</span><span class="mord cjk_fallback">下</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">条</span><span class="mord cjk_fallback">要</span><span class="mord cjk_fallback">执</span><span class="mord cjk_fallback">行</span><span class="mord cjk_fallback">指</span><span class="mord cjk_fallback">令</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">地</span><span class="mord cjk_fallback">址</span></span></span><span style="top:-4.410000000000001em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">指</span><span class="mord cjk_fallback">令</span><span class="mord cjk_fallback">寄</span><span class="mord cjk_fallback">存</span><span class="mord cjk_fallback">器</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord cjk_fallback">：</span><span class="mord cjk_fallback">存</span><span class="mord cjk_fallback">储</span><span class="mord cjk_fallback">从</span><span class="mord cjk_fallback">存</span><span class="mord cjk_fallback">储</span><span class="mord cjk_fallback">器</span><span class="mord cjk_fallback">中</span><span class="mord cjk_fallback">读</span><span class="mord cjk_fallback">取</span><span class="mord cjk_fallback">出</span><span class="mord cjk_fallback">来</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">即</span><span class="mord cjk_fallback">将</span><span class="mord cjk_fallback">执</span><span class="mord cjk_fallback">行</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">指</span><span class="mord cjk_fallback">令</span></span></span><span style="top:-2.9700000000000006em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">地</span><span class="mord cjk_fallback">址</span><span class="mord cjk_fallback">寄</span><span class="mord cjk_fallback">存</span><span class="mord cjk_fallback">器</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord cjk_fallback">：</span><span class="mord cjk_fallback">存</span><span class="mord cjk_fallback">储</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mord cjk_fallback">当</span><span class="mord cjk_fallback">前</span><span class="mord cjk_fallback">要</span><span class="mord cjk_fallback">访</span><span class="mord cjk_fallback">问</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">指</span><span class="mord cjk_fallback">令</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">地</span><span class="mord cjk_fallback">址</span></span></span><span style="top:-1.5300000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">指</span><span class="mord cjk_fallback">令</span><span class="mord cjk_fallback">译</span><span class="mord cjk_fallback">码</span><span class="mord cjk_fallback">器</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord cjk_fallback">：</span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">指</span><span class="mord cjk_fallback">令</span><span class="mord cjk_fallback">中</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">操</span><span class="mord cjk_fallback">作</span><span class="mord cjk_fallback">码</span><span class="mord cjk_fallback">字</span><span class="mord cjk_fallback">段</span><span class="mord cjk_fallback">进</span><span class="mord cjk_fallback">行</span><span class="mord cjk_fallback">分</span><span class="mord cjk_fallback">析</span><span class="mord cjk_fallback">解</span><span class="mord cjk_fallback">释</span></span></span><span style="top:-0.08999999999999997em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">序</span><span class="mord cjk_fallback">部</span><span class="mord cjk_fallback">件</span><span class="mord cjk_fallback">：</span><span class="mord cjk_fallback">为</span><span class="mord cjk_fallback">每</span><span class="mord cjk_fallback">条</span><span class="mord cjk_fallback">指</span><span class="mord cjk_fallback">令</span><span class="mord cjk_fallback">按</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">间</span><span class="mord cjk_fallback">顺</span><span class="mord cjk_fallback">序</span><span class="mord cjk_fallback">提</span><span class="mord cjk_fallback">供</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">序</span><span class="mord cjk_fallback">控</span><span class="mord cjk_fallback">制</span><span class="mord cjk_fallback">信</span><span class="mord cjk_fallback">号</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.35em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-0.0520000000000046em;"><span class="pstrut" style="height:5.850020000000001em;"></span><span class="mord"><span class="mord cjk_fallback">寄</span><span class="mord cjk_fallback">存</span><span class="mord cjk_fallback">器</span><span class="mord cjk_fallback">组</span></span></span><span style="top:1.3879999999999968em;"><span class="pstrut" style="height:5.850020000000001em;"></span><span class="mord"><span class="mord cjk_fallback">内</span><span class="mord cjk_fallback">置</span><span class="mord cjk_fallback">总</span><span class="mord cjk_fallback">线</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:7.670019999999997em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<h3 id="1-4-3-存储器">1.4.3 存储器</h3>
<ul>
<li>主存储器：内存</li>
<li>辅助存储器：外存，<strong>硬盘属于外存</strong></li>
</ul>
<h3 id="1-4-4-输入设备">1.4.4 输入设备</h3>
<h3 id="1-4-5-输出设备">1.4.5 输出设备</h3>
<h2 id="1-5-计算机体系结构分类">1.5 计算机体系结构分类</h2>
<h3 id="1-5-1-flynn分类法-☆☆">1.5.1 Flynn分类法（☆☆）</h3>
<h3 id="1-5-2-速记">1.5.2 速记</h3>
<table>
<thead>
<tr>
<th>体系结构类型</th>
<th>结构</th>
<th>关键特性</th>
<th>代表</th>
</tr>
</thead>
<tbody>
<tr>
<td>单指令流单数据流<br>SISD</td>
<td>控制部分：一个<br>处理器：一个<br>主存模块：一个</td>
<td></td>
<td>单处理器系统（即：单CPU系统）</td>
</tr>
<tr>
<td>单指令流多数据流<br>SIMD</td>
<td>控制部分：一个<br>处理器：多个<br/>主存模块：多个</td>
<td>各处理器以异步的形式执行同一条指令</td>
<td>并行处理机<br/>阵列处理机<br/>超级向量处理机</td>
</tr>
<tr>
<td>多指令流单数据流<br/>MISD</td>
<td>控制部分：多个<br/>处理器：一个<br/>主存模块：多个</td>
<td>被证明不可能，至少是不实际</td>
<td>目前没有，有文献称流水线计算机为此类</td>
</tr>
<tr>
<td>多指令流多数据流<br/>MIMD</td>
<td>控制部分：多个<br/>处理器：多个<br/>主存模块：多个</td>
<td>能够实现作业、任务、指令等各级全面并行</td>
<td>多处理机系统<br/>多计算机</td>
</tr>
</tbody>
</table>
<h2 id="1-6-指令的基本概念">1.6 指令的基本概念</h2>
<p>一条指令就是机器语言的一个语句，它是一组有意义的二进制代码，指令的基本格式如下：</p>
<table border="1">
    <tr align="center">
        <td>操作码字段</td>
        <td>地址码字段</td>
    </tr>
</table>
<p>【操作码字段】指出了计算机要执行什么性质的操作，如加法、减法、取数、存数等。</p>
<p>【地址码字段】需要包含各操作数的地址及操作结果的存放地址等，从其地址结构的角度可以分为三地址指令、二地址指令、一地址指令和零地址指令。</p>
<table border="1">
    <tr align="center">
        <td>OP</td>
        <td>A1</td>
        <td>A2</td>
        <td>A3</td>
    </tr>
</table>
<table border="1">
    <tr align="center">
        <td>OP</td>
        <td>A1</td>
        <td>A2</td>
    </tr>
</table>
<table border="1">
    <tr align="center">
        <td>OP</td>
        <td>A1</td>
    </tr>
</table>
<table border="1">
    <tr align="center">
        <td>OP</td>
    </tr>
</table>
<h2 id="1-7-寻址方式">1.7 寻址方式</h2>
<h3 id="1-7-1-速记">1.7.1 速记</h3>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>寻址方式</mtext><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>立即寻址方式：【主存储器】</mtext><mo>→</mo><mtext>【指令】</mtext><mo>→</mo><mtext>【操作数】（速度快，但灵活性差）</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>直接寻址方式：【主存储器】</mtext><mo>→</mo><mtext>【指令】</mtext><mo>→</mo><mtext>【操作数地址】</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>间接寻址方式：【主存储器】</mtext><mo>→</mo><mtext>【指令】</mtext><mo>→</mo><mtext>【地址】</mtext><mo>→</mo><mtext>【操作数地址】</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>寄存器寻址方式：【寄存器】</mtext><mo>→</mo><mtext>【指令】</mtext><mo>→</mo><mtext>【操作数地址】</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>寄存器间接寻址方式：【寄存器】</mtext><mo>→</mo><mtext>【指令】</mtext><mo>→</mo><mtext>【地址】</mtext><mo>→</mo><mtext>【操作数地址】</mtext></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">寻址方式
\begin{cases}
 立即寻址方式：【主存储器】→【指令】→【操作数】（速度快，但灵活性差） \\
 直接寻址方式：【主存储器】→【指令】→【操作数地址】 \\
 间接寻址方式：【主存储器】→【指令】→【地址】→【操作数地址】 \\
 寄存器寻址方式：【寄存器】→【指令】→【操作数地址】 \\
 寄存器间接寻址方式：【寄存器】→【指令】→【地址】→【操作数地址】
\end{cases}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:7.2000399999999996em;vertical-align:-3.3500199999999998em;"></span><span class="mord cjk_fallback">寻</span><span class="mord cjk_fallback">址</span><span class="mord cjk_fallback">方</span><span class="mord cjk_fallback">式</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.85002em;"><span style="top:-0.6999900000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-0.6949900000000002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-0.9899900000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.2849900000000003em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.5799900000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.8749900000000006em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.1699900000000008em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.2049900000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.1500100000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.29501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.59001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.885010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.180010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.475010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.770010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.80501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-6.10002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.3500199999999998em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.8500000000000005em;"><span style="top:-5.850000000000001em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">立</span><span class="mord cjk_fallback">即</span><span class="mord cjk_fallback">寻</span><span class="mord cjk_fallback">址</span><span class="mord cjk_fallback">方</span><span class="mord cjk_fallback">式</span><span class="mord cjk_fallback">：</span><span class="mord cjk_fallback">【</span><span class="mord cjk_fallback">主</span><span class="mord cjk_fallback">存</span><span class="mord cjk_fallback">储</span><span class="mord cjk_fallback">器</span><span class="mord cjk_fallback">】</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord cjk_fallback">【</span><span class="mord cjk_fallback">指</span><span class="mord cjk_fallback">令</span><span class="mord cjk_fallback">】</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord cjk_fallback">【</span><span class="mord cjk_fallback">操</span><span class="mord cjk_fallback">作</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">】</span><span class="mord cjk_fallback">（</span><span class="mord cjk_fallback">速</span><span class="mord cjk_fallback">度</span><span class="mord cjk_fallback">快</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">但</span><span class="mord cjk_fallback">灵</span><span class="mord cjk_fallback">活</span><span class="mord cjk_fallback">性</span><span class="mord cjk_fallback">差</span><span class="mord cjk_fallback">）</span></span></span><span style="top:-4.410000000000001em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">直</span><span class="mord cjk_fallback">接</span><span class="mord cjk_fallback">寻</span><span class="mord cjk_fallback">址</span><span class="mord cjk_fallback">方</span><span class="mord cjk_fallback">式</span><span class="mord cjk_fallback">：</span><span class="mord cjk_fallback">【</span><span class="mord cjk_fallback">主</span><span class="mord cjk_fallback">存</span><span class="mord cjk_fallback">储</span><span class="mord cjk_fallback">器</span><span class="mord cjk_fallback">】</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord cjk_fallback">【</span><span class="mord cjk_fallback">指</span><span class="mord cjk_fallback">令</span><span class="mord cjk_fallback">】</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord cjk_fallback">【</span><span class="mord cjk_fallback">操</span><span class="mord cjk_fallback">作</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">地</span><span class="mord cjk_fallback">址</span><span class="mord cjk_fallback">】</span></span></span><span style="top:-2.9700000000000006em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">间</span><span class="mord cjk_fallback">接</span><span class="mord cjk_fallback">寻</span><span class="mord cjk_fallback">址</span><span class="mord cjk_fallback">方</span><span class="mord cjk_fallback">式</span><span class="mord cjk_fallback">：</span><span class="mord cjk_fallback">【</span><span class="mord cjk_fallback">主</span><span class="mord cjk_fallback">存</span><span class="mord cjk_fallback">储</span><span class="mord cjk_fallback">器</span><span class="mord cjk_fallback">】</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord cjk_fallback">【</span><span class="mord cjk_fallback">指</span><span class="mord cjk_fallback">令</span><span class="mord cjk_fallback">】</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord cjk_fallback">【</span><span class="mord cjk_fallback">地</span><span class="mord cjk_fallback">址</span><span class="mord cjk_fallback">】</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord cjk_fallback">【</span><span class="mord cjk_fallback">操</span><span class="mord cjk_fallback">作</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">地</span><span class="mord cjk_fallback">址</span><span class="mord cjk_fallback">】</span></span></span><span style="top:-1.5300000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">寄</span><span class="mord cjk_fallback">存</span><span class="mord cjk_fallback">器</span><span class="mord cjk_fallback">寻</span><span class="mord cjk_fallback">址</span><span class="mord cjk_fallback">方</span><span class="mord cjk_fallback">式</span><span class="mord cjk_fallback">：</span><span class="mord cjk_fallback">【</span><span class="mord cjk_fallback">寄</span><span class="mord cjk_fallback">存</span><span class="mord cjk_fallback">器</span><span class="mord cjk_fallback">】</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord cjk_fallback">【</span><span class="mord cjk_fallback">指</span><span class="mord cjk_fallback">令</span><span class="mord cjk_fallback">】</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord cjk_fallback">【</span><span class="mord cjk_fallback">操</span><span class="mord cjk_fallback">作</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">地</span><span class="mord cjk_fallback">址</span><span class="mord cjk_fallback">】</span></span></span><span style="top:-0.08999999999999997em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">寄</span><span class="mord cjk_fallback">存</span><span class="mord cjk_fallback">器</span><span class="mord cjk_fallback">间</span><span class="mord cjk_fallback">接</span><span class="mord cjk_fallback">寻</span><span class="mord cjk_fallback">址</span><span class="mord cjk_fallback">方</span><span class="mord cjk_fallback">式</span><span class="mord cjk_fallback">：</span><span class="mord cjk_fallback">【</span><span class="mord cjk_fallback">寄</span><span class="mord cjk_fallback">存</span><span class="mord cjk_fallback">器</span><span class="mord cjk_fallback">】</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord cjk_fallback">【</span><span class="mord cjk_fallback">指</span><span class="mord cjk_fallback">令</span><span class="mord cjk_fallback">】</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord cjk_fallback">【</span><span class="mord cjk_fallback">地</span><span class="mord cjk_fallback">址</span><span class="mord cjk_fallback">】</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord cjk_fallback">【</span><span class="mord cjk_fallback">操</span><span class="mord cjk_fallback">作</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">地</span><span class="mord cjk_fallback">址</span><span class="mord cjk_fallback">】</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.35em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230408170048504.png" alt=""></p>
<h2 id="1-8-cisc与risc-☆☆-速记">1.8 CISC与RISC（☆☆）【速记】</h2>
<ul>
<li>CISC：复杂，指令数量多，指令种类多，频率差别大，指令寻址方式多，少量通用寄存器，使用微程序控制技术（微码），不支持流水线</li>
<li>RISC：精简，指令数量少，指令种类少，频率差别小，指令寻址方式少，大量通用寄存器，单周期指令执行，采用流水线技术</li>
</ul>
<table>
<thead>
<tr>
<th>指令系统类型</th>
<th>CISC（复杂指令计算机）</th>
<th>RISC（精简指令计算机）</th>
</tr>
</thead>
<tbody>
<tr>
<td>指令数量</td>
<td>多，复杂</td>
<td>少，精简</td>
</tr>
<tr>
<td>指令使用频率</td>
<td>指令长度为<strong>可变长</strong>格式，导致<strong>频率差别大</strong></td>
<td>指令长度为<strong>定长</strong>格式，所以<strong>频率差别小</strong></td>
</tr>
<tr>
<td>寻址方式</td>
<td>支持多种方式</td>
<td>支持方式少</td>
</tr>
<tr>
<td>寄存器</td>
<td>使用<strong>微程序</strong>控制技术（微码），没有通用寄存器</td>
<td>增加了通用寄存器（累加器）</td>
</tr>
<tr>
<td>流水线支持</td>
<td>不支持采用流水线</td>
<td>硬布线逻辑控制为主，适合采用流水线</td>
</tr>
<tr>
<td>高级语言支持</td>
<td>不支持高级语言</td>
<td>支持高级语言</td>
</tr>
<tr>
<td>其他</td>
<td>研制周期长</td>
<td>优化编译，有效支持高级语言</td>
</tr>
</tbody>
</table>
<h2 id="1-9-流水线技术-☆☆☆☆">1.9 流水线技术（☆☆☆☆）</h2>
<p>流水线是指在程序执行时，多条指令重叠进行操作的一种标准并行处理实现技术。各种部件同时处理是针对不同指令而言的，它们可同时为多条指令的不同部分进行工作，以提高各部件的利用率和指令的平均执行速度。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230408180611029.png" alt=""></p>
<h3 id="1-9-1-流水线周期计算">1.9.1 流水线周期计算</h3>
<blockquote>
<p>t1：第一条指令的第一个步骤执行的时间</p>
<p>Δt：流水线周期</p>
</blockquote>
<p>理论公式：(t1+t2+…+tk)+(n-1)*Δt</p>
<blockquote>
<p>k*Δt：第一条指令的所有步骤都给一个宽裕的时间（即当中最长步骤的时间）来充分执行</p>
</blockquote>
<p>实践公式：k*Δt+(n-1)*Δt</p>
<p>示例：一条指令的执行过程可以分解为取指、分析和执行三步，在取指时间 t=3Δt、分析时间 t=2Δt、执行时间 t=4Δt 的情况下，若按串行方式执行，则 10 条指令全部执行完需要（(3+2+4)Δt*10=90Δt）；若按流水线的方式执行，流水线周期为（4Δt），则 10 条指令全部执行完需要（(3+2+4)Δt+(10-1)*4Δt=45Δt）。</p>
<h3 id="1-9-2-超标量流水线">1.9.2 超标量流水线</h3>
<p>超标量流水线就是 n 条流水线的组合，其中 n 称为：度。因此在计算所有指令全部执行完的时间时需要除以 n。</p>
<h3 id="1-9-3-流水线吞吐率计算">1.9.3 流水线吞吐率计算</h3>
<p>流水线的吞吐率（Though Put rate, TP）是指在单位时间内流水线所完成的任务数量或输出的结果数量。计算流水线吞吐率的最基本的公式：TP = <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mtext>指令条数</mtext><mtext>流水线执行时间</mtext></mfrac></mrow><annotation encoding="application/x-tex">\frac{指令条数}{流水线执行时间}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.217331em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">流</span><span class="mord cjk_fallback mtight">水</span><span class="mord cjk_fallback mtight">线</span><span class="mord cjk_fallback mtight">执</span><span class="mord cjk_fallback mtight">行</span><span class="mord cjk_fallback mtight">时</span><span class="mord cjk_fallback mtight">间</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">指</span><span class="mord cjk_fallback mtight">令</span><span class="mord cjk_fallback mtight">条</span><span class="mord cjk_fallback mtight">数</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p>
<p>流水线最大吞吐率：TP<sub>max</sub> = <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>n</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></munder><mfrac><mi>n</mi><mrow><mo stretchy="false">(</mo><mi>k</mi><mo>+</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">Δ</mi><mi>t</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\lim\limits_{n\rightarrow\infty}\frac{n}{(k+n-1)Δt}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.395392em;vertical-align:-0.7em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.4em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span><span class="mord mtight">Δ</span><span class="mord mathdefault mtight">t</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> = <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mrow><mi mathvariant="normal">Δ</mi><mi>t</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{Δt}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">Δ</span><span class="mord mathdefault mtight">t</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p>
<h2 id="1-10-层次化存储结构">1.10 层次化存储结构</h2>
<h3 id="存储系统-☆☆☆☆">存储系统（☆☆☆☆）</h3>
<h3 id="1-10-1-cache">1.10.1 Cache</h3>
<p>在计算机的存储系统体系中，Cache 是访问速度最快的层次（若有寄存器，则寄存器最快）。</p>
<p>使用 Cache 改善系统性能的依据是程序的局部性原理。</p>
<ul>
<li>时间局部性原理：一个变量可能被反复多次访问，则该变量不会被优先淘汰</li>
<li>空间局部性原理：一个被访问的变量，其附近的空间区域也有可能被访问到</li>
</ul>
<h3 id="1-10-2-cache-命中率">1.10.2 Cache 命中率</h3>
<p>如果以 h 代表对 Cache 的访问命中率，t<sub>1</sub> 表示 Cache 的周期时间，t<sub>2</sub> 表示主存储器周期时间，以读操作为例，则使用“Cache + 主存储器”的系统的平均周期：</p>
<p>t<sub>3</sub> = h*t<sub>1</sub>+(1-h)*t<sub>2</sub></p>
<p>其中，( 1-h )又称为失效率（未命中率）</p>
<h3 id="1-10-3-cache-映像">1.10.3 Cache 映像</h3>
<p>【地址映像】是将主存与 Cache 的存储空间划分为若干大小相同的页（或称为块）。<br>
示例：某机的主存容量为 1GB，划分为 2048 页，每页 512KB；Cache 容量为 8MB，划分为 16 页，每页 512KB。</p>
<h4 id="直接相联映像">直接相联映像</h4>
<blockquote>
<p>硬件电路较简单，但冲突率很高。</p>
<p>读取内存 16 页的内容时，会将 Cache 0页中已有的内容替换，因此这种方案速度最快，但冲突率最高</p>
</blockquote>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230408201539510.png" alt=""></p>
<h4 id="全相联映像">全相联映像</h4>
<blockquote>
<p>电路难于设计和实现，只适用于小容量的 cache，冲突率较低。</p>
<p>主存每一页的内容都可以放到 Cache 的任意一页中，冲突率是低了但是速度最慢，每次都要遍历 Cache 的页去找数据。</p>
</blockquote>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230408202338926.png" alt=""></p>
<h4 id="组相联映像">组相联映像</h4>
<blockquote>
<p>直接相联与全相联的折中。</p>
<p>先对主存的页进行分组（分区），只有同一组或者不同组但所对应 Cache 页一致的内容才会冲突。</p>
</blockquote>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230408202719702.png" alt=""></p>
<h2 id="1-11-主存">1.11 主存</h2>
<h3 id="编址与计算">编址与计算</h3>
<p>1 个字节（Byte） = 8 比特位（bit）</p>
<p>根据存储器所要求的的容量和选定的存储芯片的容量，就可以计算出所需芯片的总数，即：总片数 = <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mtext>总容量</mtext><mtext>每片的容量</mtext></mfrac></mrow><annotation encoding="application/x-tex">\frac{总容量}{每片的容量}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.217331em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">每</span><span class="mord cjk_fallback mtight">片</span><span class="mord cjk_fallback mtight">的</span><span class="mord cjk_fallback mtight">容</span><span class="mord cjk_fallback mtight">量</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">总</span><span class="mord cjk_fallback mtight">容</span><span class="mord cjk_fallback mtight">量</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p>
<p>示例：若内存地址区间为 4000H~43FFH，每个存储单元可存储 16 位二进制数，该内存区域用 4 片存储器芯片构成，则构成该内存所用的存储器芯片的容量是多少？</p>
<blockquote>
<p>H 结尾表示 16 进制</p>
</blockquote>
<p>总容量 = (43FFH-4000H+1)*16bit = 400H*16bit = 2<sup>10</sup>*16bit；总片数 = 4</p>
<p>每片的容量 = 2<sup>10-2</sup>*16bit = 2<sup>8</sup>*16bit = 256*16bit</p>
<h2 id="1-12-总线系统-☆">1.12 总线系统（☆）</h2>
<p>一条总线同一时刻仅允许一个设备发送，但允许多个设备接收。</p>
<p>总线分类：</p>
<ul>
<li>数据总线 ( Data Bus ) : 在 CPU 与 RAM 之间来回传送需要处理或是需要储存的数据。</li>
<li>地址总线 ( Address Bus ) : 用来指定在 RAM  ( Random Access Memory )之中储存的数据的地址。</li>
<li>控制总线( Control Bus ) : 将微处理器控制单元 ( Control Unit ) 的信号专送到周边设备，一般常见的为 USB Bus 和 1394 Bus。</li>
</ul>
<h2 id="1-13-串联系统与并联系统">1.13 串联系统与并联系统</h2>
<h3 id="可靠性-☆">可靠性（☆）</h3>
<ul>
<li>串联系统可靠性 R = R<sub>1</sub>×R<sub>2</sub>×……×R<sub>n</sub></li>
<li>并联系统可靠性 R = 1-(1-R<sub>1</sub>)×(1-R<sub>2</sub>)×……×(1-R<sub>n</sub>)</li>
</ul>
<p>总结：串联是一个异常就全部异常；并联是一个正常就全部正常。</p>
<h3 id="n-模混合系统">N 模混合系统</h3>
<p>混合模型计算就划分块，总的是一个串联公式，括号分隔计算每个并联块的可靠性</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230408210659411.png" alt=""></p>
<h2 id="1-14-校验码-☆☆☆">1.14 校验码（☆☆☆）</h2>
<p>码距：任何一种编码都由许多码字构成，任意两个码字之间最少变化的二进制位数就称为数据校验码的码距。</p>
<p>示例：二进制 0 到 1 的码距为 1；01 到 10 的码距为 2；因此可以用 4 位二进制表示 16 种状态，则有 16 个不同的码字，此时的码距为 1。如 0000 和 0001。</p>
<h3 id="奇偶校验">奇偶校验</h3>
<blockquote>
<p>奇偶校验只可【检错】，且只可检查 1 位的错误，不可【纠错】。</p>
</blockquote>
<p>奇偶校验码的编码方法是：由若干位有效信息（如一个字节），再加上一个二进制位（校验位）组成校验码。</p>
<ul>
<li>奇校验：整个校验码（有效信息位和校验位）中“1”的个数为奇数</li>
<li>偶校验：整个校验码（有效信息位和校验位）中“1”的个数为偶数</li>
</ul>
<h3 id="循环校验码crc">循环校验码CRC</h3>
<blockquote>
<p>循环校验码 CRC可【检错】，不可【纠错】。</p>
</blockquote>
<p>CRC 的编码方法是：在 k 位信息码之后拼接 r 位校验码。应用 CRC 码的关键是如何从 k 位信息位简便地得到 r 位校验位（编码），以及如何从 k+r 位信息码判断是否出错</p>
<p>循环冗余校验码编码规律如下：</p>
<ol>
<li>把待编码的 N 位有效信息表示为多项式 M(X)；</li>
<li>把 M(X) 左移 K 位，得到 M(X)×X<sup>K</sup>，这样空出了 K 位，以便拼装 K 位余数（即校验位）；</li>
<li>选取一个 K+1 位的产生多项式 G(X)，对 M(X)×X<sup>K</sup> 做模 2 除；</li>
<li>把左移 K 位以后的有效信息与余数 R(X) 做模 2 加减，拼接为 CRC 码，此时的 CRC 码共有 N+K 位。</li>
</ol>
<p>把接收到的 CRC 码用约定的生成多项式 G(X) 去除，如果正确，则余数为 0；如果某一位出错，则余数不为0。不同的位数出错其余数不同，余数和出错位序号之间有惟一的对应关系。</p>
<p>示例：原始报文为“11001010101”，其生成多项式为：“x<sup>4</sup>+x<sup>3</sup>+x+1”。计算其进行 CRC 编码后的结果。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230408214208740.png" alt=""></p>
<p>最后把余数【0011】拼接到原始报文后面【110010101010011】即可。</p>
<p>对方在接收到处理后的报文再进行一次【模 2 除】，余数为 0 即为正确。</p>
<h3 id="海明校验码">海明校验码</h3>
<blockquote>
<p>海明校验码可【检错】，也可【纠错】。</p>
<p>原理可略，但是公式得掌握，知道怎么计算【校验位的个数】</p>
</blockquote>
<p>海明校验码的原理是：在有效信息位中加入几个校验位形成海明码使码距比较均匀地拉大，并把海明码的每个二进制位分配到几个奇偶校验组中。当某一位出错后，就会引起有关的几个校验位的值发生变化这不但可以发现错误，还能指出错误的位置，为自动纠错提供了依据。</p>
<p>2<sup>r</sup>≥m+r+1（r 为校验位的个数；m 为数据位的个数）</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230408215559572.png" alt=""></p>
<p>校验码为 3 位则固定放在：2<sup>0</sup>（1）、2<sup>1</sup>（2）、2<sup>2</sup>（4）的位置</p>
<p>校验码为 4 位则固定放在：2<sup>0</sup>（1）、2<sup>1</sup>（2）、2<sup>2</sup>（4）、2<sup>3</sup>（8）的位置</p>
<table>
<thead>
<tr>
<th>位数</th>
<th>7=111</th>
<th>6=110</th>
<th>5=101</th>
<th>4=100</th>
<th>3=011</th>
<th>2=010</th>
<th>1=001</th>
</tr>
</thead>
<tbody>
<tr>
<td>信息位</td>
<td>I<sub>4</sub>(1)</td>
<td>I<sub>3</sub>(0)</td>
<td>I<sub>2</sub>(1)</td>
<td></td>
<td>I<sub>1</sub>(1)</td>
<td></td>
<td></td>
</tr>
<tr>
<td>校验位</td>
<td></td>
<td></td>
<td></td>
<td>r<sub>2</sub></td>
<td></td>
<td>r<sub>1</sub></td>
<td>r<sub>0</sub></td>
</tr>
<tr>
<td>r<sub>0</sub> 第一位是1</td>
<td>√</td>
<td></td>
<td>√</td>
<td></td>
<td>√</td>
<td></td>
<td>–</td>
</tr>
<tr>
<td>r<sub>1</sub> 第二位是1</td>
<td>√</td>
<td>√</td>
<td></td>
<td></td>
<td>√</td>
<td>–</td>
<td></td>
</tr>
<tr>
<td>r<sub>2</sub> 第三位是1</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>–</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>代入原始报文：</p>
<p>r<sub>2</sub> = I<sub>4</sub>(1)、I<sub>3</sub>(0)、I<sub>2</sub>(1) 做偶校验【I<sub>4</sub>(1)、I<sub>3</sub>(0) → 10得1；1、I<sub>2</sub>(1) → 11得0】= 0</p>
<p>r<sub>1</sub> = I<sub>4</sub>(1)、I<sub>3</sub>(0)、I<sub>1</sub>(1) 做偶校验【I<sub>4</sub>(1)、I<sub>3</sub>(0) → 10得1；1、I<sub>1</sub>(1) → 11得0】= 0</p>
<p>r<sub>0</sub> = I<sub>4</sub>(1)、I<sub>2</sub>(1)、I<sub>1</sub>(1) 做偶校验【I<sub>4</sub>(1)、I<sub>2</sub>(1) → 11得0；0、I<sub>1</sub>(1) → 01得1】= 1</p>
<p>所以可以得出海明码为：101 0101</p>
<p>若收到的信息被篡改为：101 1101</p>
<p>则如上图计算可知 r<sub>2</sub> 不为 0，由此满足检错的目的；同时根据对收到信息的做偶校验的计算公式中的元素取交集，可知是 r<sub>2</sub> 出了问题，由此完成纠错的目的。</p>
<h1>二、操作系统</h1>
<h2 id="2-1-进程管理">2.1 进程管理</h2>
<p>进程是程序在一个数据集合上运行的过程，它是系统进行资源分配和调度的一个独立单位。它由程序块、进程控制块（PCB）和数据块三部分组成。</p>
<h3 id="2-1-1-进程-vs-程序">2.1.1 进程 VS 程序</h3>
<p>进程与程序的区别：</p>
<ul>
<li>程序是完成某个特定功能的一系列程序的语句的集合，只要不被破坏，它就永远存在；进程是程序的一次执行过程，没有程序就没有进程。</li>
<li>程序是一个静态的概念，而进程是一个动态的概念，它由创建而产生，完成任务后因撤销而消亡。</li>
<li>进程是系统进行资源分配和调度的独立单位，而程序不是。</li>
</ul>
<h3 id="2-1-2-进程的状态-☆☆">2.1.2 进程的状态（☆☆）</h3>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230417160150004.png" alt="三态模型"></p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230417160447834.png" alt="五态模型"></p>
<h3 id="2-1-3-进程的同步与互斥">2.1.3 进程的同步与互斥</h3>
<p>同步是合作进程间的直接制约问题，互斥是申请临界资源进程间的间接制约问题。</p>
<ul>
<li>同步：进程 B 需要等待进程 A 把数据存入缓冲区，才可以取出数据进行处理</li>
<li>互斥：进程 A 和 B 使用同一张表格，不能同时编辑</li>
</ul>
<h3 id="2-1-4-信号量与pv操作-☆☆☆☆">2.1.4 信号量与PV操作（☆☆☆☆）</h3>
<ul>
<li>
<p>临界资源：各进程间需要互斥方式对其进行共享的资源，如：打印机、磁带机等</p>
</li>
<li>
<p>临界区：每个进程中访问临界资源的<strong>那段代码成为临界区</strong></p>
</li>
<li>
<p>信号量（S）：<strong>是一个整型变量，根据控制对象的不同被赋予不同的值</strong></p>
<ul>
<li>公用信号量：实现进程间的互斥，初值为 1 或资源的数目</li>
<li>私用信号量：实现进程间的同步，初值为 0 或某个正整数</li>
</ul>
</li>
<li>
<p>PV：<strong>P 是荷兰语的 Passeren，V 是荷兰语的 Verhoog</strong></p>
</li>
</ul>
<h4 id="利用-pv-操作实现进程的互斥">利用 PV 操作实现进程的互斥</h4>
<ol>
<li>理发店只有 1 位理发师为【临界资源 S】</li>
<li>客户 1 进入理发店进行 P 操作，S=S-1=0≥0，进程继续进行理发</li>
<li>客户 2 进入理发店进行 P 操作，S=S-1=-1&lt;0，客户 2 进程进入阻塞队列</li>
<li>客户 1 理完发进行 V 操作，S=S+1=0≤0，从阻塞队列唤醒一个进程进程，客户 1 进程继续，离开理发店；客户 2 进程被唤醒，进入操作 P，此时 S≥0，进行理发</li>
</ol>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230417162714903.png" alt=""></p>
<p>P 操作（申请资源）的定义：S:=S-1，</p>
<ol>
<li>若 S &lt; 0，则置该线程为阻塞状态（因为无可用资源），并将其加入阻塞队列；</li>
<li>若 S ≥ 0，则执行 P 操作的进程继续执行。</li>
</ol>
<p>V 操作（释放资源）的定义：S:=S+1，</p>
<ol>
<li>若 S ≤ 0，则从阻塞状态唤醒一个进程，并将其插入就绪队列，然后执行 V 操作的进程继续；</li>
<li>若 S &gt; 0，则执行 V 操作的进程继续执行。</li>
</ol>
<h4 id="利用-pv-操作实现进程的同步">利用 PV 操作实现进程的同步</h4>
<blockquote>
<p>单缓冲区生产者、消费者问题</p>
</blockquote>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230417171236424.png" alt=""></p>
<h4 id="案例分析a">案例分析A</h4>
<p>某书店有一个收银员，该书店最多允许 n 个购书者进入。将收银员和购书者看作不同的进程，其工作流程如下图所示。利用 PV 操作实现该过程，设置信号量 S1、S2 和 Sn，初值分别为 0，0，n。则图中 a1 和 a2 应填入____，图中 b1 和 b2 应填入____。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230417172849104.png" alt=""></p>
<p>分析过程：</p>
<ul>
<li>收银员与购书者为一对多关系，所以先从【收银员进程】进行分析，b1 和 b2 应填入 C</li>
<li>PV 操作成对出现，因此由 C 反推可得 a1 和 a2 应填入 A</li>
</ul>
<h4 id="案例分析b">案例分析B</h4>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230417173818734.png" alt=""></p>
<p>分析过程：</p>
<ul>
<li>题目以【前趋图】方式进行考察，其中 D 为切入口，执行进程 D 需要进程 A、B、C 都完成，即 P(Sa)、P(Sb)、P(Sc)</li>
<li>PV 操作成对出现，由此定位 V(Sa)、V(Sb)、V(Sc)</li>
<li>进程 E 需要进程 D 完成，所以进程 E 为 P(Sd)，最后定位出 V(Sd)</li>
</ul>
<h3 id="2-1-5-死锁及银行家算法-☆☆☆☆">2.1.5 死锁及银行家算法（☆☆☆☆）</h3>
<h4 id="死锁问题">死锁问题</h4>
<p>进程管理是操作系统的核心，但如果设计不当，就会出现死锁的问题。如果一个进程在等待一件不可能发生的事，则进程就死锁了。而如果一个或多个进程产生死锁，就会造成系统死锁。</p>
<h4 id="案例分析">案例分析</h4>
<p>系统有 5 个进程：A、B、C、D、E。这 5 个进程都需要 4 个系统资源。则系统至少需要多少个资源，才不可能发生死锁？</p>
<p>分析过程：</p>
<ul>
<li>给所有进程提供（所需 -1）个系统资源，系统自己保留一个资源进行自由支配，此时不可能产生死锁</li>
<li>因此题目中至少需要：5 * (4 - 1) + 1 = 16 个资源才不可能发生死锁</li>
</ul>
<h4 id="形成死锁的四个必要条件">形成死锁的四个必要条件</h4>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230417183459773.png" alt=""></p>
<ul>
<li>互斥：即资源的排他性使用，资源只能被一个进程占用</li>
<li>保持和等待：进程请求资源未果，进入阻塞，但仍占有资源</li>
<li>不剥夺：资源已被进程占用，未使用完前其资源不能被剥夺</li>
<li>环路等待：资源占用形成环路，P0 在等 P1 占用的资源，P1 在等 P0 占用的资源</li>
</ul>
<h4 id="有序资源分配法">有序资源分配法</h4>
<p>给每个进程都提供充足的资源 —— 非常浪费</p>
<h4 id="银行家算法：分配资源的原则">银行家算法：分配资源的原则</h4>
<ul>
<li>当一个进程对资源的最大需求量不超过系统中的资源数时，可以接纳该进程</li>
<li>进程可以分期请求资源，但请求的总数不能超过自身的最大需求量</li>
<li>当系统现有剩余的资源不能满足进程所需的资源数时，对进程的请求可以推迟分配，但总能使进程在有限的时间里得到资源（需要等待其他进程归还资源）</li>
</ul>
<h4 id="案例分析">案例分析</h4>
<p>假设系统中有三类互斥资源 R1、R2、R3，可用资源分别是 9、8、5。在 T0 时刻系统中有 P1、P2、P3、P4 和 P5 五个进程，这些进程对资源的最大需求量和已分配资源数如下所示，如果进程按序列执行，那么系统状态是安全的。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230417185428763.png" alt=""></p>
<p>分析过程：</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230417185528688.png" alt=""></p>
<p>剩余资源数：（210）—— 满足 P2，释放资源 ——（210+211=421）—— 满足P4，释放资源 ——（421+120=541）……</p>
<p>因此选：B</p>
<h2 id="2-2-存储管理">2.2 存储管理</h2>
<h3 id="2-2-1-基本概念">2.2.1 基本概念</h3>
<blockquote>
<p>逻辑地址 = 虚拟地址 = 相对地址 = 程序地址：一个连续的地址单元，方便表示进程数据的存放。在进程查找数据时，需要配合页表，定位到其物理地址。</p>
<p>物理地址 = 绝对地址：数据保存在内存中的真实地址</p>
</blockquote>
<ul>
<li>逻辑地址空间 = 地址空间：逻辑地址的集合</li>
<li>物理地址空间 = 存储空间：物理地址的集合</li>
</ul>
<h3 id="2-2-2-页式存储">2.2.2 页式存储</h3>
<h4 id="基本原理">基本原理</h4>
<p>页式存储的前提是，逻辑地址空间和物理地址空间均分成<strong>同样大小的块</strong>，其中：</p>
<ul>
<li>逻辑地址空间的每个块称为：逻辑页 = 虚页 = 页面 = 页（page）</li>
<li>物理地址空间的每个块称为：物理页 = 实页 = 页框 = 页帧（frame）= 块（block）</li>
</ul>
<p>每个块的大小一般是 ½KB～4KB 之间的数值（太小寻址频繁，太大碎片问题严重浪费内存），而且必须是 2 的幂次方。</p>
<ul>
<li>逻辑地址空间中逻辑页的编号称为：逻辑页号；其寻址地址为：（逻辑页号，页内地址）</li>
<li>物理地址空间中页框的编号称为：页框号；其寻址地址为：（页框号，页内地址）</li>
</ul>
<p>在实际作业时，系统会对程序进行分页（分页在逻辑地址空间中是连续的，其最后一页大概率没有填满，其多余的空间即是空间碎片），然后一次性把程序的全部页面装入内存（每个页所占的内存块可以不连续，也没有先后顺序）。页与块因为大小一致，所以每个一一对应的页和块，其内部【页内地址 = 业内偏移量】所对应的数据都是一致的。</p>
<p>每个页和块的映射表称为<strong>页表</strong>。由于每个一一对应的页和块，其内部页内地址所存储的数据都是一致的，所以页表只有两列：页号、块号。</p>
<ol>
<li>一个进程对应一张页表</li>
<li>进程的每一页对应一个页表项</li>
<li>每个页表项由【页号】和【块号】组成</li>
<li>页表用于记录【进程页面】和【实际存放的内存块】之间的对应关系</li>
<li>每个页表项的长度是相同的，页号是“隐含”的（即逻辑页号是连续的）</li>
</ol>
<p>进程的每次寻址都需要访问两次内存：</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/454244801.png" alt=""></p>
<p>为了加快数据的寻址速度，可以将页表中常用以及正在使用的页表项放置在寄存器中形成【块表】。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230420174929273.png" alt=""></p>
<h4 id="多级页表">多级页表</h4>
<p>示例：一段长度为 16 的程序，划分为多级页表。此时需要获取物理地址为 10 的数据：</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230420183454868.png" alt=""></p>
<h4 id="反置页表-inverted-page-tables">反置页表 Inverted page tables</h4>
<blockquote>
<p>反置页表可以优化页表的大小，节省内存空间</p>
</blockquote>
<p>因为每个进程配置一张页表，也就是说，如果有 n 个进程，那么内存中就会有 n 张页表。页表的大小会随着进程的增加而增加。所以，如果有很多进程同时运行，那么内存中将会有很大一部分被页表占用。多级页表并不能解决这个问题，因为多级页表也是一个进程维护一张页表。反置页表可以解决这个问题。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230420185116799.png" alt=""></p>
<ul>
<li>页表中页框号的列省略了，是因为页框号是一个递增的编码，即【页表项的序号就是页框号】</li>
<li>进程号可以使用 Hash 编码，以加快数据的寻址速度</li>
<li>反置页表也可以将常用以及正在使用的页表项放到寄存器中，以加快寻址速度</li>
</ul>
<h4 id="优缺点分析">优缺点分析</h4>
<p>优点：内存利用率高，不会产生外部碎片，只会有少量的页内碎片；打破了存储分配的连续性要求。</p>
<p>缺点：可能产生抖动现象（属于同一个程序逻辑但是不同块号的数据之间相互调用），导致系统开销增加，同时也不方便按照逻辑模块实现信息的共享和保护。</p>
<h3 id="2-2-3-段式存储">2.2.3 段式存储</h3>
<h4 id="基本原理">基本原理</h4>
<ul>
<li>逻辑地址空间分配规则：按照程序自身的逻辑关系划分为若干段，每个段都有一个段名（在低级语言中，程序员使用段名来编程），每段从0开始编址。</li>
<li>物理地址空间分配规则：以段为单位进行分配，每个段在内存中占连续空间，但各段之间不一定相邻。</li>
</ul>
<p>在分段系统中，其寻址地址规则为：（【段号 = 段名】，【段内地址 = 段内偏移量】）</p>
<p>每一个程序都有一个对应的段表，段表保存在内存中，属于进程的现场信息。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230421105833390.png" alt=""></p>
<p>段号列是从 0 开始递增的，因此可以省略。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230421110330878.png" alt=""></p>
<p>段式存储完整寻址逻辑：</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230421110904708.png" alt=""></p>
<h4 id="动态连接">动态连接</h4>
<p>在一个程序运行开始时，只将主程序段装配好并调入主存。其它被分成各段的函数装配是在主程序段运行过程中逐步进行的。每当需要调用一个新段时，才会将这个新段装配好，并与主程序段连接。</p>
<p>动态连接是页式存储难以做到的，因为页式存储的逻辑地址是一维的（通过一个页号就可以找出其对应的块号）。</p>
<h4 id="信息的保护与共享">信息的保护与共享</h4>
<p>段式存储比页式存储更容易实现信息的共享与保护。页式存储按块的固定大小切分程序而不在乎其逻辑，抖动现象也由此产生。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230421111914190.png" alt=""></p>
<h4 id="段式存储-vs-页式存储">段式存储 VS 页式存储</h4>
<p><strong>页是信息的【物理单位】</strong>；<br><strong>段是信息的【逻辑单位】</strong>。</p>
<p>分页的主要目的是为了实现离散分配，提高内存利用率，<strong>会产生少量的页内碎片，不会产生外部碎片</strong>；<br>分段的主要目的是更好地满足用户需求。一个段通常包含着一组属于一个逻辑模块的信息。<strong>没有页内碎片，但是会产生外部碎片</strong>。</p>
<p><strong>分页对用户是不可见的</strong>，仅仅是系统管理上的需要，完全是系统行为；<br><strong>分段对用户是可见的</strong>，用户编程时需要显式地给出段名。</p>
<p>页的大小固定且由系统决定；<br>段的长度不固定，决定于用户编写的程序。</p>
<p><strong>分页的用户进程地址空间是一维的</strong>，程序员只需给出一个记忆符即可表示一个地址；<br><strong>分段的用户进程地址空间是二维的</strong>，程序员在标识一个地址时，既要给出段名，也要给出段内地址。</p>
<p><strong>分段比分页更容易实现信息的共享和保护</strong>。不能被修改的代码称为<strong>纯代码</strong>或<strong>可重入代码</strong>（不属于临界资源），这样的代码是可以共享的。可修改的代码是不能共享的。</p>
<p>分页（单级页表）和分段访问数据都需要<strong>两次访问内存</strong>：1、查询内存中的页表；2、访问目标内存单元。<br>同样也都可以引入<strong>快表</strong>的方式，将近期访问过的页（段）表项放到快表中，减少一次对内存的访问，加快地址变换速度。</p>
<h3 id="2-2-4-段页式存储-☆☆☆☆">2.2.4 段页式存储（☆☆☆☆）</h3>
<p>段页式存储：段式与页式的综合体。程序中的进程先按段式划分；然后对分段按页式划分。每个段大小不同，每个页的大小相同。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230421150654738.png" alt=""></p>
<p>逻辑地址结构：（段号，页号，页内地址）</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230421154149279.png" alt=""></p>
<h4 id="寻址过程">寻址过程</h4>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230421161038342.png" alt=""></p>
<p>第一次访问内存：在根据【段号S】在寄存器中查询到分段的长度后，查询【段表】；由【页表长度】字段，进一步细分得到分段经过分页后的【页表】存放地址（即页表存放块号）</p>
<p>第二次访问内存：根据【页表存放块号】找到【页表】，代入【页号P】进行查询，得到逻辑空间中的分页在内存中的物理地址（内存块号）</p>
<p>第三次访问内存：根据分页在内存中的物理地址，代入【页内偏移量W】，定位到具体数据在内存中的真实地址</p>
<h4 id="优缺点分析">优缺点分析</h4>
<p>优点：保留了分段和分页存储管理的全部优点；提供了虚存空间，能更有效利用主存。</p>
<p>缺点：增加了硬件成本；系统复杂度较大。</p>
<h3 id="2-2-5-页面置换算法-☆">2.2.5 页面置换算法（☆）</h3>
<ul>
<li>最优（Optimal，OPT）算法：不常用的数据从页表或段表中删除，常用的数据保留（太理想）</li>
<li>随机（RAND）算法</li>
<li>先进先出（FIFO）算法：有可能产生“抖动”，需要经常使用的数据有可能在页表或段表中反复添加和删除</li>
<li>最近最少使用（LRU）算法：不会“抖动”，LRU 的理论依据是“局部性原理”（现今计算机所使用的方式）
<ul>
<li>时间局部性：刚被访问的内容，立即又被访问</li>
<li>空间局部性：刚被访问的内容，邻近的空间很快被访问</li>
</ul>
</li>
</ul>
<h3 id="2-2-6-磁盘管理">2.2.6 磁盘管理</h3>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230421171304575.png" alt=""></p>
<h3 id="2-2-7-磁盘调度算法">2.2.7 磁盘调度算法</h3>
<ul>
<li>先来先服务（FCFS）</li>
<li>最短寻道时间优先（SSTF）：根据刷头所在的位置，先访问最近的数据 B，而不考虑最先请求的是数据 A</li>
<li>扫描算法（SCAN）：刷头在旋转的磁盘中碰到哪个数据就取哪个</li>
<li>循环扫描（CSCAN）算法：扫描算法对磁盘最内和最外磁道上的数据访问效果最差，所以加上一个循环，刷头从外向内，然后再跳到最外，反复扫描磁盘，不考虑数据的远近和时间上的先后顺序</li>
</ul>
<h3 id="2-2-8-读取磁盘数据时间计算">2.2.8 读取磁盘数据时间计算</h3>
<p>读取磁盘数据的时间应包括以下三个部分：</p>
<ol>
<li>找磁道的时间</li>
<li>找块（扇区）的时间，即旋转延迟时间</li>
<li>传输时间</li>
</ol>
<p>某磁盘磁头从一个磁道移至另一个磁道需要 10ms。文件在磁盘上非连续存放，逻辑上相邻数据块的平均移动距离为 10 个磁道，每块的旋转延迟时间及传输时间分别为 100ms 和 2ms，则读取一个 100 块的文件需要 <u>( (10*10 ) +100+2 )*100 = 20200</u> ms 时间</p>
<p>A.10200    B.11000    C.11200   D.20200</p>
<h2 id="2-3-作业管理">2.3 作业管理</h2>
<h4 id="作业状态与作业管理">作业状态与作业管理</h4>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230421174349936.png" alt=""></p>
<h4 id="作业调度算法">作业调度算法</h4>
<ul>
<li>先来先服务法</li>
<li>时间片轮转法：时间片到点了就切换作业，无论作业是否已经完成</li>
<li>短作业优先发</li>
<li>最高优先权优先法：按作业的优先级排序</li>
<li>高响应比优先法：按作业的响应比排序（响应比：作业等待时间 ÷ 作业执行时间）</li>
</ul>
<h2 id="2-4-文件管理">2.4 文件管理</h2>
<h4 id="索引文件-☆☆">索引文件（☆☆）</h4>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230421175739991.png" alt=""></p>
<table border="1">
    <tr>
        <td style="text-align:center">0</td>
        <td rowspan="10" style="vertical-align: middle;">直接索引<br>假设一个物理盘块的大小是 1K，那么直接索引容量为 10K<br>存放数据的范围：0 ~ (1024 × 10 - 1) => 0 ~ 10239<br>假设一个地址项的大小是 4Byte，那么一个物理盘块可以存放 1024 ÷ 4 = 256 个地址项</td>
    </tr>
    <tr align="center">
        <td>1</td>
    </tr>
    <tr align="center">
        <td>2</td>
    </tr>
    <tr align="center">
        <td>3</td>
    </tr>
    <tr align="center">
        <td>4</td>
    </tr>
    <tr align="center">
        <td>5</td>
    </tr>
    <tr align="center">
        <td>6</td>
    </tr>
    <tr align="center">
        <td>7</td>
    </tr>
    <tr align="center">
        <td>8</td>
    </tr>
    <tr align="center">
        <td>9</td>
    </tr>
    <tr>
        <td style="text-align:center">10</td>
        <td rowspan="2">二级间接索引<br>继续依据直接索引的假设可知，每个索引结点（1K）可以存放 256 个地址项<br>然后每个地址项对应一个新的索引结点（1K），所以一个二级间接索引的容量为：256 × 256K = 64MB</td>
    </tr>
    <tr align="center">
        <td>11</td>
    </tr>
    <tr>
        <td style="text-align:center">12</td>
        <td>三级间接索引，依据上述假设继续推理，其容量为：256 × 256 × 256K = 16GB</td>
    </tr>
</table>
<h4 id="绝对路径与相对路径-☆☆☆">绝对路径与相对路径（☆☆☆）</h4>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230423111816856.png" alt=""></p>
<p>图中是 Linux 系统的文件目录结构，其中【/】是根节点。以 F2 为例：</p>
<ul>
<li>绝对路径：/D1/W2/F2</li>
<li>相对路径：W2/F2</li>
</ul>
<h4 id="位示图-☆☆">位示图（☆☆）</h4>
<blockquote>
<p>空闲存储空间的管理，一般出题是求存储容量</p>
</blockquote>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230423112537829.png" alt=""></p>
<h2 id="2-5-设备管理">2.5 设备管理</h2>
<h4 id="2-5-1-数据传输控制方式">2.5.1 数据传输控制方式</h4>
<p>程序控制（查询）方式【效率最低】 ——&gt; I/O 处理机【效率最高】</p>
<p>这里主要考察 DMA 方式</p>
<ul>
<li>程序控制（查询）方式：分为无条件传送和程序查询方式两种。方法简单，硬件开销小，但 I/O 能力不高，严重影响 CPU 的利用率</li>
<li>程序中断方式：与程序控制方式相比，中断方式因为 CPU 无需等待而提高了传输请求的响应速度</li>
<li>DMA 方式：DMA 方式是为了在主存与外设之间实现高速、批量数据交换而设置的。DMA 方式比程序控制方式与中断方式都高效（整个过程不需要 CPU 参与，CPU 只用发出控制指令，所有事情交给硬件完成，结束后把结果返回给 CPU 即可）</li>
<li>通道方式</li>
<li>I/O 处理机</li>
<li>采用 DMA 方式传送数据时，每传送一个数据都需要占用一个<strong>存储周期</strong>【速记】</li>
</ul>
<h4 id="2-5-2-虚设备与-spooling-技术-☆">2.5.2 虚设备与 SPOOLING 技术（☆）</h4>
<p>SPOOLING 技术是关于慢速字符设备如何与计算机主机交换信息的一种技术（打印技术），通常称为“假脱机技术”。SPOOLING 技术通过磁盘实现。</p>
<p>拿打印机举例：此时只有一台打印机，但计算机中有2个进程（word 进程和 pdf 进程）需要进行打印，这时两个进程都认为自己拥有一个打印机。但是不是就真的有 2 台打印机了呢？当然不是，明明是只有一台打印机。这就是通过虚拟化技术欺骗了 2 个无知的进程。进程需要打印的信息会缓存到一个队列中等待空闲的打印机调用。</p>
<h1>三、数据系统</h1>
<blockquote>
<p>选择题（6~8）与简答题都有涉及</p>
</blockquote>
<h2 id="3-1-数据库模式-☆☆">3.1 数据库模式（☆☆）</h2>
<blockquote>
<p>三级模式 - 两层映射</p>
</blockquote>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230423151911222.png" alt=""></p>
<p>三级模式：</p>
<ul>
<li>外模式 = 用户模式（视图级）：面向用户和应用程序打交道，暴露接口实现用户逻辑</li>
<li>概念模式 = 模式（表级）</li>
<li>内模式 = 存储模式（文件级）：数据结构的物理存储</li>
</ul>
<p>两层映射：让数据与程序分离</p>
<ul>
<li>外模式 - 概念模式映射：数据的逻辑独立性，【程序的逻辑结构】发生的变化不会影响到其他模式，只需要改变模式之间的映射关系</li>
<li>概念模式 - 内模式映射：数据的物理独立性，【数据在物理结构】发生的变化不会影响到其他模式，只需要改变模式之间的映射关系</li>
</ul>
<h2 id="3-2-数据库设计过程">3.2 数据库设计过程</h2>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230423153433223.png" alt=""></p>
<p>四个阶段：</p>
<ul>
<li>需求分析：该阶段产物为：数据流图（简答题15）、数据字典、需求说明书</li>
<li>概念结构设计：该阶段产物为：ER 模型（简答题15）</li>
<li>逻辑结构设计：该阶段产物为：关系模式（开始建表）</li>
<li>物理设计</li>
</ul>
<h2 id="3-3-er-模式-☆☆☆☆☆">3.3 ER 模式（☆☆☆☆☆）</h2>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230423154549210.png" alt=""></p>
<h3 id="一个实体转换为一个关系模式">一个实体转换为一个关系模式</h3>
<h3 id="联系转关系模式">联系转关系模式</h3>
<img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230423155040174.png" alt="1:1 联系" style="zoom:65%;" />
<img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230423155337657.png" alt="1:n 联系" style="zoom:70%;" />
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230423155448467.png" alt="m:n 联系"></p>
<p>总结：</p>
<ul>
<li>1:1 联系时，联系的属性挂到哪个实体都可以</li>
<li>1:n 联系时，联系的属性要挂到多的一方实体</li>
<li>m:n 联系时，联系的属性要抽出来，结合两边实体的主键形成一张中间表</li>
</ul>
<h3 id="三个以上实体间的多元联系">三个以上实体间的多元联系</h3>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230423160116661.png" alt="多元联系"></p>
<p>此时 ABC 三个实体三个关系模式，联系结合三方实体的主键，再加上自己的属性（如果有的话），单独形成一个关系模式，所以答案是：4。</p>
<h2 id="3-4-关系代数-☆☆☆">3.4 关系代数（☆☆☆）</h2>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230423160750856.png" alt=""></p>
<p>并：S1 ∪ S2（3 个属性）</p>
<p>交：S1 ∩ S2（3 个属性）</p>
<p>差：S1 - S2 或者 S2 - S1（3 个属性）</p>
<p>笛卡尔积：S1 × S2（3 + 3 = 6 个属性）</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230423162123519.png" alt=""></p>
<p>投影：π<sub>Sno,Sname</sub>(S1) = π<sub>1,2</sub>(S1)：按列投影</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230423161602519.png" alt=""></p>
<p>选择：δ<sub>Sno=No0003</sub>(S1) = δ<sub>1=No0003</sub>(S1)：按行选择</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230423161827710.png" alt=""></p>
<p>联接：S1 ⋈ S2 = π<sub>S1.Sno,S1.Sname,S1.Sdept,S2.Age</sub>(δ<sub>S1.Sno=No0001,S2.Sno=No0001</sub>(S1 × S2))，利用投影 + 选择在笛卡尔积中筛选出联接的结果。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230423163123584.png" alt=""></p>
<h2 id="3-5-规范化理论-☆☆☆☆☆">3.5 规范化理论（☆☆☆☆☆）</h2>
<p>关系模型 R（学生姓名，选修课程名，任课教师名，任课教师地址）</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230423165352265.png" alt=""></p>
<ul>
<li>数据冗余：只要有数据冗余就会有下面的三种异常，因此要对数据进行规范化。像关系模型 R 中可以对关系模型进行拆分，去除冗余的数据。</li>
<li>修改异常</li>
<li>插入异常</li>
<li>删除异常</li>
</ul>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230423170339989.png" alt=""></p>
<p>在依赖集 2 中，由 A → B，B → C，可得出 A → C，这就是：<strong>传递函数依赖</strong>。</p>
<h3 id="3-5-1-键">3.5.1 键</h3>
<ul>
<li>候选键：可以唯一标识元组（元组可以理解为表里的一行记录），且无冗余。任选一个作为【主键】。</li>
<li>外键：其他关系的主键</li>
</ul>
<h3 id="3-5-2-求候选键">3.5.2 求候选键</h3>
<p>图示法求候选键（选择 + 简答）</p>
<ol>
<li>将关系到函数依赖关系，用“有向图”的方式表示。</li>
<li>找出入度为 0 的属性，并以该属性集合为起点，尝试遍历有向图，若能正常遍历图中所有结点，则该属性集即为关系模式的候选键。（A → B，则 A 的入度为 0，B 的入度为 1）</li>
<li>若入度为 0 的属性集不能遍历图中所有结点，则需要尝试性的将一些中间结点（既有入度，也有出度的结点）并入入度为 0 的属性集中，直至该集合能遍历所有结点，集合为候选键。</li>
</ol>
<h3 id="3-5-3-主属性与非主属性">3.5.3 主属性与非主属性</h3>
<p>组成【候选码】的属性就是主属性，其他的就是非主属性。</p>
<p>示例：关系模式 CSZ（CITY，ST，ZIP），其属性组上的函数依赖集为：F = {（CITY，ST）→ ZIP，ZIP → CITY}</p>
<p>其中 CITY 表示城市，ST 表示街道，ZIP 表示邮政编码。</p>
<p>则关系模式 CSZ 的主属性为：<u>CITY，ST，ZIP</u><strong>（注意 ST 不能单独推导出 ZIP）</strong></p>
<h3 id="3-5-4-范式">3.5.4 范式</h3>
<p><strong>第一范式（1NF）</strong>：在关系模式 R 中，当且仅当<strong>所有域只包含原子值</strong>，即<strong>每个属性都是不可再分的数据项</strong>，则称关系模式 R 是第一范式。</p>
<p><strong>第二范式（2NF）</strong>：当且仅当关系模式 R 是第一范式（1NF），且**每一个非主属性完全依赖候选键（没有不完全依赖）**时，则称关系模式 R 是第二范式。</p>
<p>例如：AB → C，B → D。此时 D 对候选键 A 不完全依赖，该关系模式不满足第二范式。</p>
<p><strong>第三范式（3NF）</strong>：当且仅当关系模式 R 是第二范式（2NF），且 R 中<strong>没有非主属性传递依赖于候选键</strong>时，则称关系模式 R 是第三范式。</p>
<p><strong>BC 范式（BCNF）</strong>：设 R 是一个关系模式，F 是它的依赖集，当且仅当 <strong>F 中每个依赖的决定因素必定包含 R 的某个候选码</strong>时，则关系模式 R 属于 BCNF。</p>
<p>例如：AB → C，C → B。此时依赖 AB 和 AC 必定包含候选码 A，则该关系模式为 BCNF。</p>
<table border="1">
    <tr>
        <th style="text-align:center" colspan="2">1NF ⊃ 2NF ⊃ 3NF ⊃ BCNF（逐步优化，以解决：插入异常、删除异常、数据冗余）</th>
    </tr>
    <tr>
        <td style="text-align:center">1NF</td>
        <td>属性值都是不可分的原子值</td>
    </tr>
    <tr>
        <td style="text-align:center">2NF</td>
        <td>消除非主属性对候选键的部分依赖</td>
    </tr>
    <tr>
        <td style="text-align:center">3NF</td>
        <td>消除非主属性对候选键的传递依赖</td>
    </tr>
    <tr>
        <td style="text-align:center">BCNF</td>
        <td>消除主属性对候选键的部分和传递依赖</td>
    </tr>
</table>
<p>【速记】</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>范式</mtext><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>第一范式（</mtext><mn>1</mn><mi>N</mi><mi>F</mi><mtext>）：属性值都是不可再分的原子值</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>第二范式（</mtext><mn>2</mn><mi>N</mi><mi>F</mi><mtext>）：消除非主属性对候选键（候选码）的部分依赖</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>第三范式（</mtext><mn>3</mn><mi>N</mi><mi>F</mi><mtext>）：消除非主属性对候选键（候选码）的传递依赖</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>B</mi><mi>C</mi><mtext>范式（</mtext><mi>B</mi><mi>C</mi><mi>N</mi><mi>F</mi><mtext>）：所有属性都完全依赖于候选键（候选码），即在关键因素中一定包含候选键（候选码）</mtext></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">范式
\begin{cases}
 第一范式（1NF）：属性值都是不可再分的原子值 \\
 第二范式（2NF）：消除非主属性对候选键（候选码）的部分依赖 \\
 第三范式（3NF）：消除非主属性对候选键（候选码）的传递依赖 \\
 BC范式（BCNF）：所有属性都完全依赖于候选键（候选码），即在关键因素中一定包含候选键（候选码）
\end{cases}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:5.76em;vertical-align:-2.63em;"></span><span class="mord cjk_fallback">范</span><span class="mord cjk_fallback">式</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9500200000000008em;"><span style="top:-1.59999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-1.5949900000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.8899900000000003em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.1849900000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.2049900000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.1500100000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.29501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.59001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.885010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.905010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.20002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.45002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.1300000000000003em;"><span style="top:-5.130000000000001em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">第</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">范</span><span class="mord cjk_fallback">式</span><span class="mord cjk_fallback">（</span><span class="mord">1</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord cjk_fallback">）</span><span class="mord cjk_fallback">：</span><span class="mord cjk_fallback">属</span><span class="mord cjk_fallback">性</span><span class="mord cjk_fallback">值</span><span class="mord cjk_fallback">都</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">不</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">再</span><span class="mord cjk_fallback">分</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">原</span><span class="mord cjk_fallback">子</span><span class="mord cjk_fallback">值</span></span></span><span style="top:-3.6900000000000004em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">第</span><span class="mord cjk_fallback">二</span><span class="mord cjk_fallback">范</span><span class="mord cjk_fallback">式</span><span class="mord cjk_fallback">（</span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord cjk_fallback">）</span><span class="mord cjk_fallback">：</span><span class="mord cjk_fallback">消</span><span class="mord cjk_fallback">除</span><span class="mord cjk_fallback">非</span><span class="mord cjk_fallback">主</span><span class="mord cjk_fallback">属</span><span class="mord cjk_fallback">性</span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">候</span><span class="mord cjk_fallback">选</span><span class="mord cjk_fallback">键</span><span class="mord cjk_fallback">（</span><span class="mord cjk_fallback">候</span><span class="mord cjk_fallback">选</span><span class="mord cjk_fallback">码</span><span class="mord cjk_fallback">）</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">部</span><span class="mord cjk_fallback">分</span><span class="mord cjk_fallback">依</span><span class="mord cjk_fallback">赖</span></span></span><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">第</span><span class="mord cjk_fallback">三</span><span class="mord cjk_fallback">范</span><span class="mord cjk_fallback">式</span><span class="mord cjk_fallback">（</span><span class="mord">3</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord cjk_fallback">）</span><span class="mord cjk_fallback">：</span><span class="mord cjk_fallback">消</span><span class="mord cjk_fallback">除</span><span class="mord cjk_fallback">非</span><span class="mord cjk_fallback">主</span><span class="mord cjk_fallback">属</span><span class="mord cjk_fallback">性</span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">候</span><span class="mord cjk_fallback">选</span><span class="mord cjk_fallback">键</span><span class="mord cjk_fallback">（</span><span class="mord cjk_fallback">候</span><span class="mord cjk_fallback">选</span><span class="mord cjk_fallback">码</span><span class="mord cjk_fallback">）</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">传</span><span class="mord cjk_fallback">递</span><span class="mord cjk_fallback">依</span><span class="mord cjk_fallback">赖</span></span></span><span style="top:-0.8100000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord cjk_fallback">范</span><span class="mord cjk_fallback">式</span><span class="mord cjk_fallback">（</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord cjk_fallback">）</span><span class="mord cjk_fallback">：</span><span class="mord cjk_fallback">所</span><span class="mord cjk_fallback">有</span><span class="mord cjk_fallback">属</span><span class="mord cjk_fallback">性</span><span class="mord cjk_fallback">都</span><span class="mord cjk_fallback">完</span><span class="mord cjk_fallback">全</span><span class="mord cjk_fallback">依</span><span class="mord cjk_fallback">赖</span><span class="mord cjk_fallback">于</span><span class="mord cjk_fallback">候</span><span class="mord cjk_fallback">选</span><span class="mord cjk_fallback">键</span><span class="mord cjk_fallback">（</span><span class="mord cjk_fallback">候</span><span class="mord cjk_fallback">选</span><span class="mord cjk_fallback">码</span><span class="mord cjk_fallback">）</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">即</span><span class="mord cjk_fallback">在</span><span class="mord cjk_fallback">关</span><span class="mord cjk_fallback">键</span><span class="mord cjk_fallback">因</span><span class="mord cjk_fallback">素</span><span class="mord cjk_fallback">中</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">定</span><span class="mord cjk_fallback">包</span><span class="mord cjk_fallback">含</span><span class="mord cjk_fallback">候</span><span class="mord cjk_fallback">选</span><span class="mord cjk_fallback">键</span><span class="mord cjk_fallback">（</span><span class="mord cjk_fallback">候</span><span class="mord cjk_fallback">选</span><span class="mord cjk_fallback">码</span><span class="mord cjk_fallback">）</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.63em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p>示例A：R=(A, B, C)，F={A→B, B→A, C→A}</p>
<p>{C→A, A→B}；传递依赖，因此是 2NF</p>
<p>示例B：R=(A, B, C, D)，F={B→D, D→B, AB→C}</p>
<p>{B→D, D→B}；内部自己消化，都当作候选键处理。候选键为：(A, B, D)，但属性 C 不完全依赖于候选键，因此是 3NF</p>
<p>示例C：R=(A, B, C)，F={A→B, B→A, A→C}</p>
<p>{A→B, B→A}；内部自己消化，都当作候选键处理。所以消化处理后{B→A, A→C}的传递依赖就不存在了，3NF 满足。</p>
<p>因为 A=B，所以属性 C 完全依赖候选键(A, B)，满足 BCNF</p>
<h3 id="3-5-5-模式分解">3.5.5 模式分解</h3>
<p>保持函数依赖分解：设数据库模式 ρ={R1，R2，……，Rk} 是关系模式 R 的一个分解，F 是 R 上的函数依赖集，ρ 中每个模式 Ri 上的 FD 集是 Fi。如果 {F1，F2，……，Fk} 与 F 是等价的（即相互逻辑蕴涵），那么称分解 ρ 保持 FD。</p>
<p>例：设关系模式 R(U, F)，其中U={A, B, C, D, E}，F={A → BC, C → D, BC → E, E → A}，则分解 ρ={R1(ABCE)，R2(CD)} <strong>保持了函数依赖</strong>。而分解 ρ={R1(ABE)，R2(CD)} <strong>没有保持函数依赖</strong>。</p>
<h3 id="3-5-6-无损分解">3.5.6 无损分解</h3>
<p>指将一个关系模式分解成若干个关系模式后，通过自然联接和投影等运算仍能还原到原来的关系模式。</p>
<ul>
<li>有损:不能还原</li>
<li>无损:可以还原</li>
</ul>
<h2 id="3-6-sql-语言-☆☆☆☆">3.6 SQL 语言（☆☆☆☆）</h2>
<blockquote>
<p>选择题</p>
</blockquote>
<p>增加主键约束【add constraint, primary key】</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 建表时</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> (</span><br><span class="line">    id <span class="type">varchar</span>(<span class="number">60</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">    username <span class="type">varchar</span>(<span class="number">60</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 建表后</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 主键名称 <span class="keyword">PRIMARY</span> KEY(设主键的列名);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> pk_eno <span class="keyword">PRIMARY</span> KEY(eno);</span><br></pre></td></tr></table></figure>
<p>增加外键约束【constraint, foreign key, references】</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 建表时</span></span><br><span class="line"><span class="keyword">FOREIGN</span> KEY(从表字段名) <span class="keyword">REFERENCES</span> 主表名(主表字段名);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 建表后</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 从表名 <span class="keyword">CONSTRAINT</span> 外键名 <span class="keyword">FOREIGN</span> KEY(从表字段) <span class="keyword">REFERENCES</span> 主表名(主表字段名);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> dept <span class="keyword">CONSTRAINT</span> fk_employee_dept <span class="keyword">FOREIGN</span> KEY(dept_no) <span class="keyword">REFERENCES</span> employee(dept_no);</span><br></pre></td></tr></table></figure>
<p>增加条件约束【unique】</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 建表时</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> (</span><br><span class="line">    id <span class="type">varchar</span>(<span class="number">60</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">    username <span class="type">varchar</span>(<span class="number">60</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 建表后</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> (字段<span class="number">1</span>, 字段<span class="number">2</span>, ......); </span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> (un_eno);</span><br></pre></td></tr></table></figure>
<h3 id="3-6-1-并发控制-☆☆">3.6.1 并发控制（☆☆）</h3>
<h4 id="事务的-acid-属性-速记">事务的 ACID 属性【速记】</h4>
<ul>
<li>原子性【A】：一个事务中所包含的全部 SQL 语句是一个执行整体，不可分割，要么全执行，要么全取消。</li>
<li>一致性【C】：即数据库在事务操作前和事务处理后，其中的数据必须都要满足业务规范约束。如果在事务中出现错误，那么系统中的所有变化将自动地回滚，系统返回到原始状态。</li>
<li>隔离性【I】：指的是多个事务并发地独立运行，而不能互相干扰，事务提交时根据当前数据库状态进行操作。</li>
<li>持久性【D】：也称为永久性，指的是事务在处理结束后，对数据库的修改是永久性的，即使系统故障也不会丢失。</li>
</ul>
<h4 id="并发产生的问题-速记">并发产生的问题【速记】</h4>
<ul>
<li>脏读：读到了其他事务未提交的脏数据。<br>
例如：事务 B 执行过程中修改了数据 X，在未提交前，事务 A 也读取了 X，但事务 B 却回滚了，这样事务 A 就形成了脏读。</li>
<li>不可重复读：在一个事务内，最开始读到的数据和事务结束前任意时刻读到的同一批数据出现不一致的情况。<br>
例如：事务 A 先读取了一条数据，然后再执行逻辑的时候，事务 B 将这条数据改变了，然后事务 A 再次读取该数据，发现数据不匹配，这就是所谓的不可重复读。</li>
<li>幻读：事务的某次 select 操作得到的结果所表示的数据状态无法支撑其后续的业务操作。<br>
例如：事务 A select 某条记录是否存在，不存在，准备插入此记录，但执行 insert 操作的时候发现此记录已存在，此时就产生了幻读。</li>
</ul>
<h4 id="封锁协议-速记">封锁协议【速记】</h4>
<ul>
<li>共享锁【S锁】：事务对数据对象加 S 锁后，加锁事务对数据对象只能读而不能改，其他事务也一样，并且只能追加 S 锁而不能加 X 锁。</li>
<li>排他锁【X锁】：事务对数据对象加 X 锁后，加锁事务对数据对象可以读也可以改，但其他事务不能读也不能改，并且不能追加锁。</li>
</ul>
<h3 id="3-6-2-数据库完整性约束-☆">3.6.2 数据库完整性约束（☆）</h3>
<ul>
<li>实体完整性约束：主键 —— 非空且唯一</li>
<li>参照完整性约束：外键 —— 可以为空，但有值的话必须指向正确的记录</li>
<li>用户自定义完整性约束：UNIQUE 之类</li>
<li>触发器：……</li>
</ul>
<h1>四、计算机网络与信息安全（5+3）</h1>
<h2 id="4-1-计算机网络-开放系统互联参考模型-☆☆">4.1 计算机网络-开放系统互联参考模型（☆☆）</h2>
<blockquote>
<p>OSI/RM 七层模型</p>
</blockquote>
<table border="1">
    <tr>
        <th style="text-align:center">OSI 七层架构</th>
        <th style="text-align:center">TCP/IP 四层架构</th>
        <th style="text-align:center">主要设备及协议</th>
        <th style="text-align:center">数据单位</th>
        <th style="text-align:center">主要功能</th>
    </tr>
    <tr>
        <td>应用层</td>
        <td rowspan="3" style="vertical-align: middle;">应用层</td>
        <td rowspan="3" style="vertical-align: middle;">HTTP、Telnet、<br>FTP、DHCP、<br>DNS</td>
        <td></td>
        <td>实现具体的应用功能</td>
    </tr>
    <tr>
        <td>表示层</td>
        <td></td>
        <td>数据的格式与表达、加密、压缩</td>
    </tr>
    <tr>
        <td>会话层</td>
        <td></td>
        <td>建立、管理和终止会话</td>
    </tr>
    <tr>
        <td>传输层</td>
        <td>传输层</td>
        <td>TCP、UDP</td>
        <td>报文</td>
        <td>端到端的连接</td>
    </tr>
    <tr>
        <td>网络层</td>
        <td>网络层</td>
        <td>三层交换机、路由器、IP、ARP、RARP</td>
        <td>分组</td>
        <td>分组传输和路由选择</td>
    </tr>
    <tr>
        <td>数据链路层</td>
        <td rowspan="2" style="vertical-align: middle;">网络接口层</td>
        <td>网桥、交换机、PPP、PPTP</td>
        <td>帧</td>
        <td>传送以帧为单位的信息</td>
    </tr>
    <tr>
        <td>物理层</td>
        <td>中继器、集线器</td>
        <td>比特</td>
        <td>二进制传输</td>
    </tr>
</table>
<p><em>最下四层需要着重理解。</em></p>
<p><em>ARP：地址解析协议（IP 转成 MAC 地址）；RARP：地址反向解析协议（MAC 地址转成 IP）</em></p>
<h2 id="4-2-计算机网络-tcp-ip-协议族-☆☆☆☆-速记">4.2 计算机网络-TCP/IP 协议族（☆☆☆☆）【速记】</h2>
<table border="1">
    <tr>
        <th style="text-align:center">OSI 七层架构</th>
        <th style="text-align:center">TCP/IP 四层架构</th>
        <th style="text-align:center" colspan="3">协议族</th>
    </tr>
    <tr>
        <td>应用层</td>
        <td rowspan="3" style="vertical-align: middle;">应用层</td>
        <td rowspan="3" style="vertical-align: middle;">基于 TCP 协议：<br>FTP:20/21（文件传输协议）<br>Telnet:23<br>SMTP:25（邮件发送）<br>POP:110（邮件收取）<br>HTTP:80<br>HTTPS:443</td>
        <td rowspan="3" style="vertical-align: middle;">NFS</td>
        <td rowspan="3" style="vertical-align: middle;">基于 UDP 协议：<br>DNS:53（域名解析协议，域名<->IP）<br>DHCP:67（IP地址自动分配）<br>TFTP:69（文件传输协议）<br>SNMP:161（简单网络管理协议）</td>
    </tr>
    <tr>
        <td>表示层</td>
    </tr>
    <tr>
        <td>会话层</td>
    </tr>
    <tr>
        <td>传输层</td>
        <td>传输层</td>
        <td style="text-align:center">TCP</td>
        <td></td>
        <td style="text-align:center">UDP</td>
    </tr>
    <tr>
        <td>网络层</td>
        <td>网络层</td>
        <td colspan="3">IP、ICMP（因特网控制协议，ping命令）、IGMP（组播协议）、ARP、RARP</td>
    </tr>
    <tr>
        <td>数据链路层</td>
        <td rowspan="2" style="vertical-align: middle;">网络接口层</td>
        <td rowspan="2" colspan="3" style="vertical-align: middle;">CSMA/CD（载波监听多路访问）、TokingRing</td>
    </tr>
    <tr>
        <td>物理层</td>
    </tr>
</table>
<h2 id="4-3-计算机网络-ip-地址与子网划分-☆☆☆☆☆">4.3 计算机网络-IP 地址与子网划分（☆☆☆☆☆）</h2>
<h3 id="ip-地址">IP 地址</h3>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230502012735457.png" alt=""></p>
<p>A 类地址：0.0.0.0 ~ 127.255.255.255</p>
<ul>
<li>网络位（8bit）：范围从 0000 0000 到 0111 1111（1000 0000 - 1），即 0 ~ 2<sup>8</sup>-1 = 0 ~ 128-1 = 0 ~ 127</li>
<li>地址位（24bit）：范围是：0 ~ 2<sup>24</sup>-2（因为要去除全为 0 和全为 1 的两个掩码地址）</li>
</ul>
<p>B 类地址：128.0.0.1 ~ 191.255.255.255</p>
<p>C 类地址：192.0.0.0 ~ 223.255.255.255</p>
<h3 id="子网划分-选择题">子网划分（选择题）</h3>
<p>示例1：将 IP 地址 168.195.0.0 划分成 27 个子网，子网掩码为多少？</p>
<p>∵ 2<sup>4</sup>(16) &lt; 27 &lt; 2<sup>5</sup>(32)</p>
<p>∴ 主机位<strong>从左往右</strong>数 5 位<strong>置 1</strong>，即从：0000 0000 0000 0000 ~ 1111 1000 0000 0000</p>
<p>后 8 位 0 省略：1111 1000 = 2<sup>8</sup>-1-2<sup>2</sup>-2<sup>1</sup>-2<sup>0</sup> = 256-1-4-2-1 = 248，所以子网掩码为：168.195.248.0</p>
<p>示例2：将 IP 地址 168.195.0.0 划分成若干子网，每个子网内有主机 700 台，则子网掩码为多少？</p>
<p>∵ 2<sup>9</sup>(512) &lt; 700 &lt; 2<sup>10</sup>(1024)</p>
<p>∴ 主机位<strong>从右往左</strong>数 10 位<strong>置 0</strong>，即从：0000 0000 0000 0000 ~ 1111 1100 0000 0000</p>
<p>后 8 位 0 省略：1111 1100 = 2<sup>8</sup>-1-2<sup>1</sup>-2<sup>0</sup> = 256-1-2-1 = 252，所以子网掩码为：168.195.252.0</p>
<h2 id="4-4-计算机网络-网络规划与设计-☆">4.4 计算机网络-网络规划与设计（☆）</h2>
<h3 id="需求分析">需求分析</h3>
<ul>
<li>网络功能要求</li>
<li>网络性能要求</li>
<li>网络运行环境要求</li>
<li>网络可扩充性和可维护性要求</li>
</ul>
<h3 id="网络规划原则">网络规划原则</h3>
<ul>
<li>实用性原则</li>
<li>开放性原则</li>
<li>先进性原则</li>
</ul>
<h3 id="网络设计实施原则">网络设计实施原则</h3>
<ul>
<li>可靠性原则</li>
<li>安全性原则</li>
<li>高效性原则</li>
<li>可扩展性原则</li>
</ul>
<h3 id="层次化网络设计">层次化网络设计</h3>
<ul>
<li>核心层</li>
<li>汇聚层</li>
<li>接入层</li>
</ul>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230425174102514.png" alt=""></p>
<h2 id="4-5-计算机网络-计算机网络分类">4.5 计算机网络-计算机网络分类</h2>
<h3 id="3g-与-4g-标准-☆☆">3G 与 4G 标准（☆☆）</h3>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230425175803161.png" alt=""></p>
<h2 id="4-6-计算机网络-网络接入技术">4.6 计算机网络-网络接入技术</h2>
<ul>
<li>有线接入：公用交换电话网络（PSTN）、数字数据网（DDN）、综合业务数字网（ISDN）、<strong>非对称数字用户线路（ADSL）</strong>、同轴光纤技术（HFC）</li>
<li>无线接入：IEEE 802.11（WIFI）、IEEE 802.15（蓝牙 Bluetooth）、红外（IrDA）、WAPI</li>
</ul>
<h2 id="4-7-计算机网络-html-语言-☆☆">4.7 计算机网络-HTML 语言（☆☆）</h2>
<table>
<thead>
<tr>
<th>标签</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>&lt;a/&gt;</td>
<td>定义锚</td>
</tr>
<tr>
<td>&lt;b&gt;</td>
<td>定义粗字体</td>
</tr>
<tr>
<td>&lt;body&gt;</td>
<td>定义文档的主体</td>
</tr>
<tr>
<td>&lt;button&gt;</td>
<td>定义按钮</td>
</tr>
<tr>
<td>&lt;center&gt;</td>
<td>定义居中文本</td>
</tr>
<tr>
<td>&lt;col&gt;</td>
<td>定义表格中一个或多个列的属性值</td>
</tr>
<tr>
<td>&lt;font&gt;</td>
<td>定义文字的字体、尺寸和颜色</td>
</tr>
<tr>
<td>&lt;form&gt;</td>
<td>定义供用户输入的 HTML 表单</td>
</tr>
<tr>
<td>&lt;frame&gt;</td>
<td>定义框架集的窗口或框架</td>
</tr>
<tr>
<td>&lt;h1&gt;</td>
<td>定义 HTML 标题</td>
</tr>
<tr>
<td>&lt;hr&gt;</td>
<td>定义水平线</td>
</tr>
<tr>
<td>&lt;html&gt;</td>
<td>定义 HTML 文档</td>
</tr>
<tr>
<td>&lt;img&gt;</td>
<td>定义图像</td>
</tr>
<tr>
<td>&lt;p&gt;</td>
<td>定义段落</td>
</tr>
<tr>
<td>&lt;script&gt;</td>
<td>定义客户端脚本</td>
</tr>
<tr>
<td>&lt;strong&gt;</td>
<td>定义强调文本</td>
</tr>
<tr>
<td>&lt;table&gt;</td>
<td>定义表格</td>
</tr>
<tr>
<td>&lt;td&gt;</td>
<td>定义表格中的单元</td>
</tr>
<tr>
<td>&lt;tr&gt;</td>
<td>定义表格中的行</td>
</tr>
<tr>
<td>&lt;title&gt;</td>
<td>定义文档的标题</td>
</tr>
</tbody>
</table>
<h2 id="4-8-信息安全-对称加密与非对称加密-☆☆☆">4.8 信息安全-对称加密与非对称加密（☆☆☆）</h2>
<h3 id="4-8-1-对称加密">4.8.1 对称加密</h3>
<p>K<sub>e</sub> = K<sub>d</sub></p>
<p>特点：加密强度不高，但效率高；密钥分发困难</p>
<p>常见对称密钥加密算法：DES、3DES（三重 DES）、RC-5、IDEA 算法</p>
<h3 id="4-8-2-非对称加密">4.8.2 非对称加密</h3>
<p>K<sub>e</sub> ≠ K<sub>d</sub>，密钥必须成对使用（公钥加密，对应的私钥解密）</p>
<p>特点：加密速度慢，但强度高</p>
<p>常见非对称密钥加密算法：RSA、ECC</p>
<ol>
<li>非对称加密可以反向加密和解密吗？<br>
非对称加密算法可以反向使用，也就是用私钥加密、公钥解密或者用公钥加密、私钥解密。但一般情况下，非对称加密算法都是采用“公钥加密、私钥解密”的方式，因为这种方式更安全。如果采用“私钥加密、公钥解密”的方式，则可能会导致私钥泄露而造成安全问题。</li>
<li>只能单向加密和解密的非对称加密算法：只能单向加密的单向散列函数被称为哈希函数，常见的哈希函数包括 MD5、SHA-1 和 SHA-256 等。相较于非对称加密算法，哈希函数具有不可逆性，无法逆向还原出原始数据，因此适用于存储密码等敏感信息。另外，还有一种伪随机函数 HMAC，它是基于哈希函数构建的，可以提高哈希函数的安全性，通常用于计算消息认证码（MAC）。需要注意的是，哈希函数不具备加密和解密的概念，而是将数据映射成固定长度的摘要值，自然也<strong>不属于对称或非对称加密</strong>。</li>
<li>可以双向加密和解密的非对称加密算法：在非对称加密算法中，常用的可以双向加密和解密的算法包括 <strong>RSA</strong>、ElGamal、<strong>ECC</strong> 等。这些算法都采用了公钥加密、私钥解密的方式，同时也能够采用私钥加密、公钥解密（但并不建议使用）。在这些算法中，RSA 是最为常见的算法之一，它基于大整数的因数分解难题，可用于数字签名、加密通信等场景。与哈希函数不同的是，RSA 等非对称加密算法具有加密和解密的过程，能够将明文转换为密文，并把密文还原为原始数据。</li>
</ol>
<h3 id="4-8-3-速记">4.8.3 速记</h3>
<p>对称加密简单速度快，所以常用于大量明文信息的加密传输。</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>关于信息安全的加密方式</mtext><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>对称加密：</mtext><mi>D</mi><mi>E</mi><mi>S</mi><mtext>、</mtext><mi>R</mi><mi>C</mi><mo>−</mo><mn>5</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>非对称加密但可逆：</mtext><mi>R</mi><mi>S</mi><mi>A</mi><mtext>（</mtext><mi>X</mi><mi mathvariant="normal">.</mi><mn>509</mn><mtext>数字证书标准）、</mtext><mi>E</mi><mi>C</mi><mi>C</mi><mtext>（国密</mtext><mi>S</mi><mi>M</mi><mn>2</mn><mtext>数字证书）</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>单向加密不可逆（单向散列函数，不属于非对称算法）：</mtext><mi>M</mi><mi>D</mi><mn>5</mn><mtext>、</mtext><mi>S</mi><mi>H</mi><mi>A</mi><mo>−</mo><mn>1</mn><mtext>、</mtext><mi>S</mi><mi>H</mi><mi>A</mi><mo>−</mo><mn>256</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">关于信息安全的加密方式
\begin{cases}
 对称加密：DES、RC-5 \\
 非对称加密但可逆：RSA（X.509数字证书标准）、ECC（国密SM2数字证书） \\
 单向加密不可逆（单向散列函数，不属于非对称算法）：MD5、SHA-1、SHA-256
\end{cases}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.32em;vertical-align:-1.9099999999999997em;"></span><span class="mord cjk_fallback">关</span><span class="mord cjk_fallback">于</span><span class="mord cjk_fallback">信</span><span class="mord cjk_fallback">息</span><span class="mord cjk_fallback">安</span><span class="mord cjk_fallback">全</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">加</span><span class="mord cjk_fallback">密</span><span class="mord cjk_fallback">方</span><span class="mord cjk_fallback">式</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.35002em;"><span style="top:-2.19999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.19499em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.20499em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.15001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.2950099999999996em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.30501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.60002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.8500199999999998em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.41em;"><span style="top:-4.41em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">称</span><span class="mord cjk_fallback">加</span><span class="mord cjk_fallback">密</span><span class="mord cjk_fallback">：</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord cjk_fallback">、</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">5</span></span></span><span style="top:-2.97em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">非</span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">称</span><span class="mord cjk_fallback">加</span><span class="mord cjk_fallback">密</span><span class="mord cjk_fallback">但</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">逆</span><span class="mord cjk_fallback">：</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">A</span><span class="mord cjk_fallback">（</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mord">.</span><span class="mord">5</span><span class="mord">0</span><span class="mord">9</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">字</span><span class="mord cjk_fallback">证</span><span class="mord cjk_fallback">书</span><span class="mord cjk_fallback">标</span><span class="mord cjk_fallback">准</span><span class="mord cjk_fallback">）</span><span class="mord cjk_fallback">、</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord cjk_fallback">（</span><span class="mord cjk_fallback">国</span><span class="mord cjk_fallback">密</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord">2</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">字</span><span class="mord cjk_fallback">证</span><span class="mord cjk_fallback">书</span><span class="mord cjk_fallback">）</span></span></span><span style="top:-1.5300000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">单</span><span class="mord cjk_fallback">向</span><span class="mord cjk_fallback">加</span><span class="mord cjk_fallback">密</span><span class="mord cjk_fallback">不</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">逆</span><span class="mord cjk_fallback">（</span><span class="mord cjk_fallback">单</span><span class="mord cjk_fallback">向</span><span class="mord cjk_fallback">散</span><span class="mord cjk_fallback">列</span><span class="mord cjk_fallback">函</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">不</span><span class="mord cjk_fallback">属</span><span class="mord cjk_fallback">于</span><span class="mord cjk_fallback">非</span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">称</span><span class="mord cjk_fallback">算</span><span class="mord cjk_fallback">法</span><span class="mord cjk_fallback">）</span><span class="mord cjk_fallback">：</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord">5</span><span class="mord cjk_fallback">、</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mord cjk_fallback">、</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord">5</span><span class="mord">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.9099999999999997em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<h2 id="4-9-信息安全-信息摘要与数字签名-☆☆">4.9 信息安全-信息摘要与数字签名（☆☆）</h2>
<h3 id="数字签名">数字签名</h3>
<p>基于非对称加密算法，但是反向：用私钥进行加密，公钥解密验证信息的正确性（包括 RSA、ECC 等非对称加密算法，可以反向加密和解密）</p>
<h3 id="信息摘要">信息摘要</h3>
<p>基于非对称加密算法，但是只能<strong>单向</strong>加密和解密，具有<strong>不可逆</strong>性。（包括 MD5、SHA-1 和 SHA-256 等非对称算法，只能单向加密和解密）</p>
<h2 id="4-10-pki-公钥体系">4.10 PKI 公钥体系</h2>
<h3 id="信息安全-数字证书-☆☆">信息安全-数字证书（☆☆）</h3>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230426154037660.png" alt=""></p>
<h2 id="4-11-网络安全-各个网络层次的安全保障">4.11 网络安全-各个网络层次的安全保障</h2>
<h3 id="信息安全-网络安全协议-☆☆☆">信息安全-网络安全协议（☆☆☆）</h3>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230426155242338.png" alt=""></p>
<h2 id="4-12-网络安全-主动攻击与被动攻击-速记">4.12 网络安全-主动攻击与被动攻击【速记】</h2>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>网络攻击</mtext><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>主动攻击【认证阻止主动攻击】</mtext><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>拒绝服务攻击（</mtext><mi>D</mi><mi>O</mi><mi>S</mi><mtext>）</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>会话拦截</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>修改数据命令</mtext></mstyle></mtd></mtr></mtable></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>被动攻击【加密阻止被动攻击】</mtext><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>系统干涉</mtext></mstyle></mtd></mtr></mtable></mrow></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">网络攻击
\begin{cases}
 主动攻击【认证阻止主动攻击】
 \begin{cases}
  拒绝服务攻击（DOS） \\
  会话拦截 \\
  修改数据命令
 \end{cases}\\
 被动攻击【加密阻止被动攻击】
 \begin{cases}
  系统干涉
 \end{cases}
\end{cases}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:6.120020000000001em;vertical-align:-2.8100100000000006em;"></span><span class="mord cjk_fallback">网</span><span class="mord cjk_fallback">络</span><span class="mord cjk_fallback">攻</span><span class="mord cjk_fallback">击</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2500200000000006em;"><span style="top:-1.2999899999999998em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-1.2949899999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.58999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.8849900000000002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.17999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.2049900000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.1500100000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.29501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.59001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.885010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.180010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.205010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.50002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.3100100000000006em;"><span style="top:-5.31001em;"><span class="pstrut" style="height:4.41em;"></span><span class="mord"><span class="mord cjk_fallback">主</span><span class="mord cjk_fallback">动</span><span class="mord cjk_fallback">攻</span><span class="mord cjk_fallback">击</span><span class="mord cjk_fallback">【</span><span class="mord cjk_fallback">认</span><span class="mord cjk_fallback">证</span><span class="mord cjk_fallback">阻</span><span class="mord cjk_fallback">止</span><span class="mord cjk_fallback">主</span><span class="mord cjk_fallback">动</span><span class="mord cjk_fallback">攻</span><span class="mord cjk_fallback">击</span><span class="mord cjk_fallback">】</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.35002em;"><span style="top:-2.19999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.19499em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.20499em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.15001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.2950099999999996em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.30501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.60002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.8500199999999998em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.41em;"><span style="top:-4.41em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">拒</span><span class="mord cjk_fallback">绝</span><span class="mord cjk_fallback">服</span><span class="mord cjk_fallback">务</span><span class="mord cjk_fallback">攻</span><span class="mord cjk_fallback">击</span><span class="mord cjk_fallback">（</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord cjk_fallback">）</span></span></span><span style="top:-2.97em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">会</span><span class="mord cjk_fallback">话</span><span class="mord cjk_fallback">拦</span><span class="mord cjk_fallback">截</span></span></span><span style="top:-1.5300000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">修</span><span class="mord cjk_fallback">改</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">据</span><span class="mord cjk_fallback">命</span><span class="mord cjk_fallback">令</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.9099999999999997em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.2500099999999996em;"><span class="pstrut" style="height:4.41em;"></span><span class="mord"><span class="mord cjk_fallback">被</span><span class="mord cjk_fallback">动</span><span class="mord cjk_fallback">攻</span><span class="mord cjk_fallback">击</span><span class="mord cjk_fallback">【</span><span class="mord cjk_fallback">加</span><span class="mord cjk_fallback">密</span><span class="mord cjk_fallback">阻</span><span class="mord cjk_fallback">止</span><span class="mord cjk_fallback">被</span><span class="mord cjk_fallback">动</span><span class="mord cjk_fallback">攻</span><span class="mord cjk_fallback">击</span><span class="mord cjk_fallback">】</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9699999999999999em;"><span style="top:-2.9699999999999998em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">系</span><span class="mord cjk_fallback">统</span><span class="mord cjk_fallback">干</span><span class="mord cjk_fallback">涉</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4700000000000001em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.8100100000000006em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<h3 id="信息安全-防火墙技术与网络攻击-☆☆☆">信息安全-防火墙技术与网络攻击（☆☆☆）</h3>
<ul>
<li>主动攻击：中断（可用性）；篡改（完整性）；伪造（真实性）</li>
<li>被动攻击：监听（保密性）：消息内容获取；业务流分析</li>
</ul>
<h3 id="dos-拒绝服务-与ddos">DoS（拒绝服务）与DDoS</h3>
<p>DOS 是指 Denial of Service（拒绝服务）攻击，DDOS 是指 Distributed Denial of Service（分布式拒绝服务）攻击。两者的基本概念是一致的：攻击者通过在网络中发送过多数据流量或请求，使目标系统无法正常处理、响应其他合法用户的请求，从而导致该系统的服务不能正常提供。</p>
<ul>
<li>DOS 攻击针对单个主机或服务器，攻击者向目标主机或服务器发送大量无效或欺骗性的请求或网络数据包，以耗尽目标主机或服务器的资源（如 CPU、内存、硬盘等），从而使其无法处理更多合法的请求</li>
<li>DDOS 攻击则是操作多台“肉鸡”协同发起攻击，通常采用僵尸网络（Botnet）等手段将攻击流量分散到多个来源，以达到更强的攻击效果</li>
</ul>
<p>DOS 和 DDOS 攻击都是网络安全领域的常见威胁，可以造成系统瘫痪、信息丢失、服务不可用等损失。为了防范这种攻击，需要采取各种技术措施，例如限制连接数、地址过滤、流量清洗、负载均衡等，同时也需要做好系统安全加固、漏洞修复等工作。</p>
<h3 id="防火墙">防火墙</h3>
<p>网络级防火墙</p>
<ul>
<li>包过滤：检查通过的 IP 数据封包（数据包的格式以及来源地址），并进一步处理。主要的处理方式有：放行、丢弃或拒绝，以达到保护自身网络的目的。（<strong>速度快但安全性低</strong>）</li>
<li>代理服务器：针对每一种应用服务程序进行代理服务的工作。一方面代替原来的客户建立连接，另一方面代替原来的客户程序，与服务器建立连接。它可确保数据的完整性，只有特定的服务才会被交换；还可进行高阶的存取控制，并可对其内容进行过滤。（<strong>检查包里的内容，速度慢但安全性高</strong>）</li>
<li>状态检测：采用了一种基于连接的状态检测机制，将属于同一连接的所有数据包作为一个整体的数据流来看待（TCP 的三次握手包），构成连接状态表，通过安全规则与状态表的共同配合来决定数据包的“去留”。<strong>综合了包过滤防火墙和代理服务器防火墙的优点，速度快且安全性高</strong>。</li>
</ul>
<p>应用级防火墙：</p>
<ul>
<li>双穴主机：内部网络 —— 双穴主机 —— 互联网环境（内网对外不可见）</li>
<li>屏蔽主机：内部网络 —— 堡垒主机 —— 屏蔽路由器 —— 互联网环境</li>
<li>屏蔽子网：内部网络 —— 路由器 —— 被屏蔽的子网（堡垒主机、<strong>Web 服务器</strong>）—— 路由器 —— 互联网环境</li>
</ul>
<h3 id="安全防范体系">安全防范体系</h3>
<ol>
<li><strong>物理环境的安全性</strong>：包括通信线路、物理设备和机房的安全等。物理层的安全性主要体现在通信线路的可靠性（线路备份、网管软件和传输介质)、软硬件设备的安全性（替按设备、拆卸设备、增加设备）、设备的备份、防灾害能力、防干扰能力、设备的运行环境（温度、湿度、烟尘）和不间断电源保障等。</li>
<li><strong>操作系统的安全性</strong>：主要表现在三个方面，一是操作系统本身的缺陷带来的不安全因素，主要包括身份认证、访问控制和系统漏洞等；二是对操作系统的安全配置问题；三是病毒对操作系统的威胁。</li>
<li><strong>网络的安全性</strong>：网络层的安全问题主要体现在计算机网络方面的安全性，包括网络层身份认证、网络资源的访问控制、数据传输的保密与完整性、远程接入的安全、域名系统的安全、路由系统的安全、入侵检测的手段和网络设施防病毒等。</li>
<li><strong>应用的安全性</strong>：由提供服务所采用的应用软件和数据的安全性产生，包括 Web 服务、电子邮件系统和 DNS 等。此外，还包括病毒对系统的威胁。</li>
<li><strong>管理的安全性</strong>：包括安全技术和设备的管理、安全管理制度、部门与人员的组织规则等。管理的制度化极大程度地影响着整个计算机网络的安全，严格的安全管理制度、明确的部门安全职责划分与合理的人员角色配置，都可以在很大程度上降低其他层次的安全漏洞。</li>
</ol>
<h2 id="4-13-信息安全-计算机病毒与木马-☆☆☆">4.13 信息安全-计算机病毒与木马（☆☆☆）</h2>
<ul>
<li>病毒：编制或者在计算机程序中插入的破坏计算机功能或者破坏数据，影响计算机使用并且能够自我复制的一组计算机指令或者程序代码。</li>
<li>木马：计算机木马是一种后门程序，常被黑客用作控制远程计算机的工具。</li>
</ul>
<h1>五、系统开发基础（总11）</h1>
<h2 id="5-1-开发模型-☆☆☆☆☆">5.1 开发模型（☆☆☆☆☆）</h2>
<h3 id="瀑布模型">瀑布模型</h3>
<table border="1">
	<tr align="center">
		<td rowspan="2" style="vertical-align: middle;">定义阶段</td>
		<td>制定计划</td>
        <td>可行性分析</td>
	</tr>
    <tr align="center">
		<td>需求分析</td>
        <td>需求规格说明书</td>
	</tr>
	<tr align="center">
		<td rowspan="3" style="vertical-align: middle;">开发阶段</td>
		<td>软件设计</td>
        <td>概要设计说明书、详细设计说明书</td>
	</tr>
	<tr align="center">
		<td>程序编码</td>
        <td>程序清单</td>
	</tr>
	<tr align="center">
		<td>软件测试</td>
        <td>测试计划、测试用例、测试报告</td>
	</tr>
	<tr align="center">
		<td>维护阶段</td>
		<td>运行维护</td>
        <td></td>
	</tr>
</table>
<ul>
<li>定义阶段：软件计划、需求分析</li>
</ul>
<h3 id="v-模型">V 模型</h3>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230426175443713.png" alt=""></p>
<h3 id="喷泉模型">喷泉模型</h3>
<h3 id="原型化模型">原型化模型</h3>
<p>适合于开发高风险项目</p>
<h3 id="演化模型">演化模型</h3>
<h3 id="螺旋模型">螺旋模型</h3>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230426180211816.png" alt=""></p>
<p>螺旋模型 = 瀑布模型（各个阶段） + 原型模型（迭代一、迭代二、……），特别适用于大型复杂的系统。</p>
<h3 id="统一过程">统一过程</h3>
<p>用例驱动、以架构为中心、迭代和增量</p>
<ul>
<li>初始
<ul>
<li>确定项目范围和边界</li>
<li>识别系统的关键用例</li>
<li>展示系统的候选架构</li>
<li>估计项目费用和时间</li>
<li>评估项目风险</li>
</ul>
</li>
<li>细化
<ul>
<li>分析系统问题领域</li>
<li>建立软件架构基础</li>
<li>淘汰最高风险元素</li>
</ul>
</li>
<li>构建
<ul>
<li>开发剩余的构件</li>
<li>构件组装与测试</li>
</ul>
</li>
<li>交付
<ul>
<li>进行＆测试</li>
<li>制作发布版本</li>
<li>用户文档定稿</li>
<li>确认新系统</li>
<li>培训、调整产品</li>
</ul>
</li>
</ul>
<h3 id="敏捷方法">敏捷方法</h3>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230426224227214.png" alt=""></p>
<ol>
<li>XP（Extreme Programming，极限编程）在所有的敏捷型方法中，XP 是最引人瞩目的它源于 Smalltalk 圈子，特别是 Kent Beck 和 Ward Cunningham 在 20 世纪 80 年代末的密切合作。XP 在一些对<strong>费用控制严格的公司中的使用</strong>，已经被证明是<strong>非常有效</strong>的。</li>
<li>Cockburn 的水晶系列方法，水晶系列方法是由 Alistair Cockburn 提出的。它与 XP 方法一样，都有以人为中心的理念，但在实践上有所不同。Alistair 考虑到人们一般很难严格遵循一个纪律约束很强的过程，因此，与 XP 的高度纪律性不同，Alistair 探索了<strong>用最少纪律约束而仍能成功的方法</strong>，从而在产出效率与易于运作上达到一种平衡。也就是说，虽然水晶系列不如 XP 那样的产出效率，但会有更多的人能够接受并遵循它。</li>
<li>开放式源码，这里提到的开放式源码指的是开放源码界所用的一种运作方式。开放式源码项目有一个特别之处，就是<strong>程序开发人员在地域上分布很广</strong>，这使得它和其他敏捷方法不同，因为一般的敏捷方法都强调项目组成员在同一地点工作。开放源码的一个突出特点就是查错排障（debug）的高度并行性，任何人发现了错误都可将改正源码的“补丁”文件发给维护者。然后由维护者将这些“补丁”或是新增的代码并入源码库。</li>
<li>SCRUM。SCRUM 已经出现很久了像前面所论及的方法一样，该方法强调这样一个事实，即<strong>明确定义了的可重复的方法过程</strong>只限于在明确定义了的可重复的环境中，为明确定义了的可重复的人员所用，去解决明确定义了的可重复的问题。</li>
<li>Coad 的功用驱动开发方法（FDD-Feature Driven Development）<br>
FDD 是由 Jeff De Luca 和大师 Peter Coad 提出来的。像其他方法一样，它致力于短时的选代阶段和可见可用的功能。在 FDD 中，一个选代周期一般是两周。<br>
在 FDD 中，编程开发人员分成两类：<strong>首席程序员和“类”程序员</strong>（class owner）。首席程序员是最富有经验的开发人员，他们是项目的协调者、设计者和指导者，而“类”程序员则主要做源码编写。</li>
<li>ASD 方法，ASD（Adaptive Software Development）方法由 Jim Hiqhsmith 提出，其核心是三个非线性的、重叠的开发阶段：<strong>猜测、合作与学习</strong>。</li>
</ol>
<h2 id="5-2-软件开发方法-☆">5.2 软件开发方法（☆）</h2>
<p>结构化方法（<strong>面向数据流</strong>，不适用于大型复杂项目）</p>
<ul>
<li>用户至上</li>
<li>严格区分工作阶段，每阶段有任务和结果</li>
<li>强调系统开发过程的整体性和全局性</li>
<li>系统开发过程工程化，文档资料标准化</li>
<li>自顶向下，逐步分解（求精）</li>
</ul>
<p>原型法</p>
<p>面向对象方法（喷泉模型）</p>
<ul>
<li>更好的复用性</li>
<li>关键在于建立一个全面、合理、统一的模型</li>
<li>分析、设计、实现三个阶段，界限不明确</li>
</ul>
<p>面向服务的方法（SOA）</p>
<h2 id="5-3-需求分析-☆">5.3 需求分析（☆）</h2>
<p>需求的任务</p>
<p>需求的过程</p>
<ul>
<li>问题识别</li>
<li>分析与综合</li>
<li>编制需求分析文档</li>
<li>需求分析与评审</li>
</ul>
<p>需求的分类</p>
<ul>
<li>功能需求</li>
<li>非功能需求</li>
<li>设计约束</li>
</ul>
<p>应用的工具</p>
<ul>
<li>数据流图（DFD）</li>
<li>数据字典（DD）</li>
<li>判定表</li>
<li>判定树</li>
</ul>
<h2 id="5-4-软件设计-☆☆">5.4 软件设计（☆☆）</h2>
<p>软件设计的任务与活动</p>
<p>模块合计原则（高内聚低耦合）</p>
<p><strong>可能考察【内聚度】或【耦合度】的顺序；或者类型与描述内容的对应（可能性略低）</strong></p>
<table>
<thead>
<tr>
<th>内聚类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>功能内聚</td>
<td>完成一个单一<strong>功能</strong>，各个部分协同工作，缺一不可【内聚最高】</td>
</tr>
<tr>
<td>顺序内聚</td>
<td>处理元素相关，而且必须<strong>顺序</strong>执行</td>
</tr>
<tr>
<td>通信内聚</td>
<td>所有处理元素集中在一个数据结构的区域上</td>
</tr>
<tr>
<td>过程内聚</td>
<td>处理元素相关，而且必须按<strong>特定的次序</strong>执行</td>
</tr>
<tr>
<td>瞬时内聚（时间内聚）</td>
<td>所包含的任务必须在<strong>同一时间间隔内</strong>执行</td>
</tr>
<tr>
<td>逻辑内聚</td>
<td>完成<strong>逻辑</strong>上相关的一组任务</td>
</tr>
<tr>
<td>偶然内聚（巧合内聚）</td>
<td>完成一组<strong>没有关系或松散关系</strong>的任务【内聚最低】</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>耦合类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>非直接耦合</td>
<td>两个模块之间没有直接关系，它们之间的联系完全通过主模块的控制和调用来实现【耦合最低】</td>
</tr>
<tr>
<td>数据耦合</td>
<td>一组模块借助参数表传递简单数据</td>
</tr>
<tr>
<td>标记耦合</td>
<td>一组模块通过参数表传递记录信息（数据结构）</td>
</tr>
<tr>
<td>控制耦合</td>
<td>模块之间传递的信息中包含用于控制模块内部逻辑的信息</td>
</tr>
<tr>
<td>外部耦合</td>
<td>一组模块都访问同一全局简单变量，而且不是通过参数表传递该全局变量的信息</td>
</tr>
<tr>
<td>公共耦合</td>
<td>多个模块都访问同一个公共数据环境</td>
</tr>
<tr>
<td>内容耦合</td>
<td>一个模块直接访问另一个模块的内部数据；一个模块不通过正常入口转到另一个<br>模块的内部；两个模块有一部分程序代码重叠；一个模块有多个入口【耦合最高】</td>
</tr>
</tbody>
</table>
<p>应用的工具</p>
<ul>
<li>IPO 图：输入处理输出图</li>
<li>PDL：程序描述语言</li>
<li>PAD：问题分析图</li>
<li>程序流程图</li>
<li>N/S 盒图</li>
</ul>
<h2 id="5-5-软件测试与维护">5.5 软件测试与维护</h2>
<p>软件测试</p>
<ul>
<li>动态测试
<ul>
<li>黑盒测试法</li>
<li>白盒测试法</li>
<li>灰盒测试法</li>
</ul>
</li>
<li>静态测试
<ul>
<li>桌前检查</li>
<li>代码审查</li>
<li>代码走查</li>
</ul>
</li>
</ul>
<h3 id="5-5-1-黑盒测试法">5.5.1 黑盒测试法</h3>
<h4 id="等价类划分">等价类划分</h4>
<p>等价类划分法是一种典型的，并且是最基础的黑盒测试用例设计方法。<strong>采用等价类划分法时，完全不用考虑程序内部结构，设计测试用例的唯一依据是软件需求规格说明书。</strong></p>
<p>所谓等价类，是输入条件的一个子集合，该输入集合中的数据对于揭示程序中的错误是等价的。从每一个子集中选取少数具有代表性的数据，从而生成测试用例。</p>
<p>等价类又分为<strong>有效等价类</strong>和<strong>无效等价类</strong>。有效等价类代表对程序有效的输入，而无效等价类则是其他任何可能的输入（即不正确的输入值）。有效等价类和无效等价类都是使用等价类划分法设计用例时所必须的，因为<strong>被测程序若是正确的，就应该既能接受有效的输入，也能接受无效输入的考验。</strong></p>
<ul>
<li>确定无效等价类与有效等价类</li>
<li>设计用例尽可能多的覆盖有效类</li>
<li>设计用例只覆盖一个无效类</li>
</ul>
<h4 id="边界值分析">边界值分析</h4>
<ul>
<li>处理边界情况时最容易出错</li>
<li>选取的测试数据应该恰好等于、稍小于或稍大于边界值</li>
</ul>
<h4 id="等价类划分-vs-边界值分析-示例">等价类划分 VS 边界值分析 示例</h4>
<p>小张帮朋友开发一个成绩分级程序，程序逻辑是：90-100分：优；80-89分：良；70-79分：中；60-69分：及格；0-59分：不及格。对此我们若采用等价类划分以及边界值分析，应该如何设计测试用例。</p>
<p>等价类划分：无效等价类：(-∞, 0) ∪ (100, +∞)；有效类：针对每个成绩的分级输入随机数值进行测试</p>
<p>边界值分析：针对成绩分级的各个临界值进行测试：-1、0、1；59、60、61；69、70、71；79、80、81；89、90、91；99、100、101</p>
<h4 id="错误推测-略">错误推测（略）</h4>
<h4 id="因果图-略">因果图（略）</h4>
<h3 id="5-5-2-v-模型的测试流程-速记">5.5.2 V 模型的测试流程【速记】</h3>
<p><strong>一般考察的是：在题干中进行的是哪种测试</strong></p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230426175443713.png" alt=""></p>
<ul>
<li>单元测试：测试：模块接口、<strong>局部数据结构（功能模块里面的东西）</strong>、边界条件、独立的路径、错误处理</li>
<li>集成测试：测试：模块间的接口和通信</li>
<li>系统测试：测试：设备的硬件环境是否能够支撑一个真实的环境（演示环境）</li>
<li>验收测试：以用户为主导的测试：有效性测试、软件配置审查、验收测试</li>
</ul>
<h3 id="5-5-3-白盒测试法-☆☆☆☆-速记">5.5.3 白盒测试法（☆☆☆☆）【速记】</h3>
<p>语句覆盖（错误发现能力最弱）＜判定覆盖＜条件覆盖＜路径覆盖（错误发现能力最强）</p>
<ul>
<li>语句覆盖</li>
<li>判定覆盖</li>
<li>条件覆盖</li>
<li>条件判定覆盖</li>
<li>路径覆盖</li>
</ul>
<h3 id="5-5-4-mccabe-复杂度计算-☆☆☆">5.5.4 McCabe 复杂度计算（☆☆☆）</h3>
<p><strong>V(G) = m-n+2</strong>（m：G 中的有效弧数；n：G 中的节点数）</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/McCabe.jpg" alt=""></p>
<p>m：10；n：8；V(G) = 10-8+2=4（至少需要 4 个测试用例才能覆盖环路）</p>
<p>也可以数被环路封闭的区域然后 +1，如图中的封闭区域为：3，所以其 McCabe 的复杂度为：3+1=4</p>
<h3 id="5-5-5-软件维护-速记">5.5.5 软件维护【速记】</h3>
<p><strong>主要考察对可维护性因素和软件维护类型的区分</strong></p>
<h4 id="可维护性因素">可维护性因素</h4>
<ul>
<li>可理解性（文档）</li>
<li>可测试性</li>
<li>可修改性（是否易于扩展）</li>
</ul>
<h4 id="软件维护类型-☆☆☆☆-速记">软件维护类型（☆☆☆☆）【速记】</h4>
<ul>
<li>改正性维护：系统在发布的时候就有问题。</li>
<li>适应性维护：应用软件适应<strong>信息技术变化和管理需求变化</strong>而进行的修改。企业的外部市场环境和管理需求的不断变化也使得各级管理人员不断提出新的信息需求。</li>
<li>预防性维护：为了预防<strong>将来</strong>有可能发生的情况而准备的一系列事情。</li>
<li>完善性维护：<strong>扩充功能和改善性能</strong>而进行的修改。对已有的软件系统增加一些在系统分析和设计阶段中没有规定的功能与性能特征。</li>
</ul>
<p>软件无故障时间（MTTF）；软件平均修复时间（MTTR）</p>
<p>软件可用性公式：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mi>M</mi><mi>T</mi><mi>T</mi><mi>F</mi></mrow><mrow><mi>M</mi><mi>T</mi><mi>T</mi><mi>F</mi><mo>+</mo><mi>M</mi><mi>T</mi><mi>T</mi><mi>R</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{MTTF}{MTTF+MTTR}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.275662em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>；软件可维护性公式：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mrow><mn>1</mn><mo>+</mo><mi>M</mi><mi>T</mi><mi>T</mi><mi>R</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{1+MTTR}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2484389999999999em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p>
<h2 id="5-6-软件工程国家标准-软件文档管理指南">5.6 软件工程国家标准-软件文档管理指南</h2>
<blockquote>
<p>按阅读对象分类</p>
<p><strong>主要考察哪些文档属于哪种类型</strong></p>
</blockquote>
<h3 id="开发文档-面向技术人员">开发文档（面向技术人员）</h3>
<ul>
<li>可行性研究和项目说明书</li>
<li>需求规格说明</li>
<li>功能规格说明</li>
<li>设计规格说明（包括程序和数据规格说明）</li>
<li>开发计划</li>
<li>软件集成和测试计划</li>
<li>质量保证计划、标准、进度</li>
<li>安全和测试信息</li>
</ul>
<h3 id="产品文档-面向用户">产品文档（面向用户）</h3>
<ul>
<li>培训手册</li>
<li>参考手册和用户指南</li>
<li>软件支持手册</li>
<li>产品手册和信息广告</li>
</ul>
<h3 id="管理文档-其他">管理文档（其他）</h3>
<ul>
<li>开发过程中每个阶段的进度和进度变化的记录</li>
<li>软件变更情况的记录</li>
<li>相对于开发的判定记录</li>
<li>职责定义</li>
</ul>
<h2 id="5-7-软件质量保证-☆">5.7 软件质量保证（☆）</h2>
<blockquote>
<p>外部和内部质量</p>
<p><strong>主要考察某种特征属于哪种软件质量保证类型</strong></p>
</blockquote>
<h3 id="功能性">功能性</h3>
<ul>
<li>适合性</li>
<li>准确性</li>
<li>互操作性</li>
<li>安全保密性</li>
<li>功能性的依从性</li>
</ul>
<h3 id="可靠性">可靠性</h3>
<ul>
<li>成熟性</li>
<li>容错性</li>
<li>易恢复性</li>
<li>可靠性的依从性</li>
</ul>
<h3 id="易用性">易用性</h3>
<ul>
<li>易理解性</li>
<li>易学性</li>
<li>易操作性</li>
<li>吸引性</li>
<li>易用性的依从性</li>
</ul>
<h3 id="效率">效率</h3>
<ul>
<li>时间特征</li>
<li>资源利用性</li>
<li>效率依从性</li>
</ul>
<h3 id="维护性">维护性</h3>
<ul>
<li>易分析性</li>
<li>易改变性</li>
<li>稳定性</li>
<li>易测试性</li>
<li>维护性的依从性</li>
</ul>
<h3 id="可移植性">可移植性</h3>
<ul>
<li>适应性</li>
<li>易安装性</li>
<li>共存性</li>
<li>易替换性</li>
<li>可移植性的依从性</li>
</ul>
<h2 id="5-8-软件过程改进-☆☆">5.8 软件过程改进（☆☆）</h2>
<blockquote>
<p>CMMI：软件成熟度模型，可以衡量一个企业达到哪一种资质</p>
<p><strong>主要考察某特征属于哪一个级别</strong></p>
</blockquote>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230427170606778.png" alt=""></p>
<ul>
<li>初始级：初创型公司，一个牛人支撑一个项目，乃至一家公司（混乱）</li>
<li>可管理级：对相同和相似的项目进行管控</li>
<li>已定义级：标准化、文档化</li>
<li>定量管理级：对软件的过程和质量可以进行度量</li>
<li>优化管理级：不断地持续优化改进</li>
</ul>
<h2 id="5-9-项目管理基础">5.9 项目管理基础</h2>
<h3 id="十大知识领域">十大知识领域</h3>
<ul>
<li>范围管理</li>
<li>时间管理</li>
<li>成本管理</li>
<li>质量管理</li>
<li>人力资源管理</li>
<li>沟通管理</li>
<li>风险管理（☆☆☆）</li>
<li>采购管理</li>
<li>整体管理</li>
<li>项目干系人管理</li>
</ul>
<h3 id="gant-图-甘特图-☆☆☆☆">Gant 图（甘特图）（☆☆☆☆）</h3>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230427172142137.png" alt=""></p>
<h3 id="pert-图-☆☆☆☆">Pert 图（☆☆☆☆）</h3>
<blockquote>
<p>项目进度管理，找出关键路径，进行活动排序</p>
</blockquote>
<ul>
<li>前导图法（单代号网络图，PDM）</li>
<li>箭线图法（双代号网络图，ADM）</li>
</ul>
<p>节点（活动）组成部分：</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/d068558f64c9.png" alt=""></p>
<p><strong>工作总时差 TF = LS - ES = LF - EF</strong></p>
<p><strong>工作自由时差 FF = ES(b) - EF(a)</strong></p>
<h2 id="5-10-项目管理">5.10 项目管理</h2>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230427175246077.png" alt=""></p>
<p>风险曝光度（Risk Exposure）：计算方法是：风险出现的概率 × 风险可能造成的损失。</p>
<p>示例：正在开发的软件项目可能存在一个未被发现的错误，而这个错误出现的概率是 0.5%，给公司造成的损失将是 1000000 元，那么这个错误的风险曝光度就应为：1000000 × 0.5% = 5000元。</p>
<h1>六、面向对象技术（12）</h1>
<blockquote>
<p>选择（12）+简答（2道大题：面向对象的基本概念 + 设计模式）</p>
</blockquote>
<h2 id="6-1-面向对象的基本概念-☆☆☆☆☆">6.1 面向对象的基本概念（☆☆☆☆☆）</h2>
<ul>
<li>对象：<strong>属性</strong>（数据）+ <strong>方法</strong>（操作）+ 对象 ID</li>
<li>类（实体类/控制类/边界类）</li>
<li>继承与泛化：<strong>复用</strong>机制（让子类拥有父类的属性）</li>
<li>封装：隐藏对象的属性和实现细节，仅对外公开接口</li>
<li>多态：不同对象收到<strong>同样的消息</strong>产生不同的结果</li>
<li>接口：一种特殊的类，只有方法定义而没有实现</li>
<li>重载：一个类可以有多个<strong>同名而参数类型不同的方法</strong></li>
<li>重写：子类对继承自父类的方法进行重构</li>
<li>模板类</li>
<li>消息和消息通信：消息是异步通信的</li>
</ul>
<h3 id="6-1-1-速记">6.1.1 速记</h3>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>多态</mtext><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>通用多态</mtext><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>参数多态：最纯的多态</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>包含多态：子类型化，即一个类型是另一个类型的子类型</mtext></mstyle></mtd></mtr></mtable></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>特定多态</mtext><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>过载多态：同一个名字在不同上下文中所代表的含义不同</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>强制多态：</mtext></mstyle></mtd></mtr></mtable></mrow></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">多态
\begin{cases}
 通用多态
 \begin{cases}
  参数多态：最纯的多态 \\
  包含多态：子类型化，即一个类型是另一个类型的子类型
 \end{cases}\\
 特定多态
 \begin{cases}
  过载多态：同一个名字在不同上下文中所代表的含义不同 \\
  强制多态：
 \end{cases}\\
\end{cases}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:6.0000599999999995em;vertical-align:-2.7500299999999998em;"></span><span class="mord cjk_fallback">多</span><span class="mord cjk_fallback">态</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2500200000000006em;"><span style="top:-1.2999899999999998em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-1.2949899999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.58999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.8849900000000002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.17999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.2049900000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.1500100000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.29501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.59001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.885010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.180010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.205010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.50002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2500299999999998em;"><span style="top:-5.25003em;"><span class="pstrut" style="height:3.75em;"></span><span class="mord"><span class="mord cjk_fallback">通</span><span class="mord cjk_fallback">用</span><span class="mord cjk_fallback">多</span><span class="mord cjk_fallback">态</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">参</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">多</span><span class="mord cjk_fallback">态</span><span class="mord cjk_fallback">：</span><span class="mord cjk_fallback">最</span><span class="mord cjk_fallback">纯</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">多</span><span class="mord cjk_fallback">态</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">包</span><span class="mord cjk_fallback">含</span><span class="mord cjk_fallback">多</span><span class="mord cjk_fallback">态</span><span class="mord cjk_fallback">：</span><span class="mord cjk_fallback">子</span><span class="mord cjk_fallback">类</span><span class="mord cjk_fallback">型</span><span class="mord cjk_fallback">化</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">即</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">类</span><span class="mord cjk_fallback">型</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">另</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">类</span><span class="mord cjk_fallback">型</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">子</span><span class="mord cjk_fallback">类</span><span class="mord cjk_fallback">型</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.75em;"></span><span class="mord"><span class="mord cjk_fallback">特</span><span class="mord cjk_fallback">定</span><span class="mord cjk_fallback">多</span><span class="mord cjk_fallback">态</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">过</span><span class="mord cjk_fallback">载</span><span class="mord cjk_fallback">多</span><span class="mord cjk_fallback">态</span><span class="mord cjk_fallback">：</span><span class="mord cjk_fallback">同</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">名</span><span class="mord cjk_fallback">字</span><span class="mord cjk_fallback">在</span><span class="mord cjk_fallback">不</span><span class="mord cjk_fallback">同</span><span class="mord cjk_fallback">上</span><span class="mord cjk_fallback">下</span><span class="mord cjk_fallback">文</span><span class="mord cjk_fallback">中</span><span class="mord cjk_fallback">所</span><span class="mord cjk_fallback">代</span><span class="mord cjk_fallback">表</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">含</span><span class="mord cjk_fallback">义</span><span class="mord cjk_fallback">不</span><span class="mord cjk_fallback">同</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">强</span><span class="mord cjk_fallback">制</span><span class="mord cjk_fallback">多</span><span class="mord cjk_fallback">态</span><span class="mord cjk_fallback">：</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7500299999999998em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<h3 id="6-1-2-面向对象设计的-7-大原则">6.1.2 面向对象设计的 7 大原则</h3>
<ul>
<li>单一职责原则：设计目的单一的类</li>
<li>开放-封闭原则：对扩展开放，对修改封闭</li>
<li>李氏（Liskov）替换原则：子类可以替换父类</li>
<li>依赖倒置原则：要依赖于抽象，而不是具体实现；针对接口编程，不要针对实现编程</li>
<li>接口隔离原则：使用多个专门的接口比使用单一的总接口要好</li>
<li>组合重用原则：<u>要尽量使用组合，而不是继承关系达到重用目的</u>（例如一个变化的行为，继承是通过继承后重写的方式实现，而组合是通过创建不同的行为实例实现）</li>
<li>迪米特（Demeter）原则（最少知识法则）：一个对象应当对其他对象尽可能少的了解</li>
</ul>
<h2 id="6-2-uml-通用建模语言">6.2 UML（通用建模语言）</h2>
<blockquote>
<p>区分哪些图属于结构图，哪些图属于行为图</p>
<p>UML活动图用于建模系统内从一个活动到另一个活动的流程</p>
</blockquote>
<table border="1">
	<tr>
		<th style="text-align:center" colspan="4">面向对象</th>
	</tr>
	<tr>
		<td rowspan="4" style="vertical-align: middle;">Booch</td>
		<td rowspan="14" style="vertical-align: middle;">UML2.0</td>
		<td rowspan="7" style="vertical-align: middle;">结构图</td>
		<td>类图：反映类之间的关系</td>
	</tr>
	<tr>
		<td>对象图</td>
	</tr>
	<tr>
		<td>包图*</td>
	</tr>
	<tr>
		<td>组合结构图*（2.0 新加）</td>
	</tr>
	<tr>
		<td rowspan="5" style="vertical-align: middle;">OOSE</td>
		<td>构件图</td>
	</tr>
	<tr>
		<td>部署图：软硬件之间的映射</td>
	</tr>
	<tr>
		<td>制品图*</td>
	</tr>
	<tr>
		<td rowspan="7" style="vertical-align: middle;">行为图</td>
		<td>用例图：系统与外部参与者的交互</td>
	</tr>
	<tr>
		<td>顺序图：强调按时间顺序</td>
	</tr>
	<tr>
		<td rowspan="5" style="vertical-align: middle;">OMT</td>
		<td>通信图（协作图）</td>
	</tr>
	<tr>
		<td>定时图*（2.0 新加）</td>
	</tr>
	<tr>
		<td>状态图</td>
	</tr>
	<tr>
		<td>活动图：类似程序流程图，并行行为</td>
	</tr>
	<tr>
		<td>交互概览图*</td>
	</tr>
    <tr>
		<td>Jackson</td>
        <td colspan="3">面向数据结构的开发方法</td>
    </tr>
    <tr>
		<td>结构化方法</td>
        <td colspan="3">面向数据流的开发方法</td>
    </tr>
</table>
<h3 id="用例图-☆☆☆☆☆-大题">用例图（☆☆☆☆☆）（大题）</h3>
<h3 id="类图-☆☆☆☆☆-选择-大题-速记">类图（☆☆☆☆☆）（选择+大题）【速记】</h3>
<blockquote>
<p>关联关系 = 聚合关系 + 组合关系</p>
<p>所以总体上是五种关系的类图</p>
</blockquote>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230428152227700.png" alt=""></p>
<ul>
<li>关联关系：描述了一组链，链是对象之间的连接
<ul>
<li>聚合关系：整体与部分生命周期<strong>不同</strong>（部分离开整体后还能单独存活）</li>
<li>组合关系：整体与部分生命周期<strong>相同</strong>（部分离开整体化不能单独存活）</li>
</ul>
</li>
<li>依赖关系：一个事物发生变化影响另一个事物</li>
<li>泛化关系：特殊/一般关系（继承关系）</li>
<li>实现关系：接口与类之间的关系</li>
</ul>
<h3 id="顺序图-☆☆☆☆">顺序图（☆☆☆☆）</h3>
<h3 id="通信图-☆☆☆">通信图（☆☆☆）</h3>
<h3 id="状态图-☆☆☆">状态图（☆☆☆）</h3>
<h3 id="活动图-☆☆☆">活动图（☆☆☆）</h3>
<h2 id="6-3-设计模式-☆☆☆☆☆-选择x4">6.3 设计模式（☆☆☆☆☆）（选择x4）</h2>
<blockquote>
<p>主要考察某种模式属于哪一类型的模式</p>
</blockquote>
<table border="1">
	<tr>
		<th style="text-align:center" colspan="4">设计模式（5+7+11=23）</th>
	</tr>
    <tr>
		<th style="text-align:center">设计模式分类</th>
		<th style="text-align:center">设计模式名称</th>
		<th style="text-align:center">简要说明</th>
		<th style="text-align:center">速记关键字</th>
	</tr>
	<tr>
		<td rowspan="5" style="vertical-align: middle;">创建型模型<br>【5】</td>
		<td style="vertical-align: middle;">Factory Method<br>工厂方法模式</td>
		<td style="vertical-align: middle;">定义一个创建对象的接口，但由子类决定需要实例化哪一个类，<br>工厂方法使得子类实例化的过程推迟</td>
		<td style="vertical-align: middle;">动态生产对象</td>
	</tr>
	<tr>
		<td style="vertical-align: middle;">Abstract Factroy<br>抽象工厂模式</td>
		<td style="vertical-align: middle;">提供一个接口，可以创建一系列相关或相互依赖的对象，而无需<br>指定它们具体的类</td>
		<td style="vertical-align: middle;">生产成系列对象</td>
	</tr>
	<tr>
		<td style="vertical-align: middle;">Prototype<br>原型模式</td>
		<td style="vertical-align: middle;">用原型实例指定创建对象的类型，并且通过拷贝这个原型来创建<br>新的对象</td>
		<td style="vertical-align: middle;">克隆对象</td>
	</tr>
	<tr>
		<td style="vertical-align: middle;">Singleton<br>单例模式</td>
		<td style="vertical-align: middle;">保证一个类只有一个实例，并提供一个访问它的全局访问点</td>
		<td style="vertical-align: middle;">单实例</td>
	</tr>
	<tr>
		<td style="vertical-align: middle;">Builder<br>构建器模式</td>
		<td style="vertical-align: middle;">将一个复杂类的表示与其构造相分离，使得相同的构建过程能够<br>得出不同的表示</td>
		<td style="vertical-align: middle;">复杂对象构造</td>
	</tr>
	<tr>
		<td rowspan="7" style="vertical-align: middle;">结构型模式<br>【7】</td>
		<td style="vertical-align: middle;">Adapter<br>适配器模式</td>
		<td style="vertical-align: middle;">将一个类的接口转换成用户希望得到的另一种接口，它使原本不<br>相容的接口得以协同工作</td>
		<td style="vertical-align: middle;"><b>转换</b>接口</td>
	</tr>
	<tr>
		<td style="vertical-align: middle;">Bridge<br>桥接模式</td>
		<td style="vertical-align: middle;">将类的抽象部分和它的实现部分分离开来，使它们可以独立地<br>变化</td>
		<td style="vertical-align: middle;">继承树拆分</td>
	</tr>
	<tr>
		<td style="vertical-align: middle;">Composite<br>组合模式</td>
		<td style="vertical-align: middle;">将对象组合成树型结构以表示“整体-部分”的层次结构，使得用<br>户对单个对象和组合对象的使用具有一致性</td>
		<td style="vertical-align: middle;">树形目录结构</td>
	</tr>
	<tr>
		<td style="vertical-align: middle;">Decorator<br>装饰模式</td>
		<td style="vertical-align: middle;">动态地给一个对象添加一些额外的职责。它提供了用子类扩展功<br>能的一个灵活的替代，比派生一个子类更加灵活</td>
        <td style="vertical-align: middle;"><b>附加职责</b></td>
	</tr>
	<tr>
		<td style="vertical-align: middle;">Facade<br>外观模式</td>
		<td style="vertical-align: middle;">定义一个高层接口，为子系统中的一组接口提供一个一致的外观<br>，从而简化了该子系统的使用</td>
		<td style="vertical-align: middle;">对外统一接口</td>
	</tr>
	<tr>
		<td style="vertical-align: middle;">Flyweight<br>享元模式</td>
        <td style="vertical-align: middle;">提供支持大量细粒度对象共享的有效方法</td>
        <td style="vertical-align: middle;">文章共享文字对象</td>
	</tr>
	<tr>
		<td style="vertical-align: middle;">Proxy<br>代理模式</td>
        <td style="vertical-align: middle;">为其他对象提供一种代理以控制这个对象的访问</td>
        <td></td>
	</tr>
	<tr>
		<td rowspan="11" style="vertical-align: middle;">行为型模式<br>【11】</td>
		<td style="vertical-align: middle;">Chain of <br>Responsibility<br>职责链模式</td>
		<td style="vertical-align: middle;">通过给多个对象处理请求的机会，减少请求的发送者与接收者之<br>间的耦合，将接受对象链接起来，在链中传递请求，直到有一个<br>对象处理这个请求</td>
        <td style="vertical-align: middle;"><b>传递职责</b></td>
	</tr>
	<tr>
		<td style="vertical-align: middle;">Command<br>命令模式</td>
		<td style="vertical-align: middle;">将一个请求封装为一个对象，从而可用不同的请求对客户进行<br>参数化，将请求排队或记录请求日志，支持可撤销的操作</td>
        <td style="vertical-align: middle;">日志记录，可<b>撤销</b></td>
	</tr>
	<tr>
		<td style="vertical-align: middle;">Interpreter<br>解释器模式</td>
		<td style="vertical-align: middle;">给定一种语言，定义它的文法表示，并定义一个解释器该解释器<br>用来根据文法表示来解释语言中的句子</td>
		<td style="vertical-align: middle;">虚拟机的机制</td>
	</tr>
	<tr>
		<td style="vertical-align: middle;">Iterator<br>迭代器模式</td>
		<td style="vertical-align: middle;">提供一种方法来顺序访问一个聚合对象中的各个元素，而不需要<br>暴露该对象的内部表示</td>
		<td style="vertical-align: middle;">数据库数据集</td>
	</tr>
	<tr>
		<td style="vertical-align: middle;">Mediator<br>中介者模式</td>
		<td style="vertical-align: middle;">用一个中介对象来封装一系列的对象交互，它使各对象不需要显<br>式地相互调用，从而达到低耦合，还可以独立地改变对象间的交<br>互</td>
		<td style="vertical-align: middle;">不直接引用</td>
	</tr>
	<tr>
		<td style="vertical-align: middle;">Memento<br>备忘录模式</td>
        <td style="vertical-align: middle;">在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象<br>之外保存这个状态，从而可以在以后将该对象恢复到原先保存的<br>状态</td>
        <td></td>
	</tr>
	<tr>
		<td style="vertical-align: middle;">Observer<br>观察者模式</td>
        <td style="vertical-align: middle;">定义对象间的一种一对多的依赖关系，当一个对象的状态发生改<br>变时，所有依赖于它的对象都得到通知并自动更新</td>
        <td style="vertical-align: middle;">联动</td>
	</tr>
    <tr>
        <td style="vertical-align: middle;">State<br>状态模式</td>
        <td style="vertical-align: middle;">允许一个对象在其内部状态改变时改变它的行为</td>
        <td style="vertical-align: middle;">状态变成类</td>
    </tr>
    <tr>
        <td style="vertical-align: middle;">Strategy<br>策略模式</td>
        <td style="vertical-align: middle;">定义一系列算法，把它们一个个封装起来，并且使他们之间可相<br>互替换，从而让算法可以独立于使用它的用户而变化</td>
        <td style="vertical-align: middle;">多方案切换</td>
    </tr>
    <tr>
        <td style="vertical-align: middle;">Template <br>Method<br>模板方法模式</td>
        <td style="vertical-align: middle;">定义一个操作中的算法骨架，从而将一些步骤延迟到子类中，使<br>得子类可以不改变一个算法的结构即可重新定义算法的某些特定<br>步骤</td>
        <td></td>
    </tr>
    <tr>
        <td style="vertical-align: middle;">Visitor<br>访问者模式</td>
        <td style="vertical-align: middle;">表示一个作用于某对象结构中的各元素的操作，使得在不改变各<br>元素的类的前提下定义作用于这些元素的新操作</td>
        <td></td>
    </tr>
</table>
<h3 id="6-3-1-创建型模型-5">6.3.1 创建型模型【5】</h3>
<h4 id="工厂模式-factory-method">工厂模式（Factory Method）</h4>
<p>定义一个创建对象的接口，但<strong>由子类决定需要实例化哪一个类</strong>。工厂方法使得子类实例化的过程推迟。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/FactoryMethod.png" alt=""></p>
<ul>
<li>Product：产品角色定义产品的接口。</li>
<li>ConcreteProduct：真实的产品，实现接口 Product 的类。</li>
<li>Creator：工厂角色声明工厂方法（Factory Method），返回一个产品。</li>
<li>ConcreteCreator：真实的工厂实现 Factory Method 工厂方法，由客户调用，返回一个产品的实例。</li>
</ul>
<h4 id="抽象工厂模式-abstruct-factory">抽象工厂模式（Abstruct Factory）</h4>
<p>提供一个接口，可以<strong>创建一系列相关或相互依赖的对象</strong>，而无需指定它们具体的类。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/AbstructFactory.png" alt=""></p>
<ul>
<li>AbstructFactory：抽象工厂，声明抽象产品的方法。</li>
<li>ConcreteFactory：具体工厂，执行生成抽象产品的方法，生成一个具体的产品。</li>
<li>AbstructProduct：抽象产品，为一种产品声明接口。</li>
<li>Product：具体产品，定义具体工厂生成的具体产品的对象，实现产品接口。</li>
<li>Client：客户，我们的应用程序使用抽象产品和抽象工厂生成对象。</li>
</ul>
<h4 id="原型模式-prototype">原型模式（Prototype）</h4>
<p>用原型实例指定创建对象的类型，并且<strong>通过拷贝这个原型来创建新的对象</strong>。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/Prototype.png" alt=""></p>
<ul>
<li>Prototype：抽象原型类，定义具有克隆自己的方法的接口。</li>
<li>ConcretePrototype：具体原型类实现具体的克隆方法。</li>
<li>Client：客户。</li>
</ul>
<h4 id="单例模式-singleton">单例模式（Singleton）</h4>
<p><strong>保证一个类只有一个实例</strong>，并提供一个访问它的全局访问点。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/Singleton.png" alt=""></p>
<ul>
<li>Singleton：单例，提供一个 instance 的方法，让客户可以使用它的唯一实例。内部实现只生成一个实例。</li>
</ul>
<h4 id="构建器模式-builder">构建器模式（Builder）</h4>
<p>将一个复杂类的表示与其构造相分离，使得相同的构建过程能够得出不同的表示。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/Builder.png" alt=""></p>
<ul>
<li>Builder：抽象建造者，为创建一个 Product 对象各个部件指定抽象接口，把产品的生产过程分解为不同的步骤，从而使具体建造者在具体的建造步骤上具有更多弹性，从而创造出不同表示的产品。</li>
<li>ConcreteBuilder：具体建造者，实现 Builder 接口，构造和装配产品的各个部件定义并明确它所创建的表示，提供一个返回这个产品的接口。</li>
<li>Director：指挥者，构建一个是使用 Builder 接口的对象。</li>
<li>Product：产品角色，被构建的复杂对象，具体产品建造者，创建该产品的内部表示并定义它的装配过程。</li>
</ul>
<h3 id="6-3-2-结构型模式-7">6.3.2 结构型模式【7】</h3>
<h4 id="适配器模式-adapter">适配器模式（Adapter）</h4>
<p><strong>将一个类的接口转换成用户希望得到的另一个接口</strong>。它使原本不相容的接口得以协同工作。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/Adapter.png" alt=""></p>
<ul>
<li>Client：客户端，是包含当前程序业务逻辑的类。</li>
<li>Client Interface：客户端接口，描述了其他类与客户端代码合作时必须遵守的协议。</li>
<li>Service：服务，有一些功能类（通常来自第三方或遗留系统）。客户端（Client）与其接口不兼容，因此无法直接调用其功能。</li>
<li>Adapter：适配器，一个可以同时与客户端和服务交互的类：它在实现客户端接口的同时封装了服务对象。<strong>适配器接受客户端通过适配器接口发起的调用，并将其转换为适用于被封装服务对象的调用</strong>。</li>
</ul>
<h4 id="桥接模式-bridge">桥接模式（Bridge）</h4>
<p><strong>将抽象部分与它的实现部分分离</strong>，使它们都可以独立地变化。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/Bridge.png" alt=""></p>
<ul>
<li>Abstraction：抽象类定义抽象类的接口。维护一个 Implementation（实现抽象类）的对象。</li>
<li>Refined Abstraction：扩充的抽象类，扩充由 Abstraction 定义的接口。</li>
<li>Implementation：实现类接口，用于定义实现类，这个接口不一定要与 Abstraction 的接口完全一致，事实上这两个接口可以完全不同，一般的讲 Implementation 接口仅仅给出基本操作，而 Abstraction 接口则会给出很多更复杂的操作。</li>
<li>Concrete Implementations：具体实现类，实现 Implementor 定义的接口并且具体实现它。</li>
</ul>
<h4 id="组合模式-composite">组合模式（Composite）</h4>
<p>将对象组合成树型结构以表示“整体-部分”的层次结构，使得用户对单个对象和组合对象的使用具有一致性。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/Composite.png" alt=""></p>
<ul>
<li>Client：客户应虎程序，通过 Component 接口控制组合部件的对象。</li>
<li>Leaf：叶部件，在组合中表示叶节点对象，叶节点没有子节点。定义组合中原有接口的行为。</li>
<li>Composite：组合类，定义有子节点（子部件）的部件的行为。在 Component 接口中实现与子部件相关的操作。</li>
</ul>
<h4 id="装饰模式-decorator">装饰模式（Decorator）</h4>
<p><strong>动态地给一个对象添加一些额外的职责</strong>。它提供了用子类扩展功能的一个灵活的替代，比派生一个子类更加灵活。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/Decorator.png" alt=""></p>
<ul>
<li>Component：部件，定义对象的接口，可以给这些对象动态的增加职责（方法）。</li>
<li>Concrete Component：具体部件，定义具体的对象，Decorator 可以给他增加额外的职责（方法）。</li>
<li>Base Decorator：装饰抽象类，维护一个内有的 Component，并且定义一个与 Component 接口一致的接口。</li>
<li>Concrete Decorator：具体装饰对象，给内在的具体部件对象增加具体的职责（方法）。</li>
</ul>
<h4 id="外观模式-facade">外观模式（Facade）</h4>
<p><strong>定义一个高层接口，为子系统中的一组接口提供一个一致的外观</strong>，从而简化了该子系统的使用。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/Facade.png" alt=""></p>
<ul>
<li>Facade：外形类，知道哪些子系统负责处理哪些请求，将客户的请求传递给相应的子系统对象处理。</li>
<li>Additional Facade：附加外观类，可以避免多种不相关的功能污染单一外观，使其变成又一个复杂结构。客户端和其他外观都可以使用附加外观。</li>
<li>Subsystem class：子系统类，实现子系统的功能，处理由 Facade 传过来的任务。子系统不用知道 Facade，在任何地方也没有引用 Facade。</li>
</ul>
<h4 id="享元模式-flyweight">享元模式（Flyweight）</h4>
<p>提供支持大量细粒度对象共享的有效方法。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/Flyweight.png" alt=""></p>
<ul>
<li>FlyweightFactory：轻量级类工厂，创建并且管理 flyweight 对象确保享用 flyweight。</li>
<li>Flyweight：抽象轻量级类，声明一个接口，通过它可以接收外来的状态并作出处理。</li>
<li>ConcreteFlyweight：具体轻量级类，实现 Flyweight 接口。</li>
<li>UnsharedConcreteFlyweight：不共享的具体轻量级类，UnsharedFlyweight 对象常常将 ConcreteFlyweight 对象作为子节点。</li>
<li>Client：客户应用程序。</li>
</ul>
<h4 id="代理模式-proxy">代理模式（Proxy）</h4>
<p>为其他对象提供一种代理以控制这个对象的访问。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/Proxy.png" alt=""></p>
<ul>
<li>Subject：抽象实体接口，为 RealSubject 实体和 Proxy 代理定义相同的接口，使得 RealSubject 在任何地方都可以使用 Proxy 来访问。</li>
<li>RealSubject：真实对象，定义 Proxy 代理的实体。</li>
<li>Proxy：代理维护一个引用，使得代理可以访问实体，如果 RealSubject 和 Subject 的接口相同，则 Proxy 会引用 Subject。其他功能取决于 Proxy 的类型。
<ul>
<li>远程代理：负责对请求及其参数编码，向不同地址空间中的实体发送已编码的请求。</li>
<li>虚拟代理：可以缓存实体的其他信息，以便延迟对它的访问。</li>
<li>保护代理：检查调用者的请求是不是有所需的权限。</li>
</ul>
</li>
</ul>
<h3 id="6-3-3-行为模式-11">6.3.3 行为模式【11】</h3>
<h4 id="职责链模式-chain-of-responsibility">职责链模式（Chain of Responsibility）</h4>
<p>为解除请求的发送者和接收者之间的耦合，而使多个对象都有机会处理这个请求。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/ChainOfResponsibility.png" alt=""></p>
<ul>
<li>Handler：传递者接口，定义一个处理请求的接口。</li>
<li>ConcreteHandle：具体传递者，处理它所负责的请求。可以访问链中下一个对象，如果可以处理请求，就处理它，否则将请求转发给后继者。</li>
<li>Client：客户应用程序，向链中的对象提出最初的请求。</li>
</ul>
<h4 id="命令模式-command">命令模式（Command）</h4>
<p><strong>将一个请求封装为一个对象，从而可用不同的请求对客户进行参数化</strong>，将请求排队或记录请求日志，支持可<strong>撤销</strong>的操作。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/Command.png" alt=""></p>
<ul>
<li>Command：抽象命令类，盛名之下操作的一个接口。</li>
<li>ConcreteCommand：具体命令类，将一个接收者对象绑定于一个动作。实现 execute() 方法，以调用接收者的相关操作（Action）。</li>
<li>Invoke：调用者，要求一个命令对象执行一个请求。</li>
<li>Receiver：接收者，知道如何执行关联请求的相关操作。</li>
<li>Client：客户应用程序，创建一个具体命令类对象，并且设定它的接收者。</li>
</ul>
<h4 id="解释器模式-interpreter">解释器模式（Interpreter）</h4>
<p><strong>给定一种语言，定义它的文法表示，并定义一个解释器</strong>，该解释器用来根据文法表示来解释语言中的句子。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/Interpreter.png" alt=""></p>
<ul>
<li>Client：客户程序，建造（或被给定）有这种语言表示的句子的抽象文法树，文法树有终结或非终结表达式的实例组成。</li>
<li>Context：场景，包含解释器的所有全局信息。</li>
<li>AbstractExpression：抽象表达式类，定义一个接口来执行解释操作，实现与文法中的元素相关联的解释操作。</li>
<li>TerminalExpression：终结符表达式，实现文法中关联终结符的解释操作。文句中的每个终结符都需要一个实例。</li>
<li>NonterminalExpression：非终结符表达式。</li>
</ul>
<h4 id="迭代器模式-iterator">迭代器模式（Iterator）</h4>
<p>提供一种方法顺序访问一个聚合对象中各个元素，而又不需要暴露该对象的内部表示。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/Iterator.png" alt=""></p>
<ul>
<li>Aggregate：聚合，定义一个创建迭代器对象的接口。</li>
<li>ConcreateAggregate：具体聚合，实现创建迭代器对象，返回一个具体迭代器的实例。</li>
<li>Iterator：迭代器，迭代器定义访问和遍历元素的接口。</li>
<li>ConcreateIterator：具体迭代器，实现迭代器的接口，在遍历时跟踪当前聚合对象中的位置。</li>
</ul>
<h4 id="中介者模式-mediator">中介者模式（Mediator）</h4>
<p>用一个中介对象来封装一系列的对象交互。<strong>它使各对象不需要显式地相互调用，从而达到低耦合</strong>，还可以独立地改变对象间的交互。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/Mediator.png" alt=""></p>
<ul>
<li>Mediator：抽象中介者角色定义统一的接口用于各同事角色之间的通信。</li>
<li>ConcreteMediator：具体中介者，协调各个同事对象之间实现协作的行为，掌握并且维护它的各个同事对象引用。</li>
<li>Colleage：同时类，每一个同事角色都知道对应的具体中介者角色，而且与其他的同事角色通信的时候，一定要通过中介者角色协作。</li>
</ul>
<h4 id="备忘录模式-memento">备忘录模式（Memento）</h4>
<p>在不破坏封装性的前提下，捕获一个对象的内部状态，并在对象之外保存这个状态，从而可以在以后将该对象恢复到原先保存的状态。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/Memento.png" alt=""></p>
<ul>
<li>Originator：原发器，通常是需要备忘的对象自己，创建一个备忘录，记录它的当前内部状态。可以利用一个备忘录来恢复它的内部状态。</li>
<li>Memento：备忘录对象，保持 Originator（原发器）的内部状态，根据原发器来决定保存哪些内部的状态。保存原发器之外的对象访问备忘录。备忘录可以有效地利用两个接口。看管者只能调用狭窄（功能有限）的接口 —— 它只能传递备忘录对象给其他对象。而原发器能调用一个宽接口（功能强大的接口），通过这个接口可以访问所有需要的数据，使原发器可以返回原先的状态。理想的情况是，只允许生成本备忘录那个原发器访问本备忘录的状态。</li>
<li>CareTaker：备忘录管理者，只负责看管备忘录，不可以对备忘录的内容操作或者检查。</li>
</ul>
<h4 id="观察者模式-observer">观察者模式（Observer）</h4>
<p>定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/Observer.png" alt=""></p>
<ul>
<li>Subject：被观察对象，了解其多个观察者，任意数量的观察者可以观察一个对象，提供一个接口用来绑定以及分离观察者对象。</li>
<li>ConcreteSubject：具体被观察对象，存储具体观察者，ConcreteObserver 有兴趣的状态。当其状态改变时，发送一个通知给其所有的观察者对象。</li>
<li>Observer：观察者，定义一个更新接口，在一个被观察对象改变时应被通知。</li>
<li>ConcreteObserver：具体观察者，维护一个对 ConcreteSubject 对象的引用。</li>
</ul>
<h4 id="状态模式-state">状态模式（State）</h4>
<p>允许一个对象在其内部状态改变时改变它的行为。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/State.png" alt=""></p>
<ul>
<li>Context：情景类，定义客户应用程序有兴趣的接口，维护一个 ConcreteState（具体状态）子类的实例对象。</li>
<li>State：抽象状态类，定义一个接口用来封装与 Context 的一个特别状态（State）相关的行为。</li>
<li>ConcreteState：具体状态类，每一个具体状态类（ConcreteState）实现了一个 Context 的状态（State）相关的行为。</li>
</ul>
<h4 id="策略模式-strategy">策略模式（Strategy）</h4>
<p>定义一系列算法，把它们一个个封装起来，并且使它们之间可相互替换，从而让算法可以独立于使用它的用户而变化。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/Strategy.png" alt=""></p>
<ul>
<li>Strategy：抽象策略类，定义一个接口给所有支持的算法，Context 使用这个接口调用 ConcreteStrategy 定义的算法。</li>
<li>ConcreteStrategy：具体策略类，用 ConcreteStrategy 对象配置其执行环境。</li>
</ul>
<h4 id="模板方法模式-template-method">模板方法模式（Template Method）</h4>
<p>定义一个操作中的算法骨架，而将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构即可重新定义算法的某些特定步骤。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/TemplateMethod.png" alt="image-20230430171300344"></p>
<ul>
<li>AbstractClass：抽象类，定义一个抽象原始的操作，其子类可以重新定义它实现一个算法的各个步骤。实现一个模板方法定义一个算法的骨架，此模板方法不仅可以调用原始的操作，还可以调用定义于 AbstractClass 中的方法或者其他对象中的方法。</li>
<li>ConcreteClass：具体子类，实现原始的操作以完成子类特定算法的步骤。</li>
</ul>
<h4 id="访问者模式-visitor">访问者模式（Visitor）</h4>
<p>表示一个作用于某对象结构中的各元素的操作，使得在不改变各元素的类的前提下定义作用于这些元素的新操作。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/Visitor.png" alt=""></p>
<ul>
<li>Visitor：抽象访问者，为对象结构中每一个具体元素类 ConcreteElement 声明一个访问操作，从这个操作的名称或参数类型可以清楚知道需要访问的具体元素的类型，具体访问者需要实现这些操作方法，定义对这些元素的访问操作。</li>
<li>ConcreteVisitor：具体访问者，实现了每个由抽象访问者声明的操作，每一个操作用于访问对象结构中一种类型的元素。</li>
<li>ObjectStructure：对象结构，是一个元素的集合，它用于存放元素对象，并且提供了遍历其内部元素的方法。它可以结合组合模式来实现，也可以是一个简单的集合对象，如一个 List 对象或一个 Set 对象。</li>
<li>Element：抽象元素，一般是抽象类或者接口，它定义一个 Accept() 方法，该方法通常以一个抽象访问者作为参数。</li>
<li>ConcreteElement：具体元素，实现了 Accept() 方法，在 Accept() 方法中调用访问者的访问方法以便完成对一个元素的操作。</li>
</ul>
<h3 id="6-3-4-速记">6.3.4 速记</h3>
<ul>
<li>创建型模式：工抽单原构</li>
<li>结构型模式：代适桥组装享外</li>
<li>行为型模式</li>
</ul>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>设计模式</mtext><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>创建型模式</mtext><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>工厂方法模式</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>抽象工厂模式</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>单例模式</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>原型模式</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>构建器模式</mtext></mstyle></mtd></mtr></mtable></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>结构型模式</mtext><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>代理模式</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>适配器模式</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>桥接模式</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>组合模式</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>装饰模式</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>享元模式</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>外观模式</mtext></mstyle></mtd></mtr></mtable></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>行为型模式</mtext><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>职责链模式</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>命令模式</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>解释器模式</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>迭代器模式</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>中介者模式</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>备忘录模式</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>观察者模式</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>状态模式</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>策略模式</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>模板方法模式</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>访问者模式</mtext></mstyle></mtd></mtr></mtable></mrow></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">设计模式
\begin{cases}
 创建型模式 
    \begin{cases}
     工厂方法模式 \\
     抽象工厂模式 \\
     单例模式 \\
     原型模式 \\
     构建器模式
    \end{cases}\\
 结构型模式 
    \begin{cases}
     代理模式 \\
     适配器模式 \\
     桥接模式 \\
     组合模式 \\
     装饰模式 \\
     享元模式 \\
     外观模式
    \end{cases}\\
 行为型模式
    \begin{cases}
     职责链模式 \\
     命令模式 \\
     解释器模式 \\
     迭代器模式 \\
     中介者模式 \\
     备忘录模式 \\
     观察者模式 \\
     状态模式 \\
     策略模式 \\
     模板方法模式 \\
     访问者模式
    \end{cases}
\end{cases}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:33.12004em;vertical-align:-16.310020000000005em;"></span><span class="mord cjk_fallback">设</span><span class="mord cjk_fallback">计</span><span class="mord cjk_fallback">模</span><span class="mord cjk_fallback">式</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:16.750019999999992em;"><span style="top:12.200009999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:12.20501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:11.91001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:11.61501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:11.32001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:11.02501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:10.73001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:10.43501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:10.14001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:9.84501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:9.55001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:9.25501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:8.96001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:8.66501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:8.37001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:8.07501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:7.780010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:7.485010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:7.190010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:6.895010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:6.600010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:6.305010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:6.010010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:5.715010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:5.420010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:5.125010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:4.8300100000000015em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:4.5350100000000015em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:4.240010000000002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:3.945010000000002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:3.650010000000002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:3.3550100000000023em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:3.0600100000000023em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:2.7650100000000024em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:2.4700100000000025em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:2.1750100000000026em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:1.8800100000000026em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:1.5850100000000027em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:1.2900100000000028em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:0.9950100000000028em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:0.7000100000000029em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:0.405010000000003em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:0.11001000000000305em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-0.18498999999999688em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-0.4799899999999968em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-0.7749899999999967em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.0699899999999967em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.3649899999999968em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.659989999999997em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.9549899999999971em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.204989999999997em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.1500099999999973em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.295009999999998em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.590009999999998em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.885009999999998em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.180009999999998em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.4750099999999975em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.770009999999997em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-6.065009999999997em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-6.360009999999997em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-6.655009999999997em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-6.950009999999997em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-7.245009999999997em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-7.540009999999997em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-7.835009999999997em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-8.130009999999997em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-8.425009999999997em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-8.720009999999997em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-9.015009999999997em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-9.310009999999997em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-9.605009999999996em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-9.900009999999996em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-10.195009999999996em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-10.490009999999996em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-10.785009999999996em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-11.080009999999996em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-11.375009999999996em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-11.670009999999996em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-11.965009999999996em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-12.260009999999996em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-12.555009999999996em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-12.850009999999996em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-13.145009999999996em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-13.440009999999996em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-13.735009999999996em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-14.030009999999995em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-14.325009999999995em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-14.620009999999995em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-14.915009999999995em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-15.210009999999995em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-15.505009999999995em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-15.800009999999995em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-16.095009999999995em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-16.390009999999993em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-16.685009999999995em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-16.980009999999993em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-17.275009999999995em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-17.570009999999993em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-17.865009999999995em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-18.160009999999993em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-18.455009999999994em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-18.705009999999994em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-19.000019999999992em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:16.25002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:16.81002em;"><span style="top:-23.130000000000006em;"><span class="pstrut" style="height:10.170000000000005em;"></span><span class="mord"><span class="mord cjk_fallback">创</span><span class="mord cjk_fallback">建</span><span class="mord cjk_fallback">型</span><span class="mord cjk_fallback">模</span><span class="mord cjk_fallback">式</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.85002em;"><span style="top:-0.6999900000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-0.6949900000000002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-0.9899900000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.2849900000000003em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.5799900000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.8749900000000006em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.1699900000000008em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.2049900000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.1500100000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.29501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.59001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.885010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.180010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.475010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.770010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.80501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-6.10002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.3500199999999998em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.8500000000000005em;"><span style="top:-5.850000000000001em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">工</span><span class="mord cjk_fallback">厂</span><span class="mord cjk_fallback">方</span><span class="mord cjk_fallback">法</span><span class="mord cjk_fallback">模</span><span class="mord cjk_fallback">式</span></span></span><span style="top:-4.410000000000001em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">抽</span><span class="mord cjk_fallback">象</span><span class="mord cjk_fallback">工</span><span class="mord cjk_fallback">厂</span><span class="mord cjk_fallback">模</span><span class="mord cjk_fallback">式</span></span></span><span style="top:-2.9700000000000006em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">单</span><span class="mord cjk_fallback">例</span><span class="mord cjk_fallback">模</span><span class="mord cjk_fallback">式</span></span></span><span style="top:-1.5300000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">原</span><span class="mord cjk_fallback">型</span><span class="mord cjk_fallback">模</span><span class="mord cjk_fallback">式</span></span></span><span style="top:-0.08999999999999997em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">构</span><span class="mord cjk_fallback">建</span><span class="mord cjk_fallback">器</span><span class="mord cjk_fallback">模</span><span class="mord cjk_fallback">式</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.35em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-14.489980000000008em;"><span class="pstrut" style="height:10.170000000000005em;"></span><span class="mord"><span class="mord cjk_fallback">结</span><span class="mord cjk_fallback">构</span><span class="mord cjk_fallback">型</span><span class="mord cjk_fallback">模</span><span class="mord cjk_fallback">式</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.05002em;"><span style="top:0.5000100000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:0.50501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:0.21001000000000003em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-0.0849899999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-0.37998999999999983em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-0.6749899999999998em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-0.9699899999999997em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.2649899999999998em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.55999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.8549900000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.1499900000000003em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.2049900000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.1500100000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.29501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.59001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.885010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.180010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.475010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.770010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-6.065010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-6.360010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-6.655010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-6.950010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-7.00501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-7.30002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.290000000000002em;"><span style="top:-7.290000000000003em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">代</span><span class="mord cjk_fallback">理</span><span class="mord cjk_fallback">模</span><span class="mord cjk_fallback">式</span></span></span><span style="top:-5.850000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">适</span><span class="mord cjk_fallback">配</span><span class="mord cjk_fallback">器</span><span class="mord cjk_fallback">模</span><span class="mord cjk_fallback">式</span></span></span><span style="top:-4.410000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">桥</span><span class="mord cjk_fallback">接</span><span class="mord cjk_fallback">模</span><span class="mord cjk_fallback">式</span></span></span><span style="top:-2.9700000000000015em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">组</span><span class="mord cjk_fallback">合</span><span class="mord cjk_fallback">模</span><span class="mord cjk_fallback">式</span></span></span><span style="top:-1.5300000000000011em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">装</span><span class="mord cjk_fallback">饰</span><span class="mord cjk_fallback">模</span><span class="mord cjk_fallback">式</span></span></span><span style="top:-0.08999999999999997em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">享</span><span class="mord cjk_fallback">元</span><span class="mord cjk_fallback">模</span><span class="mord cjk_fallback">式</span></span></span><span style="top:1.350000000000001em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">外</span><span class="mord cjk_fallback">观</span><span class="mord cjk_fallback">模</span><span class="mord cjk_fallback">式</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.790000000000001em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-1.529980000000002em;"><span class="pstrut" style="height:10.170000000000005em;"></span><span class="mord"><span class="mord cjk_fallback">行</span><span class="mord cjk_fallback">为</span><span class="mord cjk_fallback">型</span><span class="mord cjk_fallback">模</span><span class="mord cjk_fallback">式</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:8.050019999999998em;"><span style="top:3.5000099999999996em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:3.50501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:3.21001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:2.91501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:2.62001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:2.3250100000000002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:2.0300100000000003em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:1.7350100000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:1.4400100000000005em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:1.1450100000000005em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:0.8500100000000006em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:0.5550100000000007em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:0.26001000000000074em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-0.03498999999999919em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-0.3299899999999991em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-0.624989999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-0.919989999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.2149899999999991em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.5099899999999993em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.8049899999999994em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.0999899999999996em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.2049899999999996em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.1500099999999995em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.2950099999999996em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.5900099999999995em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.885009999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.180009999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.475009999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.770009999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-6.065009999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-6.360009999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-6.655009999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-6.950009999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-7.245009999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-7.540009999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-7.835009999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-8.130009999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-8.425009999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-8.720009999999998em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-9.015009999999998em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-9.310009999999998em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-9.605009999999998em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-9.900009999999998em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-10.005009999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-10.300019999999998em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:7.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:8.170000000000005em;"><span style="top:-10.170000000000005em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">职</span><span class="mord cjk_fallback">责</span><span class="mord cjk_fallback">链</span><span class="mord cjk_fallback">模</span><span class="mord cjk_fallback">式</span></span></span><span style="top:-8.730000000000006em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">命</span><span class="mord cjk_fallback">令</span><span class="mord cjk_fallback">模</span><span class="mord cjk_fallback">式</span></span></span><span style="top:-7.290000000000007em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">解</span><span class="mord cjk_fallback">释</span><span class="mord cjk_fallback">器</span><span class="mord cjk_fallback">模</span><span class="mord cjk_fallback">式</span></span></span><span style="top:-5.850000000000007em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">迭</span><span class="mord cjk_fallback">代</span><span class="mord cjk_fallback">器</span><span class="mord cjk_fallback">模</span><span class="mord cjk_fallback">式</span></span></span><span style="top:-4.4100000000000055em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">中</span><span class="mord cjk_fallback">介</span><span class="mord cjk_fallback">者</span><span class="mord cjk_fallback">模</span><span class="mord cjk_fallback">式</span></span></span><span style="top:-2.970000000000004em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">备</span><span class="mord cjk_fallback">忘</span><span class="mord cjk_fallback">录</span><span class="mord cjk_fallback">模</span><span class="mord cjk_fallback">式</span></span></span><span style="top:-1.530000000000003em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">观</span><span class="mord cjk_fallback">察</span><span class="mord cjk_fallback">者</span><span class="mord cjk_fallback">模</span><span class="mord cjk_fallback">式</span></span></span><span style="top:-0.09000000000000175em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">状</span><span class="mord cjk_fallback">态</span><span class="mord cjk_fallback">模</span><span class="mord cjk_fallback">式</span></span></span><span style="top:1.3499999999999992em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">策</span><span class="mord cjk_fallback">略</span><span class="mord cjk_fallback">模</span><span class="mord cjk_fallback">式</span></span></span><span style="top:2.7900000000000005em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">模</span><span class="mord cjk_fallback">板</span><span class="mord cjk_fallback">方</span><span class="mord cjk_fallback">法</span><span class="mord cjk_fallback">模</span><span class="mord cjk_fallback">式</span></span></span><span style="top:4.230000000000001em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">访</span><span class="mord cjk_fallback">问</span><span class="mord cjk_fallback">者</span><span class="mord cjk_fallback">模</span><span class="mord cjk_fallback">式</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:7.670000000000002em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:16.310020000000005em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<h1>七、数据结构与算法基础（10+1简答）</h1>
<h2 id="7-1-数组与矩阵-☆☆">7.1 数组与矩阵（☆☆）</h2>
<h3 id="7-1-1-数组">7.1.1 数组</h3>
<table>
<thead>
<tr>
<th>数组类型</th>
<th>存储地址计算</th>
</tr>
</thead>
<tbody>
<tr>
<td>一维数组a[n]</td>
<td>a[i]的存储地址为：a+i×len</td>
</tr>
<tr>
<td>二维数组a[m][n]</td>
<td>a[i][j]的存储地址（按行存储）为：a+(i×n+j)×len<br>a[i][j]的存储地址（按列存储）为：a+(j×m+i)×len</td>
</tr>
</tbody>
</table>
<p>示例：已知 5 行 5 列的二维数组 a 中的各元素占两个字节，则元素 a[2][3] 按行优先存储的存储地址为：<u>a+(2×5+3)×2 = a+26</u>。</p>
<h3 id="7-1-2-稀疏矩阵">7.1.2 稀疏矩阵</h3>
<blockquote>
<p>使用代入法，不必死记公式</p>
</blockquote>
<table>
<thead>
<tr>
<th>稀疏矩阵</th>
<th>示意图</th>
<th>要点</th>
</tr>
</thead>
<tbody>
<tr>
<td>上三角矩阵</td>
<td><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230501152429487.png" alt=""></td>
<td>在矩阵下标分别为 i 和 j 的元<br>素，对应的一维数组的下标计<br>算公式为：(2n-i+1)×i÷2+j</td>
</tr>
<tr>
<td>下三角矩阵</td>
<td><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230501152627502.png" alt=""></td>
<td>在矩阵中下标分别为 i 和 j 的元<br>素，对应的一维数组的下标计<br>算公式为：(i+1)×i÷2+j</td>
</tr>
</tbody>
</table>
<h3 id="7-1-3-速记">7.1.3 速记</h3>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>对稀疏矩阵进行压缩存储的三种方法</mtext><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>三元组顺序链表</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>十字链表</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>行逻辑连接的顺序表</mtext></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">对稀疏矩阵进行压缩存储的三种方法
\begin{cases}
 三元组顺序链表 \\
 十字链表 \\
 行逻辑连接的顺序表
\end{cases}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.32em;vertical-align:-1.9099999999999997em;"></span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">稀</span><span class="mord cjk_fallback">疏</span><span class="mord cjk_fallback">矩</span><span class="mord cjk_fallback">阵</span><span class="mord cjk_fallback">进</span><span class="mord cjk_fallback">行</span><span class="mord cjk_fallback">压</span><span class="mord cjk_fallback">缩</span><span class="mord cjk_fallback">存</span><span class="mord cjk_fallback">储</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">三</span><span class="mord cjk_fallback">种</span><span class="mord cjk_fallback">方</span><span class="mord cjk_fallback">法</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.35002em;"><span style="top:-2.19999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.19499em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.20499em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.15001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.2950099999999996em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.30501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.60002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.8500199999999998em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.41em;"><span style="top:-4.41em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">三</span><span class="mord cjk_fallback">元</span><span class="mord cjk_fallback">组</span><span class="mord cjk_fallback">顺</span><span class="mord cjk_fallback">序</span><span class="mord cjk_fallback">链</span><span class="mord cjk_fallback">表</span></span></span><span style="top:-2.97em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">十</span><span class="mord cjk_fallback">字</span><span class="mord cjk_fallback">链</span><span class="mord cjk_fallback">表</span></span></span><span style="top:-1.5300000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">行</span><span class="mord cjk_fallback">逻</span><span class="mord cjk_fallback">辑</span><span class="mord cjk_fallback">连</span><span class="mord cjk_fallback">接</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">顺</span><span class="mord cjk_fallback">序</span><span class="mord cjk_fallback">表</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.9099999999999997em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<h2 id="7-2-线性表-☆☆☆☆☆">7.2 线性表（☆☆☆☆☆）</h2>
<h3 id="顺序表">顺序表</h3>
<h3 id="链表">链表</h3>
<ul>
<li>单链表</li>
<li>循环链表</li>
<li>双向链表</li>
</ul>
<h3 id="链表的基本操作">链表的基本操作</h3>
<ul>
<li>单链表删除节点</li>
<li>单链表插入节点</li>
<li>双向链表删除节点</li>
<li>双线链表插入节点</li>
</ul>
<h3 id="顺序存储-vs-链式存储">顺序存储 VS 链式存储</h3>
<table border="1">
	<tr>
		<th style="text-align:center">性能类别</th>
		<th style="text-align:center">具体项目</th>
		<th style="text-align:center">顺序存储</th>
		<th style="text-align:center">链式存储</th>
	</tr>
	<tr>
		<td rowspan="2" style="vertical-align: middle;">空间性能</td>
		<td>存储密度</td>
		<td>=1，更优</td>
		<td>&lt;1</td>
	</tr>
	<tr>
		<td>容量分配</td>
		<td>事先确定</td>
		<td>动态改变，更优</td>
	</tr>
	<tr>
		<td rowspan="4" style="vertical-align: middle;">时间性能</td>
		<td>查找运算</td>
		<td>O(n/2)</td>
		<td>O(n/2)</td>
	</tr>
	<tr>
		<td style="vertical-align: middle;">读运算</td>
		<td style="vertical-align: middle;">O(1)，更优</td>
		<td>O([n+1]/2)，最好情况为 1，<br>最坏情况为 n</td>
	</tr>
	<tr>
		<td style="vertical-align: middle;">插入运算</td>
		<td>O(n/2)，最好情况为 0，<br>最坏情况为 n</td>
		<td style="vertical-align: middle;">O(1)，更优</td>
	</tr>
	<tr>
		<td>删除运算</td>
		<td>O([n-1]/2)</td>
		<td>O(1)，更优</td>
	</tr>
</table>
<h3 id="队列与栈">队列与栈</h3>
<ul>
<li>队列：先进先出</li>
<li>栈：先进后出</li>
</ul>
<h2 id="7-3-广义表-☆☆">7.3 广义表（☆☆）</h2>
<p>广义表是 n 个表元素组成的有限序列，是线性表的推广。通常用递归的形式进行定义，记作：LSn(a0, a1, ……, an)。</p>
<p>注：其中 LS 是表名，ai 是表元素，它可以是表（称作子表），也可以是数据元素（称为原子）。其中 n 是广义表的长度（也就是最外层包含的元素个数），n□ 0 的广义表为空表；而递归定义的重数就是广义表的深度，直观地说，就是定义中所含括号的重数（原子的深度为 0，空表的深度为 1）。</p>
<p>基本运算：取表头 head(Ls) 和取表尾 tail(Ls)。</p>
<p>示例：若有广义表 LS1 = (a, (b, c), (d, e))，head(LS1)=a，tail(LS1)=((b, c), (d, e))。</p>
<p>问1：其长度为 <u>3</u>，深度为 <u>2</u>。</p>
<p>问2：若要将其中的 b 字母取出，操作为：<u>head(head(tail(LS1)))</u>。（从尾部拿到 (b, c)，再从其头部拿到 b）</p>
<h2 id="7-4-树与二叉树-☆☆☆☆☆">7.4 树与二叉树（☆☆☆☆☆）</h2>
<ul>
<li>结点的度（度就是分叉的意思，即一个节点有几个分叉）</li>
<li>树度（整棵树有几个分叉）</li>
<li>叶子节点</li>
<li>分支节点</li>
<li>内部节点</li>
<li>父节点</li>
<li>子节点</li>
<li>兄弟节点</li>
<li>层次</li>
</ul>
<h3 id="二叉树的重要特性">二叉树的重要特性</h3>
<ul>
<li>满二叉树：左右节点齐全</li>
<li>完全二叉树：有右子节点肯定有左子节点</li>
<li>非完全二叉树：有右子节点不一定有左子节点</li>
</ul>
<ol>
<li>在二叉树的第 i 层最多有 2<sup>i-1</sup> 个节点（i≥1）；</li>
<li>深度为 k 的二叉树最多有 2<sup>k</sup>-1 个节点（k≥1）；</li>
<li>对任何一颗二叉树，如果其叶子结点数为 n<sub>0</sub>，度为 2 的节点数为 n<sub>2</sub>，则 n<sub>0</sub>=n<sub>2</sub>+1。</li>
<li>如果对一棵有 n 个节点的<strong>完全二叉树</strong>的节点按层序编号（从第 1 层到 [log2n]+1 层，每层从左到右），则对任一节点 i(1≤i≤n)，有：
<ol>
<li>如果 i=1，则节点 i 无父节点，是二叉树的根；如果 i＞1，则父节点是 [i/2]；</li>
<li>如果 2i＞n，则节点 i 为叶子节点，无左子节点；否则，其左子节点是节点 2i；</li>
<li>如果 2i+1＞n，则节点 i 无右子节点；否则，其右子节点是节点 2i+1。</li>
</ol>
</li>
</ol>
<h3 id="二叉树遍历">二叉树遍历</h3>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/894ec24.png" alt=""></p>
<ul>
<li>前序遍历：根左右（ABCDEFGHK）</li>
<li>中序遍历：左根右（BDCAEHGKF）</li>
<li>后序遍历：左右根（DCBHKGFEA）</li>
<li>层次遍历</li>
</ul>
<h3 id="反向构造二叉树">反向构造二叉树</h3>
<blockquote>
<p>必须有中序遍历，才能知道根节点的左右节点有哪些</p>
</blockquote>
<h3 id="树转二叉树">树转二叉树</h3>
<ul>
<li>孩子节点 —— 左子树节点</li>
<li>兄弟节点 —— 右孩子节点</li>
</ul>
<h3 id="查找二叉树">查找二叉树</h3>
<ul>
<li>二叉排序树</li>
<li>左孩子小于根</li>
<li>右孩子大于根</li>
</ul>
<p>插入节点：</p>
<ol>
<li>若该键值节点已存在，则不再插入；</li>
<li>若查找二叉树为空树，则以新节点为查找二叉树；</li>
<li>将要插入节点键值与插入后父节点键值比较，就能确定新节点是父节点的左子节点，还是右子节点。</li>
</ol>
<p>删除节点：</p>
<ol>
<li>若待删除节点时叶子节点，则直接删除；</li>
<li>若待删除节点只有一个子节点，则将这个子节点与待删除节点的父节点直接连接；</li>
<li>若待删除的节点 p 有两个子节点，则在其<strong>左子树上</strong>，用中序遍历寻找关键值最大的节点 s，用节点 s 的值代替节点 p 的值，然后删除节点 s，节点 s 必属于上述 1、2 情况之一。</li>
</ol>
<h3 id="最优二叉树-哈夫曼树">最优二叉树（哈夫曼树）</h3>
<ul>
<li>树的路径长度</li>
<li>权（访问次数，权值越高，访问越频繁）</li>
<li>带权路径长度</li>
<li>树的带权路径长度（树的代价）</li>
</ul>
<p>例：假设有一组权值：5, 29, 7, 8, 14, 23, 3, 11，请尝试构造哈夫曼树。</p>
<ul>
<li>先从权值最低的值（5, 3）入手，5+3=<u>8</u> 构成树，放左侧；</li>
<li>再取权值最小的（<u>8</u>, 7），7+<u>8</u>=<u>15</u> 构成树，放左侧；</li>
<li>再取权值最小的（8, 11），8+11=<u>19</u> 构成树，放右侧；</li>
<li>再取权值最小的（<u>15</u>, 14），<u>15</u>+14=<u>29</u> 构成树，放左侧；</li>
<li>再取权值最小的（<u>19</u>, 23），<u>19</u>+23=<u>42</u> 构成树，放右侧；</li>
<li>再取权值最小的（<u>29</u>, 29），<u>29</u>+29=<u>58</u> 构成树，放左侧；</li>
<li>此时原始权值已计算完，将最后两个权值（<u>58</u>, <u>42</u>）构成哈夫曼树。</li>
</ul>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230501172528928.png" alt=""></p>
<h3 id="线索二叉树-了解">线索二叉树（了解）</h3>
<h3 id="平衡二叉树">平衡二叉树</h3>
<p>平衡二叉树的定义：</p>
<ul>
<li>任意节点的左右子树深度相差不超过1</li>
<li>每个节点的平衡度只能为-1、0 或 1</li>
</ul>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230501175106552.png" alt="image-20230501175106552"></p>
<h2 id="7-5-图-☆☆">7.5 图（☆☆）</h2>
<h3 id="完全图">完全图</h3>
<ul>
<li>在无向图中，若每对顶点之间都有一条边相连，则称该图为完全图（complete graph）。</li>
<li>在有向图中，若每对顶点之间都有两条有向边相互连接，则称该图为完全图。</li>
</ul>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230501181741283.png" alt=""></p>
<h3 id="邻接矩阵">邻接矩阵</h3>
<p>用一个 n 阶方阵 R 来存放图中各级诶单的关联信息，其矩阵元素 Rij 定义为：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mi>i</mi><mi>j</mi><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn><mtext>：若顶点</mtext><mi>i</mi><mtext>到顶点</mtext><mi>j</mi><mtext>有邻接边</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn><mtext>：若顶点</mtext><mi>i</mi><mtext>到顶点</mtext><mi>j</mi><mtext>无邻接边</mtext></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">Rij=\left\{
\begin{matrix}
 1：若顶点 i 到顶点 j 有邻接边 \\
 0：若顶点 i 到顶点 j 无邻接边
\end{matrix}
\right.
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">{</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord cjk_fallback">：</span><span class="mord cjk_fallback">若</span><span class="mord cjk_fallback">顶</span><span class="mord cjk_fallback">点</span><span class="mord mathdefault">i</span><span class="mord cjk_fallback">到</span><span class="mord cjk_fallback">顶</span><span class="mord cjk_fallback">点</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mord cjk_fallback">有</span><span class="mord cjk_fallback">邻</span><span class="mord cjk_fallback">接</span><span class="mord cjk_fallback">边</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord cjk_fallback">：</span><span class="mord cjk_fallback">若</span><span class="mord cjk_fallback">顶</span><span class="mord cjk_fallback">点</span><span class="mord mathdefault">i</span><span class="mord cjk_fallback">到</span><span class="mord cjk_fallback">顶</span><span class="mord cjk_fallback">点</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mord cjk_fallback">无</span><span class="mord cjk_fallback">邻</span><span class="mord cjk_fallback">接</span><span class="mord cjk_fallback">边</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230501203029752.png" alt=""></p>
<h3 id="邻接表">邻接表</h3>
<p>首先把每个顶点的邻接顶点用链表表示出来，然后用一个一维数组来顺序存储上面每个链表的头指针。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230501203811260.png" alt=""></p>
<h3 id="图的遍历">图的遍历</h3>
<table border="1">
	<tr>
		<th style="text-align:center">遍历方法</th>
		<th style="text-align:center">说明</th>
		<th style="text-align:center">示例</th>
		<th style="text-align:center">图例</th>
	</tr>
	<tr>
		<td style="vertical-align: middle;">深度优先</td>
		<td style="vertical-align: middle;">1、首先访问出发顶点V；<br>2、依次从V触发搜索V的任意一个邻<br>接点W；<br>3、若W未访问过，则从该点出发继<br>续深度优先遍历。<br>它类似于树的前序遍历</td>
        <td style="vertical-align: middle;">V<sub>1</sub>,V<sub>2</sub>,<br>V<sub>4</sub>,V<sub>8</sub>,<br>V<sub>5</sub>,V<sub>3</sub>,<br>V<sub>6</sub>,V<sub>7</sub></td>
		<td rowspan="2" style="vertical-align: middle;"><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230501205957650.png" style="zoom:80%;" /></td>
	</tr>
	<tr>
		<td style="vertical-align: middle;">广度优先</td>
		<td style="vertical-align: middle;">1、首先访问出发顶点V；<br>2、然后访问与顶点V邻接的全部未<br>访问顶点W、X、Y……；<br>3、然后再依次访问W、X、Y……邻接<br>的未访问的顶点。</td>
        <td style="vertical-align: middle;">V<sub>1</sub>,V<sub>2</sub>,<br>V<sub>3</sub>,V<sub>4</sub>,<br>V<sub>5</sub>,V<sub>6</sub>,<br>V<sub>7</sub>,V<sub>8</sub></td>
	</tr>
</table>
<h3 id="拓扑排序-了解">拓扑排序（了解）</h3>
<p>用有向边表示活动之间开始的先后关系。这种有向图称为用顶点表示活动网络，简称 AOV 网络。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230501210811306.png" alt=""></p>
<h3 id="图的最小生成树">图的最小生成树</h3>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230501210922259.png" alt=""></p>
<p>保留图顶点之间最小权值的连线，并且保证最后所有顶点都能连接在一起。</p>
<h2 id="7-6-排序与查找-☆☆☆☆☆">7.6 排序与查找（☆☆☆☆☆）</h2>
<h2 id="7-7-时间复杂度与空间复杂度-☆☆☆☆☆">7.7 时间复杂度与空间复杂度（☆☆☆☆☆）</h2>
<h2 id="7-8-算法基础及常见的算法-☆☆☆☆☆-缺">7.8 算法基础及常见的算法（☆☆☆☆☆）（缺）</h2>
<h3 id="算法的特性">算法的特性</h3>
<ul>
<li><strong>有穷性：执行有穷步之后结束</strong>。</li>
<li>确定性：算法中每一条指令都必须有确切的含义，不能含糊不清。</li>
<li>输入（&gt;=0）</li>
<li>输出（&gt;=1）</li>
<li><strong>有效性（可行性）：算法的每个步骤都能有效执行并能得到确定的结果。例如：a=0，b/a 就无效</strong></li>
</ul>
<h3 id="算法的复杂度">算法的复杂度</h3>
<h1>八、程序设计语言与语言处理程序基础（3~5）</h1>
<h2 id="8-1-编译与解释-☆☆☆">8.1 编译与解释（☆☆☆）</h2>
<p>源程序 ——&gt; 词法分析 ——&gt; 语法分析 ——&gt; 语义分析 ——&gt; 中间代码生成 ——&gt; 代码优化 ——&gt; 目标代码生成 ——&gt; 目标程序</p>
<h2 id="8-2-文法-☆☆">8.2 文法（☆☆）</h2>
<p>一个形式文法是一个有序四元组 G=(V, T, S, P)，其中：</p>
<ul>
<li>V：非终结符。不是语言组成部分，不是最终结果，可理解为占位符。</li>
<li>T：终结符。是语言的组成部分，是最终结果。V∩T=∅</li>
<li>S：起始符。是语言的开始符号。</li>
<li>P：产生式。用终结符替代非终结符的规则。形如 α→β</li>
</ul>
<p>正则闭包：A<sup>+</sup>=A<sup>1</sup>∪A<sup>2</sup>∪A<sup>3</sup>∪……∪A<sup>n</sup>∪……（也就是所有幂的组合）。</p>
<p>闭包：A<sup>*</sup>=A<sup>0</sup>∪A<sup>+</sup>（在正则闭包的基础上，加上 A<sup>0</sup>={ε}）。</p>
<p>示例：a<sup>*</sup>={a, aa, aaa, ……, ε}；(ab)<sup>*</sup>={ab, abab, ababab, ……, ε}。</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>别称</th>
<th>说明</th>
<th>对应自动机</th>
</tr>
</thead>
<tbody>
<tr>
<td>0型</td>
<td>短语文法</td>
<td>G的每条产生式α→β满足α属于V的正则闭包，<br>且至少含有一个非终结符，而β属于V的闭包</td>
<td><strong>图灵机</strong></td>
</tr>
<tr>
<td>1型</td>
<td>上下文有关文法</td>
<td>G的任何产生式α→β满足|α|≤|β|，仅仅<br>S→ε例外，但S不得出现在任何产生式右部</td>
<td>线性界限自动机</td>
</tr>
<tr>
<td>2型</td>
<td>上下文无关文法</td>
<td>G的任何产生式为A→β，A为非终结符，β为<br>V的闭包</td>
<td>非确定的下推自动机</td>
</tr>
<tr>
<td>3想</td>
<td>正规文法</td>
<td>G的任何产生式为A→αB或A→α，α属于非<br>终结符的闭包，A、B都属于非终结符</td>
<td><strong>有线自动机</strong></td>
</tr>
</tbody>
</table>
<h2 id="8-3-语法推导数">8.3 语法推导数</h2>
<p>一棵语法树应具有以下特征：</p>
<ol>
<li>每个节点都有一个标记，此标记是 V 的一个符号；</li>
<li>根的标记是 S；</li>
<li>若一节点 n 至少有一个它自己除外的子孙，并且有标记 A，则 A 肯定在 V<sub>N</sub> 中；</li>
<li>如果节点 n 的直接子孙，从左到右的次序是节点 n<sub>1</sub>, n<sub>2</sub>, ……, n<sub>k</sub>，其标记分别是：A<sub>1</sub>, A<sub>2</sub>, ……, A<sub>k</sub>，那么 A→A<sub>1</sub>, A<sub>2</sub>, ……, A<sub>k</sub>，一定是 P 中的一个产生式。</li>
</ol>
<p>示例：文法 G=({a, b}, {S, A}, S, P)，其中：S→aAS|a（S 可以推导出：aAS；S 可以推导出：a）；A→SbA|SS|ba（A 可以推导出 SbA；A 可以推导出 SS；A 可以推导出 ba），请构造句型 aabAa 的推导树。</p>
<p><strong>aabAa → aSbAa → aAa → aAS → S</strong></p>
<h2 id="8-4-有限自动机-☆">8.4 有限自动机（☆）</h2>
<p>M=(S, Σ, δ, S0, Z)</p>
<ol>
<li>S 是一个有线集，每个元素为一个状态</li>
<li>Σ 是一个有穷字母表，每个元素为一个输入字符</li>
<li>δ 是转换函数：是一个单值对照</li>
<li>S0 属于 S，是其唯一的初态</li>
<li>Z 是一个终态集（可空）</li>
</ol>
<p>有限状态自动机可以形象地用状态转换图表示，设有限状态自动机：</p>
<p>DFA=({S, A, B, C, f}, {1, 0}, δ, S, {f})，</p>
<p>其中：δ(S, 0)=B，δ(S, 1)=A，δ(A, 0)=f，δ(A, 1)=C，δ(B, 0)=C，δ(B, 1)=f，δ(C, 0)=f，δ(C, 1)=f。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230502154242646.png" alt=""></p>
<h2 id="8-5-正规式-☆☆☆☆">8.5 正规式（☆☆☆☆）</h2>
<p>正规式是描述程序语言单词的表达式，对于字母 Σ，其上的正规式及其表示的正规集可以递归定义如下：</p>
<ol>
<li>ε 是一个正规式，它表示集合 L(ε)={ε}。</li>
<li>若 a 是 Σ 上的字符，则 a 是一个正则式，它所表示的正规 L(a)={a}。</li>
<li>若正规式 r 和 s 分别表示正规集 L®=L(s)，则：
<ol>
<li>r|s 是正规式，表示集合 L®∪L(s)；</li>
<li>r·s 是正规式，表示集合 L®L(s)；</li>
<li>r* 是正规式，表示集合 (L®)*（闭包，表示循环）；</li>
<li>® 是正规式，表示集合 L®。</li>
</ol>
</li>
</ol>
<p>仅由有限次地使用上述三个步骤定义的表达式才是 Σ 上的正规式。由此可见，正规式要么为空，要么由字母、或、连接、闭包运算符组成。其中闭包运算符“*”具有最高的优先级，连接运算具有次高优先级，或运算符“|”具有最低优先级。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230502155915513.png" alt=""></p>
<p>C 是终态，执行最终应停在 C 节点，只有 C 符合。</p>
<p>写为正规式：(1*00*(10)*1)*</p>
<h2 id="8-6-数据类型与程序控制结构">8.6 数据类型与程序控制结构</h2>
<p>常见数据类型：</p>
<ul>
<li>数字数据类型：int，float，double，short，long</li>
<li>布尔类型：boolean</li>
<li>字符类型：char，byte</li>
<li>枚举类型</li>
<li>指针类型</li>
</ul>
<p>程序控制结构主要有：顺序结构、选择结构（if-else等）和循环结构（for，do-while等）</p>
<h2 id="8-7-程序语言基础-表达式">8.7 程序语言基础-表达式</h2>
<h3 id="后缀表达式-☆☆☆">后缀表达式（☆☆☆）</h3>
<blockquote>
<p>有点像二叉树的前中后序遍历</p>
<p>前缀表达式很少使用，一般考察中缀表达式与后缀表达式的转化</p>
</blockquote>
<ul>
<li>前缀表达式（+ab）</li>
<li>中缀表达式（a+b）</li>
<li>后缀表达式（ab-）</li>
</ul>
<p>示例：表达式 (a-b)*(c+5) 的后缀表达式是：<u>ab-c5+*</u></p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230502161235676.png" alt=""></p>
<h2 id="8-8-函数调用-传值与传址-☆☆☆☆-每年考">8.8 函数调用-传值与传址（☆☆☆☆）（每年考）</h2>
<table>
<thead>
<tr>
<th>传递方式</th>
<th>主要特点</th>
</tr>
</thead>
<tbody>
<tr>
<td>传值调用</td>
<td>形参取的是实参的值，形参的改变不会导致调用点所<br/>传的实参的值发生改变</td>
</tr>
<tr>
<td>引用（传址）调用</td>
<td>形参取的是实参的地址，即相当于实参存储单元的地<br/>址引用，因此其值的改变同时就改变了实参的值</td>
</tr>
</tbody>
</table>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230502162610179.png" alt=""></p>
<ul>
<li>左侧代码为：传值调用，只传输实参的值</li>
<li>右侧代码为：引用调用，传输实参的地址，在方法中被修改的值会反向影响到实参（注意符号）</li>
</ul>
<h2 id="8-9-多种程序语言特点-☆☆☆">8.9 多种程序语言特点（☆☆☆）</h2>
<ol>
<li>Fortran 语言（科学计算，执行效率高）</li>
<li>Pascal 语言（为教学而开发的，表达能力强，Delphi）</li>
<li>C 语言（指针操作能力强，高效）</li>
<li>Lisp 语言（函数式程序语言，符号处理，人工智能）</li>
<li>C++ 语言（面向对象，高效）</li>
<li>Java 语言（面向对象，中间代码，跨平台）</li>
<li>C# 语言（面向对象，中间代码，.Net）</li>
<li>Prolog 语言（逻辑推理，间接性，表达能力，数据库和专家系统）</li>
<li>Python 语言（解释型，面向对象，胶水语言）</li>
</ol>
<h1>九、多媒体基础知识（3选）</h1>
<h2 id="9-1-多媒体技术基本概念-☆☆">9.1 多媒体技术基本概念（☆☆）</h2>
<h2 id="9-2-多媒体相关计算问题-☆☆☆">9.2 多媒体相关计算问题（☆☆☆）</h2>
<h3 id="音频相关概念">音频相关概念</h3>
<p>声音的带宽：</p>
<ul>
<li><strong>说话：300-3400Hz</strong></li>
<li><strong>人耳：20Hz-20kHz</strong></li>
<li><strong>乐器：20Hz-20kHz</strong></li>
</ul>
<p>采样</p>
<ul>
<li>采样频率</li>
<li>采样精度</li>
<li><strong>采样频率应为声音最高评率 2 倍</strong></li>
</ul>
<p>A/D 转换（模拟信号A转数字信号D）：采样→量化→编码</p>
<p>常见音频格式：WAVE、MP3、MIDI（乐器的标准）</p>
<p><strong>每秒容量 = 采样频率（Hz）× 量化/采样位数（位）× 声道数 ÷ 8</strong>（压缩后的公式）</p>
<p>示例：CD 上声音的采样频率为 44.1kHz，样本精度为 16bit，双声道立体声，那么其<strong>未经压缩</strong>的数据传输率为：<u>44.1k×16bit×2=1411.2kb</u>（未经压缩，因此不用÷8）</p>
<h3 id="图像相关概念">图像相关概念</h3>
<blockquote>
<p>图片注意未压缩计算需要【÷8】</p>
</blockquote>
<ul>
<li>亮度：画面的明亮程度。</li>
<li>色调（红，绿）：颜色的种类，如红色、绿色、蓝色等不同颜色就是指色调。同时画面整体颜色倾向，也是色调。</li>
<li>饱和度：色彩的纯洁性，即颜色的艳丽程度。</li>
</ul>
<table>
<thead>
<tr>
<th>条件</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>知道像素，位数</td>
<td>每个像素为16位，图像为640×480像素，求容量：<br>640×480×16÷8=614,400B</td>
</tr>
<tr>
<td>知道像素，色数</td>
<td>640×480像素，256色的图像，求容量：<br>640×480×log<sub>2</sub>(256)÷8=307,200B</td>
</tr>
</tbody>
</table>
<p>示例：某数码相机内置 128MB 的存储空间，拍摄分辨率设定为 1600×1200 像素，颜色深度为 24 位，若不采用压缩存储技术，使用内部存储器最多可以存储<u>128÷(1600×1200×24÷8÷1024÷1024)=128÷5.5=23.3</u>张照片。（B→KB→MB）</p>
<h2 id="9-3-媒体的种类-显示媒体-☆☆☆">9.3 媒体的种类（显示媒体）（☆☆☆）</h2>
<ul>
<li>感觉媒体：指直接作用于人的感觉器官，使人产生直接感觉的媒体。如：声音、图形、图像、动画等。</li>
<li>表示媒体：指为了加工、处理和传输感觉媒体而人为研究、构造出来的一种媒体，常见的有<strong>各种编码方式</strong>，如文本编码、图像编码和声音编码等。</li>
<li><strong>显示媒体（表现媒体）</strong>：表现和获取信息的物理设备。如：输入显示媒体：键盘、鼠标和麦克风等；输出显示媒体：显示器、打印机和音箱等。（<strong>输入输出设备</strong>，一般考察这里）</li>
<li>交换媒体（转换媒体）
<ul>
<li>存储媒体：存储数据的物理设备。如：磁盘、光盘和内存等。</li>
<li>传输媒体：传输数据的物理载体（介质）。如：电缆、光缆和交换设备等。</li>
</ul>
</li>
</ul>
<h2 id="9-4-常见多媒体标准数据压缩技术-☆☆">9.4 常见多媒体标准数据压缩技术（☆☆）</h2>
<blockquote>
<p>正是因为数据有冗余，所以需要压缩技术</p>
</blockquote>
<ul>
<li>空间冗余（几何冗余）</li>
<li>时间冗余</li>
<li>视觉冗余</li>
<li>信息熵冗余</li>
<li>结构冗余</li>
<li>知识冗余</li>
</ul>
<h3 id="有损压缩与无损压缩">有损压缩与无损压缩</h3>
<ul>
<li>无损压缩编码法（Lossless compression coding），也称冗余压缩法或熵编码法。</li>
<li>有损压缩编码法（Loss compression coding），也称为熵压缩法。</li>
</ul>
<h3 id="常见多媒体标准">常见多媒体标准</h3>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230502172427735.png" alt=""></p>
<p><strong>MP3 表示的是 MPEG-1 的第三层，而不是 MPEG-3</strong></p>
<h1>十、知识产权与标准化（1~2选）</h1>
<p>构成我国保护计算机软件著作权的两个基本法律：<strong>《中华人民共和国著作权法》、《计算机软件保护条例》</strong>【速记】</p>
<h2 id="10-1-保护范围与对象">10.1 保护范围与对象</h2>
<table>
<thead>
<tr>
<th>法律法规名称</th>
<th>保护对象及范围</th>
<th>注意事项</th>
</tr>
</thead>
<tbody>
<tr>
<td>著作权法（版权）</td>
<td>著作权<br>文学、绘画、<br>摄影等作品</td>
<td>1、<strong>不需要申请</strong>，作品完成即开始保护<br>2、绘画或摄影作品原件出售（赠与）著作权还<br>归原作者，原件拥有者有：所有权、展览权</td>
</tr>
<tr>
<td>软件著作权法<br>计算机软件保护条例</td>
<td>软件著作权<br>软件作品</td>
<td>1、<strong>不需要申请</strong>，作品完成即开始保护<br>2、登记制度便于举证</td>
</tr>
<tr>
<td>专利法</td>
<td>专利权</td>
<td>需要申请，专利权有效期是从申请日开始计算</td>
</tr>
<tr>
<td>商标法</td>
<td>商标权</td>
<td>需要申请，核准之日起商标受保护</td>
</tr>
<tr>
<td>反不正当竞争法</td>
<td>商业秘密权</td>
<td>1、商业秘密包括技术与经营两个方面<br>2、必须有保密措施才能认定商业秘密</td>
</tr>
</tbody>
</table>
<h2 id="10-2-保护期限-☆☆">10.2 保护期限（☆☆）</h2>
<blockquote>
<p>翻译权：将原软件从一种自然语言文字转换成另一种自然语言文字的权利。【速记】</p>
</blockquote>
<table border="1">
	<tr>
		<th style="text-align:center">客体类型</th>
		<th style="text-align:center">权利类型</th>
		<th style="text-align:center">保护期限</th>
	</tr>
	<tr>
		<td rowspan="2" style="vertical-align: middle;">公民作品</td>
		<td>署名权、修改权、保护作品完整权</td>
		<td>没有限制</td>
	</tr>
	<tr>
		<td>发表权、使用权和获得报酬权</td>
		<td>作者终生及其死亡后的50年（第50年的12月31日）</td>
	</tr>
	<tr>
		<td style="vertical-align: middle;">单位作品</td>
		<td>发表权、使用权和获得报酬权</td>
		<td>50年（首次发表后的第50年12月31日），若期<br>间未发表，不保护</td>
	</tr>
	<tr>
		<td rowspan="2" style="vertical-align: middle;">公民软件产品</td>
		<td>署名权、修改权</td>
		<td>没有限制</td>
	</tr>
	<tr>
		<td>发表权、复制权、发行权、出租权、<br>信息网络传播权、翻译权、使用许<br>可权、获得报酬权、转让权</td>
		<td style="vertical-align: middle;">作者终生及死后50年（第50年12月31日）。合作<br>开发，以最后死亡作者为准</td>
	</tr>
	<tr>
		<td style="vertical-align: middle;">单位软件产品</td>
		<td>发表权、复制权、发行权、出租权、<br>信息网络传播权、翻译权、使用许<br>可权、获得报酬权、转让权</td>
		<td style="vertical-align: middle;">50年（首次发表后的第50年12月31日），若期<br>间未发表，不保护</td>
	</tr>
	<tr>
		<td colspan="2" style="vertical-align: middle;">注册商标</td>
		<td>有效期10年（若注册人死亡或倒闭1年后，未转移<br>则可注销，期满前6个月内必须续注）</td>
	</tr>
	<tr>
		<td colspan="2">发明专利权</td>
        <td>保护期为20年（从申请日开始）</td>
	</tr>
	<tr>
		<td colspan="2">实用新型和外观设计专利权</td>
        <td>保护期为10年（从申请日开始）</td>
	</tr>
	<tr>
		<td colspan="2">商业秘密</td>
		<td>不确定，公开后公众可用</td>
	</tr>
</table>
<h2 id="10-3-知识产权人确定-☆☆☆">10.3 知识产权人确定（☆☆☆）</h2>
<table border="1">
	<tr>
		<th style="text-align:center" colspan="2">情况说明</th>
		<th style="text-align:center">判断说明</th>
		<th style="text-align:center">归属</th>
	</tr>
	<tr>
		<td rowspan="3" style="vertical-align: middle;">作品</td>
        <td rowspan="3" style="vertical-align: middle;">职务<br>作品</td>
		<td>利用单位的物质技术条件进行创作，<br>并由单位承担责任的</td>
		<td>除署名权外其他著作权归单位</td>
	</tr>
	<tr>
		<td>有合同约定，其著作权属于单位</td>
		<td>除署名权外其他著作权归单位</td>
	</tr>
	<tr>
		<td>其他</td>
		<td>作者拥有著作权，单位有权在业务范围内优先使用</td>
	</tr>
	<tr>
		<td rowspan="3" style="vertical-align: middle;">软件</td>
        <td rowspan="3" style="vertical-align: middle;">职务<br>作品</td>
		<td>属于本职工作中明确规定的开发目标</td>
		<td>单位享有著作权</td>
	</tr>
	<tr>
		<td>属于从事本职工作活动的结果</td>
		<td>单位享有著作权</td>
	</tr>
	<tr>
		<td>使用了单位资金、专业设备、未公开<br>的信息等物质、技术条件，并由单位<br>或组织承担责任的软件</td>
		<td>单位享有著作权</td>
	</tr>
	<tr>
		<td rowspan="3" style="vertical-align: middle;">专利权</td>
        <td rowspan="3" style="vertical-align: middle;">职务<br>作品</td>
		<td>本职工作中作出的发明创造</td>
		<td>单位享有专利</td>
	</tr>
	<tr>
		<td>履行本单位交付的本职工作之外的任<br>务所作出的发明创造</td>
		<td>单位享有专利</td>
	</tr>
	<tr>
		<td>利智、退休或调动工作后1年内，与<br>原单位工作相关</td>
		<td>单位享有专利</td>
	</tr>
	<tr>
		<td rowspan="4" style="vertical-align: middle;">作品<br>软件</td>
        <td rowspan="2" style="vertical-align: middle;">委托<br>创作</td>
		<td>有合同约定，著作权归委托方</td>
		<td>委托方</td>
	</tr>
	<tr>
		<td>合同中未约定著作权归属</td>
		<td>创作方</td>
	</tr>
	<tr>
        <td rowspan="2" style="vertical-align: middle;">合作<br>开发</td>
		<td>只进行组织、提供咨询意见、物质<br>条件或者进行其他辅助工作</td>
		<td>不享有著作权</td>
	</tr>
	<tr>
		<td style="vertical-align: middle;">共同创作的</td>
		<td>共同享有，按人头比例<br>成果可分割的，可分开申请</td>
	</tr>
	<tr>
		<td colspan="2" style="text-align:center;vertical-align: middle;">商标</td>
		<td colspan="2">谁先申请谁拥有（除知名商标的非法抢注）<br>同时申请，则根据谁先使用（需提供证据）<br>无法提供证据，协商归属，无效时使用抽签（但不可不确定）</td>
	</tr>
	<tr>
		<td colspan="2" style="text-align:center;vertical-align: middle;">专利</td>
        <td colspan="2">谁先申请谁拥有<br>同时申请则协商归属，但不能够同时驳回双方的专利申请</td>
	</tr>
</table>
<h2 id="10-4-侵权判断-☆☆☆☆-1-2">10.4 侵权判断（☆☆☆☆）（1~2）</h2>
<p>中国公民、法人或者其他组织的作品，不论是否发表，都享有著作权。</p>
<p>开发软件所用的思想、处理过程、操作方法或者数学概念不受保护。</p>
<p>著作权法不适用于下列情形：</p>
<ul>
<li>法律、法规，国家机关的决议、决定、命令和其他具有立法、行政、司法性质的文件，及其官方正式译文；</li>
<li>时事新闻；</li>
<li>历法、通用数表、通用表格和公式。</li>
</ul>
<table>
<thead>
<tr>
<th>不侵权</th>
<th>侵权</th>
</tr>
</thead>
<tbody>
<tr>
<td>·  个人学习、研究或者欣赏<br> ·  适当引用<br> ·  公开演讲内容<br> ·  用于教学或科学研究<br/> ·  复制馆藏作品<br/> ·  免费表演他人作品<br/> ·  室外公共场所艺术品临摹、绘画、摄影、录像<br/> ·  将汉语作品译成少数民族语言作品或盲文出版</td>
<td>·  未经许可，发表他人作品<br/> ·  未经合作作者许可，将与他人合作创作的作品当作<br/>自己单独创作的作品发表的<br/> ·  未参加创作，在他人作品署名<br/> ·  歪曲、篡改他人作品的<br/> ·  剽窃他人作品的<br/> ·  使用他人作品，未付报酬<br/> ·  未经出版者许可，使用其出版的图书、期刊的板式<br/>设计的</td>
</tr>
</tbody>
</table>
<h2 id="10-5-标准的分类-☆">10.5 标准的分类（☆）</h2>
<ul>
<li>国际标准：ISO、IEC 等国际标准化组织</li>
<li>国家标准：GB —— 中国、ANSI —— 美国；BS —— 英国；JIS —— 日本</li>
<li>区域标准：又称为地区标准，如 PASC —— 太平洋地区标准会议；CEN —— 欧洲标准委员会；ASAC —— 亚洲标准咨询委员会；ARSO —— 非洲地区标准化组织</li>
<li>行业标准：GJB —— 中国军用标准；MIT-S —— 美国军用标准；IEEE —— 美国电气电子工程师协会</li>
<li>地方标准：国家的地方一级行政机构制定的标准</li>
<li>企业标准</li>
<li>项目规范</li>
</ul>
<h2 id="10-6-标准代码的识别-☆">10.6 标准代码的识别（☆）</h2>
<ul>
<li>国际、国外标准代号：标准代号+专业类号+顺序号+年代号</li>
<li>我国国家标准代号：强制性标准代号为 GB；推荐性标准代号为 GB/T；指导下标准代号为：GB/Z；实物标准代号为：GSB</li>
<li>行业标准代号：由汉语拼音大写字母组成（如：电子行业为：SJ）</li>
<li>地方标准代号：由 DB 加上省级行政区代码的前两位</li>
<li>企业标准代号：由 Q 加上企业代号组成</li>
</ul>
<h1>十一、数据流图（DFD）（简答No1）</h1>
<blockquote>
<p>15分需要至少拿到12分以上</p>
</blockquote>
<h2 id="11-1-数据流图基本概念-主">11.1 数据流图基本概念（主）</h2>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1636051488.png" alt=""></p>
<h2 id="11-2-数据字典-次">11.2 数据字典（次）</h2>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230504140956344.png" alt=""></p>
<h2 id="11-3-数据平衡原则-主">11.3 数据平衡原则（主）</h2>
<h3 id="11-3-1-父图与子图之间的平衡">11.3.1 父图与子图之间的平衡</h3>
<p>一旦顶层图（父图）确定好了，0 层图（子图）要进行平衡（外部实体与数据流要和父图统一）</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230504141447576.png" alt=""></p>
<h3 id="11-3-2-子图内平衡">11.3.2 子图内平衡</h3>
<p>数据流的输入输出要匹配：</p>
<ul>
<li>数据流要有流进流出</li>
<li>数据的流入成分要充足（例如：查询销售额，则至少要输入员工信息和销售记录）</li>
</ul>
<h1>十二、数据库设计（简答题No2）</h1>
<blockquote>
<p>15分需要至少拿到13分以上</p>
</blockquote>
<h2 id="12-1-数据库设计过程">12.1 数据库设计过程</h2>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230504155255751.png" alt=""></p>
<h2 id="12-2-er-模型">12.2 ER 模型</h2>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230504161146939.png" alt=""></p>
<h2 id="12-3-考点">12.3 考点</h2>
<ol>
<li>找联系</li>
<li>ER 图转成关系模式</li>
<li>找主键、外键</li>
<li>大综合</li>
</ol>
<h1>十三、UML建模</h1>
<blockquote>
<p>15分需要至少拿到12分以上</p>
</blockquote>
<h2 id="13-1-用例图-必考-速记">13.1 用例图（必考）【速记】</h2>
<p><strong>用例图描述一组用例、参与者及他们之间的关系</strong></p>
<h3 id="13-1-1-包含关系">13.1.1 包含关系</h3>
<p>其中这个提取出来的公共用例称为抽象用例，而把原始用例称为基本用例或基础用例；当可以从两个或两个以上的用例中提取公共行为时，应该使用包含关系来表示它们。（include）</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230504171412855.png" alt=""></p>
<h3 id="13-1-2-扩展关系">13.1.2 扩展关系</h3>
<p>如果一个用例明显地混合了两种或两种以上的不同场景，即根据情况可能发生多种分支，则可以将这个用例分为一个基本用例和一个或多个扩展用例，这样使描述可能更加清晰。(extend)</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230504171439754.png" alt=""></p>
<h3 id="13-1-3-泛化关系">13.1.3 泛化关系</h3>
<p>当多个用例共同拥有一种类似的结构和行为的时候，可以将它们的共性抽象成为父用例，其他的用例作为泛化关系中的子用例。在用例的泛化关系中，子用例是父用例的一种特殊形式，<strong>子用例继承了父用例所有的结构、行为和关系</strong>。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230504171520757.png" alt=""></p>
<h3 id="13-1-4-用例建模的流程">13.1.4 用例建模的流程</h3>
<ul>
<li>识别参与者（必须）</li>
<li>合并需求获得用例（必须）</li>
<li>细化用例描述（必须）</li>
<li>调整用例模型（可选）</li>
</ul>
<h2 id="13-2-类图与对象图-必考">13.2 类图与对象图（必考）</h2>
<h3 id="13-2-1-类图-class-diagram-速记">13.2.1 类图（class diagram）【速记】</h3>
<p>类图描述一组类、接口、协作和它们之间的关系。在 OO 系统的建模中，最常见的图就是类图。类图给出了系统的静态设计视图，活动类的类图给出了系统的静态进程视图。</p>
<p>类图有四种关系（因为关联关系 = 聚合关系 + 组合关系，所以总体上是五种关系的类图）</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230428152227700.png" alt=""></p>
<ul>
<li>关联关系：描述了一组链，链是对象之间的连接
<ul>
<li>聚合关系：整体与部分生命周期<strong>不同</strong>（部分离开整体后还能单独存活）</li>
<li>组合关系：整体与部分生命周期<strong>相同</strong>（部分离开整体化不能单独存活）</li>
</ul>
</li>
<li>依赖关系：一个事物发生变化影响另一个事物</li>
<li>泛化关系：特殊/一般关系（继承关系）</li>
<li>实现关系：接口与类之间的关系</li>
</ul>
<h4 id="聚合-vs-组合示例">聚合 VS 组合示例</h4>
<p>一个商城系统，有商品、网店、购物车等内容</p>
<ul>
<li>商品 VS 购物车，购物车包含一部分商品，与商品是整体和部分的关系，且没有购物车了，商品依旧可以单独存在，因此两者是聚合关系</li>
<li>商品 VS 网店，网店里包含一部分商品，与商品是整体和部分的关系，但是没有网店了，商品也就没了，商品不可以脱离网店单独存在，因此两者是组合关系</li>
</ul>
<h3 id="13-2-2-对象图-object-diagram">13.2.2 对象图（object diagram）</h3>
<p>对象图描述了一组对象及它们之间的关系。对象图描述了在类图中所建立的事物实例的静态快照。和类图一样，这些图给出了系统的静态设计视图或静态进程视图，但它们是从真实案例或原型案例的角度建立的。</p>
<ul>
<li><strong>填类名</strong>，方法名，属性名</li>
<li><strong>填多重度</strong></li>
<li><strong>填关系</strong></li>
</ul>
<h2 id="13-3-顺序图-掌握">13.3 顺序图（掌握）</h2>
<p>顺序图（sequence diagram，序列图）。顺序图是一种交互图（interaction diagram），交互图展现了一种交互，它由一组对象或参与者以及它们之间可能发送的消息构成。交互图专注于系统的动态视图。顺序图是强调消息的时间次序的交互图。</p>
<h2 id="13-4-活动图-掌握">13.4 活动图（掌握）</h2>
<p>活动图（activity diagram）。活动图将其进程或其他计算结构展示为计算内部一步步的控制流和数据流。活动图专注于系统的动态视图。它对系统的功能建模和业务流程建模特别重要，并强调对象间的控制流程。</p>
<h2 id="13-5-状态图-掌握">13.5 状态图（掌握）</h2>
<p>状态图（state diagram）。状态图描述一个状态机，它由状态、转移、事件和活动组成。状态图给出了对象的动态视图。它对于接口、类或协作的行为建模尤为重要，而且它强调时间导致的对象行为，这非常有助于对反应式系统建模。</p>
<h2 id="13-6-通信图-了解">13.6 通信图（了解）</h2>
<p>通信图（communication diagram）。通信图也是一种交互图，它强调收发消息的对象或参与者的结构组织。顺序图和通信图表达了类似的基本概念，但它们所强调的概念不同，顺序图强调的是时序，通信图强调的是对象之间的组织结构（关系）。</p>
<h2 id="13-7-构件图-了解">13.7 构件图（了解）</h2>
<p>构件图（component diagram）。构件图描述了一个封装的类和它的接口、端口以及由内嵌的构件和连接件构成的内部结构。构件图用于表示系统的静态设计实现视图。对于由小的部件构建大的系统来说，构件图是很重要的。构件图是类图的变体。</p>
<h2 id="13-8-部署图-了解">13.8 部署图（了解）</h2>
<p>部署图（deployment diagram）。部署图描述对运行时的处理节点及在其中生存的构件的配置。部署图给出了架构的静态部署视图，通常一个节点包含一个或多个部署图。</p>
<h1>十四、数据结构与算法应用（15）（难点）</h1>
<blockquote>
<p>争取3~9分</p>
</blockquote>
<h2 id="14-1-判断程序属于哪一种方法-3">14.1 判断程序属于哪一种方法（3）</h2>
<blockquote>
<p>分治法；回溯法；贪心法；动态规则法</p>
</blockquote>
<h3 id="14-1-1-分治法">14.1.1 分治法</h3>
<p>对于一个规模为 n 的问题，若该问题可以容易地解决（比如说规模 n 较小）则直接解决；否则将其**【分解】<strong>为 k 个规模较小的子问题，这些子问题相互独立且与原问题形式相同，递归地</strong>【解决】<strong>这些子问题，然后将各子问题的解</strong>【合并】**得到原问题的解。</p>
<ul>
<li>该问题的规模缩小到一定的程度就可以容易地解决</li>
<li>该问题可以分解为若干个规模较小的相同问题</li>
<li>利用该问题分解出的子问题的解可以合并为该问题的解</li>
<li>该问题所分解出的<strong>各个子问题是相互独立的</strong></li>
</ul>
<p>特征：把一个问题拆分成多个小规模的相同子问题，一般可用<strong>递归</strong>解决。（局部和整体解唯一，不用判断最优）</p>
<p>经典问题：<strong>斐波那契数列</strong>、归并排序、快速排序、<strong>矩阵乘法</strong>、二分搜索、大整数乘法、汉诺塔</p>
<h3 id="14-1-2-动态规划法-用于求最优解">14.1.2 动态规划法（用于求最优解）</h3>
<p>在求解问题中，对于每一步决策，列出各种可能的局部解，再依据某种判定条件，舍弃那些肯定不能得到最优解的局部解，在每一步都经过筛选，<strong>以每一步都是最优解来保证全局是最优解</strong>。</p>
<p>特征：划分子问题，并把子问题结果用<strong>数组存储</strong>，利用查询子问题结果构造最终问题。（整体最优但不一定是局部最优）</p>
<p>经典问题：<strong>斐波那契数列</strong>、矩阵乘法、<strong>背包问题</strong>、LCS 最长公共子序列</p>
<h3 id="14-1-3-回溯法">14.1.3 回溯法</h3>
<p>回溯法是一种选优搜索法，按选优条件向前搜索，以达到目标。但当搜索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择。这种走不通就退回再走的技术就是回溯法。</p>
<ul>
<li>试探部分：满足除规模之外的所有条件，则扩大规模。（扩大规模）</li>
<li>回溯部分：（缩小规模）
<ul>
<li>当前规模解不是合法解时回溯（不满足约束条件 D）</li>
<li>求完一个解，要求下一个解时，也要回溯</li>
</ul>
</li>
</ul>
<p>特征：系统的搜索一个问题的所有解或任一解。</p>
<p>经典问题：N 皇后问题、迷宫（走不通时就返回最近的一个分叉口继续探索）、<strong>背包问题</strong></p>
<h3 id="14-1-4-贪心法">14.1.4 贪心法</h3>
<p>总是做出在当前来说是最好的选择，而并不从整体上加以考虑，它所做的每步选择只是当前步骤的<strong>局部最优选择，但从整体来说不一定是最优的选择</strong>。由于它不必为了寻找最优解而穷尽所有可能解，因此其耗费时间少，一般可以快速得到满意的解，但得不到最优解。</p>
<p>特征：局部最优，但整体不见得最优。每步有明确的、既定的策略。（局部最优但不一定是整体最优）</p>
<p>京东问题：<strong>背包问题（如装箱）</strong>、多机调度、找零钱问题</p>
<h3 id="14-1-5-速记">14.1.5 速记</h3>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>算法</mtext><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>分治法：所求解的问题比较简单，不用区分甚至没有最优解，只有唯一解</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>动态规划法：在问题求解时，列出所有可能的解，并选取最优方案</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>回溯法：在问题求解时，先做出最优的选择，但发现原先选择并不优或达不到目标，则回退重新选择</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>贪心法：在问题求解时，总是做出在当前看来是最好的选择</mtext></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">算法
\begin{cases}
 分治法：所求解的问题比较简单，不用区分甚至没有最优解，只有唯一解 \\
 动态规划法：在问题求解时，列出所有可能的解，并选取最优方案 \\
 回溯法：在问题求解时，先做出最优的选择，但发现原先选择并不优或达不到目标，则回退重新选择 \\
 贪心法：在问题求解时，总是做出在当前看来是最好的选择
\end{cases}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:5.76em;vertical-align:-2.63em;"></span><span class="mord cjk_fallback">算</span><span class="mord cjk_fallback">法</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9500200000000008em;"><span style="top:-1.59999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-1.5949900000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.8899900000000003em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.1849900000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.2049900000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.1500100000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.29501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.59001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.885010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.905010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.20002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.45002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.1300000000000003em;"><span style="top:-5.130000000000001em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">分</span><span class="mord cjk_fallback">治</span><span class="mord cjk_fallback">法</span><span class="mord cjk_fallback">：</span><span class="mord cjk_fallback">所</span><span class="mord cjk_fallback">求</span><span class="mord cjk_fallback">解</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">问</span><span class="mord cjk_fallback">题</span><span class="mord cjk_fallback">比</span><span class="mord cjk_fallback">较</span><span class="mord cjk_fallback">简</span><span class="mord cjk_fallback">单</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">不</span><span class="mord cjk_fallback">用</span><span class="mord cjk_fallback">区</span><span class="mord cjk_fallback">分</span><span class="mord cjk_fallback">甚</span><span class="mord cjk_fallback">至</span><span class="mord cjk_fallback">没</span><span class="mord cjk_fallback">有</span><span class="mord cjk_fallback">最</span><span class="mord cjk_fallback">优</span><span class="mord cjk_fallback">解</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">只</span><span class="mord cjk_fallback">有</span><span class="mord cjk_fallback">唯</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">解</span></span></span><span style="top:-3.6900000000000004em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">动</span><span class="mord cjk_fallback">态</span><span class="mord cjk_fallback">规</span><span class="mord cjk_fallback">划</span><span class="mord cjk_fallback">法</span><span class="mord cjk_fallback">：</span><span class="mord cjk_fallback">在</span><span class="mord cjk_fallback">问</span><span class="mord cjk_fallback">题</span><span class="mord cjk_fallback">求</span><span class="mord cjk_fallback">解</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">列</span><span class="mord cjk_fallback">出</span><span class="mord cjk_fallback">所</span><span class="mord cjk_fallback">有</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">能</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">解</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">并</span><span class="mord cjk_fallback">选</span><span class="mord cjk_fallback">取</span><span class="mord cjk_fallback">最</span><span class="mord cjk_fallback">优</span><span class="mord cjk_fallback">方</span><span class="mord cjk_fallback">案</span></span></span><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">回</span><span class="mord cjk_fallback">溯</span><span class="mord cjk_fallback">法</span><span class="mord cjk_fallback">：</span><span class="mord cjk_fallback">在</span><span class="mord cjk_fallback">问</span><span class="mord cjk_fallback">题</span><span class="mord cjk_fallback">求</span><span class="mord cjk_fallback">解</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">先</span><span class="mord cjk_fallback">做</span><span class="mord cjk_fallback">出</span><span class="mord cjk_fallback">最</span><span class="mord cjk_fallback">优</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">选</span><span class="mord cjk_fallback">择</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">但</span><span class="mord cjk_fallback">发</span><span class="mord cjk_fallback">现</span><span class="mord cjk_fallback">原</span><span class="mord cjk_fallback">先</span><span class="mord cjk_fallback">选</span><span class="mord cjk_fallback">择</span><span class="mord cjk_fallback">并</span><span class="mord cjk_fallback">不</span><span class="mord cjk_fallback">优</span><span class="mord cjk_fallback">或</span><span class="mord cjk_fallback">达</span><span class="mord cjk_fallback">不</span><span class="mord cjk_fallback">到</span><span class="mord cjk_fallback">目</span><span class="mord cjk_fallback">标</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">则</span><span class="mord cjk_fallback">回</span><span class="mord cjk_fallback">退</span><span class="mord cjk_fallback">重</span><span class="mord cjk_fallback">新</span><span class="mord cjk_fallback">选</span><span class="mord cjk_fallback">择</span></span></span><span style="top:-0.8100000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">贪</span><span class="mord cjk_fallback">心</span><span class="mord cjk_fallback">法</span><span class="mord cjk_fallback">：</span><span class="mord cjk_fallback">在</span><span class="mord cjk_fallback">问</span><span class="mord cjk_fallback">题</span><span class="mord cjk_fallback">求</span><span class="mord cjk_fallback">解</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">总</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">做</span><span class="mord cjk_fallback">出</span><span class="mord cjk_fallback">在</span><span class="mord cjk_fallback">当</span><span class="mord cjk_fallback">前</span><span class="mord cjk_fallback">看</span><span class="mord cjk_fallback">来</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">最</span><span class="mord cjk_fallback">好</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">选</span><span class="mord cjk_fallback">择</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.63em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p>动态规划法 VS 贪心法</p>
<ul>
<li>动态规划法的每次决策都依赖当前的状态，但子问题选择最优解后，又会引起现有状态的转移，具有重叠子问题性。一个决策序列就是在变化的状态中产生的中，因此叫<strong>动态</strong>规划。</li>
<li>贪心法在求解问题时，也是做出当前看来最好的选择。但不同的是，选择的贪心策略必须具备<strong>无后效性</strong>（即某个子问题解决后，不会影响到之后的状态，而只与当前状态有关）。</li>
</ul>
<h2 id="14-2-求程序的时间复杂度-3-速记">14.2 求程序的时间复杂度（3）【速记】</h2>
<p><strong>O(1) ＜ O(log<sub>2</sub>n) ＜ O(n) ＜ O(nlog<sub>2</sub>n) ＜ O(n<sup>2</sup>) ＜ O(n<sup>3</sup>) ＜ O(2<sup>n</sup>)</strong></p>
<table>
<thead>
<tr>
<th>排序方法</th>
<th>时间复杂度（最好）</th>
<th>时间复杂度（最坏）</th>
<th>时间复杂度（平均）</th>
<th>稳定性</th>
</tr>
</thead>
<tbody>
<tr>
<td>直接插入</td>
<td>O(n)</td>
<td>O(n<sup>2</sup>)</td>
<td>O(n<sup>2</sup>)</td>
<td>稳定</td>
</tr>
<tr>
<td>简单选择</td>
<td>O(n<sup>2</sup>)</td>
<td>O(n<sup>2</sup>)</td>
<td>O(n<sup>2</sup>)</td>
<td>不稳定</td>
</tr>
<tr>
<td>冒泡排序</td>
<td>O(n)</td>
<td>O(n<sup>2</sup>)</td>
<td>O(n<sup>2</sup>)</td>
<td>稳定</td>
</tr>
<tr>
<td>希尔排序</td>
<td>O(n)</td>
<td>O(n<sup>1.3</sup>)</td>
<td>O(n<sup>1.3</sup>)</td>
<td>不稳定</td>
</tr>
<tr>
<td>快速排序</td>
<td>O(nlog<sub>2</sub>n)</td>
<td>O(n<sup>2</sup>)</td>
<td>O(nlog<sub>2</sub>n)</td>
<td>不稳定</td>
</tr>
<tr>
<td>堆排序</td>
<td>O(nlog<sub>2</sub>n)</td>
<td>O(nlog<sub>2</sub>n)</td>
<td>O(nlog<sub>2</sub>n)</td>
<td>不稳定</td>
</tr>
<tr>
<td>归并排序</td>
<td>O(nlog<sub>2</sub>n)</td>
<td>O(nlog<sub>2</sub>n)</td>
<td>O(nlog<sub>2</sub>n)</td>
<td>稳定</td>
</tr>
</tbody>
</table>
<h3 id="14-2-1-常数级时间复杂度-o-1">14.2.1 常数级时间复杂度 O(1)</h3>
<ul>
<li>单个语句（如：k=0;）</li>
<li>整个程序都没有循环语句，或复杂函数的调用</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span>*x = <span class="string">&quot;ABCDEFG&quot;</span>;</span><br><span class="line">    <span class="type">int</span> m = <span class="built_in">strlen</span>(x);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;len:%d\n&quot;</span>, m);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="14-2-2-时间复杂度-o-n">14.2.2 时间复杂度 O(n)</h3>
<p>单层循环</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i＜n; i++) &#123;</span><br><span class="line">        b[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="14-2-3-时间复杂度-o-n-sup-2-sup">14.2.3 时间复杂度 O(n<sup>2</sup>)</h3>
<p>双层循环</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> i, s=<span class="number">0</span>, n=<span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>; j&lt;n; j++) &#123;</span><br><span class="line">            s+=j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;结果为：%d&quot;</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="14-2-4-时间复杂度-o-log-sub-2-sub-n">14.2.4 时间复杂度 O(log<sub>2</sub>n)</h3>
<blockquote>
<p>求一棵树的深度，因为：二叉树叶子节点数 = 2<sup>n</sup>（n 为二叉树的深度-1）</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span> <span class="built_in">array</span>[], <span class="type">int</span> n, <span class="type">int</span> v)</span> &#123;</span><br><span class="line">    <span class="type">int</span> left, right, middle;</span><br><span class="line">    left=<span class="number">0</span>, right=n<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;=right) &#123;</span><br><span class="line">        middle=(left+right)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">array</span>[middle]&gt;v) &#123;</span><br><span class="line">            right=middle;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">array</span>[middle]&lt;v) &#123;</span><br><span class="line">            left=middle;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> middle;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="14-2-5-时间复杂度-o-nlog-sub-2-sub-n">14.2.5 时间复杂度 O(nlog<sub>2</sub>n)</h3>
<p>典型代表：堆排序，每次重建栈的时间复杂度是 log<sub>2</sub>n，n 个元素基本上就是 nlog<sub>2</sub>n。</p>
<h2 id="14-3-程序填空题">14.3 程序填空题</h2>
<blockquote>
<p>一般第一个空是填写程序初始化（3），争取争取</p>
</blockquote>
<h1>十五、面向对象程序设计</h1>
<blockquote>
<p>争取 &gt;=3</p>
</blockquote>
<p>汇编语言就是低级语言，可以直接描述/控制 CPU 的运行。</p>
<h2 id="15-1-c-语法要点-速记">15.1 C++ 语法要点【速记】</h2>
<p>编译型编程语言</p>
<p>编译器的工作方式及特点：先翻译后执行，用户程序运行效率高但可移植性差。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230523110856622.png" alt=""></p>
<ul>
<li>词法分析：分析词性（这个词属于名词？形容词？动词？）</li>
<li>语法分析：分析各种介词短语、名词短语、动词短语……</li>
<li>语义分析：分析词语串起来后，整个句子的意思是什么（类型检查）</li>
</ul>
<h2 id="15-2-java-语法要点">15.2 Java 语法要点</h2>
<p>解释型编程语言</p>
<p>解释器的工作方式及特点：边翻译边执行，用户程序运行效率低但可移植性好。</p>
<p>Java 语言的特征</p>
<ol>
<li><strong>即时编译</strong></li>
<li>对象在堆空间分配</li>
<li>自动的垃圾回收处理</li>
</ol>
<h2 id="15-3-python-语法要点">15.3 Python 语法要点</h2>
<p>解释型编程语言</p>
<p>Python 语言特点</p>
<ol>
<li><strong>动态编程</strong></li>
<li>跨平台、开源</li>
<li>支持面向对象程序设计</li>
</ol>
<h3 id="15-3-1-元组-tuple">15.3.1 元组（tuple）</h3>
<p>与列表（list）类似，是一个有序的数据集合，但是其中的元素不能像列表那样允许添加和删除。</p>
<h2 id="15-4-设计模式程序实现">15.4 设计模式程序实现</h2>
<h2 id="15-5-结构化语言">15.5 结构化语言</h2>
<h3 id="15-5-1-顺序语句">15.5.1 顺序语句</h3>
<h3 id="15-5-2-选择语句">15.5.2 选择语句</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">IF 条件 THEN</span><br><span class="line">    分支内容</span><br><span class="line">ELSE IF 条件 THEN</span><br><span class="line">    分支内容</span><br><span class="line">ELSE</span><br><span class="line">    分支内容</span><br><span class="line">ENDIF</span><br></pre></td></tr></table></figure>
<h3 id="15-5-3-循环语句">15.5.3 循环语句</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">WHILE 下雨 </span><br><span class="line">DO&#123;</span><br><span class="line">    在家</span><br><span class="line">    IF 不下雨 THEN</span><br><span class="line">        出门</span><br><span class="line">    ENDIF</span><br><span class="line">&#125;</span><br><span class="line">ENDDO</span><br></pre></td></tr></table></figure>
<h1>十六、选择题速记</h1>
<h2 id="流水线完成-n-个任务的吞吐率">流水线完成 n 个任务的吞吐率</h2>
<p>流水线分段中的最大耗时为 T<sub>max</sub>，其他分段的耗时为 T<sub>sum</sub>，则流水线完成 n 个任务的吞吐率为 n÷(T<sub>max</sub>×n+T<sub>sum</sub>)。</p>
<h2 id="sram-dram">SRAM、DRAM</h2>
<ul>
<li>SRAM：是一种具有静止存取功能的内存。<strong>不需要刷新电路即能保存它内部的数据</strong>。</li>
<li>DRAM：即动态随机存取存储器，最为常见的系统内存。<strong>只能将数据保存很短的时间。为保持数据，DRAM 使用电容存储，所以必须隔一段时间刷新一次，如果存储单元没有被刷新，存储的信息就会丢失</strong>。</li>
</ul>
<h2 id="iso-iec-软件质量模型">ISO/IEC 软件质量模型</h2>
<table>
<thead>
<tr>
<th>属性</th>
<th>子特性</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>功能性</td>
<td>适合性、准确性、互操作性、安全保密性</td>
<td>功能性的依从性</td>
</tr>
<tr>
<td>可靠性</td>
<td>容错性、易恢复性、成熟性</td>
<td>可靠性的依从性</td>
</tr>
<tr>
<td>易用性</td>
<td>易学性、易理解性、易操作性</td>
<td>易用性的依从性</td>
</tr>
<tr>
<td>效率</td>
<td>时间特性、资源利用特性</td>
<td>效率依从性</td>
</tr>
<tr>
<td>维护性</td>
<td>易测试性、易改变性、稳定性、易分析性</td>
<td>维护性的依从性</td>
</tr>
<tr>
<td>可移植性</td>
<td>适应性、易安装性、共存性、易替换性</td>
<td>可移植性的依从性</td>
</tr>
</tbody>
</table>
<h2 id="面向对象的主要活动">面向对象的主要活动</h2>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>面向对象分析时的五个活动</mtext><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn><mtext>、认定对象</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>2</mn><mtext>、组织对象</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>3</mn><mtext>、描述对象间的相互作用</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>4</mn><mtext>、确定对象的操作</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>5</mn><mtext>、定义对象的内部信息</mtext></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">面向对象分析时的五个活动
\begin{cases}
 1、认定对象 \\
 2、组织对象 \\
 3、描述对象间的相互作用 \\
 4、确定对象的操作 \\
 5、定义对象的内部信息
\end{cases}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:7.2000399999999996em;vertical-align:-3.3500199999999998em;"></span><span class="mord cjk_fallback">面</span><span class="mord cjk_fallback">向</span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">象</span><span class="mord cjk_fallback">分</span><span class="mord cjk_fallback">析</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">五</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">活</span><span class="mord cjk_fallback">动</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.85002em;"><span style="top:-0.6999900000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-0.6949900000000002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-0.9899900000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.2849900000000003em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.5799900000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.8749900000000006em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.1699900000000008em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.2049900000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.1500100000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.29501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.59001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.885010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.180010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.475010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.770010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.80501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-6.10002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.3500199999999998em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.8500000000000005em;"><span style="top:-5.850000000000001em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">1</span><span class="mord cjk_fallback">、</span><span class="mord cjk_fallback">认</span><span class="mord cjk_fallback">定</span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">象</span></span></span><span style="top:-4.410000000000001em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">2</span><span class="mord cjk_fallback">、</span><span class="mord cjk_fallback">组</span><span class="mord cjk_fallback">织</span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">象</span></span></span><span style="top:-2.9700000000000006em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">3</span><span class="mord cjk_fallback">、</span><span class="mord cjk_fallback">描</span><span class="mord cjk_fallback">述</span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">象</span><span class="mord cjk_fallback">间</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">相</span><span class="mord cjk_fallback">互</span><span class="mord cjk_fallback">作</span><span class="mord cjk_fallback">用</span></span></span><span style="top:-1.5300000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">4</span><span class="mord cjk_fallback">、</span><span class="mord cjk_fallback">确</span><span class="mord cjk_fallback">定</span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">象</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">操</span><span class="mord cjk_fallback">作</span></span></span><span style="top:-0.08999999999999997em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">5</span><span class="mord cjk_fallback">、</span><span class="mord cjk_fallback">定</span><span class="mord cjk_fallback">义</span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">象</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">内</span><span class="mord cjk_fallback">部</span><span class="mord cjk_fallback">信</span><span class="mord cjk_fallback">息</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.35em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>面向对象设计时的五个活动</mtext><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn><mtext>、识别类及对象</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>2</mn><mtext>、定义属性</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>3</mn><mtext>、定义服务</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>4</mn><mtext>、识别关系</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>5</mn><mtext>、识别包</mtext></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">面向对象设计时的五个活动
\begin{cases}
 1、识别类及对象 \\
 2、定义属性 \\
 3、定义服务 \\
 4、识别关系 \\
 5、识别包
\end{cases}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:7.2000399999999996em;vertical-align:-3.3500199999999998em;"></span><span class="mord cjk_fallback">面</span><span class="mord cjk_fallback">向</span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">象</span><span class="mord cjk_fallback">设</span><span class="mord cjk_fallback">计</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">五</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">活</span><span class="mord cjk_fallback">动</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.85002em;"><span style="top:-0.6999900000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-0.6949900000000002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-0.9899900000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.2849900000000003em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.5799900000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.8749900000000006em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.1699900000000008em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.2049900000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.1500100000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.29501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.59001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.885010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.180010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.475010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.770010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.80501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-6.10002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.3500199999999998em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.8500000000000005em;"><span style="top:-5.850000000000001em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">1</span><span class="mord cjk_fallback">、</span><span class="mord cjk_fallback">识</span><span class="mord cjk_fallback">别</span><span class="mord cjk_fallback">类</span><span class="mord cjk_fallback">及</span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">象</span></span></span><span style="top:-4.410000000000001em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">2</span><span class="mord cjk_fallback">、</span><span class="mord cjk_fallback">定</span><span class="mord cjk_fallback">义</span><span class="mord cjk_fallback">属</span><span class="mord cjk_fallback">性</span></span></span><span style="top:-2.9700000000000006em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">3</span><span class="mord cjk_fallback">、</span><span class="mord cjk_fallback">定</span><span class="mord cjk_fallback">义</span><span class="mord cjk_fallback">服</span><span class="mord cjk_fallback">务</span></span></span><span style="top:-1.5300000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">4</span><span class="mord cjk_fallback">、</span><span class="mord cjk_fallback">识</span><span class="mord cjk_fallback">别</span><span class="mord cjk_fallback">关</span><span class="mord cjk_fallback">系</span></span></span><span style="top:-0.08999999999999997em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">5</span><span class="mord cjk_fallback">、</span><span class="mord cjk_fallback">识</span><span class="mord cjk_fallback">别</span><span class="mord cjk_fallback">包</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.35em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<h2 id="面向对象的设计原则">面向对象的设计原则</h2>
<ul>
<li>接口分离原则：不应该强迫客户依赖于他们不用的方法。</li>
<li>开放封闭原则：软件实体（类、模块、函数等）应该是可以扩展的，即开放的；但是不可修改的，即封闭的。</li>
<li>共同封闭原则：包中的所有类对于同一性质的变化应该是共同封闭的。一个变化若对一个包产生影响，则将对该包中的所有类产生影响，而对于其他包则不造成任何影响。</li>
<li>共同重用原则：一个包中的所有类应该是共同重用的。如果重用了包中的一个类，那么就要重用包中的所有类。</li>
</ul>
<h2 id="单播-组播-广播">单播、组播、广播</h2>
<ul>
<li>单播：向特定的一台主机进行信息的发送</li>
<li>组播 = 多播：向特定的一组主机进行信息的发送</li>
<li>广播：向同一广播域的所有主机进行信息的发送</li>
</ul>
<h2 id="名词区分">名词区分</h2>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>名词区分</mtext><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>U</mi><mi>M</mi><mi>L</mi><mtext>用例之间的关系：包含关系、扩展关系、泛化关系</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>数据库实体间的联系类型：一对一、一对多、多对多</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>U</mi><mi>M</mi><mi>L</mi><mtext>类图之间的关系：关联关系（聚合关系、组合关系）、依赖关系、泛化关系、实现关系</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>关系模式：对象名称（对象属性</mtext><mn>1</mn><mtext>，对象属性</mtext><mn>2</mn><mtext>，</mtext><mo>…</mo><mo>…</mo><mtext>）</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>设计模式：创建型模型（工抽单原构）、结构型模型（代适桥组装享外）、行为型模型</mtext></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">名词区分
\begin{cases}
 UML用例之间的关系：包含关系、扩展关系、泛化关系 \\
 数据库实体间的联系类型：一对一、一对多、多对多 \\
 UML类图之间的关系：关联关系（聚合关系、组合关系）、依赖关系、泛化关系、实现关系 \\
 关系模式：对象名称（对象属性1，对象属性2，……） \\
 设计模式：创建型模型（工抽单原构）、结构型模型（代适桥组装享外）、行为型模型
\end{cases}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:7.2000399999999996em;vertical-align:-3.3500199999999998em;"></span><span class="mord cjk_fallback">名</span><span class="mord cjk_fallback">词</span><span class="mord cjk_fallback">区</span><span class="mord cjk_fallback">分</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.85002em;"><span style="top:-0.6999900000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-0.6949900000000002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-0.9899900000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.2849900000000003em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.5799900000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.8749900000000006em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.1699900000000008em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.2049900000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.1500100000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.29501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.59001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.885010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.180010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.475010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.770010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.80501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-6.10002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.3500199999999998em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.8500000000000005em;"><span style="top:-5.850000000000001em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault">L</span><span class="mord cjk_fallback">用</span><span class="mord cjk_fallback">例</span><span class="mord cjk_fallback">之</span><span class="mord cjk_fallback">间</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">关</span><span class="mord cjk_fallback">系</span><span class="mord cjk_fallback">：</span><span class="mord cjk_fallback">包</span><span class="mord cjk_fallback">含</span><span class="mord cjk_fallback">关</span><span class="mord cjk_fallback">系</span><span class="mord cjk_fallback">、</span><span class="mord cjk_fallback">扩</span><span class="mord cjk_fallback">展</span><span class="mord cjk_fallback">关</span><span class="mord cjk_fallback">系</span><span class="mord cjk_fallback">、</span><span class="mord cjk_fallback">泛</span><span class="mord cjk_fallback">化</span><span class="mord cjk_fallback">关</span><span class="mord cjk_fallback">系</span></span></span><span style="top:-4.410000000000001em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">据</span><span class="mord cjk_fallback">库</span><span class="mord cjk_fallback">实</span><span class="mord cjk_fallback">体</span><span class="mord cjk_fallback">间</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">联</span><span class="mord cjk_fallback">系</span><span class="mord cjk_fallback">类</span><span class="mord cjk_fallback">型</span><span class="mord cjk_fallback">：</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">、</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">多</span><span class="mord cjk_fallback">、</span><span class="mord cjk_fallback">多</span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">多</span></span></span><span style="top:-2.9700000000000006em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault">L</span><span class="mord cjk_fallback">类</span><span class="mord cjk_fallback">图</span><span class="mord cjk_fallback">之</span><span class="mord cjk_fallback">间</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">关</span><span class="mord cjk_fallback">系</span><span class="mord cjk_fallback">：</span><span class="mord cjk_fallback">关</span><span class="mord cjk_fallback">联</span><span class="mord cjk_fallback">关</span><span class="mord cjk_fallback">系</span><span class="mord cjk_fallback">（</span><span class="mord cjk_fallback">聚</span><span class="mord cjk_fallback">合</span><span class="mord cjk_fallback">关</span><span class="mord cjk_fallback">系</span><span class="mord cjk_fallback">、</span><span class="mord cjk_fallback">组</span><span class="mord cjk_fallback">合</span><span class="mord cjk_fallback">关</span><span class="mord cjk_fallback">系</span><span class="mord cjk_fallback">）</span><span class="mord cjk_fallback">、</span><span class="mord cjk_fallback">依</span><span class="mord cjk_fallback">赖</span><span class="mord cjk_fallback">关</span><span class="mord cjk_fallback">系</span><span class="mord cjk_fallback">、</span><span class="mord cjk_fallback">泛</span><span class="mord cjk_fallback">化</span><span class="mord cjk_fallback">关</span><span class="mord cjk_fallback">系</span><span class="mord cjk_fallback">、</span><span class="mord cjk_fallback">实</span><span class="mord cjk_fallback">现</span><span class="mord cjk_fallback">关</span><span class="mord cjk_fallback">系</span></span></span><span style="top:-1.5300000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">关</span><span class="mord cjk_fallback">系</span><span class="mord cjk_fallback">模</span><span class="mord cjk_fallback">式</span><span class="mord cjk_fallback">：</span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">象</span><span class="mord cjk_fallback">名</span><span class="mord cjk_fallback">称</span><span class="mord cjk_fallback">（</span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">象</span><span class="mord cjk_fallback">属</span><span class="mord cjk_fallback">性</span><span class="mord">1</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">象</span><span class="mord cjk_fallback">属</span><span class="mord cjk_fallback">性</span><span class="mord">2</span><span class="mord cjk_fallback">，</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">）</span></span></span><span style="top:-0.08999999999999997em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">设</span><span class="mord cjk_fallback">计</span><span class="mord cjk_fallback">模</span><span class="mord cjk_fallback">式</span><span class="mord cjk_fallback">：</span><span class="mord cjk_fallback">创</span><span class="mord cjk_fallback">建</span><span class="mord cjk_fallback">型</span><span class="mord cjk_fallback">模</span><span class="mord cjk_fallback">型</span><span class="mord cjk_fallback">（</span><span class="mord cjk_fallback">工</span><span class="mord cjk_fallback">抽</span><span class="mord cjk_fallback">单</span><span class="mord cjk_fallback">原</span><span class="mord cjk_fallback">构</span><span class="mord cjk_fallback">）</span><span class="mord cjk_fallback">、</span><span class="mord cjk_fallback">结</span><span class="mord cjk_fallback">构</span><span class="mord cjk_fallback">型</span><span class="mord cjk_fallback">模</span><span class="mord cjk_fallback">型</span><span class="mord cjk_fallback">（</span><span class="mord cjk_fallback">代</span><span class="mord cjk_fallback">适</span><span class="mord cjk_fallback">桥</span><span class="mord cjk_fallback">组</span><span class="mord cjk_fallback">装</span><span class="mord cjk_fallback">享</span><span class="mord cjk_fallback">外</span><span class="mord cjk_fallback">）</span><span class="mord cjk_fallback">、</span><span class="mord cjk_fallback">行</span><span class="mord cjk_fallback">为</span><span class="mord cjk_fallback">型</span><span class="mord cjk_fallback">模</span><span class="mord cjk_fallback">型</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.35em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>生活</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>视频片头片尾批量剪切</title>
    <url>/blog/eefdcde7.html</url>
    <content><![CDATA[<h1>视频片头片尾批量剪切</h1>
<p>放在 ffmpeg.exe 目录下运行批处理可实现批量剪片头片尾</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off &amp; setlocal enabledelayedexpansion</span><br><span class="line"></span><br><span class="line">rem ===================需手动设置===================</span><br><span class="line">rem 设定片头片尾长度，格式为 HH:mm:ss.fff</span><br><span class="line"><span class="built_in">set</span> <span class="string">&quot;s1=00:02:23.0&quot;</span></span><br><span class="line"><span class="built_in">set</span> <span class="string">&quot;s2=00:01:46.0&quot;</span></span><br><span class="line">rem ================================================</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> /f <span class="string">&quot;tokens=1-4delims=:.&quot;</span> %%a <span class="keyword">in</span> (<span class="string">&quot;%s2%&quot;</span>) <span class="keyword">do</span> (</span><br><span class="line">    <span class="built_in">set</span> /a <span class="string">&quot;t2=(1%%a %% 100 *3600 + 1%%b %% 100 * 60 + 1%%c %% 100) * 1000 + 1%%d %% 1000&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">md myvideo 2&gt;nul</span><br><span class="line"><span class="keyword">for</span> %%i <span class="keyword">in</span> (*.avi *.mkv *.mp4 *.flv) <span class="keyword">do</span> (</span><br><span class="line">    <span class="keyword">for</span> /f <span class="string">&quot;tokens=2-5delims=:., &quot;</span> %%a <span class="keyword">in</span> (<span class="string">&#x27;ffmpeg -i &quot;%%i&quot; 2^&gt;^&amp;1 ^| find &quot;Duration:&quot;&#x27;</span>) <span class="keyword">do</span> (</span><br><span class="line">        <span class="built_in">set</span> /a <span class="string">&quot;t=(1%%a%%100*3600+1%%b%%100*60+1%%c%%100)*1000+1%%d0%%1000,t-=t2,ms=t%%1000,t/=1000&quot;</span></span><br><span class="line">        <span class="built_in">set</span> /a h=t/3600,m=t%%3600/60,s=t%%60,h+=100,m+=100,s+=100,ms+=1000</span><br><span class="line">        <span class="built_in">set</span> <span class="string">&quot;t=!h:~1!:!m:~1!:!s:~1!.!ms:~1!&quot;</span></span><br><span class="line">        ffmpeg -ss !s1! -to !t! -accurate_seek -i <span class="string">&quot;%%i&quot;</span>  -c copy -avoid_negative_ts 1 <span class="string">&quot;myvideo\%%i&quot;</span> -y</span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>生活</category>
        <category>视频</category>
      </categories>
      <tags>
        <tag>视频</tag>
      </tags>
  </entry>
</search>
