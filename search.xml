<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker介绍</title>
    <url>/blog/6489f8a9.html</url>
    <content><![CDATA[<blockquote>
<p> 相关网址：</p>
<p><a href="https://www.docker.com/">Docker 官网</a></p>
<p><a href="https://docs.docker.com/">Docker 文档地址</a></p>
<p><a href="https://hub.docker.com/">Docker 仓库地址</a></p>
</blockquote>
<h1 id="一、Docker-是什么"><a href="#一、Docker-是什么" class="headerlink" title="一、Docker 是什么"></a>一、Docker 是什么</h1><p>Docker 就像一个命令不完整的轻量级的虚拟机，它将应用程序的代码、工具库、运行环境封装在一个容器中，我们到时候只需要执行一条命令即可，因此大大减轻了测试和部署的难度。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1656065889066.png"></p>
<h2 id="1-1-Docker-VS-VMware"><a href="#1-1-Docker-VS-VMware" class="headerlink" title="1.1 Docker VS VMware"></a>1.1 Docker VS VMware</h2><p>Docker 和 VMware 都是属于虚拟化技术</p>
<ul>
<li>VMware 虚拟的是一台或多台电脑，笨重（占用资源多，冗余步骤多【每次都要开机都要初始化】，启动速度慢）</li>
<li>Docker 虚拟的是镜像，镜像 &#x3D; 最核心的环境（4m）+ JDK + MySQL + ……，直接运行镜像就可以了，小巧（Docker 容器模拟的并不是一个完整的操作系统，容器运行在操作系统之上，共享系统内核，相互之间使用沙箱机制，不会有任何接口，所以一个容器崩了，其他容器不受影响，当然也可以使用 Nginx 进行跨域关联起来）</li>
</ul>
<h2 id="1-2-镜像是什么"><a href="#1-2-镜像是什么" class="headerlink" title="1.2 镜像是什么"></a>1.2 镜像是什么</h2><p>镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。</p>
<p>同时，就像代码可以保存到 GitHub 中开源，镜像也可以提交到 DockerHub 中</p>
<h2 id="1-3-镜像加载原理"><a href="#1-3-镜像加载原理" class="headerlink" title="1.3 镜像加载原理"></a>1.3 镜像加载原理</h2><h3 id="1-3-1-UnionFS（联合文件系统）"><a href="#1-3-1-UnionFS（联合文件系统）" class="headerlink" title="1.3.1 UnionFS（联合文件系统）"></a>1.3.1 UnionFS（联合文件系统）</h3><p>UnionFS（联合文件系统）是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下（unite serveral directories into a single virtual filesystem）。Union 文件系统是 Docker 镜像的基础。镜像可以通过分层来进行继承（不同镜像之间可以使用同一个底层系统，然后节省空间），基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。</p>
<p>特性：以此同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件叠加起来，这样最终的文件系统会包含所有底层的文件和目录。</p>
<h3 id="1-3-2-镜像加载原理"><a href="#1-3-2-镜像加载原理" class="headerlink" title="1.3.2 镜像加载原理"></a>1.3.2 镜像加载原理</h3><p>docker 的镜像实际上由一层一层的文件系统组成，这种层级的文件系统 UnionFS。</p>
<h4 id="bootfs（boot-file-system）"><a href="#bootfs（boot-file-system）" class="headerlink" title="bootfs（boot file system）"></a>bootfs（boot file system）</h4><p>bootfs 主要包含 BootLoader 和 kernel，BootLoader 主要是引导加载 kernel，Linux 刚启动时会加载 bootfs 文件系统，在 Docker 镜像的最底层是 bootfs。这一层与我们典型的 Linux&#x2F;Unix 系统是一样的，包含 boot 加载器和内核。当 boot 加载完成之后整个内核就都在内存中了，此时内存的使用权已由 bootfs 转交给内核，此时系统也会卸载 bootfs。</p>
<h4 id="rootfs（root-file-system）"><a href="#rootfs（root-file-system）" class="headerlink" title="rootfs（root file system）"></a>rootfs（root file system）</h4><p>rootfs 在 bootfs 之上。包含的就是典型 Linux 系统中的 &#x2F;dev、&#x2F;proc、&#x2F;bin、&#x2F;etc 等标准目录和文件。rootfs 就是各种不同的操作系统发行版，比如 Ubuntu，CentOS 等等。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1656399799960.png"></p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1649487227223.png"></p>
<p>例如：对于一个精简的 OS，rootfs 可以很小，只需要包含最基本的命令，工具和程序库就可以了，因为底层直接用 Host 的 kernel，自己只需要提供 rootfs 就可以了。由此可见对不同的 Linux 发行版，bootfs 基本是一致的，rootfs 会有差别，因此不同的发行版可以公用 bootfs。</p>
<h3 id="1-3-3-分层的理解"><a href="#1-3-3-分层的理解" class="headerlink" title="1.3.3 分层的理解"></a>1.3.3 分层的理解</h3><p>在下载镜像的时候可以观察日志输出，可以看到是一层一层的在下载。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1649487257810.png"></p>
<p>思考：为什么 Docker 镜像要采用这种分层的结构？</p>
<p>最大的好处就是资源共享，比如有多个镜像都从相同的 Base 镜像构建而来，那么宿主机只需在磁盘上保留一份 base 镜像，同时内存中也只需要加载一份 base 镜像，这样就可以为所有的容器服务了，而且镜像的每一层都可以被共享。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看镜像分层</span></span><br><span class="line">[root@localhost ~]# docker image inspect tomcat:8.0</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: &quot;sha256:ef6a7c98d192507d6066dcf24e44bec66d07ec9cf7c55d8d3d1ea0a24660bdef&quot;,</span><br><span class="line">        &quot;RepoTags&quot;: [</span><br><span class="line">            &quot;tomcat:8.0&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;RepoDigests&quot;: [</span><br><span class="line">            &quot;tomcat@sha256:8ecb10948deb32c34aeadf7bf95d12a93fbd3527911fa629c1a3e7823b89ce6f&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;Parent&quot;: &quot;&quot;,</span><br><span class="line">        &quot;Comment&quot;: &quot;&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2018-09-12T20:42:22.931362721Z&quot;,</span><br><span class="line">        &quot;Container&quot;: &quot;537db43b9934d84b08d1226d9e86480c27d0e76eec5dd044cba72a8edc8e193f&quot;,</span><br><span class="line">        &quot;ContainerConfig&quot;: &#123;</span><br><span class="line">            &quot;Hostname&quot;: &quot;537db43b9934&quot;,</span><br><span class="line">            &quot;Domainname&quot;: &quot;&quot;,</span><br><span class="line">            &quot;User&quot;: &quot;&quot;,</span><br><span class="line">            &quot;AttachStdin&quot;: false,</span><br><span class="line">            &quot;AttachStdout&quot;: false,</span><br><span class="line">            &quot;AttachStderr&quot;: false,</span><br><span class="line">            &quot;ExposedPorts&quot;: &#123;</span><br><span class="line">                &quot;8080/tcp&quot;: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;Tty&quot;: false,</span><br><span class="line">            &quot;OpenStdin&quot;: false,</span><br><span class="line">            &quot;StdinOnce&quot;: false,</span><br><span class="line">            &quot;Env&quot;: [</span><br><span class="line">                &quot;PATH=/usr/local/tomcat/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;,</span><br><span class="line">                &quot;LANG=C.UTF-8&quot;,</span><br><span class="line">                &quot;JAVA_HOME=/docker-java-home/jre&quot;,</span><br><span class="line">                &quot;JAVA_VERSION=7u181&quot;,</span><br><span class="line">                &quot;JAVA_DEBIAN_VERSION=7u181-2.6.14-1~deb8u1&quot;,</span><br><span class="line">                &quot;CATALINA_HOME=/usr/local/tomcat&quot;,</span><br><span class="line">                &quot;TOMCAT_NATIVE_LIBDIR=/usr/local/tomcat/native-jni-lib&quot;,</span><br><span class="line">                &quot;LD_LIBRARY_PATH=/usr/local/tomcat/native-jni-lib&quot;,</span><br><span class="line">                &quot;OPENSSL_VERSION=1.1.0f-3+deb9u2&quot;,</span><br><span class="line">                &quot;GPG_KEYS=05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 713DA88BE50911535FE716F5208B0AB1D63011C7 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23&quot;,</span><br><span class="line">                &quot;TOMCAT_MAJOR=8&quot;,</span><br><span class="line">                &quot;TOMCAT_VERSION=8.0.53&quot;,</span><br><span class="line">                &quot;TOMCAT_SHA512=cd8a4e48a629a2f2bb4ce6b101ebcce41da52b506064396ec1b2915c0b0d8d82123091242f2929a649bcd8b65ecf6cd1ab9c7d90ac0e261821097ab6fbe22df9&quot;,</span><br><span class="line">                &quot;TOMCAT_TGZ_URLS=https://www.apache.org/dyn/closer.cgi?action=download&amp;filename=tomcat/tomcat-8/v8.0.53/bin/apache-tomcat-8.0.53.tar.gz \thttps://www-us.apache.org/dist/tomcat/tomcat-8/v8.0.53/bin/apache-tomcat-8.0.53.tar.gz \thttps://www.apache.org/dist/tomcat/tomcat-8/v8.0.53/bin/apache-tomcat-8.0.53.tar.gz \thttps://archive.apache.org/dist/tomcat/tomcat-8/v8.0.53/bin/apache-tomcat-8.0.53.tar.gz&quot;,</span><br><span class="line">                &quot;TOMCAT_ASC_URLS=https://www.apache.org/dyn/closer.cgi?action=download&amp;filename=tomcat/tomcat-8/v8.0.53/bin/apache-tomcat-8.0.53.tar.gz.asc \thttps://www-us.apache.org/dist/tomcat/tomcat-8/v8.0.53/bin/apache-tomcat-8.0.53.tar.gz.asc \thttps://www.apache.org/dist/tomcat/tomcat-8/v8.0.53/bin/apache-tomcat-8.0.53.tar.gz.asc \thttps://archive.apache.org/dist/tomcat/tomcat-8/v8.0.53/bin/apache-tomcat-8.0.53.tar.gz.asc&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Cmd&quot;: [</span><br><span class="line">                &quot;/bin/sh&quot;,</span><br><span class="line">                &quot;-c&quot;,</span><br><span class="line">                &quot;#(nop) &quot;,</span><br><span class="line">                &quot;CMD [\&quot;catalina.sh\&quot; \&quot;run\&quot;]&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;ArgsEscaped&quot;: true,</span><br><span class="line">            &quot;Image&quot;: &quot;sha256:1d3fb924acd246fd2804e5907fd81405abf7cc86072703417daf15bbf551f2e1&quot;,</span><br><span class="line">            &quot;Volumes&quot;: null,</span><br><span class="line">            &quot;WorkingDir&quot;: &quot;/usr/local/tomcat&quot;,</span><br><span class="line">            &quot;Entrypoint&quot;: null,</span><br><span class="line">            &quot;OnBuild&quot;: [],</span><br><span class="line">            &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;DockerVersion&quot;: &quot;17.06.2-ce&quot;,</span><br><span class="line">        &quot;Author&quot;: &quot;&quot;,</span><br><span class="line">        &quot;Config&quot;: &#123;</span><br><span class="line">            &quot;Hostname&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Domainname&quot;: &quot;&quot;,</span><br><span class="line">            &quot;User&quot;: &quot;&quot;,</span><br><span class="line">            &quot;AttachStdin&quot;: false,</span><br><span class="line">            &quot;AttachStdout&quot;: false,</span><br><span class="line">            &quot;AttachStderr&quot;: false,</span><br><span class="line">            &quot;ExposedPorts&quot;: &#123;</span><br><span class="line">                &quot;8080/tcp&quot;: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;Tty&quot;: false,</span><br><span class="line">            &quot;OpenStdin&quot;: false,</span><br><span class="line">            &quot;StdinOnce&quot;: false,</span><br><span class="line">            &quot;Env&quot;: [</span><br><span class="line">                &quot;PATH=/usr/local/tomcat/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;,</span><br><span class="line">                &quot;LANG=C.UTF-8&quot;,</span><br><span class="line">                &quot;JAVA_HOME=/docker-java-home/jre&quot;,</span><br><span class="line">                &quot;JAVA_VERSION=7u181&quot;,</span><br><span class="line">                &quot;JAVA_DEBIAN_VERSION=7u181-2.6.14-1~deb8u1&quot;,</span><br><span class="line">                &quot;CATALINA_HOME=/usr/local/tomcat&quot;,</span><br><span class="line">                &quot;TOMCAT_NATIVE_LIBDIR=/usr/local/tomcat/native-jni-lib&quot;,</span><br><span class="line">                &quot;LD_LIBRARY_PATH=/usr/local/tomcat/native-jni-lib&quot;,</span><br><span class="line">                &quot;OPENSSL_VERSION=1.1.0f-3+deb9u2&quot;,</span><br><span class="line">                &quot;GPG_KEYS=05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 713DA88BE50911535FE716F5208B0AB1D63011C7 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23&quot;,</span><br><span class="line">                &quot;TOMCAT_MAJOR=8&quot;,</span><br><span class="line">                &quot;TOMCAT_VERSION=8.0.53&quot;,</span><br><span class="line">                &quot;TOMCAT_SHA512=cd8a4e48a629a2f2bb4ce6b101ebcce41da52b506064396ec1b2915c0b0d8d82123091242f2929a649bcd8b65ecf6cd1ab9c7d90ac0e261821097ab6fbe22df9&quot;,</span><br><span class="line">                &quot;TOMCAT_TGZ_URLS=https://www.apache.org/dyn/closer.cgi?action=download&amp;filename=tomcat/tomcat-8/v8.0.53/bin/apache-tomcat-8.0.53.tar.gz \thttps://www-us.apache.org/dist/tomcat/tomcat-8/v8.0.53/bin/apache-tomcat-8.0.53.tar.gz \thttps://www.apache.org/dist/tomcat/tomcat-8/v8.0.53/bin/apache-tomcat-8.0.53.tar.gz \thttps://archive.apache.org/dist/tomcat/tomcat-8/v8.0.53/bin/apache-tomcat-8.0.53.tar.gz&quot;,</span><br><span class="line">                &quot;TOMCAT_ASC_URLS=https://www.apache.org/dyn/closer.cgi?action=download&amp;filename=tomcat/tomcat-8/v8.0.53/bin/apache-tomcat-8.0.53.tar.gz.asc \thttps://www-us.apache.org/dist/tomcat/tomcat-8/v8.0.53/bin/apache-tomcat-8.0.53.tar.gz.asc \thttps://www.apache.org/dist/tomcat/tomcat-8/v8.0.53/bin/apache-tomcat-8.0.53.tar.gz.asc \thttps://archive.apache.org/dist/tomcat/tomcat-8/v8.0.53/bin/apache-tomcat-8.0.53.tar.gz.asc&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Cmd&quot;: [</span><br><span class="line">                &quot;catalina.sh&quot;,</span><br><span class="line">                &quot;run&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;ArgsEscaped&quot;: true,</span><br><span class="line">            &quot;Image&quot;: &quot;sha256:1d3fb924acd246fd2804e5907fd81405abf7cc86072703417daf15bbf551f2e1&quot;,</span><br><span class="line">            &quot;Volumes&quot;: null,</span><br><span class="line">            &quot;WorkingDir&quot;: &quot;/usr/local/tomcat&quot;,</span><br><span class="line">            &quot;Entrypoint&quot;: null,</span><br><span class="line">            &quot;OnBuild&quot;: [],</span><br><span class="line">            &quot;Labels&quot;: null</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Architecture&quot;: &quot;amd64&quot;,</span><br><span class="line">        &quot;Os&quot;: &quot;linux&quot;,</span><br><span class="line">        &quot;Size&quot;: 356245923,</span><br><span class="line">        &quot;VirtualSize&quot;: 356245923,</span><br><span class="line">        &quot;GraphDriver&quot;: &#123;</span><br><span class="line">            &quot;Data&quot;: &#123;</span><br><span class="line">                &quot;LowerDir&quot;: &quot;/var/lib/docker/overlay2/5467095563d0eeb7800cbe149e38b134094b17d8aa7747a3489b3f4cceed84a8/diff:/var/lib/docker/overlay2/89de18b5ee2a1908787b40e6ad5bd86e42d33296f78800cc54db2884d5c58dd9/diff:/var/lib/docker/overlay2/cbb8e55d674460e4665642025d769aea683b17791cf63befd079ff2330b9970a/diff:/var/lib/docker/overlay2/953860e1c90c9c24927507effc2fdf1ba27d26c218e9739bca296e5104793f62/diff:/var/lib/docker/overlay2/8ddf5a9115e182e660f055eb223454d4159bf54b53258ba9d37fd3bb4369e21e/diff:/var/lib/docker/overlay2/4837f5a37d13a562d57675ee0d9c9fa1ef8edaa93b7b4a28cfce280fedcc3785/diff:/var/lib/docker/overlay2/297ed5eb5bca37cbf115cadd1c301c53b982ed69b79ddfbdbf0c54fa79fd1fcf/diff:/var/lib/docker/overlay2/b57865f8cfdecde7d7db93fe4eca53c71843206bf3299452096051233a515ac8/diff:/var/lib/docker/overlay2/0c28360e0ccb7f91776c5cc66f56b092f27618eda1f42549aac9f831ce73e3f8/diff:/var/lib/docker/overlay2/d159fa1ad10d5869ceaea96ba9b743d9ecd989431e9d9934edace1932f14826e/diff&quot;,</span><br><span class="line">                &quot;MergedDir&quot;: &quot;/var/lib/docker/overlay2/0576b5f7dd7201c4de9acdf0e52f895efe3b19c33cd4284823a009a22d9fbd86/merged&quot;,</span><br><span class="line">                &quot;UpperDir&quot;: &quot;/var/lib/docker/overlay2/0576b5f7dd7201c4de9acdf0e52f895efe3b19c33cd4284823a009a22d9fbd86/diff&quot;,</span><br><span class="line">                &quot;WorkDir&quot;: &quot;/var/lib/docker/overlay2/0576b5f7dd7201c4de9acdf0e52f895efe3b19c33cd4284823a009a22d9fbd86/work&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;Name&quot;: &quot;overlay2&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;RootFS&quot;: &#123;</span><br><span class="line">            &quot;Type&quot;: &quot;layers&quot;,</span><br><span class="line">            &quot;Layers&quot;: [</span><br><span class="line">                &quot;sha256:8c466bf4ca6ffdda8b7717b1cd6fe31109529ee64e626a003a224fb8bd2bc469&quot;,</span><br><span class="line">                &quot;sha256:daf45b2cad9af3ea091d4376d34fb597a9a67874d48fe5a485e1305df10b3157&quot;,</span><br><span class="line">                &quot;sha256:c596d5191368693d366c9b47cc20007efcedd0873691c8895d3684162d469447&quot;,</span><br><span class="line">                &quot;sha256:425325c72d902feb9c15b3c9204fc7c24435dfaea2e750db3acda5a11c569049&quot;,</span><br><span class="line">                &quot;sha256:fc6174f0df4a7466f749d9ae334872f38336bb761962ba15657b771116cb8546&quot;,</span><br><span class="line">                &quot;sha256:39a6e47c4ae6efdd2a0834d81c1bd2860a16cbe5c3c1de28934ee26721bd98c4&quot;,</span><br><span class="line">                &quot;sha256:81242e1e644e4d52602431e4c847f4e1ec599761f2ca082cfdf3c38508ddd9d4&quot;,</span><br><span class="line">                &quot;sha256:9f052711b40a241eec2783c062a743ad4f7870681024b375714cd277db497ec2&quot;,</span><br><span class="line">                &quot;sha256:f26731984f9bb4dc5f286008361729b717d51c2d60989c5e1b2d07d713d9de1f&quot;,</span><br><span class="line">                &quot;sha256:583dc95d65c92bd5b5fdb57c640f391435078ff6da2cc9653a7d32457d3cd8b7&quot;,</span><br><span class="line">                &quot;sha256:d0f3f4011f287adc910aada9e2fee49c67de366654ea7c02b47d36f9736442fc&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Metadata&quot;: &#123;</span><br><span class="line">            &quot;LastTagTime&quot;: &quot;0001-01-01T00:00:00Z&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h1 id="二、Docker-能做什么"><a href="#二、Docker-能做什么" class="headerlink" title="二、Docker 能做什么"></a>二、Docker 能做什么</h1><h2 id="2-1-多环境的部署切换"><a href="#2-1-多环境的部署切换" class="headerlink" title="2.1 多环境的部署切换"></a>2.1 多环境的部署切换</h2><p>利用 Docker 能够原封不动地将【开发环境】中的一整套东西（JAR 包 + Jdk、Redis集群、MySQL集群、Hadoop 等）迁移到【测试环境】或【生产环境】中，再配合一定的自动化流程即可实现自动发布。</p>
<h1 id="三、Docker-资源汇总"><a href="#三、Docker-资源汇总" class="headerlink" title="三、Docker 资源汇总"></a>三、Docker 资源汇总</h1><h2 id="Docker-官方英文资源"><a href="#Docker-官方英文资源" class="headerlink" title="Docker 官方英文资源"></a>Docker 官方英文资源</h2><ul>
<li><a href="http://www.docker.com/">Docker 官网</a></li>
<li><a href="https://docs.docker.com/windows/">Docker windows 入门</a></li>
<li><a href="https://docs.docker.com/linux/">Docker Linux 入门</a></li>
<li><a href="https://docs.docker.com/mac/">Docker mac 入门</a></li>
<li><a href="https://docs.docker.com/engine/userguide/">Docker 用户指引</a></li>
<li><a href="http://blog.docker.com/">Docker 官方博客</a></li>
<li><a href="https://hub.docker.com/">Docker Hub</a></li>
<li><a href="https://www.docker.com/open-source">Docker 开源</a></li>
</ul>
<h2 id="Docker-中文资源"><a href="#Docker-中文资源" class="headerlink" title="Docker 中文资源"></a>Docker 中文资源</h2><ul>
<li><a href="http://www.docker.org.cn/">Docker 中文网站</a></li>
<li><a href="http://www.docker.org.cn/book/install.html">Docker 安装手册</a></li>
<li><a href="https://blog.csphere.cn/archives/22">一小时 Docker 教程</a></li>
<li><a href="http://dockerpool.com/static/books/docker_practice/index.html">Docker 从入门到实践</a></li>
<li><a href="http://www.widuu.com/chinese_docker/index.html">Docker 中文指南</a></li>
</ul>
<h2 id="其他资源"><a href="#其他资源" class="headerlink" title="其他资源"></a>其他资源</h2><ul>
<li><a href="http://www.jb51.net/list/list_256_1.htm">http://www.jb51.net/list/list_256_1.htm</a></li>
<li><a href="https://github.com/docker/docker">https://github.com/docker/docker</a></li>
<li><a href="https://wiki.openstack.org/wiki/Docker">https://wiki.openstack.org/wiki/Docker</a></li>
<li><a href="https://wiki.archlinux.org/index.php/Docker">https://wiki.archlinux.org/index.php/Docker</a></li>
</ul>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装与配置_Linux</title>
    <url>/blog/edc3fdf.html</url>
    <content><![CDATA[<blockquote>
<p><a href="https://docs.docker.com/">官方在线文档</a></p>
</blockquote>
<h1 id="一、Docker-安装"><a href="#一、Docker-安装" class="headerlink" title="一、Docker 安装"></a>一、Docker 安装</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、查看</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、卸载旧版本</span></span><br><span class="line">[root@localhost ~]# yum remove docker</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">No Match for argument: docker</span><br><span class="line">No Packages marked for removal</span><br><span class="line"></span><br><span class="line">yum remove docker \</span><br><span class="line">docker-client \</span><br><span class="line">docker-client-latest \</span><br><span class="line">docker-common \</span><br><span class="line">docker-latest \</span><br><span class="line">docker-latest-logrotate \</span><br><span class="line">docker-logrotate \</span><br><span class="line">docker-engine</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、下载安装包</span></span><br><span class="line">yum install -y yum-utils</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3、设置镜像仓库</span></span><br><span class="line">yum-config-manager \</span><br><span class="line">--add-repo \</span><br><span class="line">https://download.docker.com/linux/centos/docker-ce.repo # 官网默认使用国外地址，慢</span><br><span class="line">yum-config-manager \</span><br><span class="line">--add-repo \</span><br><span class="line">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo # 国内阿里云镜像加速地址，快</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新yum软件包索引</span></span><br><span class="line">yum makecache fast</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4、安装Docker</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker-ce：ce表示社区版；ee表示企业版</span></span><br><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">5、启动Docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">6、判断Docker是否安装及启动成功</span></span><br><span class="line">docker version</span><br></pre></td></tr></table></figure>

<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1649487811778.png"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">9、查看下载的镜像</span></span><br><span class="line">[root@localhost ~]# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID   CREATED   SIZE</span><br></pre></td></tr></table></figure>

<h1 id="二、Docker-卸载"><a href="#二、Docker-卸载" class="headerlink" title="二、Docker 卸载"></a>二、Docker 卸载</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载docker依赖</span></span><br><span class="line">[root@localhost ~]# yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除docker环境（这里是docker的默认工作路径）</span></span><br><span class="line">[root@localhost ~]# rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure>

<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo建站笔记</title>
    <url>/blog/61245e5.html</url>
    <content><![CDATA[<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><blockquote>
<p><a href="https://hexo.io/zh-cn/docs/">文档 | Hexo</a></p>
</blockquote>
<ul>
<li><a href="http://nodejs.org/">Node.js</a> (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li>
<li><a href="http://git-scm.com/">Git</a></li>
<li><a href="https://www.aliyun.com/">阿里云OSS</a>【<a href="https://help.aliyun.com/document_detail/173535.htm?spm=a2c4g.450471.0.0.5f3331c9a6KFCy#concept-2558367">流量费用 (aliyun.com)</a>】</li>
</ul>
<h1 id="建站指令"><a href="#建站指令" class="headerlink" title="建站指令"></a>建站指令</h1><blockquote>
<p><a href="https://hexo.io/zh-cn/docs/commands">指令 | Hexo</a></p>
</blockquote>
<h1 id="使用主题"><a href="#使用主题" class="headerlink" title="使用主题"></a>使用主题</h1><p>在 Hexo 官网的主题页面选择自己想要的主题：<a href="https://hexo.io/themes/">Themes | Hexo</a></p>
<p>对应的主题内会有使用步骤说明</p>
<h1 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h1><h2 id="文章搜索插件"><a href="#文章搜索插件" class="headerlink" title="文章搜索插件"></a>文章搜索插件</h2><p>安装 npm 包：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<p>然后将以下配置复制到博客根目录下的 <code>_config.yml</code> 里（注意不是 ayer 目录下的）：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br></pre></td></tr></table></figure>

<h2 id="RSS-订阅插件"><a href="#RSS-订阅插件" class="headerlink" title="RSS 订阅插件"></a>RSS 订阅插件</h2><p>安装 npm 包：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>

<p>然后将以下配置复制到你博客根目录下的 <code>_config.yml</code> 里（注意不是 ayer 目录下的）:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">hub:</span></span><br><span class="line">  <span class="attr">content:</span></span><br><span class="line">  <span class="attr">content_limit:</span> <span class="number">140</span></span><br><span class="line">  <span class="attr">content_limit_delim:</span> <span class="string">&quot; &quot;</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br></pre></td></tr></table></figure>

<h2 id="文章永久链接插件"><a href="#文章永久链接插件" class="headerlink" title="文章永久链接插件"></a>文章永久链接插件</h2><p>Hexo 默认的静态 URL 格式是 <code>:year/:month/:day/:title</code>，也就是按照年、月、日、标题来生成固定链接的。如：<code>http://xxx.yy.com/2020/07/06/hello-world</code></p>
<p>这种默认配置的缺点就是一般文件名是中文，导致 url 链接里有中文出现，这会造成很多问题（例如 md 文件名改变后，访问链接也会跟着变），也不利于 seo，另外就是年月日都会有分隔符。</p>
<p>安装 npm 包：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install hexo-abbrlink --save</span></span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@2.3.2 (node_modules\fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)</span><br><span class="line"></span><br><span class="line">+ hexo-abbrlink@2.2.1</span><br><span class="line">added 5 packages from 9 contributors and audited 248 packages in 5.109s</span><br><span class="line"></span><br><span class="line">22 packages are looking for funding</span><br><span class="line">  run `npm fund` for details</span><br><span class="line"></span><br><span class="line">found 0 vulnerabilities</span><br></pre></td></tr></table></figure>

<p>修改 <code>_config.yml </code>文件中的配置项（记得把原来的 <code>permalink:</code> 删除掉）：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span></span><br><span class="line"><span class="comment"># url: http://example.com</span></span><br><span class="line"><span class="comment"># permalink: :year/:month/:day/:title/</span></span><br><span class="line"><span class="comment"># permalink_defaults:</span></span><br><span class="line"><span class="comment"># pretty_urls:</span></span><br><span class="line"><span class="comment">#   trailing_index: true # Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span></span><br><span class="line"><span class="comment">#   trailing_html: true # Set to false to remove trailing &#x27;.html&#x27; from permalinks</span></span><br><span class="line"><span class="comment"># hexo-abbrlink</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">blog/:abbrlink.html</span> <span class="comment"># 也可以直接写 :abbrlink/</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span> <span class="comment"># 算法： crc16(default) and crc32</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">hex</span> <span class="comment"># 进制： dec(default) and hex</span></span><br></pre></td></tr></table></figure>

<p>配置修改完后，需要清除掉之前已生成的网页，然后重新生成</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo clean</span></span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Deleted database.</span><br><span class="line">INFO  Deleted public folder.</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo g</span></span><br></pre></td></tr></table></figure>

<p>插件说明：</p>
<ul>
<li><code>alg</code>：算法（目前支持 <code>crc16</code> 和 <code>crc32</code> 算法，默认值是 <code>crc16</code>）</li>
<li><code>rep</code>：形式（生成的链接可以是十六进制格式也可以是十进制格式，默认值是十进制格式）</li>
</ul>
<p>生成链接样式：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># crc16 &amp; hex</span></span><br><span class="line"><span class="string">https://post.zz173.com/posts/66c8.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># crc16 &amp; dec</span></span><br><span class="line"><span class="string">https://post.zz173.com/posts/65535.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># crc32 &amp; hex</span></span><br><span class="line"><span class="string">https://post.zz173.com/posts/8ddf18fb.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># crc32 &amp; dec</span></span><br><span class="line"><span class="string">https://post.zz173.com/posts/1690090958.html</span></span><br></pre></td></tr></table></figure>

<h3 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h3><p>如果出现 undefined 的情况，</p>
<ol>
<li>检查是否已经执行 hexo clean</li>
<li>检查 package.json 文件，看看是否已安装 hexo-abbrlink 插件</li>
</ol>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>生活</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK、JRE、JVM</title>
    <url>/blog/9e853523.html</url>
    <content><![CDATA[<h1 id="一、JDK、JRE、JVM-有什么关系？"><a href="#一、JDK、JRE、JVM-有什么关系？" class="headerlink" title="一、JDK、JRE、JVM 有什么关系？"></a>一、JDK、JRE、JVM 有什么关系？</h1><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1557711983254.png"></p>
<p>JDK（Java development toolkit）——相当于是 Java 的库函数，是编译、运行 Java 程序的工具包，是一切 Java 应用程序的基础，所有 Java 应用程序是构建在这个之上的。（汽车）</p>
<p>JRE（Java Runtime Environment）——Java 运行环境，也就是 Java 平台。所有的 Java 程序都要在 JRE 下才能运行。JDK 的工具也是 Java 程序，也需要 JRE 才能运行。（汽车动力系统）</p>
<p>JVM（Java Virtual Machine）——Java 虚拟机，是 JRE 的一部分。它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。JVM 有自己完善的硬件架构，如处理器、堆栈、寄存器等，还具有相应的指令系统。Java 语言最重要的特点就是跨平台运行。使用 JVM 就是为了支持与操作系统无关，实现跨平台。（汽车轮胎）</p>
<h1 id="二、JVM-虚拟机"><a href="#二、JVM-虚拟机" class="headerlink" title="二、JVM 虚拟机"></a>二、JVM 虚拟机</h1><h2 id="2-1-JVM-基本结构"><a href="#2-1-JVM-基本结构" class="headerlink" title="2.1  JVM 基本结构"></a>2.1  JVM 基本结构</h2><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/b2e6a2272094c3a0.png"></p>
<p><a href="https://www.yuque.com/liangxujian/ufl7zk/hh59qa">思维导图（语雀）</a></p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/2c33c8b5415c6652.png"></p>
<h2 id="2-2-JVM-线程共享区和非线程共享区"><a href="#2-2-JVM-线程共享区和非线程共享区" class="headerlink" title="2.2 JVM 线程共享区和非线程共享区"></a>2.2 JVM 线程共享区和非线程共享区</h2><p>概括来说，<strong>JVM 初始运行的时候都会分配好 Method Area（方法区） 和Heap（堆） ，而 JVM 每遇到一个线程，就为其分配一个 Program Counter Register（程序计数器） , VM Stack（虚拟机栈）和Native Method Stack（本地方法栈），当线程终止时，三者（虚拟机栈，本地方法栈和程序计数器）所占用的内存空间也会被释放掉</strong>。</p>
<p>非线程共享的三个区域的生命周期与所属线程相同，而线程共享的区域与 JAVA 程序运行的生命周期相同，所以这也是系统垃圾回收的场所只发生在线程共享的区域（实际上对大部分虚拟机来说只发生在 Heap（堆区）上）的原因。</p>
<p>案例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppMain</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 运行时，JVM把AppMain的信息都放到方法区</span></span><br><span class="line"><span class="comment">     * main方法本身也放入方法区内</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// test1是引用，所以放到栈区中，而Sample是自定义对象，会被放到堆里</span></span><br><span class="line">        <span class="type">Sample</span> <span class="variable">test1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sample</span>(<span class="string">&quot;测试1&quot;</span>);</span><br><span class="line">        <span class="type">Sample</span> <span class="variable">test2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sample</span>(<span class="string">&quot;测试2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        test1.printName();</span><br><span class="line">        test2.printName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sample</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Sample</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * printName方法本身放到方法区中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printName</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1557710578795.png"></p>
<h2 id="2-3-JVM-启动流程（略）"><a href="#2-3-JVM-启动流程（略）" class="headerlink" title="2.3 JVM 启动流程（略）"></a>2.3 JVM 启动流程（略）</h2><ol>
<li>Java 虚拟机启动的命令是通过 java + xxx(类名，这个类中要有 main 方法)或者 javaw 启动的。</li>
<li>执行命令后，系统第一步做的就是装载配置，会在当前路径中寻找 JVM 的 config 配置文件。</li>
<li>找到 JVM 的 config 配置文件之后会去定位 jvm.dll 这个文件。这个文件就是 Java 虚拟机的主要实现。</li>
<li>当找到匹配当前版本的 jvm.dll 文件后，就会使用这个 dll 去初始化 JVM 虚拟机。获得相关的接口。之后找到 main 方法开始运行。</li>
</ol>
<h1 id="三、Java-执行过程"><a href="#三、Java-执行过程" class="headerlink" title="三、Java 执行过程"></a>三、Java 执行过程</h1><h2 id="3-1-解释执行和编译执行"><a href="#3-1-解释执行和编译执行" class="headerlink" title="3.1 解释执行和编译执行"></a>3.1 解释执行和编译执行</h2><p>解释执行：一边将程序翻译成计算机可以执行的指令，一边交给计算机执行，翻译一句，执行一句。<em>（饭馆点菜，上一个吃一个）</em></p>
<p>编译执行：将整个程序翻译成计算机及可以理解的指令，然后交给计算机执行。<em>（饭馆订桌，菜上齐后一并吃）</em></p>
<h2 id="3-2-Java-的执行过程"><a href="#3-2-Java-的执行过程" class="headerlink" title="3.2 Java 的执行过程"></a>3.2 Java 的执行过程</h2><p>Java 严格来讲是一种“半解释半编译”的语言</p>
<table>
<thead>
<tr>
<th>User.java</th>
</tr>
</thead>
<tbody><tr>
<td>↓<em>（javac源码编译器解释执行，即静态编译）</em></td>
</tr>
<tr>
<td>User.class 字节码（ByteCode），ByteCode 是 JVM 唯一能够识别的指令，JVM 将 ByteCode 翻译成真正<br/>能够执行的机器码<strong>（PS：在这一步同时还会有一些对我们编写的 Java 源码的优化操作）</strong></td>
</tr>
<tr>
<td>↓<em>（JVM 编译执行）</em></td>
</tr>
<tr>
<td>机器码（machine code），这是电脑 CPU 可直接解读的数据，JVM 在不同的硬件平台上有不同实现，以<br/>达到所谓“一次编写，到处运行”的目标</td>
</tr>
</tbody></table>
<h2 id="3-3-Java-运行比-C-慢？"><a href="#3-3-Java-运行比-C-慢？" class="headerlink" title="3.3 Java 运行比 C++ 慢？"></a>3.3 Java 运行比 C++ 慢？</h2><p>这种说法是在 <strong>JIT 编译器</strong>出现之前的情况。</p>
<p>由于 Java 程序最初是仅仅通过解释器解释执行，即对字节码逐条解释执行，这种方式的执行速度相对会比较慢，<strong>尤其当某个方法或代码块运行的特别频繁时，这种方式的执行效率就显得很低</strong>。于是后来在虚拟机中引入了<strong>JIT 编译器（即时编译器，即时编译被内嵌于 java 字节码执行引擎之中，可以算的上是 jvm 的一个内存组件）</strong>，当虚拟机发现某个方法或代码块运行特别频繁时，就会把这些代码认定为“Hot Spot Code”（热点代码），为了提高热点代码的执行效率，在运行时，虚拟机将会把这些代码编译成与本地平台相关的机器码，并进行特别的优化，完成这项任务的正是 JIT 编译器。</p>
<h2 id="3-4-JIT-编译器中的-C1、C2-即时编译器"><a href="#3-4-JIT-编译器中的-C1、C2-即时编译器" class="headerlink" title="3.4 JIT 编译器中的 C1、C2 即时编译器"></a>3.4 JIT 编译器中的 C1、C2 即时编译器</h2><ul>
<li>C1 编译：将字节码编译为本地代码，进行简单、可靠的优化，如有必要将加入性能监控的逻辑。</li>
<li>C2 编译：也是将字节码编译为本地代码，但是会启用一些编译耗时较长的优化，<strong>甚至会</strong>根据性能监控信息进行一些不可靠的<strong>激进优化</strong>。C2 编译主要是针对<strong>热点代码</strong>，对之做出更优的编译。</li>
</ul>
<p><em>注：实施分层编译后，C1 和 C2 将会同时工作，许多代码会被</em><strong>多次编译</strong><em>，用 C1 获取更高的编译速度，用 C2 来获取更好的编译质量，且在解释执行的时候解释器也无须再承担收集性能监控信息的任务</em></p>
<h1 id="四、新生代、老年代、JavaCG-回收机制"><a href="#四、新生代、老年代、JavaCG-回收机制" class="headerlink" title="四、新生代、老年代、JavaCG 回收机制"></a>四、新生代、老年代、JavaCG 回收机制</h1><p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>
<p>堆的内存模型大致为：</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1678097210489.png"></p>
<p>从图中可以看出： 堆大小 &#x3D; 新生代 + 老年代。</p>
<p>JVM 三大性能调优参数： -Xms、-Xmx、-Xss</p>
<ul>
<li>参数 –Xms 指定堆的默认值（最小值），参数 -Xmx 指定堆的最大值；</li>
<li>参数 -Xss 指定每个线程分配的内存大小【JDK 1.4 为 256KB；JDK 1.5+ 为 1M】，这决定了进程的数量。</li>
</ul>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/JVM%E5%8F%82%E6%95%B0.png"></p>
<h2 id="4-1-新生代和老年代"><a href="#4-1-新生代和老年代" class="headerlink" title="4.1 新生代和老年代"></a>4.1 新生代和老年代</h2><p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为 1:2。其中，新生代 ( Young ) 被细分为 <strong>Eden</strong>（伊甸园）和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 <strong>from</strong> 和 <strong>to</strong>，以示区分。</p>
<p><em>注：JVM 每次只会使用 Eden 和其中的一块 Survivor 区域来为对象服务，所以无论什么时候，总是有一块 Survivor 区域是空闲着的。因此，新生代实际可用的内存空间为 9&#x2F;10 ( 即90% )的新生代空间。（ from 和 to 区域位置是平等的）</em></p>
<h2 id="4-2-JavaCG-垃圾回收机制"><a href="#4-2-JavaCG-垃圾回收机制" class="headerlink" title="4.2 JavaCG 垃圾回收机制"></a>4.2 JavaCG 垃圾回收机制</h2><p>Java 的垃圾回收机制使用的是分代收集算法。</p>
<ol>
<li>新创建的对象会被分配到 Eden 区；</li>
<li>Eden 区满了会触发一次 Minor GC，仍存活的对象复制到 From 区，年龄+1（对于一些比较大的对象，需要分配一块较大的内存空间，会直接进入到老年代），清空 Eden 区，此时 To 区是空的；</li>
<li>重复1、2步骤，直到 From 区满，触发一次 Minor GC，Eden 区和 From 区仍存活的对象复制到 To 区，年龄+1，清空 Eden 区和 From 区，同时交换 From 区和 To 区；</li>
<li>重复1、2、3步骤，直到对象年龄达到某个值（默认是 15 岁，可通过参数设置），则会进入到老年代。</li>
</ol>
<p>Full GC 是发生在<strong>老年代</strong>的垃圾收集动作，所采用的是<strong>标记-清除算法</strong>。</p>
<p>由于老年代的对象都是比较稳定的<strong>热点代码</strong>，所以不会那么容易被回收。因此，<strong>Full GC 发生的次数不会有 Minor GC 那么频繁，并且做一次 Full GC 要比进行一次 Minor GC 的时间会更长。</strong></p>
<p><em>另外，</em><strong>标记-清除算法收集垃圾的时候会产生许多的内存碎片</strong> <em>( 即不连续的内存空间 )，此后需要为较大的对象分配内存空间时，若无法找到足够的连续的内存空间，就会提前触发一次 GC 的收集动作。</em></p>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Java之BigDecimal</title>
    <url>/blog/6ff26fc7.html</url>
    <content><![CDATA[<blockquote>
<p>摘录自博客：<a href="https://blog.csdn.net/qq_37080455/article/details/98964856">java精确除法运算（BigDecimal）_bigdecimal 除法_Evan_su的博客-CSDN博客</a></p>
</blockquote>
<h1 id="一、BigDecimal-介绍"><a href="#一、BigDecimal-介绍" class="headerlink" title="一、BigDecimal 介绍"></a>一、BigDecimal 介绍</h1><p>Java 中提供了大数字（超过 16 位有效位）的操作类，即 java.math.BinInteger 类和 java.math.BigDecimal 类，用于高精度计算。</p>
<p>其中 BigInteger 类是针对大整数的处理类，而 BigDecimal 类则是针对大小数的处理类。</p>
<p>BigDecimal 类的实现用到了 BigInteger 类，不同的是 BigDecimal 加入了小数的概念。</p>
<p>float 和 Double 只能用来做科学计算或者是工程计算；在商业计算中，对数字精度要求较高，必须使用 BigInteger 类和 BigDecimal 类，它支持任何精度的定点数，可以用它来精确计算货币值。</p>
<p>BigDecimal 类创建的是对象，不能使用传统的 +、-、*、&#x2F; 等算术运算符直接对其进行数学运算，而必须调用其对应的方法。方法的参数也必须是 BigDecimal 类型的对象。</p>
<h1 id="二、BigDecimal-构造方法"><a href="#二、BigDecimal-构造方法" class="headerlink" title="二、BigDecimal 构造方法"></a>二、BigDecimal 构造方法</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法一：不允许使用</span></span><br><span class="line">BigDecimal <span class="title function_">BigDecimal</span><span class="params">(<span class="type">double</span> d)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二：常用，推荐使用</span></span><br><span class="line">BigDecimal <span class="title function_">BigDecimal</span><span class="params">(String s)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法三：常用，推荐使用</span></span><br><span class="line"><span class="keyword">static</span> BigDecimal <span class="title function_">valueOf</span><span class="params">(<span class="type">double</span> d)</span>;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ol>
<li>double 参数的构造方法，不允许使用！！！！因为它不能精确的得到相应的值，值会变大</li>
<li>String 构造方法是完全可预知的：写入 new BigDecimal(“0.1”) 将创建一个 BigDecimal，它正好等于预期的 0.1；因此，通常建议优先使用 String 构造方法</li>
<li>静态方法 valueOf(double val) 内部实现，仍是将 double 类型转为 String 类型；这通常是将 double（或 float）转化为 BigDecimal 的首选方法</li>
</ol>
<h1 id="三、BigDecimal-类型转换"><a href="#三、BigDecimal-类型转换" class="headerlink" title="三、BigDecimal 类型转换"></a>三、BigDecimal 类型转换</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">toString()    <span class="comment">// 将 BigDecimal 对象的数值转换成字符串</span></span><br><span class="line">doubleValue() <span class="comment">// 将 BigDecimal 对象中的值以双精度数返回</span></span><br><span class="line">floatValue()  <span class="comment">// 将 BigDecimal 对象中的值以单精度数返回</span></span><br><span class="line">longValue()   <span class="comment">// 将 BigDecimal 对象中的值以长整数返回</span></span><br><span class="line">intValue()    <span class="comment">// 将 BigDecimal 对象中的值以整数返回</span></span><br></pre></td></tr></table></figure>

<h1 id="四、BigDecimal-常用方法"><a href="#四、BigDecimal-常用方法" class="headerlink" title="四、BigDecimal 常用方法"></a>四、BigDecimal 常用方法</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 加法，求两个 BigDecimal 类型数据的和</span></span><br><span class="line">BigDecimal <span class="title function_">add</span><span class="params">(BigDecimal value)</span>;</span><br><span class="line"><span class="comment">// 减法，求两个 BigDecimal 类型数据的差</span></span><br><span class="line">BigDecimal <span class="title function_">subtract</span><span class="params">(BigDecimal value)</span>;</span><br><span class="line"><span class="comment">// 乘法，求两个 BigDecimal 类型数据的积</span></span><br><span class="line">BigDecimal <span class="title function_">multiply</span><span class="params">(BigDecimal  value)</span>;</span><br><span class="line"><span class="comment">// 除法，求两个 BigDecimal 类型数据的商</span></span><br><span class="line">BigDecimal <span class="title function_">divide</span><span class="params">(BigDecimal divisor)</span>;</span><br><span class="line"><span class="comment">// 求余数，求 BigDecimal 类型数据除以 divisor 的余数</span></span><br><span class="line">BigDecimal <span class="title function_">remainder</span><span class="params">(BigDecimal divisor)</span>;</span><br><span class="line"><span class="comment">// 最大数，求两个 BigDecimal 类型数据的最大值</span></span><br><span class="line">BigDecimal <span class="title function_">max</span><span class="params">(BigDecimal value)</span>;</span><br><span class="line"><span class="comment">// 最小数，求两个 BigDecimal 类型数据的最小值</span></span><br><span class="line">BigDecimal <span class="title function_">min</span><span class="params">(BigDecimal value)</span>;</span><br><span class="line"><span class="comment">// 绝对值，求 BigDecimal 类型数据的绝对值</span></span><br><span class="line">BigDecimal <span class="title function_">abs</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 相反数，求 BigDecimal 类型数据的相反数</span></span><br><span class="line">BigDecimal <span class="title function_">negate</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>

<h1 id="五、BigDecimal-divide"><a href="#五、BigDecimal-divide" class="headerlink" title="五、BigDecimal.divide()"></a>五、BigDecimal.divide()</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> divisor      除数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> scale        小数点后保留位数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> roundingMode 取舍规则</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">BigDecimal.divide(BigDecimal divisor, <span class="type">int</span> scale, RoundingMode roundingMode);</span><br><span class="line"></span><br><span class="line">bd2.divide(bd1, <span class="number">4</span>, BigDecimal.ROUND_HALF_UP).toString(); <span class="comment">// &quot;0.0200&quot;</span></span><br><span class="line"><span class="comment">// 商的小数点后位数是固定的，如果需要去除末尾多余的0，则使用下面方法</span></span><br><span class="line">bd2.divide(bd1, <span class="number">4</span>, BigDecimal.ROUND_HALF_UP).stripTrailingZeros().toPlainString(); <span class="comment">// &quot;0.02&quot;</span></span><br></pre></td></tr></table></figure>

<p>因为 BigDecimal 除法可能出现不能整除的情况，比如 4.5&#x2F;1.3，这时会报错【java.lang.ArithmeticException: Non-terminating decimal expansion; no exact representable decimal result】。所以就需要用三个参数的除法方法，规定保留几位小数以及保留的方式，这样就可以避免异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">*ROUND_CEILING*</span><br><span class="line">Rounding mode to round towards positive infinity.</span><br><span class="line">向正无穷方向舍入</span><br><span class="line">正数：<span class="number">1.1</span> -&gt; <span class="number">2</span>   <span class="number">1.5</span>-&gt; <span class="number">2</span>   <span class="number">1.8</span>-&gt; <span class="number">2</span></span><br><span class="line">负数：-<span class="number">1.1</span>-&gt; -<span class="number">1</span>   -<span class="number">1.5</span>-&gt; -<span class="number">1</span>   -<span class="number">1.8</span>-&gt; -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">*ROUND_DOWN*</span><br><span class="line">Rounding mode to round towards zero.</span><br><span class="line">向零方向舍入</span><br><span class="line">正数：<span class="number">1.1</span> -&gt; <span class="number">2</span>   <span class="number">1.5</span>-&gt; <span class="number">2</span>   <span class="number">1.8</span>-&gt; <span class="number">2</span></span><br><span class="line">负数：-<span class="number">1.1</span>-&gt; -<span class="number">1</span>   -<span class="number">1.5</span>-&gt; -<span class="number">1</span>   -<span class="number">1.8</span>-&gt; -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">*ROUND_FLOOR*</span><br><span class="line">Rounding mode to round towards negative infinity.</span><br><span class="line">向负无穷方向舍入</span><br><span class="line">正数: <span class="number">1.1</span>-&gt; <span class="number">1</span>   <span class="number">1.5</span>-&gt; <span class="number">1</span>   <span class="number">1.8</span>-&gt; <span class="number">1</span></span><br><span class="line">负数: -<span class="number">1.1</span>-&gt; -<span class="number">2</span>   -<span class="number">1.5</span>-&gt; -<span class="number">2</span>   -<span class="number">1.8</span>-&gt; -<span class="number">2</span></span><br><span class="line"></span><br><span class="line">*ROUND_HALF_DOWN*</span><br><span class="line">Rounding mode to round towards <span class="string">&quot;nearest neighbor&quot;</span> unless both neighbors are equidistant, in which <span class="keyword">case</span> round down.</span><br><span class="line">向（距离）最近的一边舍入，除非两边（的距离）是相等。如果是这样，向下舍入, 例如 <span class="number">1.55</span> 保留一位小数结果为 <span class="number">1.5</span></span><br><span class="line">正数：<span class="number">1.5</span>-&gt; <span class="number">1</span>   <span class="number">1.6</span>-&gt; <span class="number">2</span></span><br><span class="line">负数：-<span class="number">1.5</span>-&gt; -<span class="number">1</span>   -<span class="number">1.6</span>-&gt; -<span class="number">2</span></span><br><span class="line"></span><br><span class="line">*ROUND_HALF_EVEN* </span><br><span class="line">Rounding mode to round towards the <span class="string">&quot;nearest neighbor&quot;</span> unless both neighbors are equidistant, in which <span class="keyword">case</span>, round towards the even neighbor.</span><br><span class="line">向（距离）最近的一边舍入，除非两边（的距离）是相等。如果是这样，如果保留位数是奇数，使用 ROUND_HALF_UP，如果是偶数，使用*ROUND_HALF_DOWN*（以 <span class="number">5</span> 为分界线，如果是 <span class="number">5</span>，则前一位变偶数）</span><br><span class="line"><span class="number">1.15</span>-&gt; <span class="number">1.2</span>   <span class="number">1.16</span>-&gt; <span class="number">1.2</span>   <span class="number">1.25</span>-&gt; <span class="number">1.2</span>   <span class="number">1.26</span>-&gt; <span class="number">1.3</span></span><br><span class="line"></span><br><span class="line">*ROUND_HALF_UP*</span><br><span class="line">Rounding mode to round towards <span class="string">&quot;nearest neighbor&quot;</span> unless both neighbors are equidistant, in which <span class="keyword">case</span> round up.</span><br><span class="line">向（距离）最近的一边舍入，除非两边（的距离）是相等。如果是这样，向上舍入, <span class="number">1.55</span> 保留一位小数结果为 <span class="number">1.6</span></span><br><span class="line">【四舍五入】</span><br><span class="line"></span><br><span class="line">*ROUND_UNNECESSARY*</span><br><span class="line">Rounding mode to <span class="keyword">assert</span> that the requested operation has an exact result, hence no rounding is necessary.</span><br><span class="line">计算结果是精确的，不需要舍入模式</span><br><span class="line"></span><br><span class="line">*ROUND_UP*</span><br><span class="line">Rounding mode to round away from zero.</span><br><span class="line">向远离 <span class="number">0</span> 的方向舍入</span><br><span class="line">正数：<span class="number">1.1</span>-&gt; <span class="number">2</span>   <span class="number">1.5</span>-&gt; <span class="number">2</span>   <span class="number">1.8</span>-&gt; <span class="number">2</span></span><br><span class="line">负数：-<span class="number">1.1</span>-&gt; -<span class="number">2</span>   -<span class="number">1.5</span>-&gt; -<span class="number">2</span>   -<span class="number">1.8</span>-&gt; -<span class="number">2</span></span><br></pre></td></tr></table></figure>

<h1 id="六、BigDecimal-setScale"><a href="#六、BigDecimal-setScale" class="headerlink" title="六、BigDecimal.setScale()"></a>六、BigDecimal.setScale()</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BigDecimal <span class="title function_">setScale</span><span class="params">(<span class="type">int</span> newScale, RoundingMode roundingMode)</span>;</span><br><span class="line"></span><br><span class="line">BigDecimal <span class="title function_">setScale</span><span class="params">(<span class="type">int</span> newScale, <span class="type">int</span> roundingMode)</span>;</span><br><span class="line"></span><br><span class="line">BigDecimal <span class="title function_">setScale</span><span class="params">(<span class="type">int</span> newScale)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestBigDecimal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;123.564&quot;</span>);</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;3.3&quot;</span>);</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">divide</span> <span class="operator">=</span> b1.divide(b2, <span class="number">10</span>, RoundingMode.HALF_UP);</span><br><span class="line">        System.out.println(divide);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java之String</title>
    <url>/blog/1f41d3c9.html</url>
    <content><![CDATA[<h1 id="一、特殊的-String-类"><a href="#一、特殊的-String-类" class="headerlink" title="一、特殊的 String 类"></a>一、特殊的 String 类</h1><ol>
<li>虽然是引用类型，但是可以像基础数据类型一样直接赋值（<code>String s = &quot;&quot;;</code>）</li>
<li>不可被继承，String 类被<code>final</code>修饰</li>
</ol>
<h1 id="二、String-常用方法"><a href="#二、String-常用方法" class="headerlink" title="二、String 常用方法"></a>二、String 常用方法</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回指定字符第一次出现的字符串内的索引，以指定的索引开始搜索</span></span><br><span class="line">String.indexOf(<span class="type">int</span> ch, <span class="type">int</span> fromIndex);</span><br><span class="line"><span class="comment">// int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回指定子字符串第一次出现的字符串内的索引</span></span><br><span class="line">String.indexOf(String str);</span><br><span class="line"><span class="comment">// int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回指定子串的第一次出现的字符串中的索引，从指定的索引开始</span></span><br><span class="line">String.indexOf(String str, <span class="type">int</span> fromIndex);</span><br><span class="line"><span class="comment">// int</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回指定字符的最后一次出现的字符串中的索引</span></span><br><span class="line">String.lastIndexOf(<span class="type">int</span> ch);</span><br><span class="line"><span class="comment">// int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回指定字符的最后一次出现的字符串中的索引，从指定的索引开始向后搜索</span></span><br><span class="line">String.lastIndexOf(<span class="type">int</span> ch, <span class="type">int</span> fromIndex);</span><br><span class="line"><span class="comment">// int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回指定子字符串最后一次出现的字符串中的索引</span></span><br><span class="line">String.lastIndexOf(String str);</span><br><span class="line"><span class="comment">// int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回指定子字符串的最后一次出现的字符串中的索引，从指定索引开始向后搜索</span></span><br><span class="line">String.lastIndexOf(String str, <span class="type">int</span> fromIndex);</span><br><span class="line"><span class="comment">// int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串是否匹配给定的正则表达式</span></span><br><span class="line">String.matches(String regex);</span><br><span class="line"><span class="comment">// boolean</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回从替换所有出现的导致一个字符串 oldChar在此字符串 newChar</span></span><br><span class="line">String.replace(<span class="type">char</span> oldChar, <span class="type">char</span> newChar);</span><br><span class="line"><span class="comment">// String</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将与字面目标序列匹配的字符串的每个子字符串替换为指定的字面替换序列</span></span><br><span class="line">String.replace(CharSequence target, CharSequence replacement);</span><br><span class="line"><span class="comment">// String</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用给定的替换替换与给定的 regular expression匹配的此字符串的每个子字符串</span></span><br><span class="line">String.replaceAll(String regex, String replacement);</span><br><span class="line"><span class="comment">// String</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用给定的替换替换与给定的 regular expression匹配的此字符串的第一个子字符串</span></span><br><span class="line">String.replaceFirst(String regex, String replacement);</span><br><span class="line"><span class="comment">// String</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将此字符串分割为给定的 regular expression的匹配</span></span><br><span class="line">String.split(String regex);</span><br><span class="line"><span class="comment">// String[]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将这个字符串拆分为给定的 regular expression的匹配</span></span><br><span class="line">String.split(String regex, <span class="type">int</span> limit);</span><br><span class="line"><span class="comment">// String[]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一个字符串，该字符串是此字符串的子字符串</span></span><br><span class="line">String.substring(<span class="type">int</span> beginIndex);</span><br><span class="line"><span class="comment">// String</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一个字符串，该字符串是此字符串的子字符串</span></span><br><span class="line">String.substring(<span class="type">int</span> beginIndex, <span class="type">int</span> endIndex);</span><br><span class="line"><span class="comment">// String</span></span><br></pre></td></tr></table></figure>

<h2 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> s2.intern();</span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="string">&quot;Hel&quot;</span> + <span class="string">&quot;lo&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">sa</span> <span class="operator">=</span> <span class="string">&quot;Hel&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="string">&quot;lo&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> sa + sb;</span><br><span class="line"></span><br><span class="line">System.out.println(s1 == s2);<span class="comment">// false</span></span><br><span class="line">System.out.println(s1 == s3);<span class="comment">// true</span></span><br><span class="line">System.out.println(s1 == s4);<span class="comment">// true</span></span><br><span class="line">System.out.println(s1 == s5);<span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<ul>
<li>String 的 intern() 方法会查找在常量池中是否存在一份 equal 相等的字符串，如果有则返回该字符串的引用，如果没有则添加自己的字符串进入常量池。<br>(因为 s1 已经在常量池中创建了”Hello”字符串，所以 s2.intern() 的时候就去常量池中查找是否已经存在”Hello”，存在则直接&#x3D;原来的字符串，不存在则是一个新的存在，所以 s3&#x3D;s1)</li>
<li>虽然 s4 是动态拼接出来的，但所有参与拼接的部分都是已知的字面量，在编译期间，这种拼接会被优化，编译器直接帮你拼好，因此相等。<br>（只有使用这种全部带引号、使用“+”连接产生的新字符串对象才会被加入字符串池中）<br>（s4 在初始化的过程中，产生了一个或〇个对象，若常量池中早已存在该字符串，则直接指向常量池，否则使用字符串拼接优化，产生一个 StringBuffer 对象进行拼接，然后 toString()，存放到常量池中）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>().append(<span class="string">&quot;Hel&quot;</span>).append(<span class="string">&quot;lo&quot;</span>).toString()</span><br></pre></td></tr></table></figure>

<ul>
<li>虽然 s5 也是拼接，但 sa 和 sb 作为两个变量，都是不可预料的，并不会被优化，会存放到堆中。</li>
</ul>
<h1 id="三、Java-的字符串类比较"><a href="#三、Java-的字符串类比较" class="headerlink" title="三、Java 的字符串类比较"></a>三、Java 的字符串类比较</h1><p>String、StringBuffer、StringBuilder</p>
<ol>
<li>执行速度比较（例如字符串的组合速度）：<strong>StringBuilder &gt; StringBuffer &gt; String</strong></li>
<li>StringBuilder – 非线程安全；StringBuffer – 线程安全<br>（因为 StringBuffer 为保证线程安全而牺牲了性能，所以当我们在不用考虑线程的情况下，尽量使用 StringBuilder）</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>如果要操作少量的数据 → String</li>
<li>不考虑线程安全处理字符串缓冲区下大量数据 → StringBuilder</li>
<li>需考虑线程安全处理字符串缓冲区下大量数据 → StringBuffer</li>
</ul>
<h1 id="四、Java-常量池与-String-类"><a href="#四、Java-常量池与-String-类" class="headerlink" title="四、Java 常量池与 String 类"></a>四、Java 常量池与 String 类</h1><p>Java 中的常量池实际上分为两种形态：静态常量池和运行时常量池。<br>静态常量池即是 *.class 文件中的常量池，用来存放方法名称、字段名称等。<br>运行时常量池则是我们常说的常量池，用来存放常量（final 关键字修饰的变量）和字符串等，避免频繁的创建和销毁对象而影响系统性能，实现了对象的共享（即大家用的都是同一个东西）。</p>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL之CRUD</title>
    <url>/blog/45b6c374.html</url>
    <content><![CDATA[<h1 id="一、查询库中所有表和表中所有字段"><a href="#一、查询库中所有表和表中所有字段" class="headerlink" title="一、查询库中所有表和表中所有字段"></a>一、查询库中所有表和表中所有字段</h1><h2 id="查询中所有的表和表注释"><a href="#查询中所有的表和表注释" class="headerlink" title="查询中所有的表和表注释"></a>查询中所有的表和表注释</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TABLE_NAME, TABLE_COMMENT</span><br><span class="line"><span class="keyword">FROM</span> INFORMATION_SCHEMA.TABLES</span><br><span class="line"><span class="keyword">WHERE</span> table_schema <span class="operator">=</span> <span class="string">&#x27;库名&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="查询表中所有字段和注释"><a href="#查询表中所有字段和注释" class="headerlink" title="查询表中所有字段和注释"></a>查询表中所有字段和注释</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name, column_comment</span><br><span class="line"><span class="keyword">FROM</span> INFORMATION_SCHEMA.COLUMNS</span><br><span class="line"><span class="keyword">WHERE</span> table_name <span class="operator">=</span> <span class="string">&#x27;表名&#x27;</span> <span class="keyword">AND</span> table_schema <span class="operator">=</span> <span class="string">&#x27;库名&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h1 id="二、对数据的增删改"><a href="#二、对数据的增删改" class="headerlink" title="二、对数据的增删改"></a>二、对数据的增删改</h1><h2 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tabel_name(column_a, column_b, ...) <span class="keyword">VALUES</span>(value_a, value_b, ...);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> newemp(empno, ename, job, mgr, hiredate, sal, comm, deptno) <span class="keyword">VALUES</span>(<span class="number">7933</span>, <span class="string">&#x27;zs&#x27;</span>, <span class="string">&#x27;CLERK&#x27;</span>, <span class="string">&#x27;7902&#x27;</span>, <span class="string">&#x27;1982-01-24&#x27;</span>, <span class="number">2000</span>, <span class="keyword">NULL</span>, <span class="number">30</span>);</span><br></pre></td></tr></table></figure>

<h2 id="批量插入"><a href="#批量插入" class="headerlink" title="批量插入"></a>批量插入</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> newemp(empno, ename, job, mgr, hiredate, sal, comm, deptno) </span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">7933</span>, <span class="string">&#x27;zs&#x27;</span>, <span class="string">&#x27;CLERK&#x27;</span>, <span class="string">&#x27;7902&#x27;</span>, <span class="string">&#x27;1982-01-24&#x27;</span>, <span class="number">2000</span>, <span class="keyword">NULL</span>, <span class="number">30</span>),</span><br><span class="line">      (<span class="number">7934</span>, <span class="string">&#x27;ls&#x27;</span>, <span class="string">&#x27;CLERK&#x27;</span>, <span class="string">&#x27;7903&#x27;</span>, <span class="string">&#x27;1983-10-24&#x27;</span>, <span class="number">2000</span>, <span class="keyword">NULL</span>, <span class="number">30</span>),</span><br><span class="line">      (<span class="number">7935</span>, <span class="string">&#x27;ww&#x27;</span>, <span class="string">&#x27;CLERK&#x27;</span>, <span class="string">&#x27;7904&#x27;</span>, <span class="string">&#x27;1984-01-24&#x27;</span>, <span class="number">2000</span>, <span class="keyword">NULL</span>, <span class="number">30</span>);</span><br></pre></td></tr></table></figure>

<h2 id="避免重复值插入"><a href="#避免重复值插入" class="headerlink" title="避免重复值插入"></a>避免重复值插入</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ON DUPLICATE KEY：针对 id 和 唯一索引。插入失败则会更新原数据</span></span><br><span class="line"><span class="comment">-- 依赖索引，跳过且update重复数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">table</span> (a,b,c) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) <span class="keyword">ON</span> DUPLICATE KEY <span class="keyword">UPDATE</span> c<span class="operator">=</span>c<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- insert ignore：判断的是主键或者索引是否重复，重复着不处理（不会报错）</span></span><br><span class="line"><span class="comment">-- 依赖索引，跳过</span></span><br><span class="line"><span class="keyword">INSERT</span> IGNORE <span class="keyword">INTO</span> log_domain (id) <span class="keyword">VALUES</span>(<span class="number">45</span>);</span><br><span class="line"><span class="keyword">INSERT</span> IGNORE <span class="keyword">INTO</span> `student` (`id`, `sno`, `sname`, `birthday`) <span class="keyword">VALUES</span>(<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;2018005&#x27;</span>,<span class="string">&#x27;Amy&#x27;</span>,<span class="string">&#x27;2011-11-11&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- replace into：等同于先删除再插入，所以每一次影响记录为两条。也是针对索引</span></span><br><span class="line"><span class="comment">-- 依赖索引，删除重复数据然后insert新数据</span></span><br><span class="line">REPLACE <span class="keyword">INTO</span> log_domain (NAME) <span class="keyword">VALUES</span>(&quot;aaa&quot;);</span><br></pre></td></tr></table></figure>

<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> ...;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> newemp <span class="keyword">WHERE</span> empno<span class="operator">=</span><span class="number">7899</span>;</span><br></pre></td></tr></table></figure>

<h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> table_name <span class="keyword">SET</span> column_a<span class="operator">=</span>value_a, column_b<span class="operator">=</span>value_b, ... <span class="keyword">WHERE</span> ...;</span><br><span class="line"><span class="keyword">UPDATE</span> newemp <span class="keyword">SET</span> SAL<span class="operator">=</span>SAL<span class="operator">+</span><span class="number">5000</span> <span class="keyword">WHERE</span> ENAME<span class="operator">=</span><span class="string">&#x27;梁%&#x27;</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">month</span>(BIR);</span><br></pre></td></tr></table></figure>

<h1 id="三、对数据表的增删改"><a href="#三、对数据表的增删改" class="headerlink" title="三、对数据表的增删改"></a>三、对数据表的增删改</h1><h2 id="增加-1"><a href="#增加-1" class="headerlink" title="增加"></a>增加</h2><ul>
<li>增加数据表字段</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> 新字段名称 数据类型;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> fasp_t_pm_dept_agency <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> IS_DELETED <span class="type">INTEGER</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;0-未删除；1-删除&#x27;</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> (</span><br><span class="line">    username <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>, </span><br><span class="line">    address <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;地址&#x27;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>增加主键约束</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 主键名称 <span class="keyword">PRIMARY</span> KEY(设主键的列名);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> pk_eno <span class="keyword">PRIMARY</span> KEY(eno);</span><br></pre></td></tr></table></figure>

<ul>
<li>增加外键约束</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 建表前</span></span><br><span class="line"><span class="keyword">FOREIGN</span> KEY(从表字段名) <span class="keyword">REFERENCES</span> 主表名(主表字段名);</span><br><span class="line"><span class="comment">-- 建表后</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 从表名 <span class="keyword">CONSTRAINT</span> 外键名 <span class="keyword">FOREIGN</span> KEY(从表字段) <span class="keyword">REFERENCES</span> 主表名(主表字段名);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> dept <span class="keyword">CONSTRAINT</span> fk_employee_dept <span class="keyword">FOREIGN</span> KEY(dept_no) <span class="keyword">REFERENCES</span> employee(dept_no);</span><br></pre></td></tr></table></figure>

<h2 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h2><ul>
<li>删除数据表字段</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> 字段名;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp <span class="keyword">DROP</span> tel;</span><br></pre></td></tr></table></figure>

<ul>
<li>删除主键约束</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY 外键约束名称;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY fk_emp_dept;</span><br></pre></td></tr></table></figure>

<ul>
<li>删除外键约束</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> 字段名;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> employee <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> fk_employee_dept;</span><br></pre></td></tr></table></figure>

<h2 id="修改-1"><a href="#修改-1" class="headerlink" title="修改"></a>修改</h2><p>注：如果 UPDATE 语句中 WHERE 条件走的是索引，则对该表施加的就是行锁；如果 SQL 语句没有走索引，则会全表扫描，行锁无法实现（行锁是通过索引加载的），取而代之的是表锁，即在此 UPDATE  语句执行完之前，任何对该表的 UPDATE 操作都是不允许的</p>
<ul>
<li>修改表名</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 旧表名称 RENAME 新表名称;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> employee RENAME emp;</span><br></pre></td></tr></table></figure>

<ul>
<li>修改字段的数据类型</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 MODIFY 字段名称 新数据类型;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp MODIFY salary <span class="type">INT</span>(<span class="number">11</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>修改字段名称</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 CHANGE 旧字段名称  新字段名称  新数据类型;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp CHANGE name empName <span class="type">VARCHAR</span>(<span class="number">20</span>);</span><br></pre></td></tr></table></figure>

<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty介绍</title>
    <url>/blog/ccddcb1a.html</url>
    <content><![CDATA[<blockquote>
<p><a href="https://github.com/netty/netty">Github 项目地址</a></p>
</blockquote>
<h1 id="一、Netty-是什么"><a href="#一、Netty-是什么" class="headerlink" title="一、Netty 是什么"></a>一、Netty 是什么</h1><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/aa911f591044.png"></p>
<p>Netty 是由 JBOSS 提供的一个 <strong>Java 开源框架</strong>，现为 Github 上的独立项目。Netty 提供异步的、事件驱动的网络应用程序框架和工具，用以快速开发高性能、高可靠性的网络服务器和客户端程序。</p>
<p>也就是说，Netty 是一个<strong>基于 NIO 的客户、服务器端的编程框架</strong>，使用 Netty 可以确保你快速和简单的开发出一个网络应用，例如实现了某种协议的客户、服务端应用。Netty 相当于简化和流线化了网络应用的编程开发过程，例如：基于 TCP 和 UDP 的 Socket 服务开发。</p>
<p>“快速”和“简单”并不用产生维护性或性能上的问题。Netty 是一个吸收了多种协议（包括 FTP、SMTP、HTTP 等各种二进制文本协议）的实现经验，并经过相当精心设计的项目。最终，Netty 成功的找到了一种方式，在保证易于开发的同时还保证了其应用的性能，稳定性和伸缩性。</p>
<h1 id="二、BIO-和-NIO-和-AIO"><a href="#二、BIO-和-NIO-和-AIO" class="headerlink" title="二、BIO 和 NIO 和 AIO"></a>二、BIO 和 NIO 和 AIO</h1><blockquote>
<p>摘录自博客：</p>
<p><a href="https://juejin.cn/post/6844903985158045703">如何理解BIO、NIO、AIO的区别？ - 掘金 (juejin.cn)</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/386745556">这是我看过对bio，nio，aio解释的最透彻的文章！！！ - 知乎 (zhihu.com)</a></p>
</blockquote>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/BIO%E3%80%81NIO%E3%80%81AIO.jpg"></p>
<h2 id="2-1-Java-中的-IO-原理"><a href="#2-1-Java-中的-IO-原理" class="headerlink" title="2.1 Java 中的 IO 原理"></a>2.1 Java 中的 IO 原理</h2><p>首先 Java 中的 IO 都是依赖操作系统内核进行的，我们程序中的 IO 读写其实调用的是操作系统内核中的 read&amp;write 两大系统调用。</p>
<p>那内核是如何进行 IO 交互的呢？</p>
<ol>
<li>网卡收到经过网线传来的网络数据，并将网络数据写到内存中。</li>
<li>当网卡把数据写入到内存后，网卡向 CPU 发出一个中断信号，操作系统便能得知有新数据到来，再通过网卡中断程序去处理数据。</li>
<li>将内存中的网络数据写入到对应 socket 的接收缓冲区中。</li>
<li>当接收缓冲区的数据写好之后，应用程序开始进行数据处理。</li>
</ol>
<p>对应抽象到 Java 的 socket 代码简单示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SocketServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 监听指定的端口</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">8080</span>;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(port);</span><br><span class="line">        <span class="comment">// server将一直等待连接的到来</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> server.accept();</span><br><span class="line">        <span class="comment">// 建立好连接后，从socket中获取输入流，并建立缓冲区进行读取</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = inputStream.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//获取数据进行处理</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="number">0</span>, len, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// socket、server，流关闭操作，省略不表</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到这个过程和底层内核的网络 IO 很类似，主要体现在 accept() 等待从网络中的请求到来然后 bytes[] 数组作为缓冲区等待数据填满后进行处理。而 BIO、NIO、AIO 之间的区别就在于这些操作是同步还是异步，阻塞还是非阻塞。</p>
<p>所以我们引出同步异步，阻塞与非阻塞的概念。</p>
<h2 id="2-2-同步与异步"><a href="#2-2-同步与异步" class="headerlink" title="2.2 同步与异步"></a>2.2 同步与异步</h2><p>同步和异步指的是一个执行流程中每个方法是否必须依赖前一个方法完成后才可以继续执行。假设我们的执行流程中：依次是方法一和方法二。</p>
<p>同步指的是调用一旦开始，调用者必须等到方法调用返回后，才能继续后续的行为。即方法二一定要等到方法一执行完成后才可以执行。</p>
<p>异步指的是调用立刻返回，调用者不必等待方法内的代码执行结束，就可以继续后续的行为。（具体方法内的代码交由另外的线程执行完成后，可能会进行回调）。即执行方法一的时候，直接交给其他线程执行，不由主线程执行，也就不会阻塞主线程，所以方法二不必等到方法一完成即可开始执行。</p>
<p>同步与异步关注的是方法的执行方是主线程还是其他线程，主线程的话需要等待方法执行完成，其他线程的话无需等待立刻返回方法调用，主线程可以直接执行接下来的代码。</p>
<p><a href="https://www.zhihu.com/question/452184164/answer/1930227093">同步与异步</a>是从多个线程之间的协调来实现效率差异。</p>
<blockquote>
<p>为什么需要异步呢？笔者认为异步的本质就是为了解决主线程的阻塞，所以网上很多讨论把同步异步、阻塞非阻塞进行了四种组合，其中一种就有异步阻塞这一情形，如果异步也是阻塞的？那为什么要特地进行异步操作呢？</p>
</blockquote>
<h2 id="2-3-阻塞与非阻塞"><a href="#2-3-阻塞与非阻塞" class="headerlink" title="2.3 阻塞与非阻塞"></a>2.3 阻塞与非阻塞</h2><p>阻塞与非阻塞指的是单个线程内遇到同步等待时，是否在原地不做任何操作。</p>
<p>阻塞指的是遇到同步等待后，一直在原地等待同步方法处理完成。</p>
<p>非阻塞指的是遇到同步等待，不在原地等待，先去做其他的操作，隔段时间再来观察同步方法是否完成。</p>
<p>阻塞与非阻塞关注的是线程是否在原地等待。</p>
<blockquote>
<p>笔者认为阻塞和非阻塞仅能与同步进行组合。而异步天然就是非阻塞的，而这个非阻塞是对主线程而言。（可能有人认为异步方法里面放入阻塞操作的话就是异步阻塞，但是思考一下，正是因为是阻塞操作所以才会将它放入异步方法中，不要阻塞主线程）</p>
</blockquote>
<h2 id="2-4-例子讲解"><a href="#2-4-例子讲解" class="headerlink" title="2.4 例子讲解"></a>2.4 例子讲解</h2><blockquote>
<p>海底捞很好吃，但是经常要排队。我们就以生活中的这个例子进行讲解。</p>
</blockquote>
<ul>
<li>A 顾客去吃海底捞，就这样干坐着等了一小时，然后才开始吃火锅。(BIO)</li>
<li>B 顾客去吃海底捞，他一看要等挺久，于是去逛商场，每次逛一会就跑回来看有没有排到他。于是他最后既购了物，又吃上海底捞了。（NIO）</li>
<li>C 顾客去吃海底捞，由于他是高级会员，所以店长说，你去商场随便玩吧，等下有位置，我立马打电话给你。于是 C 顾客不用干坐着等，也不用每过一会儿就跑回来看有没有等到，最后也吃上了海底捞（AIO）</li>
</ul>
<blockquote>
<p>哪种方式更有效率呢？是不是一目了然呢？</p>
</blockquote>
<h2 id="2-5-BIO"><a href="#2-5-BIO" class="headerlink" title="2.5 BIO"></a>2.5 BIO</h2><p>BIO 全称是 Blocking IO，是 JDK1.4 之前的传统 IO 模型，本身是同步阻塞模式。线程发起 IO 请求后，一直阻塞 IO，直到缓冲区数据就绪后，再进入下一步操作。针对网络通信都是一请求一应答的方式，虽然简化了上层的应用开发，但在性能和可靠性方面存在着巨大瓶颈，试想一下如果每个请求都需要新建一个线程来专门处理，那么在高并发的场景下，机器资源很快就会被耗尽。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/BIO%E9%80%9A%E4%BF%A1%E6%A8%A1%E5%9E%8B%E5%9B%BE.jpg"></p>
<h2 id="2-6-NIO"><a href="#2-6-NIO" class="headerlink" title="2.6 NIO"></a>2.6 NIO</h2><p>NIO 也叫 Non-Blocking IO 是同步非阻塞的 IO 模型。线程发起 IO 请求后，立即返回（非阻塞 IO）。同步指的是必须等待 IO 缓冲区内的数据就绪，而非阻塞指的是，用户线程不原地等待 IO 缓冲区，可以先做一些其他操作，但是要定时轮询检查 IO 缓冲区数据是否就绪。</p>
<p>Java 中的 NIO 是 new IO 的意思。其实是 NIO 加上 IO 多路复用技术。普通的 NIO 是线程轮询查看一个 IO 缓冲区是否就绪，而 Java 中的 new IO 指的是线程轮询地去查看一堆 IO 缓冲区中哪些就绪，这是一种 IO 多路复用的思想。IO 多路复用模型中，将检查 IO 数据是否就绪的任务，交给系统级别的 select 或 epoll 模型，由系统进行监控，减轻用户线程负担。</p>
<p>NIO 主要有 buffer、channel、selector 三种技术的整合，通过零拷贝的 buffer 取得数据，每一个客户端通过 channel 在 selector（多路复用器）上进行注册。服务端不断轮询 channel 来获取客户端的信息。channel 上有 connect、accept（阻塞）、read（可读）、write（可写）四种状态标识。根据标识来进行后续操作。所以一个服务端可接收无限多的 channel。不需要新开一个线程。大大提升了性能。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/NIO%E9%80%9A%E4%BF%A1%E6%A8%A1%E5%9E%8B%E5%9B%BE.jpg"></p>
<blockquote>
<p>NIO 的三大核心 API：Buffer、Channel、Selector</p>
</blockquote>
<h3 id="原生-NIO-的一些缺点"><a href="#原生-NIO-的一些缺点" class="headerlink" title="原生 NIO 的一些缺点"></a>原生 NIO 的一些缺点</h3><p>JDK 原生的 NIO 并不好用，除了编程复杂、编程模型难之外，它还有以下让人诟病的问题：</p>
<ul>
<li>JDK 的 NIO 底层由 epoll 实现，该实现饱受诟病的空轮询 BUG 会导致 CPU 飙升 100%</li>
<li>项目庞大后，自行实现的 NIO 很容易出现各类 BUG，维护成本较高</li>
</ul>
<p><strong>Netty 的出现很大程度上改善了 JDK 原生 NIO 所存在的一些让人难以忍受的问题。</strong></p>
<h2 id="2-7-AIO"><a href="#2-7-AIO" class="headerlink" title="2.7 AIO"></a>2.7 AIO</h2><p>AIO 是真正意义上的异步非阻塞 IO 模型。上述 NIO 实现中，需要用户线程定时轮询，去检查 IO 缓冲区数据是否就绪，占用应用程序线程资源，其实轮询相当于还是阻塞的，并非真正解放当前线程，因为它还是需要去查询哪些 IO 就绪。而真正的理想的异步非阻塞 IO 应该让内核系统完成，用户线程只需要告诉内核，当缓冲区就绪后，通知我或者执行我交给你的回调函数。</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/v2-5ccdc3d77174498be63efffc0e4f7783_r.jpg"></p>
<p>AIO 可以做到真正的异步的操作，但实现起来比较复杂，支持纯异步 IO 的操作系统非常少，目前也就 windows 是 IOCP 技术实现了，而在 Linux 上，底层还是是使用的 epoll 实现的。</p>
<p>与 NIO 不同，当进行读写操作时，只需直接调用 API 的 read 或 write 方法即可。这两种方法均为异步的，对于读操作而言，当有流可读取时，操作系统会将可读的流传入 read 方法的缓冲区，并通知应用程序；对于写操作而言，当操作系统将 write 方法传递的流写入完毕时，操作系统主动通知应用程序。即可以理解为， read&#x2F;write 方法都是异步的，完成后会主动调用回调函数。 在 JDK1.7 中，这部分内容成为 AIO。</p>
<h2 id="2-8-适用场景分析"><a href="#2-8-适用场景分析" class="headerlink" title="2.8 适用场景分析"></a>2.8 适用场景分析</h2><p>BIO 方式适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4 以前的唯一选择，但程序直观简单易理解。</p>
<p>NIO 方式适用于连接数目多且连接比较短（轻操作）的架构，比如聊天服务器，并发局限于应用中，编程比较复杂，JDK1.4 开始支持。</p>
<p>AIO 方式使用于连接数目多且连接比较长（重操作）的架构，比如相册服务器，充分调用 OS 参与并发操作，编程比较复杂，JDK7 开始支持。</p>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Netty</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Netty</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL之Date</title>
    <url>/blog/3ebaa5b9.html</url>
    <content><![CDATA[<blockquote>
<p>天 - 周 - 月 - 季度 - 年</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> NOW(); <span class="comment">-- 2021-02-20 18:21:22</span></span><br><span class="line"><span class="keyword">SELECT</span> CURDATE(); <span class="comment">-- 2021-02-20</span></span><br><span class="line"><span class="keyword">SELECT</span> CURTIME(); <span class="comment">-- 18:21:22</span></span><br><span class="line">DATE_FORMAT <span class="comment">-- 日期格式化</span></span><br><span class="line">DATE_SUB <span class="comment">-- 日期减去指定的时间间隔</span></span><br><span class="line">DATE_ADD <span class="comment">-- 日期添加指定的时间间隔</span></span><br><span class="line"><span class="comment">-- 今天</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> TO_DAYS(column_name) <span class="operator">=</span> TO_DAYS(NOW());</span><br><span class="line"><span class="comment">-- 昨天</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> TO_DAYS(NOW()) <span class="operator">-</span> TO_DAYS(column_name) <span class="operator">&lt;=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 七天内的数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> DATE_SUB(CURDATE(), <span class="type">INTERVAL</span> <span class="number">7</span> <span class="keyword">DAY</span>) <span class="operator">&lt;=</span> <span class="type">DATE</span>(column_name);</span><br><span class="line"><span class="comment">-- 30天内的数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> DATE_SUB(CURDATE(), <span class="type">INTERVAL</span> <span class="number">30</span> <span class="keyword">DAY</span>) <span class="operator">&lt;=</span> <span class="type">DATE</span>(column_name);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询本周的数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> YEARWEEK(DATE_FORMAT(column_name, <span class="string">&#x27;%Y-%m-%d&#x27;</span>)) <span class="operator">=</span> YEARWEEK(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> WEEKOFYEAR(DATE_FORMAT(column_name, <span class="string">&#x27;%y-%m-%d&#x27;</span>)) <span class="operator">=</span> WEEKOFYEAR(NOW())</span><br><span class="line"><span class="comment">-- 查询上周的数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> YEARWEEK(DATE_FORMAT(column_name, <span class="string">&#x27;%Y-%m-%d&#x27;</span>)) <span class="operator">=</span> YEARWEEK(NOW()) <span class="operator">-</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询本月的数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> DATE_FORMAT(column_name, <span class="string">&#x27;%Y%m&#x27;</span>) <span class="operator">=</span> DATE_FORMAT(CURDATE(), <span class="string">&#x27;%Y%m&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> DATE_FORMAT(column_name, <span class="string">&#x27;%Y-%m&#x27;</span>) <span class="operator">=</span> DATE_FORMAT(NOW(), <span class="string">&#x27;%Y-%m&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="keyword">YEAR</span>(DATE_FORMAT(column_name, <span class="string">&#x27;%y-%m-%d&#x27;</span>)) <span class="operator">=</span> <span class="keyword">YEAR</span>(NOW()) <span class="keyword">AND</span> <span class="keyword">MONTH</span>(DATE_FORMAT(column_name, <span class="string">&#x27;%y-%m-%d&#x27;</span>)) <span class="operator">=</span> <span class="keyword">MONTH</span>(NOW());</span><br><span class="line"><span class="comment">-- 查询本月的数据（忽略年度的月度数据）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="keyword">MONTH</span>(DATE_FORMAT(column_name, <span class="string">&#x27;%y-%m-%d&#x27;</span>)) <span class="operator">=</span> <span class="keyword">MONTH</span>(NOW());</span><br><span class="line"><span class="comment">-- 查询上个月的数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> PERIOD_DIFF(DATE_FORMAT(NOW(), <span class="string">&#x27;%Y%m&#x27;</span>), DATE_FORMAT(column_name, <span class="string">&#x27;%Y%m&#x27;</span>)) <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> DATE_FORMAT(column_name, <span class="string">&#x27;%Y-%m&#x27;</span>) <span class="operator">=</span> DATE_FORMAT(DATE_SUB(CURDATE(), <span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">MONTH</span>), <span class="string">&#x27;%Y-%m&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> DATE_FORMAT(column_name, <span class="string">&#x27;%Y%m&#x27;</span>) <span class="operator">=</span> DATE_FORMAT(DATE_SUB(CURDATE(), <span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">MONTH</span>), <span class="string">&#x27;%Y%m&#x27;</span>);</span><br><span class="line"><span class="comment">-- 查询某年某月数据（2017年10月份）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> DATE_FORMAT(column_name, <span class="string">&#x27;%Y-%m&#x27;</span>) <span class="operator">=</span> <span class="string">&#x27;2017-10&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> DATE_FORMAT(column_name, <span class="string">&#x27;%Y-%m&#x27;</span>) <span class="operator">=</span> DATE_FORMAT(<span class="string">&#x27;2017-10-05&#x27;</span>, <span class="string">&#x27;%Y-%m&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询本季度数据（忽略年度的季度数据）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> QUARTER(column_name) <span class="operator">=</span> QUARTER(NOW());</span><br><span class="line"><span class="comment">-- 查询上季度数据（忽略年度的季度数据）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> QUARTER(column_name) <span class="operator">=</span> QUARTER(DATE_SUB(NOW(), <span class="type">INTERVAL</span> <span class="number">1</span> QUARTER));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询半年内的数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> column_name <span class="keyword">BETWEEN</span> DATE_SUB(NOW(), <span class="type">INTERVAL</span> <span class="number">6</span> <span class="keyword">MONTH</span>) <span class="keyword">AND</span> NOW();</span><br><span class="line"><span class="comment">-- 查询本年的数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="keyword">YEAR</span>(column_name) <span class="operator">=</span> <span class="keyword">YEAR</span>(NOW());</span><br><span class="line"><span class="comment">-- 查询去年的数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="keyword">YEAR</span>(column_name) <span class="operator">=</span> <span class="keyword">YEAR</span>(DATE_SUB(NOW(), <span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">YEAR</span>));</span><br></pre></td></tr></table></figure>

<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/blog/4a17b156.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<p></br></br></br></br></p>
]]></content>
  </entry>
  <entry>
    <title>About Me</title>
    <url>/blog/f0b34752.html</url>
    <content><![CDATA[<blockquote>
<p>A programer, live in Guangzhou, China.</p>
</blockquote>
<p>姓名：老梁<br>现居：广州<br>GitHub: <a href="https://github.com/Liangxujian">Liangxujian</a><br>QQ: 785770487<br>邮箱: <a href="mailto:&#x31;&#51;&#54;&#x39;&#x32;&#53;&#48;&#53;&#50;&#48;&#x34;&#x40;&#x31;&#x36;&#51;&#46;&#99;&#x6f;&#109;">&#x31;&#51;&#54;&#x39;&#x32;&#53;&#48;&#53;&#50;&#48;&#x34;&#x40;&#x31;&#x36;&#51;&#46;&#99;&#x6f;&#109;</a></p>
<div style="text-align:center"><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/cat.jpg" width="300" height="300" style="width:300px; height:300px; border-radius:100%; overflow:hidden;"></div>

<p></br></br></br></br></p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>事务的四种隔离级别</title>
    <url>/blog/ebc52c.html</url>
    <content><![CDATA[<ol>
<li>Read Uncommitted（读未提交）：保证了读取过程中不会读取到非法数据。</li>
<li>READ COMMITTED（读已提交）：大多数主流数据库的默认事务等级，保证了一个事务不会读到另一个并行事务已修改但仍未提交的数据，避免了“脏读”。该级别适用大多数系统。</li>
<li>REPEATABLE READ（可重复读）：保证了一个事务不会修改已经由另一个事务读取但未提交（回滚）的数据。避免了“脏读”和“不可重复读”，但是带来了更多的性能损失。</li>
<li>Serializable（串行化）：最严格的级别，事务串行执行，资源消耗最大。</li>
</ol>
<table border="1" style="table-layout:fixed;">
    <tr>
        <th style="text-align:center">隔离级别</th>
        <th style="text-align:center">脏读<br>Dirty reads</th>
        <th style="text-align:center">脏读<br>Dirty reads</th>
        <th style="text-align:center">幻读<br>phantom</th>
    </tr>
    <tr>
        <td>Read Uncommitted<br>读未提交（不加锁）</td>
        <td bgcolor="#73d13d" style="text-align:center">√</td>
        <td bgcolor="#73d13d" style="text-align:center">√</td>
        <td bgcolor="#73d13d" style="text-align:center">√</td>
    </tr>
    <tr>
        <td>READ COMMITTED<br>读已提交（RC）</td>
        <td bgcolor="#ff4d4f" style="text-align:center">×</td>
        <td bgcolor="#73d13d" style="text-align:center">√</td>
        <td bgcolor="#73d13d" style="text-align:center">√</td>
    </tr>
    <tr>
        <td>REPEATABLE READ<br>可重复读（RR）（默认）</td>
        <td bgcolor="#ff4d4f" style="text-align:center">×</td>
        <td bgcolor="#ff4d4f" style="text-align:center">×</td>
        <td bgcolor="#73d13d" style="text-align:center">√</td>
    </tr>
    <tr>
        <td>Serializable<br>串行化（全程加锁）</td>
        <td bgcolor="#ff4d4f" style="text-align:center">×</td>
        <td bgcolor="#ff4d4f" style="text-align:center">×</td>
        <td bgcolor="#ff4d4f" style="text-align:center">×</td>
    </tr>
</table>

<ul>
<li>脏读：读到了其他事务未提交的脏数据。<br>例如：事务 B 执行过程中修改了数据 X，在未提交前，事务 A 也读取了 X，但事务 B 却回滚了，这样事务 A 就形成了脏读。</li>
<li>不可重复读：在一个事务内，最开始读到的数据和事务结束前任意时刻读到的同一批数据出现不一致的情况。<br>例如：事务 A 先读取了一条数据，然后再执行逻辑的时候，事务 B 将这条数据改变了，然后事务 A 再次读取该数据，发现数据不匹配，这就是所谓的不可重复读。</li>
<li>幻读：事务的某次 select 操作得到的结果所表示的数据状态无法支撑其后续的业务操作。<br>例如：事务 A select 某条记录是否存在，不存在，准备插入此记录，但执行 insert 操作的时候发现此记录已存在，此时就产生了幻读。</li>
</ul>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title>广州地铁</title>
    <url>/blog/ca50bba4.html</url>
    <content><![CDATA[<h1 id="广州市城市轨道交通第三期建设规划（2017-2023）"><a href="#广州市城市轨道交通第三期建设规划（2017-2023）" class="headerlink" title="广州市城市轨道交通第三期建设规划（2017-2023）"></a>广州市城市轨道交通第三期建设规划（2017-2023）</h1><p><img src="http://localhost:4000/assets/%E5%B9%BF%E5%B7%9E%E5%9C%B0%E9%93%81/homePage.jpg"></p>
<h2 id="地铁05号线"><a href="#地铁05号线" class="headerlink" title="地铁05号线"></a>地铁05号线</h2><p><img src="http://localhost:4000/assets/%E5%B9%BF%E5%B7%9E%E5%9C%B0%E9%93%81/2.%E5%9C%B0%E9%93%81%E4%BA%94%E5%8F%B7%E7%BA%BF%E4%B8%9C%E5%BB%B6%E6%AE%B5%E5%B7%A5%E7%A8%8B%E7%BA%BF%E8%B7%AF%E5%B9%B3%E9%9D%A2%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg"></p>
<h2 id="地铁07号线"><a href="#地铁07号线" class="headerlink" title="地铁07号线"></a>地铁07号线</h2><p><img src="http://localhost:4000/assets/%E5%B9%BF%E5%B7%9E%E5%9C%B0%E9%93%81/4.%E5%9C%B0%E9%93%81%E4%B8%83%E5%8F%B7%E7%BA%BF%E4%BA%8C%E6%9C%9F%E5%B7%A5%E7%A8%8B%E7%BA%BF%E8%B7%AF%E5%B9%B3%E9%9D%A2%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg"></p>
<h2 id="地铁13号线"><a href="#地铁13号线" class="headerlink" title="地铁13号线"></a>地铁13号线</h2><h2 id="地铁21号线"><a href="#地铁21号线" class="headerlink" title="地铁21号线"></a>地铁21号线</h2><p></br></br></br></br></p>
]]></content>
      <categories>
        <category>生活</category>
        <category>日常</category>
      </categories>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>椰汁南瓜西米露</title>
    <url>/blog/c034f861.html</url>
    <content><![CDATA[<h1 id="材料"><a href="#材料" class="headerlink" title="材料"></a>材料</h1><h2 id="主料"><a href="#主料" class="headerlink" title="主料"></a>主料</h2><ul>
<li>南瓜（一小圈）</li>
<li>西米露</li>
</ul>
<h2 id="配料"><a href="#配料" class="headerlink" title="配料"></a>配料</h2><h2 id="调味料"><a href="#调味料" class="headerlink" title="调味料"></a>调味料</h2><ul>
<li>冰糖</li>
<li>椰汁</li>
</ul>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol>
<li>烧开水下西米，搅拌均匀</li>
<li>上盖转小火 15 分钟，直到西米半透明只有中间白点，关火盖盖焖 25 分钟</li>
<li>南瓜去皮切块</li>
<li>西米捞出到冰水，防止粘到一起</li>
<li>南瓜块 + 冰糖 + 冷水，盖盖 15 分钟</li>
<li>放入西米 + 椰浆，搅拌均匀 End</li>
</ol>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>生活</category>
        <category>饮品</category>
      </categories>
      <tags>
        <tag>饮品</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库事务</title>
    <url>/blog/587418e1.html</url>
    <content><![CDATA[<p>数据库事务就是一组 SQL 语句，这组 SQL 语句是一个逻辑工作单元。该单元<strong>作为一个整体永久性地修改</strong>或<strong>作为一个整体取消</strong>对数据库的修改。</p>
<p>定义事务的语句一般有三条：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span> TRANSACTION; <span class="comment">-- 表示事务开始</span></span><br><span class="line"><span class="keyword">COMMIT</span>;            <span class="comment">-- 表示事务提交</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;          <span class="comment">-- 表示事务回滚</span></span><br></pre></td></tr></table></figure>

<h1 id="一、-当前读和快照读"><a href="#一、-当前读和快照读" class="headerlink" title="一、 当前读和快照读"></a>一、 当前读和快照读</h1><h2 id="1-1-当前读"><a href="#1-1-当前读" class="headerlink" title="1.1 当前读"></a>1.1 当前读</h2><p>当前读<strong>读取的是数据的最新版本</strong>，要保证其他并发事务不能修改当前记录，所以会对读取的记录进行加锁。</p>
<p>像 select …… lock in share mode（共享锁）；select …… for update，update，insert，delete（排他锁）这些操作都会触发当前读。</p>
<h2 id="1-2-快照读"><a href="#1-2-快照读" class="headerlink" title="1.2 快照读"></a>1.2 快照读</h2><p>像不加锁的 select …… 操作就是快照读，即不加锁的非阻塞读。</p>
<p>快照读的前提是：<strong>隔离级别不是串行级别</strong>，串行级别下的快照读会退化成当前读。</p>
<p>之所以出现快照读的情况，是基于提高并发性能的考虑，快照读的实现是基于多版本并发控制，即 MVCC，可以认为 MVCC 是行锁的一个变种，但它在很多情况下，避免了加锁操作，降低了开销；既然是基于多版本，即快照读<strong>可能读到的并不一定是数据的最新版本，而有可能是之前的历史版本</strong>。</p>
<h1 id="二、MVCC（多版本并发控制）"><a href="#二、MVCC（多版本并发控制）" class="headerlink" title="二、MVCC（多版本并发控制）"></a>二、MVCC（多版本并发控制）</h1><p>MVCC（Multi-Version Concurrency Control），即多版本并发控制，是 MySQL 事务隔离级别中的一个重要概念。</p>
<p>这是一种并发控制的方法，一般在数据库管理系统中，实现对数据库的并发访问，在编程语言中实现事务内存。</p>
<p>MVCC 在 MySQL InnoDB 中的实现主要是为了提高数据库并发性能，用更好的方式去处理读-写冲突，做到即使有读写冲突时，也能做到不加锁，非阻塞并发读。</p>
<p>这仅仅只是一种理想的概念，即：维持一个数据的多个版本，使得读写操作没有冲突。</p>
<p>快照读就是 MySQL 为了实现 MVCC 理想模型，的其中一个具体非阻塞读功能。</p>
<h2 id="2-1-MVCC-实现原理"><a href="#2-1-MVCC-实现原理" class="headerlink" title="2.1 MVCC 实现原理"></a>2.1 MVCC 实现原理</h2><p>MySQL 4.1开始支持每个 InnoDB 引擎的表单独放到一个表空间里。InnoDB 通过使用 MVCC 来获取高并发性，并且实现 SQL 标准的 4 种隔离级别，同时使用一种被称为 next-key locking 的策略来避免幻读（phantom）现象。</p>
<p>除此之外 InnoDB 引擎还提供了插入缓存（insert buffer）、二次写（double write）、自适应哈西索引（adaptive hash index）、预读（read ahead）等高性能技术。</p>
<h3 id="2-1-1-隐式字段"><a href="#2-1-1-隐式字段" class="headerlink" title="2.1.1 隐式字段"></a>2.1.1 隐式字段</h3><ul>
<li>DB_TRX_ID：6byte，创建或者最后一次修改该记录的事务 ID</li>
<li>DB_ROW_ID：6byte，隐藏主键【如果当前表有主键，则隐藏主键&#x3D;主键；如果没有主键，则 InnoDB 会自动以 DB_ROW_ID 产生一个聚簇索引】</li>
<li>DB_ROLL_PTR：7byte，回滚指针【如果是新插入的数据，回滚指针为null】</li>
</ul>
<p>例如：insert 一条数据</p>
<table border="1" style="table-layout:fixed;">
    <tr>
        <th style="text-align:center" bgcolor="#91d5ff">name</th>
        <th style="text-align:center" bgcolor="#91d5ff">age</th>
        <th style="text-align:center" bgcolor="#91d5ff">gender</th>
        <th style="text-align:center" bgcolor="#ffa940">DB_TRX_ID</th>
        <th style="text-align:center" bgcolor="#ffa940">DB_ROLL_PTR</th>
        <th style="text-align:center" bgcolor="#ffa940">DB_ROW_ID</th>
    </tr>
    <tr align="center">
        <td bgcolor="#91d5ff">李四</td>
        <td bgcolor="#91d5ff">12</td>
        <td bgcolor="#91d5ff">man</td>
        <td bgcolor="#ffa940">1</td>
        <td bgcolor="#ffa940">1</td>
        <td bgcolor="#ffa940">null</td>
    </tr>
    <tr align="center">
        <td colspan="3">对用户可见</td>
        <td colspan="3">对用户不可见</td>
    </tr>
</table>

<h3 id="2-1-2-undolog（回滚日志）"><a href="#2-1-2-undolog（回滚日志）" class="headerlink" title="2.1.2 undolog（回滚日志）"></a>2.1.2 undolog（回滚日志）</h3><p>同一条数据，多次修改会存在多个历史版本，保存在 undolog 中，形成一个<strong>线性表（链表）</strong>。其中链首存储的是最新的历史记录，链尾是最早的历史记录。</p>
<p>数据表中有多条数据，多条数据发生了多次修改，那么则会存在多个链表。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> table_a <span class="keyword">SET</span> name <span class="operator">=</span> &quot;李四&quot;;</span><br></pre></td></tr></table></figure>

<table border="1" style="table-layout:fixed;">
    <tr>
        <th style="text-align:center" bgcolor="#40a9ff">name</th>
        <th style="text-align:center" bgcolor="#40a9ff">age</th>
        <th style="text-align:center" bgcolor="#40a9ff">gender</th>
        <th style="text-align:center" bgcolor="#ffa940">DB_TRX_ID</th>
        <th style="text-align:center" bgcolor="#ffa940">DB_ROLL_PTR</th>
        <th style="text-align:center" bgcolor="#ffa940">DB_ROW_ID</th>
    </tr>
    <tr align="center">
        <td bgcolor="#40a9ff">李四</td>
        <td bgcolor="#40a9ff">12</td>
        <td bgcolor="#40a9ff">man</td>
        <td bgcolor="#ffa940">2</td>
        <td bgcolor="#ffa940">1</td>
        <td bgcolor="#ffa940">0x123</td>
    </tr>
    <tr align="center">
        <td colspan="3">对用户可见</td>
        <td colspan="3">对用户不可见</td>
    </tr>
</table>
这时旧数据会保存到 undolog 中，新数据的【回滚指针（DB_ROLL_PTR）】指向 undolog 中旧数据的【回滚指针（DB_ROLL_PTR）】

<h3 id="2-1-3-readview（读视图）"><a href="#2-1-3-readview（读视图）" class="headerlink" title="2.1.3 readview（读视图）"></a>2.1.3 readview（读视图）</h3><p>事务在进行快照读（select ……）的时候，会产生【readview（读视图）】</p>
<p>事务在执行快照读的那一刻，会生成数据库系统当前的一个快照。记录并维护系统当前活跃事务的ID（当每个事务开启时，都会被分配一个ID, 这个ID是递增的，所以最新的事务，ID值越大）</p>
<ul>
<li>trx_list：系统活跃的事务 ID</li>
<li>up_limit_id：列表中事务最小的 ID</li>
<li>low_limit_id：系统尚未分配的下一个事务 ID</li>
</ul>
<p>当一个事务在进行快照读时，能否读取到其他事务刚刚 update 并 commit 的记录？</p>
<ol>
<li>首先判断 DB_TRX_ID 和 update_limit_id 的关系。如果 DB_TRX_ID &lt; update_limit_id，则当前事务能看到 DB_TRX_ID 所 commit 的记录；否则进入下个判断</li>
<li>接着判断 DB_TRX_ID 和 low_limit_id 的关系。如果 DB_TRX_ID &gt;&#x3D; low_limit_id，则代表 DB_TRX_ID 所 commit 的记录是在生成 readview 之后，对于当前事务肯定是不可见的；反之进入下个判断</li>
<li>最后判断 DB_TRX_ID 和 trx_list 的关系。如果 DB_TRX_ID 存在于 【活跃事务（trx_list）】中，则代表在生成 readview 的时候，DB_TRX_ID 还是处在活跃状态，还没有 commit，因此 DB_TRX_ID update 的数据在当前事务是看不到的；如果不在，则说明这个事务在 readview 生成之前就已经 commit 了，那么DB_TRX_ID update 的结果是能够看见的</li>
</ol>
<h4 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h4><table border="1" style="table-layout:fixed;">
    <tr align="center">
        <td>事务1</td>
        <td>事务2</td>
        <td>事务3</td>
        <td>事务4</td>
    </tr>
    <tr align="center">
        <td>begin（开启）</td>
        <td>begin（开启）</td>
        <td>begin（开启）</td>
        <td>begin（开启）</td>
    </tr>
    <tr align="center">
        <td></td>
        <td></td>
        <td></td>
        <td>update<br>commit</td>
    </tr>
    <tr align="center">
        <td></td>
        <td>select ……（快照读）</td>
        <td></td>
        <td></td>
    </tr>
</table>

<p>此时事务2能不能读取到事务4 commit 的记录？</p>
<p>分析：事务2 select ……（快照读）产生的 readview</p>
<table border="1" style="table-layout:fixed;">
    <tr>
        <td>low_limit_id</td>
        <td>1，2，3（因为4已经 commit，因此不是活跃事务）</td>
    </tr>
    <tr>
        <td>up_limit_id</td>
        <td>1</td>
    </tr>
    <tr>
        <td>low_limit_id</td>
        <td>5</td>
    </tr>
</table>

<table border="1" style="table-layout:fixed;">
    <tr>
        <td>DB_TRX_ID</td>
        <td>4</td>
    </tr>
</table>

<ol>
<li>4 &gt; 1（DB_TRX_ID &gt; update_limit_id），进入下个判断</li>
<li>4 &lt; 5（DB_TRX_ID &lt; low_limit_id），进入下个判断</li>
<li>4 不存在于 trx_list 中，事务2 select ……（快照读）能够看到事务4 commit 的记录。</li>
</ol>
<p>实际测试：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;autocommit&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="operator">|</span> autocommit    <span class="operator">|</span> <span class="keyword">ON</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> autocommit<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;autocommit&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="operator">|</span> autocommit    <span class="operator">|</span> OFF   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure>

<table border="1" style="table-layout:fixed;">
    <tr>
        <th style="text-align:center">窗口1</th>
        <th style="text-align:center">窗口2</th>
    </tr>
    <tr>
        <td>mysql> begin;<br>Query OK, 0 rows affected (0.00 sec)</td>
        <td>mysql> begin;<br>Query OK, 0 rows affected (0.00 sec)</td>
    </tr>
    <tr>
        <td>mysql> select * from tt17;<br>+----+------+------+<br>| id | name | age  |<br>+----+------+------+<br>|  1 | 1    |    1 |<br>|  2 | 2    |    2 |<br>|  3 | 3    |    3 |<br>+----+------+------+<br>3 rows in set (0.00 sec)</td>
        <td>mysql> select * from tt17;<br>+----+------+------+<br>| id | name | age  |<br>+----+------+------+<br>|  1 | 1    |    1 |<br>|  2 | 2    |    2 |<br>|  3 | 3    |    3 |<br>+----+------+------+<br>3 rows in set (0.00 sec)</td>
    </tr>
    <tr>
        <td></td>
        <td>mysql> update tt17 set name = "zhangsan";<br>Query OK, 3 rows affected (0.00 sec)<br>Rows matched: 3  Changed: 3  Warnings: 0<br><br>mysql> commit;<br>Query OK, 0 rows affected (0.04 sec)</td>
    </tr>
    <tr>
        <td>mysql> select * from tt17;<br>+----+------+------+<br>| id | name | age  |<br>+----+------+------+<br>|  1 | 1    |    1 |<br>|  2 | 2    |    2 |<br>|  3 | 3    |    3 |<br>+----+------+------+<br>3 rows in set (0.00 sec)</td>
        <td>mysql> select * from tt17;<br>+----+------+------+<br>| id | name | age  |<br>+----+------+------+<br>|  1 | 1    |    1 |<br>|  2 | 2    |    2 |<br>|  3 | 3    |    3 |<br>+----+------+------+<br>3 rows in set (0.00 sec)</td>
    </tr>
</table>


<p>此时，在实际测试中，事务2 select ……（快照读）看不到事务4 commit 的记录，与分析结果相反！(╬￣皿￣)</p>
<p>继续冷静分析：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> @<span class="variable">@transaction</span>_isolation;</span><br><span class="line">ERROR <span class="number">1193</span> (HY000): <span class="literal">Unknown</span> <span class="keyword">system</span> variable <span class="string">&#x27;transaction_isolation&#x27;</span></span><br><span class="line"><span class="comment">-- 这里可能会遇到 mysql-connector-java 的 jar 包版本高，而 mysql 版本低的情况。低版本的 mysql 只识别 tx_isolation，不识别 transaction_isolation</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> @<span class="variable">@tx</span>_isolation;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@tx</span>_isolation  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+</span></span><br><span class="line"><span class="operator">|</span> REPEATABLE<span class="operator">-</span>READ <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>可知当前数据的隔离级别为默认的可重复读（RR）。</p>
<p>因为<strong>可重复读（RR）和读已提交（RC）生成 readview 的时机是不同的</strong>。</p>
<ul>
<li>读已提交（RC）每次在进行 select ……（快照读）的时候都会生成新的 readview；</li>
<li>可重复读（RR）只有在第一次进行 select ……（快照读）的时候才会生成 readview，之后的读操作都只会用第一次生成的 readview</li>
</ul>
<p>在实际测试时，是先进行了一次 select ……（快照读），生成了 readview，与分析案例有出入，此时事务4仍然在 trx_list 中，在第三步判断时，commit 发生于生成快照读之后，因此看不到是正常现象。</p>
<p>总结：</p>
<ul>
<li>隔离级别为读已提交（RC）的时候，事务2 select ……（快照读）可以看到事务4 commit 的记录；</li>
<li>隔离级别为可重复读（RR）的时候，事务2 select ……（快照读）看不到事务4 commit 的记录</li>
</ul>
<h1 id="三、事务的-ACID-特性"><a href="#三、事务的-ACID-特性" class="headerlink" title="三、事务的 ACID 特性"></a>三、事务的 ACID 特性</h1><h2 id="3-1-A【Atomicity（原子性）】"><a href="#3-1-A【Atomicity（原子性）】" class="headerlink" title="3.1 A【Atomicity（原子性）】"></a>3.1 A【Atomicity（原子性）】</h2><p>一个事务中所包含的全部 SQL 语句是一个执行整体，不可分割，要么全执行，要么全取消。</p>
<p><strong>通过【回滚日志（undolog）】来实现</strong></p>
<h2 id="3-2-C【Consistency（一致性）】"><a href="#3-2-C【Consistency（一致性）】" class="headerlink" title="3.2 C【Consistency（一致性）】"></a>3.2 C【Consistency（一致性）】</h2><p>即数据库在事务操作前和事务处理后，其中的数据必须都要满足业务规范约束。如果在事务中出现错误，那么系统中的所有变化将自动地回滚，系统返回到原始状态。</p>
<p>（例如：银行转账，应先减后加，如果减后断电没有加上，不满足业务规范的约束，事务就要回滚，转账取消）</p>
<p><strong>依赖于其他三个特性来实现</strong></p>
<h2 id="3-3-I【-Isolation（隔离性）】"><a href="#3-3-I【-Isolation（隔离性）】" class="headerlink" title="3.3 I【 Isolation（隔离性）】"></a>3.3 I【 Isolation（隔离性）】</h2><p>指的是多个事务并发地独立运行，而不能互相干扰，事务提交时根据当前数据库状态进行操作。</p>
<p><strong>通过【MVCC】来实现</strong></p>
<h3 id="3-3-1-四种隔离级别"><a href="#3-3-1-四种隔离级别" class="headerlink" title="3.3.1 四种隔离级别"></a>3.3.1 四种隔离级别</h3><p><a href="https://liangxujian.github.io/blog/ebc52c.html">事务的四种隔离级别</a></p>
<h3 id="3-3-2-RR-和-RC"><a href="#3-3-2-RR-和-RC" class="headerlink" title="3.3.2 RR 和 RC"></a>3.3.2 RR 和 RC</h3><p>MVCC 只在 RR 和 RC 两个隔离级别下工作。</p>
<ol>
<li>在 RR 隔离级别下，【事务A】对某些记录的第一次查询会生成一个【快照（readview）】，此后【事务A】对这些记录的查询会继续使用这个【快照（readview）】。这会导致在生成【快照（readview）】之后，其他事务对这些记录的修改对【事务A】不可见；</li>
<li>在 RC 隔离级别下，【事务B】对某些记录的第一次查询会生成一个【快照（readview）】，但是【事务B】之后对这些记录的查询都会重新生成一个【快照（readview）】。也就是说，其他事务对这些记录的修改对【事务B】可见；</li>
<li>RC 的性能比 RR 好，因为 RC 允许【不可重复读】和【幻读】。</li>
</ol>
<h3 id="3-3-3-怎么处理幻读"><a href="#3-3-3-怎么处理幻读" class="headerlink" title="3.3.3 怎么处理幻读"></a>3.3.3 怎么处理幻读</h3><p>处理幻读有两种方案：</p>
<ul>
<li>将隔离级别提高到 Serializable 级别</li>
<li>加 Next-Key Lock 锁</li>
</ul>
<p>一般不会将数据库的隔离级别设置为 Serializable，加 Next-Key Lock 锁是比较常用的方法。</p>
<p>InnoDB 有三种锁算法：</p>
<ul>
<li>记录锁（Record Lock）：单个行记录加锁</li>
<li>间隙锁（Gap Lock）：锁定一个范围，但不含记录本身</li>
<li>临键锁（Next-Key Lock）：Record Lock + Gap Lock</li>
</ul>
<p>table_a 表中有如下数据：</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230423170339990.png"></p>
<p>这里可知有：</p>
<ul>
<li>间隙锁：（-∞，1）</li>
<li>记录锁：1</li>
<li>间隙锁：（1，10）</li>
<li>记录锁：10</li>
<li>间隙锁：（10，30）</li>
<li>记录锁：30</li>
<li>间隙锁：（30，+∞）</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- uid列为主键</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_a <span class="keyword">WHERE</span> uid <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="comment">-- 主键uid=10记录存在，只对id=10的记录加Record Lock</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_a <span class="keyword">WHERE</span> uid <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"><span class="comment">-- 主键uid=8记录不存在，加间隙锁Gap Lock：（1, 10）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_a <span class="keyword">WHERE</span> uid <span class="operator">&gt;</span> <span class="number">12</span>;</span><br><span class="line"><span class="comment">-- 主键使用范围查询，上锁范围为：（10,30）∪30∪（30，+∞）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- age列为索引列</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_a <span class="keyword">WHERE</span> age <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line"><span class="comment">-- 条件过滤对应记录存在，除了会对主键uid=10的记录加Record Lock，</span></span><br><span class="line"><span class="comment">-- 还会对普通索引字段加锁：[10，50]</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_a <span class="keyword">WHERE</span> age <span class="operator">=</span> <span class="number">40</span>;</span><br><span class="line"><span class="comment">-- 条件过滤对应记录不存在，只会对普通索引字段加锁：(30，50]</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_a <span class="keyword">WHERE</span> age <span class="operator">&gt;</span> <span class="number">40</span>;</span><br><span class="line"><span class="comment">-- 普通索引使用范围查询，上锁范围为：（30，+∞）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_a <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;AAA&#x27;</span>;</span><br><span class="line"><span class="comment">-- name列没有索引，则会进行全表扫描，所有记录都会加上临键锁，相当于锁表</span></span><br></pre></td></tr></table></figure>

<h2 id="3-4-D【Durability（持久性）】"><a href="#3-4-D【Durability（持久性）】" class="headerlink" title="3.4 D【Durability（持久性）】"></a>3.4 D【Durability（持久性）】</h2><p>也称为永久性，指的是事务在处理结束后，对数据库的修改是永久性的，即使系统故障也不会丢失。</p>
<p><strong>通过【redolog】来实现</strong></p>
<h3 id="3-4-1-数据更新流程"><a href="#3-4-1-数据更新流程" class="headerlink" title="3.4.1 数据更新流程"></a>3.4.1 数据更新流程</h3><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230423170339991.png"></p>
<ol>
<li>执行器先从 InnoDB 引擎中找到数据，如果在 Buffer Pool 内存中则直接返回；如果不在则【随机读】查询磁盘文件后返回</li>
<li>执行器拿到数据之后会先修改数据，然后调用 InnoDB 引擎接口重新写入数据</li>
<li>InnoDB 引擎将数据更新到内存，同时【顺序写】数据到 redolog 中，此时 redolog 状态为 prepare</li>
<li>执行器生成这个操作的 binlog</li>
<li>执行器调用 InnoDB 引擎的事务提交接口，InnoDB 引擎把刚刚写完的 redolog 状态改为 commit，数据更新完成</li>
</ol>
<h3 id="3-4-2-【随机读写】和【顺序读写】"><a href="#3-4-2-【随机读写】和【顺序读写】" class="headerlink" title="3.4.2 【随机读写】和【顺序读写】"></a>3.4.2 【随机读写】和【顺序读写】</h3><p>因为，【顺序读写】的效率远远高于【随机读写】。</p>
<p>所以，为了保证数据的一致性，会先将数据的更新结果【顺序写】入到 redolog 日志文件中，然后再将数据写入到对应的磁盘文件中【WAL（write ahead log）机制：先写日志，再写数据】。这样的设计，其效率优于直接随机读写磁盘文件。</p>
<p>由此可知，如果发生异常情况，导致实际数据未能写入到磁盘，只要日志文件保存成功了，那么数据就不会丢失，可以根据日志来进行数据恢复。</p>
<h3 id="3-4-3-数据恢复分析"><a href="#3-4-3-数据恢复分析" class="headerlink" title="3.4.3 数据恢复分析"></a>3.4.3 数据恢复分析</h3><ul>
<li>redolog 处于 prepare 状态，binlog 未写入，干掉 redolog 的 prepare 状态，数据更新操作丢失、回滚；</li>
<li>redolog 处于 prepare 状态，binlog 已写入，redolog 的 prepare 状态改为 commit，更新数据提交</li>
</ul>
<h1 id="四、不能用于事务的操作"><a href="#四、不能用于事务的操作" class="headerlink" title="四、不能用于事务的操作"></a>四、不能用于事务的操作</h1><ul>
<li>创建数据库（create database）</li>
<li>修改数据库（alter database）</li>
<li>删除数据库（drop database）</li>
<li>恢复数据库（restore database）</li>
<li>加载数据库（load database）</li>
<li>备份日志文件（backup log）</li>
<li>恢复日志文件（restore log）</li>
<li>更新统计数据（update statitics）</li>
<li>授权操作（grant）</li>
<li>复制事务日志（dump tran）</li>
<li>磁盘初始化（disk init）</li>
<li>更新使用sp_configure后的系统配置（reconfigure）</li>
</ul>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title>日语学习</title>
    <url>/blog/5cdb78f2.html</url>
    <content><![CDATA[<h1 id="平假"><a href="#平假" class="headerlink" title="平假"></a>平假</h1><h1 id="片假"><a href="#片假" class="headerlink" title="片假"></a>片假</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ruby</span>&gt;</span>飯<span class="tag">&lt;<span class="name">rp</span>&gt;</span>（<span class="tag">&lt;/<span class="name">rp</span>&gt;</span><span class="tag">&lt;<span class="name">rt</span>&gt;</span>はん<span class="tag">&lt;/<span class="name">rt</span>&gt;</span><span class="tag">&lt;<span class="name">rp</span>&gt;</span>）<span class="tag">&lt;/<span class="name">rp</span>&gt;</span><span class="tag">&lt;/<span class="name">ruby</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ruby</span>&gt;</span>ご<span class="tag">&lt;<span class="name">rt</span>&gt;</span><span class="tag">&lt;/<span class="name">rt</span>&gt;</span>飯<span class="tag">&lt;<span class="name">rp</span>&gt;</span>（<span class="tag">&lt;/<span class="name">rp</span>&gt;</span><span class="tag">&lt;<span class="name">rt</span>&gt;</span>はん<span class="tag">&lt;/<span class="name">rt</span>&gt;</span><span class="tag">&lt;<span class="name">rp</span>&gt;</span>）<span class="tag">&lt;/<span class="name">rp</span>&gt;</span><span class="tag">&lt;/<span class="name">ruby</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ruby</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rt</span>&gt;</span><span class="tag">&lt;/<span class="name">rt</span>&gt;</span>月<span class="tag">&lt;<span class="name">rp</span>&gt;</span>（<span class="tag">&lt;/<span class="name">rp</span>&gt;</span><span class="tag">&lt;<span class="name">rt</span>&gt;</span>げつ<span class="tag">&lt;/<span class="name">rt</span>&gt;</span><span class="tag">&lt;<span class="name">rp</span>&gt;</span>）<span class="tag">&lt;/<span class="name">rp</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rt</span>&gt;</span><span class="tag">&lt;/<span class="name">rt</span>&gt;</span>曜<span class="tag">&lt;<span class="name">rp</span>&gt;</span>（<span class="tag">&lt;/<span class="name">rp</span>&gt;</span><span class="tag">&lt;<span class="name">rt</span>&gt;</span>よう<span class="tag">&lt;/<span class="name">rt</span>&gt;</span><span class="tag">&lt;<span class="name">rp</span>&gt;</span>）<span class="tag">&lt;/<span class="name">rp</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rt</span>&gt;</span><span class="tag">&lt;/<span class="name">rt</span>&gt;</span>日<span class="tag">&lt;<span class="name">rp</span>&gt;</span>（<span class="tag">&lt;/<span class="name">rp</span>&gt;</span><span class="tag">&lt;<span class="name">rt</span>&gt;</span>び<span class="tag">&lt;/<span class="name">rt</span>&gt;</span><span class="tag">&lt;<span class="name">rp</span>&gt;</span>）<span class="tag">&lt;/<span class="name">rp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ruby</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ruby</span>&gt;</span><span class="tag">&lt;<span class="name">rt</span>&gt;</span><span class="tag">&lt;/<span class="name">rt</span>&gt;</span>月<span class="tag">&lt;<span class="name">rp</span>&gt;</span>（<span class="tag">&lt;/<span class="name">rp</span>&gt;</span><span class="tag">&lt;<span class="name">rt</span>&gt;</span>げつ<span class="tag">&lt;/<span class="name">rt</span>&gt;</span><span class="tag">&lt;<span class="name">rp</span>&gt;</span>）<span class="tag">&lt;/<span class="name">rp</span>&gt;</span><span class="tag">&lt;<span class="name">rt</span>&gt;</span><span class="tag">&lt;/<span class="name">rt</span>&gt;</span>曜<span class="tag">&lt;<span class="name">rp</span>&gt;</span>（<span class="tag">&lt;/<span class="name">rp</span>&gt;</span><span class="tag">&lt;<span class="name">rt</span>&gt;</span>よう<span class="tag">&lt;/<span class="name">rt</span>&gt;</span><span class="tag">&lt;<span class="name">rp</span>&gt;</span>）<span class="tag">&lt;/<span class="name">rp</span>&gt;</span><span class="tag">&lt;<span class="name">rt</span>&gt;</span><span class="tag">&lt;/<span class="name">rt</span>&gt;</span>日<span class="tag">&lt;<span class="name">rp</span>&gt;</span>（<span class="tag">&lt;/<span class="name">rp</span>&gt;</span><span class="tag">&lt;<span class="name">rt</span>&gt;</span>び<span class="tag">&lt;/<span class="name">rt</span>&gt;</span><span class="tag">&lt;<span class="name">rp</span>&gt;</span>）<span class="tag">&lt;/<span class="name">rp</span>&gt;</span><span class="tag">&lt;/<span class="name">ruby</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="称呼"><a href="#称呼" class="headerlink" title="称呼"></a>称呼</h1><table>
<thead>
<tr>
<th>中文</th>
<th>日文</th>
<th>中文</th>
<th>日文</th>
</tr>
</thead>
<tbody><tr>
<td>你</td>
<td>あなた</td>
<td>你们</td>
<td>あなた<ruby><rt></rt>方<rp>（</rp><rt>かた</rt><rp>）</rp></ruby></td>
</tr>
<tr>
<td>我</td>
<td><ruby><rt></rt>私<rp>（</rp><rt>わたし</rt><rp>）</rp></ruby></td>
<td>我们</td>
<td><ruby><rt></rt>私<rp>（</rp><rt>わたし</rt><rp>）</rp></ruby>たち</td>
</tr>
<tr>
<td>他</td>
<td><ruby><rt></rt>彼<rp>（</rp><rt>かれ</rt><rp>）</rp></ruby></td>
<td>他们</td>
<td><ruby><rt></rt>彼<rp>（</rp><rt>かれ</rt><rp>）</rp></ruby>ら</td>
</tr>
<tr>
<td>她</td>
<td><ruby><rt></rt>彼女<rp>（</rp><rt>かのじょ</rt><rp>）</rp></ruby></td>
<td>她们</td>
<td><ruby><rt></rt>彼女<rp>（</rp><rt>かのじょ</rt><rp>）</rp></ruby>たち</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th></th>
<th>对面称呼</th>
<th>对外称呼</th>
</tr>
</thead>
<tbody><tr>
<td>爷爷、外公</td>
<td><ruby><rt></rt>爷<rp>（</rp><rt>じい</rt><rp>）</rp></ruby>ちゃん【当面称呼】<br/>そふ【对别人称呼】</td>
<td>お<ruby><rt></rt>爷<rp>（</rp><rt>じい</rt><rp>）</rp></ruby>さん</td>
</tr>
<tr>
<td>奶奶、外婆</td>
<td><ruby><rt></rt>婆<rp>（</rp><rt>ばあ</rt><rp>）</rp></ruby>ちゃん【当面称呼】<br/>そぼ【对别人称呼】</td>
<td>お<ruby><rt></rt>婆<rp>（</rp><rt>ばあ</rt><rp>）</rp></ruby>さん</td>
</tr>
<tr>
<td>父母</td>
<td><ruby><rt></rt>両<rp>（</rp><rt>りょう</rt><rp>）</rp><rt></rt>親<rp>（</rp><rt>しん</rt><rp>）</rp></ruby></td>
<td></td>
</tr>
<tr>
<td>爸爸</td>
<td><ruby><rt></rt>家父<rp>（</rp><rt>ちち</rt><rp>）</rp></ruby>【谦称，对外称呼：家父；当面称呼：爹】<br/><ruby><rt></rt>父<rp>（</rp><rt>ちち</rt><rp>）</rp><rt></rt>上<rp>（</rp><rt>うえ</rt><rp>）</rp></ruby>【尊称，对外或当面称呼都可】<br/><ruby><rt></rt>父<rp>（</rp><rt>とう</rt><rp>）</rp></ruby>さん、<ruby><rt></rt>父<rp>（</rp><rt>とう</rt><rp>）</rp></ruby>ちゃん【昵称：爸爸】<br/><ruby><rt></rt>老爹<rp>（</rp><rt>おやじ</rt><rp>）</rp></ruby>【昵称】<br/><ruby><rt></rt>粑粑<rp>（</rp><rt>パパ</rt><rp>）</rp></ruby>【小孩语系】</td>
<td>お<ruby><rt></rt>父<rp>（</rp><rt>とう</rt><rp>）</rp></ruby>さん【令尊（尊称）】<br/>お<ruby><rt></rt>父<rp>（</rp><rt>とう</rt><rp>）</rp></ruby>さま【令尊（最尊称）】</td>
</tr>
<tr>
<td>妈妈</td>
<td><ruby><rt></rt>家母<rp>（</rp><rt>はは</rt><rp>）</rp></ruby>【谦称，对外称呼：家母；当面称呼：娘】<br/><ruby><rt></rt>母<rp>（</rp><rt>はは</rt><rp>）</rp><rt></rt>上<rp>（</rp><rt>うえ</rt><rp>）</rp></ruby>【尊称，对外或当面称呼都可】<br/><ruby><rt></rt>母<rp>（</rp><rt>かあ</rt><rp>）</rp></ruby>さん、<ruby><rt></rt>母<rp>（</rp><rt>かあ</rt><rp>）</rp></ruby>ちゃん【昵称：妈妈】<br/><ruby><rt></rt>老妈<rp>（</rp><rt>おふくろ</rt><rp>）</rp></ruby>【昵称】<br/><ruby><rt></rt>麻麻<rp>（</rp><rt>ママ</rt><rp>）</rp></ruby>【小孩语系】</td>
<td>お<ruby><rt></rt>母<rp>（</rp><rt>かあ</rt><rp>）</rp></ruby>さん【令堂（尊称）】<br/>お<ruby><rt></rt>母<rp>（</rp><rt>かあ</rt><rp>）</rp></ruby>さま【令堂（最尊称）】</td>
</tr>
<tr>
<td>姐姐</td>
<td><ruby><rt></rt>姐<rp>（</rp><rt>あね</rt><rp>）</rp></ruby></td>
<td>お<ruby><rt></rt>姉<rp>（</rp><rt>ねい</rt><rp>）</rp></ruby>さん【一般性称呼】</td>
</tr>
<tr>
<td>哥哥</td>
<td><ruby><rt></rt>哥<rp>（</rp><rt>あに</rt><rp>）</rp></ruby>【类似于中文常用的：哥，大哥，师兄等】</td>
<td>お<ruby><rt></rt>兄<rp>（</rp><rt>にい</rt><rp>）</rp></ruby>さん【一般性称呼】<br/><ruby><rt></rt>兄<rp>（</rp><rt>にい</rt><rp>）</rp></ruby>さん【哥哥，小伙子】<br/>お<ruby><rt></rt>兄<rp>（</rp><rt>にい</rt><rp>）</rp></ruby>ちゃん</td>
</tr>
<tr>
<td>弟弟</td>
<td><ruby><rt></rt>弟<rp>（</rp><rt>おとうと</rt><rp>）</rp></ruby></td>
<td><ruby><rt></rt>弟<rp>（</rp><rt>おとうと</rt><rp>）</rp></ruby>さん</td>
</tr>
<tr>
<td>妹妹</td>
<td><ruby><rt></rt>妹<rp>（</rp><rt>いもうと</rt><rp>）</rp></ruby></td>
<td><ruby><rt></rt>妹<rp>（</rp><rt>いもうと</rt><rp>）</rp></ruby>さん</td>
</tr>
<tr>
<td>兄弟</td>
<td><ruby><rt></rt>兄弟<rp>（</rp><rt>きょうだい</rt><rp>）</rp></ruby></td>
<td></td>
</tr>
<tr>
<td>姐妹</td>
<td><ruby><rt></rt>姉妹<rp>（</rp><rt>しまい</rt><rp>）</rp></ruby></td>
<td></td>
</tr>
<tr>
<td>叔叔、舅舅</td>
<td><ruby><rt></rt>叔父<rp>（</rp><rt>おじ</rt><rp>）</rp></ruby></td>
<td><ruby><rt></rt>叔父<rp>（</rp><rt>おじ</rt><rp>）</rp></ruby>さん</td>
</tr>
<tr>
<td>婶婶、阿姨</td>
<td><ruby><rt></rt>叔母<rp>（</rp><rt>おば</rt><rp>）</rp></ruby></td>
<td><ruby><rt></rt>叔母<rp>（</rp><rt>おば</rt><rp>）</rp></ruby>さん</td>
</tr>
</tbody></table>
<h2 id="常用句子"><a href="#常用句子" class="headerlink" title="常用句子"></a>常用句子</h2><table>
<thead>
<tr>
<th>中文</th>
<th>日文</th>
</tr>
</thead>
<tbody><tr>
<td>他有五个哥哥</td>
<td>かれにはお<ruby><rt></rt>兄<rp>（</rp><rt>にい</rt><rp>）</rp></ruby>さんが<ruby><rt></rt>五<rp>（</rp><rt>ご</rt><rp>）</rp><rt></rt>人<rp>（</rp><rt>じ</rt><rp>）</rp></ruby>います</td>
</tr>
<tr>
<td>我有三个兄弟</td>
<td><ruby><rt></rt>私<rp>（</rp><rt>わたし</rt><rp>）</rp></ruby>には<ruby><rt></rt>兄弟<rp>（</rp><rt>きょうだい</rt><rp>）</rp></ruby>が<ruby><rt></rt>三<rp>（</rp><rt>さん</rt><rp>）</rp><rt></rt>人<rp>（</rp><rt>じ</rt><rp>）</rp></ruby>います</td>
</tr>
<tr>
<td>他们是兄弟吗</td>
<td><ruby><rt></rt>彼<rp>（</rp><rt>かれ</rt><rp>）</rp></ruby>らは<ruby><rt></rt>兄弟<rp>（</rp><rt>きょうだい</rt><rp>）</rp></ruby>ですか</td>
</tr>
<tr>
<td>我们是兄弟</td>
<td><ruby><rt></rt>私<rp>（</rp><rt>わたし</rt><rp>）</rp></ruby>たちは<ruby><rt></rt>兄弟<rp>（</rp><rt>きょうだい</rt><rp>）</rp></ruby>です</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h1 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h1><table>
<thead>
<tr>
<th>整数</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><ruby><rt></rt>一<rp>（</rp><rt>いち</rt><rp>）</rp></ruby></td>
<td><ruby><rt></rt>二<rp>（</rp><rt>に</rt><rp>）</rp></ruby></td>
<td><ruby><rt></rt>三<rp>（</rp><rt>さん</rt><rp>）</rp></ruby></td>
</tr>
<tr>
<td><ruby><rt></rt>四<rp>（</rp><rt>よん</rt><rp>）</rp></ruby> &#x2F; <ruby><rt></rt>四<rp>（</rp><rt>し</rt><rp>）</rp></ruby></td>
<td><ruby><rt></rt>五<rp>（</rp><rt>ご</rt><rp>）</rp></ruby></td>
<td><ruby><rt></rt>六<rp>（</rp><rt>ろく</rt><rp>）</rp></ruby></td>
</tr>
<tr>
<td><ruby><rt></rt>七<rp>（</rp><rt>しち</rt><rp>）</rp></ruby> &#x2F; <ruby><rt></rt>七<rp>（</rp><rt>なな</rt><rp>）</rp></ruby></td>
<td><ruby><rt></rt>八<rp>（</rp><rt>はち</rt><rp>）</rp></ruby></td>
<td><ruby><rt></rt>九<rp>（</rp><rt>く</rt><rp>）</rp></ruby> &#x2F; <ruby><rt></rt>九<rp>（</rp><rt>きゅう</rt><rp>）</rp></ruby></td>
</tr>
<tr>
<td><ruby><rt></rt>十<rp>（</rp><rt>じゅう</rt><rp>）</rp></ruby></td>
<td><ruby><rt></rt>零<rp>（</rp><rt>ぜろ</rt><rp>）</rp></ruby> &#x2F; <ruby><rt></rt>零<rp>（</rp><rt>れい</rt><rp>）</rp></ruby></td>
<td></td>
</tr>
<tr>
<td><ruby><rt></rt>十<rp>（</rp><rt>じゅう</rt><rp>）</rp><rt></rt>一<rp>（</rp><rt>いち</rt><rp>）</rp></ruby></td>
<td><ruby><rt></rt>二<rp>（</rp><rt>に</rt><rp>）</rp><rt></rt>十<rp>（</rp><rt>じゅう</rt><rp>）</rp></ruby></td>
<td><ruby><rt></rt>二<rp>（</rp><rt>に</rt><rp>）</rp><rt></rt>十<rp>（</rp><rt>じゅう</rt><rp>）</rp><rt></rt>一<rp>（</rp><rt>いち</rt><rp>）</rp></ruby></td>
</tr>
<tr>
<td><ruby><rt></rt>百<rp>（</rp><rt>ひゃく</rt><rp>）</rp></ruby></td>
<td></td>
<td></td>
</tr>
<tr>
<td><ruby><rt></rt>一百<rp>（</rp><rt>ひゃく</rt><rp>）</rp><rt><rt></rt>一十<rp>（</rp><rt>じゅう</rt><rp>）</rp><rt></rt>一<rp>（</rp><rt>いち</rt><rp>）</rp></ruby></td>
<td><ruby><rt></rt>一百<rp>（</rp><rt>ひゃく</rt><rp>）</rp><rt><rt></rt>二<rp>（</rp><rt>に</rt><rp>）</rp><rt></rt>十<rp>（</rp><rt>じゅう</rt><rp>）</rp><rt></rt>一<rp>（</rp><rt>いち</rt><rp>）</rp></ruby></td>
<td><ruby><rt></rt>两<rp>（</rp><rt>に</rt><rp>）</rp><rt><rt></rt>百<rp>（</rp><rt>ひゃく</rt><rp>）</rp></ruby></td>
</tr>
<tr>
<td><ruby><rt></rt>千<rp>（</rp><rt>せん</rt><rp>）</rp></ruby></td>
<td></td>
<td></td>
</tr>
<tr>
<td><ruby><rt></rt>一千<rp>（</rp><rt>せん</rt><rp>）</rp><rt></rt>一百<rp>（</rp><rt>ひゃく</rt><rp>）</rp></ruby></td>
<td><ruby><rt></rt>一千<rp>（</rp><rt>せん</rt><rp>）</rp><rt></rt>一百<rp>（</rp><rt>ひゃく</rt><rp>）</rp><rt></rt>一十<rp>（</rp><rt>じゅう</rt><rp>）</rp><rt></rt>一<rp>（</rp><rt>いち</rt><rp>）</rp></ruby></td>
<td><ruby><rt></rt>两<rp>（</rp><rt>に</rt><rp>）</rp><rt></rt>千<rp>（</rp><rt>せん</rt><rp>）</rp></ruby></td>
</tr>
<tr>
<td><ruby><rt></rt>万<rp>（</rp><rt>まん</rt><rp>）</rp></ruby></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>小数分数</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>0.1</td>
<td><ruby><rt></rt>零<rp>（</rp><rt>れい</rt><rp>）</rp><rt></rt>点<rp>（</rp><rt>てん</rt><rp>）</rp><rt></rt>一<rp>（</rp><rt>いち</rt><rp>）</rp></ruby></td>
</tr>
<tr>
<td>2&#x2F;3</td>
<td><ruby><rt></rt>三<rp>（</rp><rt>さん</rt><rp>）</rp><rt></rt>分<rp>（</rp><rt>ふん</rt><rp>）</rp><rt></rt>之<rp>（</rp><rt>の</rt><rp>）</rp><rt></rt>二<rp>（</rp><rt>に</rt><rp>）</rp></ruby></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>人数</th>
</tr>
</thead>
<tbody><tr>
<td><ruby><rt></rt>一人<rp>（</rp><rt>ひとり</rt><rp>）</rp></ruby></td>
</tr>
<tr>
<td><ruby><rt></rt>两人<rp>（</rp><rt>ふたり</rt><rp>）</rp></ruby></td>
</tr>
</tbody></table>
<h1 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h1><table>
<thead>
<tr>
<th></th>
<th>前天</th>
<th>昨天</th>
<th>今天</th>
<th>明天</th>
<th>后天</th>
</tr>
</thead>
<tbody><tr>
<td>口语</td>
<td>おととい</td>
<td><ruby><rt></rt>昨日<rp>（</rp><rt>きのう</rt><rp>）</rp></ruby></td>
<td><ruby><rt></rt>今日<rp>（</rp><rt>きょう</rt><rp>）</rp></ruby></td>
<td><ruby><rt></rt>明日<rp>（</rp><rt>あした</rt><rp>）</rp></ruby></td>
<td><ruby><rt></rt>明後日<rp>（</rp><rt>あさって</rt><rp>）</rp></ruby></td>
</tr>
<tr>
<td>书面语</td>
<td>ぜんじつ</td>
<td><ruby><rt></rt>昨日<rp>（</rp><rt>さくじつ</rt><rp>）</rp></ruby></td>
<td><ruby><rt></rt>本日<rp>（</rp><rt>ほんじつ</rt><rp>）</rp></ruby></td>
<td><ruby><rt></rt>明日<rp>（</rp><rt>みょうにち</rt><rp>）</rp></ruby></td>
<td><ruby><rt></rt>明後日<rp>（</rp><rt>あさって</rt><rp>）</rp></ruby></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>上上周</th>
<th>上周</th>
<th>这周</th>
<th>下周</th>
<th>下下周</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>上上个月</th>
<th>上个月</th>
<th>这个月</th>
<th>下个月</th>
<th>下下个月</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>前年</th>
<th>去年</th>
<th>今年</th>
<th>明年</th>
<th>后年</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="时分秒"><a href="#时分秒" class="headerlink" title="时分秒"></a>时分秒</h2><h2 id="星期"><a href="#星期" class="headerlink" title="星期"></a>星期</h2><table>
<thead>
<tr>
<th>中文</th>
<th>日文</th>
</tr>
</thead>
<tbody><tr>
<td>星期日</td>
<td><ruby><rt></rt>日<rp>（</rp><rt>にち</rt><rp>）</rp><rt></rt>曜<rp>（</rp><rt>よう</rt><rp>）</rp><rt></rt>日<rp>（</rp><rt>び</rt><rp>）</rp></ruby></td>
</tr>
<tr>
<td>星期一</td>
<td><ruby><rt></rt>月<rp>（</rp><rt>げつ</rt><rp>）</rp><rt></rt>曜<rp>（</rp><rt>よう</rt><rp>）</rp><rt></rt>日<rp>（</rp><rt>び</rt><rp>）</rp></ruby></td>
</tr>
<tr>
<td>星期二</td>
<td><ruby><rt></rt>火<rp>（</rp><rt>か</rt><rp>）</rp><rt></rt>曜<rp>（</rp><rt>よう</rt><rp>）</rp><rt></rt>日<rp>（</rp><rt>び</rt><rp>）</rp></ruby></td>
</tr>
<tr>
<td>星期三</td>
<td><ruby><rt></rt>水<rp>（</rp><rt>すい</rt><rp>）</rp><rt></rt>曜<rp>（</rp><rt>よう</rt><rp>）</rp><rt></rt>日<rp>（</rp><rt>び</rt><rp>）</rp></ruby></td>
</tr>
<tr>
<td>星期四</td>
<td><ruby><rt></rt>木<rp>（</rp><rt>もく</rt><rp>）</rp><rt></rt>曜<rp>（</rp><rt>よう</rt><rp>）</rp><rt></rt>日<rp>（</rp><rt>び</rt><rp>）</rp></ruby></td>
</tr>
<tr>
<td>星期五</td>
<td><ruby><rt></rt>金<rp>（</rp><rt>きん</rt><rp>）</rp><rt></rt>曜<rp>（</rp><rt>よう</rt><rp>）</rp><rt></rt>日<rp>（</rp><rt>び</rt><rp>）</rp></ruby></td>
</tr>
<tr>
<td>星期六</td>
<td><ruby><rt></rt>土<rp>（</rp><rt>ど</rt><rp>）</rp><rt></rt>曜<rp>（</rp><rt>よう</rt><rp>）</rp><rt></rt>日<rp>（</rp><rt>び</rt><rp>）</rp></ruby></td>
</tr>
</tbody></table>
<h2 id="月份"><a href="#月份" class="headerlink" title="月份"></a>月份</h2><h1 id="方位"><a href="#方位" class="headerlink" title="方位"></a>方位</h1><table>
<thead>
<tr>
<th>这</th>
<th>那</th>
<th>哪</th>
</tr>
</thead>
<tbody><tr>
<td><ruby>这里<rp>（</rp><rt>ここ</rt><rp>）</rp></ruby></td>
<td><ruby>那里<rp>（</rp><rt>そこ</rt><rp>）</rp></ruby></td>
<td><ruby>哪里<rp>（</rp><rt>どこ</rt><rp>）</rp></ruby></td>
</tr>
<tr>
<td><ruby>这是<rp>（</rp><rt>これは</rt><rp>）</rp></ruby></td>
<td><ruby>那是<rp>（</rp><rt>あれは</rt><rp>）</rp></ruby></td>
<td></td>
</tr>
<tr>
<td><ruby>在这里<rp>（</rp><rt>ここ</rt><rp>）</rp></ruby></td>
<td><ruby>在那里<rp>（</rp><rt>あそこ</rt><rp>）</rp></ruby></td>
<td><ruby>在哪里<rp>（</rp><rt>どこ</rt><rp>）</rp></ruby></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>左上</td>
<td><ruby>上<rp>（</rp><rt>ぅぇ</rt><rp>）</rp></ruby></td>
<td>右上</td>
</tr>
<tr>
<td>左</td>
<td>中</td>
<td>右</td>
</tr>
<tr>
<td>左下</td>
<td>下</td>
<td>右下</td>
</tr>
</tbody></table>
<h1 id="频率"><a href="#频率" class="headerlink" title="频率"></a>频率</h1><h1 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h1><table>
<thead>
<tr>
<th>颜色</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>红色</td>
<td>白色</td>
</tr>
<tr>
<td>橙色</td>
<td>黑色</td>
</tr>
<tr>
<td>黄色</td>
<td>粉色</td>
</tr>
<tr>
<td>绿色</td>
<td></td>
</tr>
<tr>
<td>蓝色</td>
<td></td>
</tr>
<tr>
<td>青色</td>
<td></td>
</tr>
<tr>
<td>紫色</td>
<td></td>
</tr>
</tbody></table>
<h1 id="常用句子-1"><a href="#常用句子-1" class="headerlink" title="常用句子"></a>常用句子</h1><table>
<thead>
<tr>
<th>中文</th>
<th>日文</th>
</tr>
</thead>
<tbody><tr>
<td>我回来啦</td>
<td>ただいま</td>
</tr>
<tr>
<td>你回来了&#x2F;欢迎回来</td>
<td>おかえり</td>
</tr>
<tr>
<td>欢迎回家&#x2F;欢迎回来</td>
<td>お<ruby>帰<rp>（</rp><rt>かえ</rt><rp>）</rp></ruby>りなさい</td>
</tr>
<tr>
<td>欢迎光临</td>
<td>いらっしゃいませ</td>
</tr>
<tr>
<td>我开动了</td>
<td>いただきます</td>
</tr>
<tr>
<td>我吃饱了</td>
<td>ごちそうさまでした</td>
</tr>
<tr>
<td>我出去一下&#x2F;我走了</td>
<td><ruby><rt></rt>行<rp>（</rp><rt>い</rt><rp>）</rp></ruby>ってきます</td>
</tr>
<tr>
<td>路上小心</td>
<td><ruby><rt></rt>行<rp>（</rp><rt>い</rt><rp>）</rp></ruby>ってらっしゃい</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h1 id="疑难句式"><a href="#疑难句式" class="headerlink" title="疑难句式"></a>疑难句式</h1><table>
<thead>
<tr>
<th>中文</th>
<th>日文</th>
</tr>
</thead>
<tbody><tr>
<td>有狗吗</td>
<td><ruby>犬<rp>（</rp><rt>いぬ</rt><rp>）</rp></ruby>はいますか</td>
</tr>
<tr>
<td>没有狗</td>
<td><ruby>犬<rp>（</rp><rt>いぬ</rt><rp>）</rp></ruby>はいません</td>
</tr>
<tr>
<td>家里有窗户吗</td>
<td><ruby>家<rp>（</rp><rt>いえ</rt><rp>）</rp></ruby>にまどはありますか</td>
</tr>
<tr>
<td>家里有窗户</td>
<td><ruby>家<rp>（</rp><rt>いえ</rt><rp>）</rp></ruby>にまどがあります</td>
</tr>
<tr>
<td>你有几个弟弟</td>
<td>あなたの<ruby>弟<rp>（</rp><rt>おとうと</rt><rp>）</rp></ruby>さんは<ruby>何<rp>（</rp><rt>なん</rt><rp>）</rp></ruby><ruby>人<rp>（</rp><rt>にん</rt><rp>）</rp></ruby>ですか</td>
</tr>
<tr>
<td>你弟弟是谁</td>
<td>あなたの<ruby>弟<rp>（</rp><rt>おとうと</rt><rp>）</rp></ruby>さんは<ruby>誰<rp>（</rp><rt>だれ</rt><rp>）</rp></ruby>ですか</td>
</tr>
</tbody></table>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>生活</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker命令与操作</title>
    <url>/blog/3cd84c3d.html</url>
    <content><![CDATA[<blockquote>
<p><a href="https://docs.docker.com/reference/">Docker 命令官方文档</a></p>
<p><a href="http://edu.jb51.net/docker/docker-command-manual.html">Docker 命令大全 - 菜鸟学堂</a></p>
<p><a href="https://www.runoob.com/docker/docker-command-manual.html">Docker 命令大全 - 菜鸟教程</a></p>
</blockquote>
<h1 id="一、启动关闭命令"><a href="#一、启动关闭命令" class="headerlink" title="一、启动关闭命令"></a>一、启动关闭命令</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动Docker服务</span></span><br><span class="line">[root@localhost ~]# sudo systemctl start docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭Docker服务</span></span><br><span class="line">[root@localhost ~]# docker sudo systemctl stop docker</span><br><span class="line">[root@localhost ~]# docker sudo service docker stop</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启Docker服务</span></span><br><span class="line">[root@localhost ~]# sudo systemctl restart docker</span><br><span class="line">[root@localhost ~]# sudo service docker restart</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">守护进程重启Docker服务</span></span><br><span class="line">[root@localhost ~]# sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure>

<h2 id="1-1-启动-Docker-遇到的问题"><a href="#1-1-启动-Docker-遇到的问题" class="headerlink" title="1.1 启动 Docker 遇到的问题"></a>1.1 启动 Docker 遇到的问题</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# sudo systemctl start docker</span><br><span class="line">Error: Too many open files</span><br></pre></td></tr></table></figure>

<p>Too many open files 是 Linux 系统中常见的错误，从字面意思上看就是说程序打开的文件数量过多，不过这里的 files 不单是文件的意思，也包括打开的通讯链接（例如 socket），正在监听的端口等等，所以有时候也可以叫做句柄（handle），所以这个错误通常也可以叫做句柄数超出系统限制。引起的原因就是进程在某个时刻打开了超过系统限制的文件数量以及通讯链数。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前系统设置的最大句柄数</span></span><br><span class="line">[root@localhost ~]# ulimit -a</span><br></pre></td></tr></table></figure>

<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1665199865772.png"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装lsof</span></span><br><span class="line">[root@localhost ~]# yum install lsof</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前句柄数量</span></span><br><span class="line">[root@localhost ~]# lsof|awk &#x27;&#123;print $2&#125;&#x27;|wc -l</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者（统计打开文件数量和进程pid）</span></span><br><span class="line">[root@localhost ~]# lsof|awk &#x27;&#123;print $2&#125;&#x27;|sort|uniq -c|sort -nr|more</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看某个进程下打开的文件和数量</span></span><br><span class="line">[root@localhost ~]# losf -p 进程ID</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span></span><br><span class="line">[root@localhost ~]# losf -p 进程ID |wc -l</span><br></pre></td></tr></table></figure>

<p>发现已建立了好多端口映射，应该是 k8s 生成的</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1665210387112.png"></p>
<p>可以考虑重启 k8s，另一个解决方法是加大系统对最大句柄数的限制，参考博客：<a href="https://blog.csdn.net/leiwuhen92/article/details/112004783">排查Too many open files问题</a></p>
<h1 id="二、状态查看命令"><a href="#二、状态查看命令" class="headerlink" title="二、状态查看命令"></a>二、状态查看命令</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示docker的版本信息</span></span><br><span class="line">[root@localhost ~]# docker version</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示docker的系统信息，包括镜像和容器的数量</span></span><br><span class="line">[root@localhost ~]# docker info</span><br><span class="line"></span><br><span class="line">docker 命令 --help # docker命令帮助</span><br><span class="line">docker images --help</span><br></pre></td></tr></table></figure>

<h1 id="三、镜像命令"><a href="#三、镜像命令" class="headerlink" title="三、镜像命令"></a>三、镜像命令</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker images # 查看所有镜像</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可选项</span></span><br><span class="line">  -a, --all             Show all images (default hides intermediate images) # 列出所有镜像</span><br><span class="line">      --digests         Show digests # 略</span><br><span class="line">  -f, --filter filter   Filter output based on conditions provided # 略</span><br><span class="line">      --format string   Pretty-print images using a Go template # 略</span><br><span class="line">      --no-trunc        Don not truncate output # 略</span><br><span class="line">  -q, --quiet           Only show image IDs # 只显示镜像的ID</span><br></pre></td></tr></table></figure>

<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1649487938150.png"></p>
<ul>
<li>REPOSITORY：镜像的仓库源</li>
<li>TAG：镜像的标签</li>
<li>IMAGE ID：镜像的ID</li>
<li>……</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker search # 搜索docker镜像</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可选项</span></span><br><span class="line">  -f, --filter filter   Filter output based on conditions provided</span><br><span class="line">      --format string   Pretty-print search using a Go template</span><br><span class="line">      --limit int       Max number of search results (default 25)</span><br><span class="line">      --no-trunc        Don not truncate output</span><br><span class="line"></span><br><span class="line">docker search mysql --filter=stars=3000</span><br><span class="line">docker pull # 下载镜像</span><br><span class="line">docker pull 镜像名[:tag（版本）] # 默认下载最新版</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果不写tag指定版本，默认是最新的latest</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">因此以下命令等价</span></span><br><span class="line">docker pull mysql</span><br><span class="line">docker pull mysql:latest</span><br><span class="line">docker pull docker.io/library/mysql:latest</span><br><span class="line"></span><br><span class="line">[root@localhost docker]# docker pull mysql</span><br><span class="line">Using default tag: latest # 如果不写tag指定版本，默认是最新的latest</span><br><span class="line">latest: Pulling from library/mysql</span><br><span class="line">6ec7b7d162b2: Pull complete  # 分层下载（docker image的核心 联合文件系统（UnionFS））</span><br><span class="line">fedd960d3481: Pull complete </span><br><span class="line">7ab947313861: Pull complete </span><br><span class="line">64f92f19e638: Pull complete </span><br><span class="line">3e80b17bff96: Pull complete </span><br><span class="line">014e976799f9: Pull complete </span><br><span class="line">59ae84fee1b3: Pull complete </span><br><span class="line">ffe10de703ea: Pull complete </span><br><span class="line">657af6d90c83: Pull complete </span><br><span class="line">98bfb480322c: Pull complete </span><br><span class="line">6aa3859c4789: Pull complete </span><br><span class="line">1ed875d851ef: Pull complete </span><br><span class="line">Digest: sha256:78800e6d3f1b230e35275145e657b82c3fb02a27b2d8e76aac2f5e90c1c30873 # 镜像签名（防伪）</span><br><span class="line">Status: Downloaded newer image for mysql:latest</span><br><span class="line">docker.io/library/mysql:latest # 镜像真实地址</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">分层下载：重复的层不会反复下载，提高速度，减少内存</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除镜像的时候也只会删除多余的层而不是全部删掉</span></span><br><span class="line">[root@localhost docker]# docker pull mysql:5.7</span><br><span class="line">5.7: Pulling from library/mysql</span><br><span class="line">6ec7b7d162b2: Already exists </span><br><span class="line">fedd960d3481: Already exists </span><br><span class="line">7ab947313861: Already exists </span><br><span class="line">64f92f19e638: Already exists </span><br><span class="line">3e80b17bff96: Already exists </span><br><span class="line">014e976799f9: Already exists </span><br><span class="line">59ae84fee1b3: Already exists </span><br><span class="line">7d1da2a18e2e: Pull complete </span><br><span class="line">301a28b700b9: Pull complete </span><br><span class="line">529dc8dbeaf3: Pull complete </span><br><span class="line">bc9d021dc13f: Pull complete </span><br><span class="line">Digest: sha256:c3a567d3e3ad8b05dfce401ed08f0f6bf3f3b64cc17694979d5f2e5d78e10173</span><br><span class="line">Status: Downloaded newer image for mysql:5.7</span><br><span class="line">docker.io/library/mysql:5.7</span><br><span class="line">docker rmi # 删除镜像（rmi - remove image）</span><br><span class="line">docker rmi -f 镜像ID # 删除指定镜像</span><br><span class="line">docker rmi -f 镜像ID 镜像ID # 删除指定的多个镜像</span><br><span class="line">docker rmi -f $(docker images -aq) # 递归删除全部镜像</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可通过REPOSITORY或者IMAGE ID进行删除</span></span><br><span class="line"></span><br><span class="line">[root@localhost docker]# docker rmi -f $(docker images -aq)</span><br><span class="line">Untagged: mysql:latest</span><br><span class="line">Untagged: mysql@sha256:78800e6d3f1b230e35275145e657b82c3fb02a27b2d8e76aac2f5e90c1c30873</span><br><span class="line">Deleted: sha256:a347a59280467629ae4d70ce555e3f96faca8ff2ff8c57cacc8184bebb681f66</span><br><span class="line">Deleted: sha256:8c4db4ce0f63c9eec74a2e555bb7e2fa5e2de08389cbc747793aa30bc3ac04e1</span><br><span class="line">Deleted: sha256:6179be2adc547662cd0ef2cb032b85809ac68923b7ab9c71e5a21b88bbe7f542</span><br><span class="line">Deleted: sha256:17d702350e6aa7f240ca23090d24b059f5c324e292a77b5069225e76e0b51dd6</span><br><span class="line">Deleted: sha256:5c5f95733957fd96300b5265d6b2df728415ed62e7b4b30eadd7d836d48187bf</span><br><span class="line">Deleted: sha256:fbf118fadaf5230c8df9a3b51c608393a8f3adb99c089ea2db253438efab1a0e</span><br><span class="line">Deleted: sha256:43b82d704a10e6d022fa3f31a5f827a00e339ee21dd2849a9b120ab82be9af71</span><br><span class="line">Deleted: sha256:a4994702421d2b9a74c4f3810aa7ac09990e849905f23a1d8f358c826d58501f</span><br><span class="line">Deleted: sha256:36c598c7a6f90abf6d67cde4a58b0747bfbcc7441d3b782bdeea7cda8c9ad7b6</span><br><span class="line">Deleted: sha256:86f598b4f8200bdd4ae752f916154e4e29d5b4c211bb124eb150b9957a3e0141</span><br><span class="line">Deleted: sha256:9e979d97f92bf78a225c77c6b4ba74eb2e03efb95b19b69206cd17cee15a4b26</span><br><span class="line">Deleted: sha256:aff48ce4678f78d83d7e9bfb9e88cd951c3da52da08779e99b6082edd1cc66f3</span><br><span class="line">Deleted: sha256:87c8a1d8f54f3aa4e05569e8919397b65056aa71cdf48b7f061432c98475eee9</span><br><span class="line">Untagged: hello-world:latest</span><br><span class="line">Untagged: hello-world@sha256:1a523af650137b8accdaed439c17d684df61ee4d74feac151b5b337bd29e7eec</span><br><span class="line">Deleted: sha256:bf756fb1ae65adf866bd8c456593cd24beb6a0a061dedf42b26a993176745f6b</span><br></pre></td></tr></table></figure>

<h1 id="四、容器命令"><a href="#四、容器命令" class="headerlink" title="四、容器命令"></a>四、容器命令</h1><p>注意：有了镜像才可以创建容器，因此需要先下载一个 centos（这种基础版本的 centos 很多命令都是不完善的） </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull centos</span><br></pre></td></tr></table></figure>

<h2 id="4-1-新建容器和启动（run）"><a href="#4-1-新建容器和启动（run）" class="headerlink" title="4.1 新建容器和启动（run）"></a>4.1 新建容器和启动（run）</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run [可选参数] image</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">【如果要运行的镜像不存在，docker会自动执行：docker pull 镜像名称】</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参数说明</span></span><br><span class="line">--name=&quot;Name&quot;          # 附带名字启动容器（方便区分）</span><br><span class="line">-d                     # 以后台的方式运行（docker容器使用后台运行，就必须要有一个前台进程，docker发现自己没有提供服务，就会自动停止）</span><br><span class="line">-it                    # 使用交互方式运行（即进入容器中进行操作）</span><br><span class="line">-p                     # 指定容器端口启动</span><br><span class="line">    -p ip:主机端口:容器端口</span><br><span class="line">    -p 主机端口:容器端口 # （常用）</span><br><span class="line">    -p 容器端口</span><br><span class="line">    容器端口</span><br><span class="line">-P                     # 随机指定端口</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例</span></span><br><span class="line">[root@localhost ~]# docker run -it --rm centos /bin/bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">【--<span class="built_in">rm</span>表示容器停止后即删除镜像，使用docker ps -a不会找到，这种方法一般用于测试使用】</span></span><br><span class="line">[root@localhost ~]# docker run -it centos /bin/bash</span><br><span class="line">[root@987ceaa1b6cc /]# ls</span><br><span class="line">bin  etc   lib    lost+found  mnt  proc  run   srv  tmp  var</span><br><span class="line">dev  home  lib64  media       opt  root  sbin  sys  usr</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从容器中退回主机</span></span><br><span class="line">[root@987ceaa1b6cc /]# exit</span><br><span class="line">exit</span><br><span class="line">[root@localhost /]# ls</span><br><span class="line">bin   dev  home  lib64  mnt  proc  run   srv  tmp  var</span><br><span class="line">boot  etc  lib   media  opt  root  sbin  sys  usr</span><br></pre></td></tr></table></figure>

<h2 id="4-2-容器查看命令（ps）"><a href="#4-2-容器查看命令（ps）" class="headerlink" title="4.2 容器查看命令（ps）"></a>4.2 容器查看命令（ps）</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps [可选参数]</span><br><span class="line">      # 列出当前正在运行的容器</span><br><span class="line">-a    # 列出当前正在运行的容器 + 带出历史运行过的容器</span><br><span class="line">-n=?  # 显示最近创建的几个容器</span><br><span class="line">-q    # 只显示容器的编号</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例</span></span><br><span class="line">[root@localhost /]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line">[root@localhost /]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE          COMMAND       CREATED          STATUS                       PORTS     NAMES</span><br><span class="line">987ceaa1b6cc   centos         &quot;/bin/bash&quot;   33 minutes ago   Exited (127) 5 minutes ago             gallant_stonebraker</span><br><span class="line">0f4a68190c7a   bf756fb1ae65   &quot;/hello&quot;      8 days ago       Exited (0) 8 days ago                  recursing_lovelace</span><br><span class="line">[root@localhost /]# docker ps -n=1</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED          STATUS                       PORTS     NAMES</span><br><span class="line">987ceaa1b6cc   centos    &quot;/bin/bash&quot;   33 minutes ago   Exited (127) 5 minutes ago             gallant_stonebraker</span><br></pre></td></tr></table></figure>

<h2 id="4-3-容器进入命令"><a href="#4-3-容器进入命令" class="headerlink" title="4.3 容器进入命令"></a>4.3 容器进入命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it [容器ID || 容器的name] [/bin/bash || bash]</span><br><span class="line">docker attach 容器ID</span><br></pre></td></tr></table></figure>

<h2 id="4-4-容器退出命令（exit-p-q）"><a href="#4-4-容器退出命令（exit-p-q）" class="headerlink" title="4.4 容器退出命令（exit|^p + ^q）"></a>4.4 容器退出命令（exit|^p + ^q）</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit          # 容器停止并退出</span><br><span class="line">Ctrl + p + q  # 容器不停止退出</span><br></pre></td></tr></table></figure>

<h2 id="4-5-容器删除命令（rm）"><a href="#4-5-容器删除命令（rm）" class="headerlink" title="4.5 容器删除命令（rm）"></a>4.5 容器删除命令（rm）</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm 容器ID                  # 根据ID删除指定容器（如果容器正在运行，则不可删除）</span><br><span class="line">docker rm -f 容器ID               # 根据ID强制删除指定容器</span><br><span class="line">docker rm $(docker ps -aq)       # 遍历删除所有容器</span><br><span class="line">docker rm -f $(docker ps -aq)    # 遍历强制删除所有容器</span><br><span class="line">docker ps -a -q|xargs docker rm  # 删除所有容器</span><br></pre></td></tr></table></figure>

<h2 id="4-6-容器启动和停止（start-stop）"><a href="#4-6-容器启动和停止（start-stop）" class="headerlink" title="4.6 容器启动和停止（start|stop）"></a>4.6 容器启动和停止（start|stop）</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker start 容器ID    # 启动容器</span><br><span class="line">docker restart 容器ID  # 重启容器</span><br><span class="line">docker stop 容器ID     # 停止当前容器</span><br><span class="line">docker kill 容器ID     # 强制停止当前容器</span><br><span class="line">docker pause 容器ID    # 暂停当前容器</span><br><span class="line">docker unpause 容器ID  # 启动暂停中的容器</span><br></pre></td></tr></table></figure>

<h1 id="五、其他常用命令"><a href="#五、其他常用命令" class="headerlink" title="五、其他常用命令"></a>五、其他常用命令</h1><h2 id="5-1-查看日志（logs）"><a href="#5-1-查看日志（logs）" class="headerlink" title="5.1 查看日志（logs）"></a>5.1 查看日志（logs）</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker logs -t -f --detail 显示日志的条数 容器ID</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">（-t表示显示时间戳；-f表示持续显示）</span></span><br><span class="line">[root@localhost ~]# docker logs --help</span><br><span class="line"></span><br><span class="line">Usage:  docker logs [OPTIONS] CONTAINER</span><br><span class="line"></span><br><span class="line">Fetch the logs of a container</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">      --details        Show extra details provided to logs</span><br><span class="line">  -f, --follow         Follow log output</span><br><span class="line">      --since string   Show logs since timestamp (e.g. 2013-01-02T13:23:37Z)</span><br><span class="line">                       or relative (e.g. 42m for 42 minutes)</span><br><span class="line">  -n, --tail string    Number of lines to show from the end of the logs</span><br><span class="line">                       (default &quot;all&quot;)</span><br><span class="line">  -t, --timestamps     Show timestamps</span><br><span class="line">      --until string   Show logs before a timestamp (e.g.</span><br><span class="line">                       2013-01-02T13:23:37Z) or relative (e.g. 42m for 42</span><br><span class="line">                       minutes)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">先编写一段shell脚本作为测试</span></span><br><span class="line">[root@localhost ~]# docker run -d centos /bin/sh -c &quot;while true;do echo liangxj;sleep 1;done&quot;</span><br><span class="line">22b9beab5965eacb2e8f646c1e096ffd10fa7355df47f3da8ff6244ca7497bfb</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE</span><br><span class="line">22b9beab5965   centos</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示日志</span></span><br><span class="line">[root@localhost ~]# docker logs -tf --tail 10 22b9beab5965</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# docker logs -tf -n 500 服务名称</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-f：持续输出</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-t：展示时间戳</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-n：展示多少行</span></span><br></pre></td></tr></table></figure>

<h2 id="5-2-查看容器中的进程信息（top）"><a href="#5-2-查看容器中的进程信息（top）" class="headerlink" title="5.2 查看容器中的进程信息（top）"></a>5.2 查看容器中的进程信息（top）</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker top 容器ID</span><br><span class="line">[root@localhost ~]# docker top 0388fc715003</span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY</span><br><span class="line">root                8956                8936                0                   01:38               ?</span><br><span class="line">root                9153                8956                0                   01:40               ?</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">PID：进程ID</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">PPID：父进程ID</span></span><br></pre></td></tr></table></figure>

<h2 id="5-3-查看进程元数据（inspect）"><a href="#5-3-查看进程元数据（inspect）" class="headerlink" title="5.3 查看进程元数据（inspect）"></a>5.3 查看进程元数据（inspect）</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker inspect 容器ID</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# docker inspect --help</span><br><span class="line"></span><br><span class="line">Usage:  docker inspect [OPTIONS] NAME|ID [NAME|ID...]</span><br><span class="line"></span><br><span class="line">Return low-level information on Docker objects</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -f, --format string   Format the output using the given Go template</span><br><span class="line">  -s, --size            Display total file sizes if the type is container</span><br><span class="line">      --type string     Return JSON for specified type</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# docker inspect 0388fc715003</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: &quot;0388fc715003a52ce493ee6ee915fb670681285fe07d61d35eeed23caa505be6&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2021-01-04T06:38:39.643094366Z&quot;,</span><br><span class="line">        &quot;Path&quot;: &quot;/bin/sh&quot;,</span><br><span class="line">        &quot;Args&quot;: [</span><br><span class="line">            &quot;-c&quot;,</span><br><span class="line">            &quot;while true;do echo liangxj;sleep 1;done&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;State&quot;: &#123;</span><br><span class="line">            &quot;Status&quot;: &quot;running&quot;,</span><br><span class="line">            &quot;Running&quot;: true,</span><br><span class="line">            &quot;Paused&quot;: false,</span><br><span class="line">            &quot;Restarting&quot;: false,</span><br><span class="line">            &quot;OOMKilled&quot;: false,</span><br><span class="line">            &quot;Dead&quot;: false,</span><br><span class="line">            &quot;Pid&quot;: 8956,</span><br><span class="line">            &quot;ExitCode&quot;: 0,</span><br><span class="line">            &quot;Error&quot;: &quot;&quot;,</span><br><span class="line">            &quot;StartedAt&quot;: &quot;2021-01-04T06:38:40.052078891Z&quot;,</span><br><span class="line">            &quot;FinishedAt&quot;: &quot;0001-01-01T00:00:00Z&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Image&quot;: &quot;sha256:300e315adb2f96afe5f0b2780b87f28ae95231fe3bdd1e16b9ba606307728f55&quot;,</span><br><span class="line">        &quot;ResolvConfPath&quot;: &quot;/var/lib/docker/containers/0388fc715003a52ce493ee6ee915fb670681285fe07d61d35eeed23caa505be6/resolv.conf&quot;,</span><br><span class="line">        &quot;HostnamePath&quot;: &quot;/var/lib/docker/containers/0388fc715003a52ce493ee6ee915fb670681285fe07d61d35eeed23caa505be6/hostname&quot;,</span><br><span class="line">        &quot;HostsPath&quot;: &quot;/var/lib/docker/containers/0388fc715003a52ce493ee6ee915fb670681285fe07d61d35eeed23caa505be6/hosts&quot;,</span><br><span class="line">        &quot;LogPath&quot;: &quot;/var/lib/docker/containers/0388fc715003a52ce493ee6ee915fb670681285fe07d61d35eeed23caa505be6/0388fc715003a52ce493ee6ee915fb670681285fe07d61d35eeed23caa505be6-json.log&quot;,</span><br><span class="line">        &quot;Name&quot;: &quot;/dreamy_carson&quot;,</span><br><span class="line">        &quot;RestartCount&quot;: 0,</span><br><span class="line">        &quot;Driver&quot;: &quot;overlay2&quot;,</span><br><span class="line">        &quot;Platform&quot;: &quot;linux&quot;,</span><br><span class="line">        &quot;MountLabel&quot;: &quot;&quot;,</span><br><span class="line">        &quot;ProcessLabel&quot;: &quot;&quot;,</span><br><span class="line">        &quot;AppArmorProfile&quot;: &quot;&quot;,</span><br><span class="line">        &quot;ExecIDs&quot;: null,</span><br><span class="line">        &quot;HostConfig&quot;: &#123;</span><br><span class="line">            &quot;Binds&quot;: null,</span><br><span class="line">            &quot;ContainerIDFile&quot;: &quot;&quot;,</span><br><span class="line">            &quot;LogConfig&quot;: &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;json-file&quot;,</span><br><span class="line">                &quot;Config&quot;: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;NetworkMode&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;PortBindings&quot;: &#123;&#125;,</span><br><span class="line">            &quot;RestartPolicy&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;no&quot;,</span><br><span class="line">                &quot;MaximumRetryCount&quot;: 0</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;AutoRemove&quot;: false,</span><br><span class="line">            &quot;VolumeDriver&quot;: &quot;&quot;,</span><br><span class="line">            &quot;VolumesFrom&quot;: null,</span><br><span class="line">            &quot;CapAdd&quot;: null,</span><br><span class="line">            &quot;CapDrop&quot;: null,</span><br><span class="line">            &quot;CgroupnsMode&quot;: &quot;host&quot;,</span><br><span class="line">            &quot;Dns&quot;: [],</span><br><span class="line">            &quot;DnsOptions&quot;: [],</span><br><span class="line">            &quot;DnsSearch&quot;: [],</span><br><span class="line">            &quot;ExtraHosts&quot;: null,</span><br><span class="line">            &quot;GroupAdd&quot;: null,</span><br><span class="line">            &quot;IpcMode&quot;: &quot;private&quot;,</span><br><span class="line">            &quot;Cgroup&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Links&quot;: null,</span><br><span class="line">            &quot;OomScoreAdj&quot;: 0,</span><br><span class="line">            &quot;PidMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Privileged&quot;: false,</span><br><span class="line">            &quot;PublishAllPorts&quot;: false,</span><br><span class="line">            &quot;ReadonlyRootfs&quot;: false,</span><br><span class="line">            &quot;SecurityOpt&quot;: null,</span><br><span class="line">            &quot;UTSMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;UsernsMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;ShmSize&quot;: 67108864,</span><br><span class="line">            &quot;Runtime&quot;: &quot;runc&quot;,</span><br><span class="line">            &quot;ConsoleSize&quot;: [</span><br><span class="line">                0,</span><br><span class="line">                0</span><br><span class="line">            ],</span><br><span class="line">            &quot;Isolation&quot;: &quot;&quot;,</span><br><span class="line">            &quot;CpuShares&quot;: 0,</span><br><span class="line">            &quot;Memory&quot;: 0,</span><br><span class="line">            &quot;NanoCpus&quot;: 0,</span><br><span class="line">            &quot;CgroupParent&quot;: &quot;&quot;,</span><br><span class="line">            &quot;BlkioWeight&quot;: 0,</span><br><span class="line">            &quot;BlkioWeightDevice&quot;: [],</span><br><span class="line">            &quot;BlkioDeviceReadBps&quot;: null,</span><br><span class="line">            &quot;BlkioDeviceWriteBps&quot;: null,</span><br><span class="line">            &quot;BlkioDeviceReadIOps&quot;: null,</span><br><span class="line">            &quot;BlkioDeviceWriteIOps&quot;: null,</span><br><span class="line">            &quot;CpuPeriod&quot;: 0,</span><br><span class="line">            &quot;CpuQuota&quot;: 0,</span><br><span class="line">            &quot;CpuRealtimePeriod&quot;: 0,</span><br><span class="line">            &quot;CpuRealtimeRuntime&quot;: 0,</span><br><span class="line">            &quot;CpusetCpus&quot;: &quot;&quot;,</span><br><span class="line">            &quot;CpusetMems&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Devices&quot;: [],</span><br><span class="line">            &quot;DeviceCgroupRules&quot;: null,</span><br><span class="line">            &quot;DeviceRequests&quot;: null,</span><br><span class="line">            &quot;KernelMemory&quot;: 0,</span><br><span class="line">            &quot;KernelMemoryTCP&quot;: 0,</span><br><span class="line">            &quot;MemoryReservation&quot;: 0,</span><br><span class="line">            &quot;MemorySwap&quot;: 0,</span><br><span class="line">            &quot;MemorySwappiness&quot;: null,</span><br><span class="line">            &quot;OomKillDisable&quot;: false,</span><br><span class="line">            &quot;PidsLimit&quot;: null,</span><br><span class="line">            &quot;Ulimits&quot;: null,</span><br><span class="line">            &quot;CpuCount&quot;: 0,</span><br><span class="line">            &quot;CpuPercent&quot;: 0,</span><br><span class="line">            &quot;IOMaximumIOps&quot;: 0,</span><br><span class="line">            &quot;IOMaximumBandwidth&quot;: 0,</span><br><span class="line">            &quot;MaskedPaths&quot;: [</span><br><span class="line">                &quot;/proc/asound&quot;,</span><br><span class="line">                &quot;/proc/acpi&quot;,</span><br><span class="line">                &quot;/proc/kcore&quot;,</span><br><span class="line">                &quot;/proc/keys&quot;,</span><br><span class="line">                &quot;/proc/latency_stats&quot;,</span><br><span class="line">                &quot;/proc/timer_list&quot;,</span><br><span class="line">                &quot;/proc/timer_stats&quot;,</span><br><span class="line">                &quot;/proc/sched_debug&quot;,</span><br><span class="line">                &quot;/proc/scsi&quot;,</span><br><span class="line">                &quot;/sys/firmware&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;ReadonlyPaths&quot;: [</span><br><span class="line">                &quot;/proc/bus&quot;,</span><br><span class="line">                &quot;/proc/fs&quot;,</span><br><span class="line">                &quot;/proc/irq&quot;,</span><br><span class="line">                &quot;/proc/sys&quot;,</span><br><span class="line">                &quot;/proc/sysrq-trigger&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;GraphDriver&quot;: &#123;</span><br><span class="line">            &quot;Data&quot;: &#123;</span><br><span class="line">                &quot;LowerDir&quot;: &quot;/var/lib/docker/overlay2/e2f71bff5cc0b5e32761153742315bdba576839119902c592f601f1162b9bae1-init/diff:/var/lib/docker/overlay2/8508e4e63830c2cd44cc90e39b2bcc4aaf442f8eecf36fa7ef8a343930481fdb/diff&quot;,</span><br><span class="line">                &quot;MergedDir&quot;: &quot;/var/lib/docker/overlay2/e2f71bff5cc0b5e32761153742315bdba576839119902c592f601f1162b9bae1/merged&quot;,</span><br><span class="line">                &quot;UpperDir&quot;: &quot;/var/lib/docker/overlay2/e2f71bff5cc0b5e32761153742315bdba576839119902c592f601f1162b9bae1/diff&quot;,</span><br><span class="line">                &quot;WorkDir&quot;: &quot;/var/lib/docker/overlay2/e2f71bff5cc0b5e32761153742315bdba576839119902c592f601f1162b9bae1/work&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;Name&quot;: &quot;overlay2&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Mounts&quot;: [],</span><br><span class="line">        &quot;Config&quot;: &#123;</span><br><span class="line">            &quot;Hostname&quot;: &quot;0388fc715003&quot;,</span><br><span class="line">            &quot;Domainname&quot;: &quot;&quot;,</span><br><span class="line">            &quot;User&quot;: &quot;&quot;,</span><br><span class="line">            &quot;AttachStdin&quot;: false,</span><br><span class="line">            &quot;AttachStdout&quot;: false,</span><br><span class="line">            &quot;AttachStderr&quot;: false,</span><br><span class="line">            &quot;Tty&quot;: false,</span><br><span class="line">            &quot;OpenStdin&quot;: false,</span><br><span class="line">            &quot;StdinOnce&quot;: false,</span><br><span class="line">            &quot;Env&quot;: [</span><br><span class="line">                &quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Cmd&quot;: [</span><br><span class="line">                &quot;/bin/sh&quot;,</span><br><span class="line">                &quot;-c&quot;,</span><br><span class="line">                &quot;while true;do echo liangxj;sleep 1;done&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Image&quot;: &quot;centos&quot;,</span><br><span class="line">            &quot;Volumes&quot;: null,</span><br><span class="line">            &quot;WorkingDir&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Entrypoint&quot;: null,</span><br><span class="line">            &quot;OnBuild&quot;: null,</span><br><span class="line">            &quot;Labels&quot;: &#123;</span><br><span class="line">                &quot;org.label-schema.build-date&quot;: &quot;20201204&quot;,</span><br><span class="line">                &quot;org.label-schema.license&quot;: &quot;GPLv2&quot;,</span><br><span class="line">                &quot;org.label-schema.name&quot;: &quot;CentOS Base Image&quot;,</span><br><span class="line">                &quot;org.label-schema.schema-version&quot;: &quot;1.0&quot;,</span><br><span class="line">                &quot;org.label-schema.vendor&quot;: &quot;CentOS&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;NetworkSettings&quot;: &#123;</span><br><span class="line">            &quot;Bridge&quot;: &quot;&quot;,</span><br><span class="line">            &quot;SandboxID&quot;: &quot;bb48a599f020d56f908d78b170da712209ac5ff3a185599f21da1bfa30c77ec0&quot;,</span><br><span class="line">            &quot;HairpinMode&quot;: false,</span><br><span class="line">            &quot;LinkLocalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">            &quot;LinkLocalIPv6PrefixLen&quot;: 0,</span><br><span class="line">            &quot;Ports&quot;: &#123;&#125;,</span><br><span class="line">            &quot;SandboxKey&quot;: &quot;/var/run/docker/netns/bb48a599f020&quot;,</span><br><span class="line">            &quot;SecondaryIPAddresses&quot;: null,</span><br><span class="line">            &quot;SecondaryIPv6Addresses&quot;: null,</span><br><span class="line">            &quot;EndpointID&quot;: &quot;bca90a216e8e4eaa7c7d105652509de996a1a9a786c0717758a90db24167ec4d&quot;,</span><br><span class="line">            &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class="line">            &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">            &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">            &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,</span><br><span class="line">            &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">            &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">            &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class="line">            &quot;Networks&quot;: &#123;</span><br><span class="line">                &quot;bridge&quot;: &#123;</span><br><span class="line">                    &quot;IPAMConfig&quot;: null,</span><br><span class="line">                    &quot;Links&quot;: null,</span><br><span class="line">                    &quot;Aliases&quot;: null,</span><br><span class="line">                    &quot;NetworkID&quot;: &quot;340b9bbe55d6cd8d6879ade40a0106da1eaec688dd9ef60c74479905422ccc22&quot;,</span><br><span class="line">                    &quot;EndpointID&quot;: &quot;bca90a216e8e4eaa7c7d105652509de996a1a9a786c0717758a90db24167ec4d&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class="line">                    &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,</span><br><span class="line">                    &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">                    &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">                    &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class="line">                    &quot;DriverOpts&quot;: null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="5-4-进入当前正在运行的容器（exec-attach）"><a href="#5-4-进入当前正在运行的容器（exec-attach）" class="headerlink" title="5.4 进入当前正在运行的容器（exec|attach）"></a>5.4 进入当前正在运行的容器（exec|attach）</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">一般容器都是使用后台方式运行，然后进入容器，修改配置</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式一</span></span><br><span class="line">docker exec -it 容器ID bashShell</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例</span></span><br><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS         PORTS     NAMES</span><br><span class="line">f88acc152e9e   centos    &quot;/bin/bash&quot;   4 minutes ago   Up 4 minutes             charming_jang</span><br><span class="line">[root@localhost ~]# docker exec -it f88acc152e9e /bin/bash</span><br><span class="line">[root@f88acc152e9e /]# </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式二</span></span><br><span class="line">docker attach 容器ID</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例</span></span><br><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS         PORTS     NAMES</span><br><span class="line">f88acc152e9e   centos    &quot;/bin/bash&quot;   7 minutes ago   Up 7 minutes             charming_jang</span><br><span class="line">[root@localhost ~]# docker attach f88acc152e9e</span><br><span class="line">[root@f88acc152e9e /]# </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">对比</span></span><br><span class="line">docker exec -it 容器ID bashShell  # 进入容器后开启一个新的终端，可以在里面操作（常用）</span><br><span class="line">docker attach 容器ID              # 进入容器正在执行的终端，不会启动新的进程</span><br></pre></td></tr></table></figure>

<h2 id="5-5-拷贝容器内的文件到主机上（cp）"><a href="#5-5-拷贝容器内的文件到主机上（cp）" class="headerlink" title="5.5 拷贝容器内的文件到主机上（cp）"></a>5.5 拷贝容器内的文件到主机上（cp）</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker cp 容器ID:容器内路径 主机上的目标路径</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意：无论容器是后台运行抑或是停止了，都可以从容器中把文件拷贝出来</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例</span></span><br><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS         PORTS     NAMES</span><br><span class="line">f88acc152e9e   centos    &quot;/bin/bash&quot;   4 minutes ago   Up 4 minutes             charming_jang</span><br><span class="line">[root@localhost ~]# docker exec -it f88acc152e9e /bin/bash</span><br><span class="line">[root@f88acc152e9e /]# ls  </span><br><span class="line">bin  etc   lib    lost+found  mnt  proc  run   srv  tmp  var</span><br><span class="line">dev  home  lib64  media       opt  root  sbin  sys  usr</span><br><span class="line">[root@f88acc152e9e /]# cd home</span><br><span class="line">[root@f88acc152e9e home]# ls</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">容器内新建文件</span></span><br><span class="line">[root@f88acc152e9e home]# touch liangxj.txt</span><br><span class="line">[root@f88acc152e9e home]# ls</span><br><span class="line">liangxj.txt</span><br><span class="line">[root@f88acc152e9e home]# exit</span><br><span class="line">exit</span><br><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS                      PORTS     NAMES</span><br><span class="line">f88acc152e9e   centos    &quot;/bin/bash&quot;              23 minutes ago   Exited (0) 24 seconds ago             charming_jang</span><br><span class="line">[root@localhost ~]# cd /home</span><br><span class="line">[root@localhost home]# ls</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拷贝容器内的文件到主机上</span></span><br><span class="line">[root@localhost home]# docker cp f88acc152e9e:/home/liangxj.txt /home</span><br><span class="line">[root@localhost home]# ls</span><br><span class="line">liangxj.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意：这里的拷贝是一个手动的过程，还可以使用 -V 卷的技术，实现容器内的文件夹与主机上的文件夹对应起来，自动同步</span></span><br></pre></td></tr></table></figure>

<h2 id="5-6-查看-Docker-运行中的容器的实时数据流"><a href="#5-6-查看-Docker-运行中的容器的实时数据流" class="headerlink" title="5.6 查看 Docker 运行中的容器的实时数据流"></a>5.6 查看 Docker 运行中的容器的实时数据流</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost home]# docker stats</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以查看运行中的容器占用的CPU和内存情况，与任务管理器类似</span></span><br></pre></td></tr></table></figure>

<h1 id="六、命令小结"><a href="#六、命令小结" class="headerlink" title="六、命令小结"></a>六、命令小结</h1><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1649488125279.png"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">attach      Attach local standard input, output, and error streams to a running container # 当前shell下attach链接指定运行镜像</span><br><span class="line">build       Build an image from a Dockerfile                                              # 通过Dockerfile定制镜像</span><br><span class="line">commit      Create a new image from a container changes                                   # 提交当前容器为新的容器</span><br><span class="line">cp          Copy files/folders between a container and the local filesystem               # 从容器中拷贝指定文件或者目录到宿主机上</span><br><span class="line">create      Create a new container                                                        # 创建一个新的容器，同run，但不启动容器</span><br><span class="line">diff        Inspect changes to files or directories on a container filesystem             # 查看docker容器编号</span><br><span class="line">events      Get real time events from the server                                          # 从docker服务获取容器实时事件</span><br><span class="line">exec        Run a command in a running container                                          # 在已存在的容器上运行命令</span><br><span class="line">export      Export a container filesystem as a tar archive                                # 导出容器的内容流作为一个tar归档文件[对应import]</span><br><span class="line">history     Show the history of an image                                                  # 展示一个镜像形成历史</span><br><span class="line">images      List images                                                                   # 列出系统当前镜像</span><br><span class="line">import      Import the contents from a tarball to create a filesystem image               # 从tar包中的内容创建一个新的文件系统映像[对应export]</span><br><span class="line">info        Display system-wide information                                               # 显示系统相关信息</span><br><span class="line">inspect     Return low-level information on Docker objects                                # 查看容器详细信息</span><br><span class="line">kill        Kill one or more running containers                                           # kill指定docker容器</span><br><span class="line">load        Load an image from a tar archive or STDIN                                     # 从一个tar包中加载一个镜像[对应save]</span><br><span class="line">login       Log in to a Docker registry                                                   # 注册或者登陆一个docker源服务器</span><br><span class="line">logout      Log out from a Docker registry                                                # 从当前Docker registry退出</span><br><span class="line">logs        Fetch the logs of a container                                                 # 输出当前容器日志信息</span><br><span class="line">pause       Pause all processes within one or more containers                             # 暂停容器</span><br><span class="line">port        List port mappings or a specific mapping for the container                    # 查看映射端口对应的容器内部源端口</span><br><span class="line">ps          List containers                                                               # 列出容器列表</span><br><span class="line">pull        Pull an image or a repository from a registry                                 # 从docker镜像源服务器拉取指定镜像或者库镜像</span><br><span class="line">push        Push an image or a repository to a registry                                   # 推送指定镜像或者库镜像至docker源服务器</span><br><span class="line">rename      Rename a container                                                            # 重命名容器</span><br><span class="line">restart     Restart one or more containers                                                # 重启运行的容器</span><br><span class="line">rm          Remove one or more containers                                                 # 移除一个或者多个容器</span><br><span class="line">rmi         Remove one or more images                                                     # 移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或-f强制删除]</span><br><span class="line">run         Run a command in a new container                                              # 创建一个新的容器并运行一个命令</span><br><span class="line">save        Save one or more images to a tar archive (streamed to STDOUT by default)      # 保存一个镜像为一个tar包[对应load]</span><br><span class="line">search      Search the Docker Hub for images                                              # 在docker hub中搜索镜像</span><br><span class="line">start       Start one or more stopped containers                                          # 启动容器</span><br><span class="line">stats       Display a live stream of container(s) resource usage statistics               # 返回运行中的容器的实时数据流</span><br><span class="line">stop        Stop one or more running containers                                           # 停止容器</span><br><span class="line">tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE                         # 标记本地镜像，将其归入某一仓库</span><br><span class="line">top         Display the running processes of a container                                  # 查看容器中运行的进程信息</span><br><span class="line">unpause     Unpause all processes within one or more containers                           # 取消暂停容器</span><br><span class="line">update      Update configuration of one or more containers                                # 更新一个或多个容器的配置</span><br><span class="line">version     Show the Docker version information                                           # 查看docker版本号</span><br><span class="line">wait        Block until one or more containers stop, then print their exit codes          # 截取容器停止时的退出状态值</span><br></pre></td></tr></table></figure>

<h1 id="七、练习示例"><a href="#七、练习示例" class="headerlink" title="七、练习示例"></a>七、练习示例</h1><h2 id="7-1-Docker-安装-Nginx"><a href="#7-1-Docker-安装-Nginx" class="headerlink" title="7.1 Docker 安装 Nginx"></a>7.1 Docker 安装 Nginx</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、dockerhub搜索镜像信息</span></span><br><span class="line">[root@localhost /]# docker search nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、下载镜像</span></span><br><span class="line">[root@localhost /]# docker pull nginx</span><br><span class="line">Using default tag: latest</span><br><span class="line">Error response from daemon: Get &quot;https://registry-1.docker.io/v2/&quot;: net/http: TLS handshake timeout</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里可能会下载镜像失败，增加配置daemo.json，指向国内镜像网站即可</span></span><br><span class="line">[root@localhost ~]# vi /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [</span><br><span class="line">    &quot;https://registry.docker-cn.com&quot;,</span><br><span class="line">    &quot;http://hub-mirror.c.163.com&quot;,</span><br><span class="line">    &quot;https://docker.mirrors.ustc.edu.cn&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改配置后需要重启docker服务</span></span><br><span class="line">[root@localhost ~]# service docker restart</span><br><span class="line">Redirecting to /bin/systemctl restart docker.service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3、运行镜像</span></span><br><span class="line">[root@localhost /]# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED       SIZE</span><br><span class="line">nginx        latest    ae2feff98a0c   3 weeks ago   133MB</span><br><span class="line">centos       latest    300e315adb2f   4 weeks ago   209MB</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">【这里提前参考Linux之Tomcat的笔记，配置防火墙，使得主机可以联通Linux虚拟机的9999端口】</span></span><br><span class="line">[root@localhost /]# docker run -d --name nginx01 -p 9999:80 nginx</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">【-d：后台启动；--name：命名容器；-p：端口映射（宿主机端口号:容器端口号）】</span></span><br><span class="line">6956c87154b0a7ee642719ff22fcb938b8556d5966315ecac81259e3e6c04bf5</span><br><span class="line">docker: Error response from daemon: driver failed programming external connectivity on endpoint nginx01 (3ee4feb43afd6f892828259da60044b35963ff190db3288a45af4f96c14f12cd):  (iptables failed: iptables --wait -t nat -A DOCKER -p tcp -d 0/0 --dport 9999 -j DNAT --to-destination 172.17.0.2:80 ! -i docker0: iptables: No chain/target/match by that name.</span><br><span class="line">(exit status 1)).</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">【这里启动报错（driver failed programming external connectivity on endpoint nginx01），因为Linux虚拟机更新并重启了虚拟机的firewall，docker服务启动时定义的自定义链DOCKER从iptables中被清掉了，影响了docker的正常工作，这时需要重启docker（注意启动失败的容器，否则容器名称重复还是会失败）】</span></span><br><span class="line">[root@localhost /]# systemctl restart docker</span><br><span class="line">[root@localhost /]# docker rm $(docker ps -aq)</span><br><span class="line">6956c87154b0</span><br><span class="line">[root@localhost /]# docker run -d --name nginx01 -p 9999:80 nginx</span><br><span class="line">7f5bfce90a0bc1f594cf90dc853ddf898ddbda51a59da9a4bd591f10846b7a11</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4、测试容器启动情况</span></span><br><span class="line">[root@localhost /]# curl localhost:9999</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">【这时，也可以在主机通过浏览器访问到nginx欢迎页面（虚拟机IP:9999）】</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">5、进入容器</span></span><br><span class="line">[root@localhost /]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     ……     PORTS                  NAMES</span><br><span class="line">7f5bfce90a0b   nginx     ……     0.0.0.0:9999-&gt;80/tcp   nginx01</span><br><span class="line">[root@localhost /]# docker exec -it 7f5bfce90a0b /bin/bash</span><br><span class="line">root@7f5bfce90a0b:/# whereis nginx</span><br><span class="line">nginx: /usr/sbin/nginx /usr/lib/nginx /etc/nginx /usr/share/nginx</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">6、退出容器</span></span><br><span class="line">root@7f5bfce90a0b:/# exit</span><br><span class="line">exit</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">7、停止容器</span></span><br><span class="line">[root@localhost /]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     ……     PORTS                  NAMES</span><br><span class="line">7f5bfce90a0b   nginx     ……     0.0.0.0:9999-&gt;80/tcp   nginx01</span><br><span class="line">[root@localhost /]# docker stop 7f5bfce90a0b</span><br><span class="line">7f5bfce90a0b</span><br><span class="line">[root@localhost /]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     ……     PORTS                  NAMES</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">【停止容器后，在Linux虚拟机curl不可访问nginx，在主机浏览器也无法访问nginx】</span></span><br></pre></td></tr></table></figure>

<h2 id="7-2-Docker-安装-Tomcat"><a href="#7-2-Docker-安装-Tomcat" class="headerlink" title="7.2 Docker 安装 Tomcat"></a>7.2 Docker 安装 Tomcat</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、dockerhub搜索镜像信息</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、下载镜像</span></span><br><span class="line">[root@localhost ~]# docker pull tomcat</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">【或者下载指定的Tomcat版本镜像】</span></span><br><span class="line">[root@localhost ~]# docker pull tomcat:7.0</span><br></pre></td></tr></table></figure>

<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1656388454532.png"></p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1656388832415.png"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3、运行镜像</span></span><br><span class="line">[root@localhost ~]# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED       SIZE</span><br><span class="line">tomcat       7.0       096d3f7bdb4a   2 weeks ago   533MB</span><br><span class="line">tomcat       latest    feba8d001e3f   2 weeks ago   649MB</span><br><span class="line">nginx        latest    ae2feff98a0c   3 weeks ago   133MB</span><br><span class="line">centos       latest    300e315adb2f   4 weeks ago   209MB</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动最新版本的tomcat镜像</span></span><br><span class="line">[root@localhost /]# docker run -d -p 9999:8080 --name tomcat01 tomcat</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者启动指定版本镜像：docker run -d -p 9999:8080 --name tomcat01 tomcat:7.0</span></span><br><span class="line">90b2563cd6b1aead7dba21718d866d6e7f46d667afd1d83441adfd4f6f8ee0e7</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入tomcat中进行查看</span></span><br><span class="line">[root@localhost /]# docker exec -it tomcat01 /bin/bash</span><br><span class="line">root@90b2563cd6b1:/usr/local/tomcat# ll</span><br><span class="line">bash: ll: command not found</span><br><span class="line">root@90b2563cd6b1:/usr/local/tomcat# ls -a</span><br><span class="line">.             CONTRIBUTING.md  README.md      bin   logs            webapps</span><br><span class="line">..            LICENSE          RELEASE-NOTES  conf  native-jni-lib  webapps.dist</span><br><span class="line">BUILDING.txt  NOTICE           RUNNING.txt    lib   temp            work</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">【注意：】</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">【1、在Tomcat容器中，发现Linux的命令少了（因为是阉割版，只保留最低需求）；】</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">【2、在Tomcat容器里，webapps是一个空的文件夹（因为阿里云里默认是最小的镜像，删除了所有不必要的东西，只保证最小的可运行环境）】</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">【第2点导致，虽然Tomcat容器启动成功了，但是在主机的浏览器中访问首页会报404，找不到目录】</span></span><br></pre></td></tr></table></figure>

<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1649488254408.png"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@90b2563cd6b1:/usr/local/tomcat# cd webapps.dist/</span><br><span class="line">root@90b2563cd6b1:/usr/local/tomcat/webapps.dist# ls</span><br><span class="line">ROOT  docs  examples  host-manager  manager</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">【要解决访问Tomcat首页报404的问题，拷贝webapps.dist文件夹里的内容，到webapps即可】</span></span><br><span class="line">root@90b2563cd6b1:/usr/local/tomcat# cp -r webapps.dist/* webapps</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">【这里有一个情况，就是Tomcat中的项目文件会经常需要修改，因此可以在容器外部提供一个映射路径，webapps，在外部放置项目，就自动同步到内部】</span></span><br></pre></td></tr></table></figure>

<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1649488281049.png"></p>
<h2 id="7-3-Docker-安装-ES-和-Kibana"><a href="#7-3-Docker-安装-ES-和-Kibana" class="headerlink" title="7.3 Docker 安装 ES 和 Kibana"></a>7.3 Docker 安装 ES 和 Kibana</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、dockerhub搜索镜像信息</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、下载镜像并启动elasticsearch</span></span><br><span class="line">[root@localhost ~]# docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; elasticsearch:7.6.2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意：es暴露的端口很多；es十分耗内存；es的数据一般需要放置到安全目录！挂载</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3、测试es是否启动成功</span></span><br><span class="line">[root@localhost ~]# curl localhost:9200</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;eaeb13f0f20a&quot;,</span><br><span class="line">  &quot;cluster_name&quot; : &quot;docker-cluster&quot;,</span><br><span class="line">  &quot;cluster_uuid&quot; : &quot;LSgGyRUQSdy_MbxUbPyLKw&quot;,</span><br><span class="line">  &quot;version&quot; : &#123;</span><br><span class="line">    &quot;number&quot; : &quot;7.6.2&quot;,</span><br><span class="line">    &quot;build_flavor&quot; : &quot;default&quot;,</span><br><span class="line">    &quot;build_type&quot; : &quot;docker&quot;,</span><br><span class="line">    &quot;build_hash&quot; : &quot;ef48eb35cf30adf4db14086e8aabd07ef6fb113f&quot;,</span><br><span class="line">    &quot;build_date&quot; : &quot;2020-03-26T06:34:37.794943Z&quot;,</span><br><span class="line">    &quot;build_snapshot&quot; : false,</span><br><span class="line">    &quot;lucene_version&quot; : &quot;8.4.0&quot;,</span><br><span class="line">    &quot;minimum_wire_compatibility_version&quot; : &quot;6.8.0&quot;,</span><br><span class="line">    &quot;minimum_index_compatibility_version&quot; : &quot;6.0.0-beta1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4、查看docker中运行镜像的状态（每秒刷新），可以看到es十分占内存</span></span><br><span class="line">[root@localhost ~]# docker stats</span><br><span class="line">CONTAINER ID   NAME            CPU %     MEM USAGE / LIMIT     MEM %     NET I/O     BLOCK I/O        PIDS</span><br><span class="line">eaeb13f0f20a   elasticsearch   0.72%     1.234GiB / 1.781GiB   69.32%    648B / 0B   401MB / 1.76MB   46</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">5、增加内存限制，一般是通过修改es配置文件实现，而在docker中则通过启动是加入-e进行环境配置修改</span></span><br><span class="line">[root@localhost ~]# docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; -e ES_JAVA_OPTS=&quot;-Xms64m -Xmx512m&quot; elasticsearch:7.6.2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">6、检查es是否启动成功</span></span><br><span class="line">[root@localhost ~]# curl localhost:9200</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;4901e48b16b2&quot;,</span><br><span class="line">  &quot;cluster_name&quot; : &quot;docker-cluster&quot;,</span><br><span class="line">  &quot;cluster_uuid&quot; : &quot;Vvn5-B7xRBquRfiUZFqI5g&quot;,</span><br><span class="line">  &quot;version&quot; : &#123;</span><br><span class="line">    &quot;number&quot; : &quot;7.6.2&quot;,</span><br><span class="line">    &quot;build_flavor&quot; : &quot;default&quot;,</span><br><span class="line">    &quot;build_type&quot; : &quot;docker&quot;,</span><br><span class="line">    &quot;build_hash&quot; : &quot;ef48eb35cf30adf4db14086e8aabd07ef6fb113f&quot;,</span><br><span class="line">    &quot;build_date&quot; : &quot;2020-03-26T06:34:37.794943Z&quot;,</span><br><span class="line">    &quot;build_snapshot&quot; : false,</span><br><span class="line">    &quot;lucene_version&quot; : &quot;8.4.0&quot;,</span><br><span class="line">    &quot;minimum_wire_compatibility_version&quot; : &quot;6.8.0&quot;,</span><br><span class="line">    &quot;minimum_index_compatibility_version&quot; : &quot;6.0.0-beta1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">7、查看es的运行状态</span></span><br><span class="line">[root@localhost ~]# docker stats 4901e48b16b2</span><br><span class="line">CONTAINER ID   NAME            CPU %     MEM USAGE / LIMIT     MEM %     NET I/O     BLOCK I/O        PIDS</span><br><span class="line">4901e48b16b2   elasticsearch   0.32%     402.6MiB / 1.781GiB   22.08%    648B / 0B   190MB / 1.75MB   47</span><br></pre></td></tr></table></figure>

<h2 id="7-4-打包-jar"><a href="#7-4-打包-jar" class="headerlink" title="7.4 打包 jar"></a>7.4 打包 jar</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost dockerdabao]# docker build -t target/dg-is-ga-server:30 --rm .</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">冒号后面为打包的版本号</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--<span class="built_in">rm</span>：整个构建过程成功后删除中间环节的容器</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">.：最后单独的点，意思为根据当前目录下的Dockerfile文件生成镜像</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打包前需要将Dockerfile文件放到根目录中，声明打包的规则</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将指定镜像保存成tar归档文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令：docker save [OPTIONS] IMAGE [IMAGE...]</span></span><br><span class="line">[root@localhost dockerdabao]# docker save -o my_ubuntu_v3.tar jb51/ubuntu:v3</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-o：输出到的文件</span></span><br></pre></td></tr></table></figure>

<h1 id="八、Docker-可视化操作"><a href="#八、Docker-可视化操作" class="headerlink" title="八、Docker 可视化操作"></a>八、Docker 可视化操作</h1><h2 id="8-1-Portainer（可视化容器管理工具）"><a href="#8-1-Portainer（可视化容器管理工具）" class="headerlink" title="8.1 Portainer（可视化容器管理工具）"></a>8.1 Portainer（可视化容器管理工具）</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 9999:9000 --restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=true portainer/portainer</span><br></pre></td></tr></table></figure>

<p>访问测试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">虚拟机</span></span><br><span class="line">curl localhost:9999</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">本机访问</span></span><br><span class="line">虚拟机IP:9999</span><br></pre></td></tr></table></figure>

<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1649488385369.png"></p>
<p>在界面中创建账号和密码：admin - admin@123</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1649488415443.png"></p>
<p>在界面中选择<code>Local</code>，然后点击<code>Connect</code>进入管理面板</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1649488465792.png"></p>
<p>一般不用可视化操作界面，界面信息及操作参考博客：<a href="http://www.yunweipai.com/34991.html">可视化图形工具Portainer</a></p>
<h2 id="8-2-Rancher（Docker-容器管理系统）"><a href="#8-2-Rancher（Docker-容器管理系统）" class="headerlink" title="8.2 Rancher（Docker 容器管理系统）"></a>8.2 Rancher（Docker 容器管理系统）</h2><blockquote>
<p>持续集成与持续部署（CI&#x2F;CD）</p>
</blockquote>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK1.8之Lambda写法记录</title>
    <url>/blog/c0ad33ff.html</url>
    <content><![CDATA[<h1 id="List-转-Set"><a href="#List-转-Set" class="headerlink" title="List 转 Set"></a>List 转 Set</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; userList = Lists.newArrayList();</span><br><span class="line">Set&lt;String&gt; userNameSet1 = userList.stream().map(User::getUserName).collect(Collectors.toSet());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先过滤，再转Set</span></span><br><span class="line">Set&lt;String&gt; userNameSet2 = userList.stream().filter(u -&gt; u.getAge() &gt;= <span class="number">20</span>).map(User::getUserName).collect(Collectors.toSet());</span><br></pre></td></tr></table></figure>

<h1 id="List-转-Map"><a href="#List-转-Map" class="headerlink" title="List 转 Map"></a>List 转 Map</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; userList = Lists.newArrayList();</span><br><span class="line">Map&lt;String, List&lt;User&gt;&gt; userMap1 = userList.stream().collect(Collectors.groupingBy(User::getUserId));</span><br><span class="line"></span><br><span class="line">Map&lt;String, User&gt; userMap2 = userList.stream().collect(Collectors.toMap(User::getUserId, Function.identity()));</span><br><span class="line"></span><br><span class="line">Map&lt;String, User&gt; userMap3 = userList.stream().collect(Collectors.toMap(User::getUserId, User::getUserName));</span><br></pre></td></tr></table></figure>

<h1 id="List-过滤"><a href="#List-过滤" class="headerlink" title="List 过滤"></a>List 过滤</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; userList = Lists.newArrayList();</span><br><span class="line">List&lt;String&gt; schoolIdList = Lists.newArrayList();</span><br><span class="line">List&lt;User&gt; stuUserList = userList.stream().filter(u -&gt; schoolIdList.contains(u.getSchoolId())).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>

<h1 id="根据实体类某个属性去重"><a href="#根据实体类某个属性去重" class="headerlink" title="根据实体类某个属性去重"></a>根据实体类某个属性去重</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Collectors.collectingAndThen</span></span><br><span class="line">List&lt;User&gt; distinctList = userList.stream().collect(Collectors.collectingAndThen(Collectors.toCollection(() -&gt; <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(Comparator.comparing(User::getName))), ArrayList::<span class="keyword">new</span>));</span><br></pre></td></tr></table></figure>

<h1 id="Map-取-Key-补集和差集"><a href="#Map-取-Key-补集和差集" class="headerlink" title="Map 取 Key 补集和差集"></a>Map 取 Key 补集和差集</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.common.collect.Maps;</span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Sets;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NapUtil</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取Map集合的差集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S,T&gt; Map&lt;S, T&gt; <span class="title function_">getDifferenceSetByGuava</span><span class="params">(Map&lt;S, T&gt; leftMap, Map&lt;S, T&gt; rightMap)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != leftMap &amp;&amp; <span class="literal">null</span> != rightMap) &#123;</span><br><span class="line"></span><br><span class="line">            Set&lt;S&gt; leftMapKey = leftMap.keySet();</span><br><span class="line">            Set&lt;S&gt; rightMapKey = rightMap.keySet();</span><br><span class="line">            Set&lt;S&gt; differenceSet = Sets.difference(leftMapKey, rightMapKey);</span><br><span class="line">            Map&lt;S, T&gt; result = Maps.newHashMap();</span><br><span class="line">            <span class="keyword">for</span> (S key : differenceSet) &#123;</span><br><span class="line">                result.put(key, leftMap.get(key));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取Map集合的并集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S,T&gt; Map&lt;S, T&gt; <span class="title function_">getUnionSetByGuava</span><span class="params">(Map&lt;S, T&gt; leftMap, Map&lt;S, T&gt; rightMap)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != leftMap &amp;&amp; <span class="literal">null</span> != rightMap) &#123;</span><br><span class="line"></span><br><span class="line">            Set&lt;S&gt; leftMapKey = leftMap.keySet();</span><br><span class="line">            Set&lt;S&gt; rightMapKey = rightMap.keySet();</span><br><span class="line">            Set&lt;S&gt; differenceSet = Sets.union(leftMapKey, rightMapKey);</span><br><span class="line">            Map&lt;S, T&gt; result = Maps.newHashMap();</span><br><span class="line">            <span class="keyword">for</span> (S key : differenceSet) &#123;</span><br><span class="line">                <span class="keyword">if</span> (leftMap.containsKey(key)) &#123;</span><br><span class="line">                    result.put(key, leftMap.get(key));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result.put(key, rightMap.get(key));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取Map集合的交集（String,String）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S,T&gt; Map&lt;S, T&gt; <span class="title function_">getIntersectionSetByGuava</span><span class="params">(Map&lt;S, T&gt; leftMap, Map&lt;S, T&gt; rightMap)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != leftMap &amp;&amp; <span class="literal">null</span> != rightMap) &#123;</span><br><span class="line"></span><br><span class="line">            Set&lt;S&gt; leftMapKey = leftMap.keySet();</span><br><span class="line">            Set&lt;S&gt; rightMapKey = rightMap.keySet();</span><br><span class="line">            Set&lt;S&gt; differenceSet = Sets.intersection(leftMapKey, rightMapKey);</span><br><span class="line">            Map&lt;S, T&gt; result = Maps.newHashMap();</span><br><span class="line">            <span class="keyword">for</span> (S key : differenceSet) &#123;</span><br><span class="line">                result.put(key, leftMap.get(key));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Map&lt;String, Person&gt; map1 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map1.put(<span class="string">&quot;a&quot;</span>, <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">1</span>));</span><br><span class="line">        map1.put(<span class="string">&quot;b&quot;</span>, <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">2</span>));</span><br><span class="line">        map1.put(<span class="string">&quot;c&quot;</span>, <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Person&gt; map2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map2.put(<span class="string">&quot;c&quot;</span>, <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">3</span>));</span><br><span class="line">        map2.put(<span class="string">&quot;d&quot;</span>, <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">4</span>));</span><br><span class="line">        map2.put(<span class="string">&quot;e&quot;</span>, <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Map&lt;String, Person&gt; diffMap1 = getDifferenceSetByGuava(map1, map2);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------差集结果,入参:A,B  出参:A-B后A中剩余的  -----------&quot;</span>);</span><br><span class="line">        diffMap1.forEach((k, v) -&gt; System.out.println(k + <span class="string">&quot;:&quot;</span> + v));</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Person&gt; diffMap2 = getDifferenceSetByGuava(map2, map1);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------差集结果,入参:B,A  出参:B-A后B中剩余的  -----------&quot;</span>);</span><br><span class="line">        diffMap2.forEach((k, v) -&gt; System.out.println(k + <span class="string">&quot;:&quot;</span> + v));</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Person&gt; unionMap = getUnionSetByGuava(map1, map2);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------并集结果-----------&quot;</span>);</span><br><span class="line">        unionMap.forEach((k, v) -&gt; System.out.println(k + <span class="string">&quot;:&quot;</span> + v));</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Person&gt; intersectionMap = getIntersectionSetByGuava(map1, map2);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------交结果-----------&quot;</span>);</span><br><span class="line">        intersectionMap.forEach((k, v) -&gt; System.out.println(k + <span class="string">&quot;:&quot;</span> + v));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Lombok介绍</title>
    <url>/blog/b369cd6a.html</url>
    <content><![CDATA[<h1 id="一、Lombok-是什么"><a href="#一、Lombok-是什么" class="headerlink" title="一、Lombok 是什么"></a>一、Lombok 是什么</h1><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1672124784402-4a31184d-a98c-4c97-a15c-d0a900b54c4f.png"></p>
<p>Lombok 项目是一个 <strong>Java 库</strong>，它可以自动插入到编辑器和构建工具中，增强 Java 的性能。不需要再写 getter、setter 或 equals方法，只要有一个注解，你的类就有一个功能齐全的构建器、自动记录变量等等。</p>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Lombok</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Lombok</tag>
      </tags>
  </entry>
  <entry>
    <title>Lombok注解记录</title>
    <url>/blog/47f664bf.html</url>
    <content><![CDATA[<h1 id="Setter"><a href="#Setter" class="headerlink" title="@Setter"></a>@Setter</h1><p>自动添加类中所有属性相关的 set() 方法</p>
<h1 id="Getter"><a href="#Getter" class="headerlink" title="@Getter"></a>@Getter</h1><p>自动添加类中所有属性相关的 get() 方法</p>
<h1 id="Builder"><a href="#Builder" class="headerlink" title="@Builder"></a>@Builder</h1><p>使得该类可以通过 builder（建造者模式）构建对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Student.builder().sno(<span class="string">&quot;001&quot;</span>).sname(<span class="string">&quot;admin&quot;</span>).sage(<span class="number">18</span>).sphone(<span class="string">&quot;110&quot;</span>).build();</span><br></pre></td></tr></table></figure>

<h1 id="RequiredArgsConstructor"><a href="#RequiredArgsConstructor" class="headerlink" title="@RequiredArgsConstructor"></a>@RequiredArgsConstructor</h1><p>生成一个该类的构造方法，禁止无参构造</p>
<h1 id="ToString"><a href="#ToString" class="headerlink" title="@ToString"></a>@ToString</h1><p>重写该类的 toString() 方法</p>
<h1 id="EqualsAndHashCode"><a href="#EqualsAndHashCode" class="headerlink" title="@EqualsAndHashCode"></a>@EqualsAndHashCode</h1><p>重写该类的 equals() 和 hashCode() 方法</p>
<h2 id="callSuper-x3D-true"><a href="#callSuper-x3D-true" class="headerlink" title="callSuper &#x3D; true"></a>callSuper &#x3D; true</h2><p>根据（子类自身的字段值 + 从父类继承的字段值）生成 hashcode</p>
<p>当两个子类对象比较时，如果生成的 hashcode 相同，equals() 返回 true。</p>
<h2 id="callSuper-x3D-false"><a href="#callSuper-x3D-false" class="headerlink" title="callSuper &#x3D; false"></a>callSuper &#x3D; false</h2><p>根据（子类自身的字段值）生成 hashcode</p>
<p>当两个子类对象比较时，如果只有子类对象的本身的字段值相同，equals() 就返回 true（父类字段值可以不同）</p>
<h1 id="Data"><a href="#Data" class="headerlink" title="@Data"></a>@Data</h1><p>&#x3D; @Setter + @Getter + @RequiredArgsConstructor + @ToString + @EqualsAndHashCode</p>
<p>@Data 默认比较两个对象的 hashCode，需要依据业务要求显式重写 equals() 方法，或者类上加上注解：@EqualsAndHashCode(onlyExplicitlyIncluded &#x3D; true)，然后为每一个需要比较的属性加上注解：@EqualsAndHashCode.Include</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(onlyExplicitlyIncluded = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cs</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="meta">@EqualsAndHashCode</span>.Include</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cs</span><span class="params">(<span class="type">int</span> id, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="NoArgsConstructor"><a href="#NoArgsConstructor" class="headerlink" title="@NoArgsConstructor"></a>@NoArgsConstructor</h1><p>生成无参的构造方法。</p>
<h2 id="staticName"><a href="#staticName" class="headerlink" title="staticName"></a>staticName</h2><p>staticName 代表的是是否生成静态构造方法，也就是说当 staticName 属性有值时则会生成一个静态构造方法，这时无参构造方法会被私有，然后创建一个指定名称的静态构造方法，并且是公有的，如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编译前代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor(staticName = &quot;UserStatic&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfo</span>() &#123;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编译后代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfo</span>() &#123;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">UserInfo</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserStatic</span><span class="params">()</span> &#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserStatic</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="onConstructor"><a href="#onConstructor" class="headerlink" title="onConstructor"></a>onConstructor</h2><p>经常写 Spring 或者 SpringBoot 代码的人应该知道，Spring 对于依赖注入提供了三种写法，分别是属性注入、Setter 方法注入以及构造器注入，但是在日常工作中我们更多采用的是依赖于 @Autowired 注解方式进行依赖注入，不过过多的依赖注入会使我们的代码过于冗长，甚至 Spring4.0 起就已经开始不推荐这种写法了，而是推荐使用 Setter 方法注入以及构造器注入，lombok 的生成构造器的方法就可以很方便的实现这种写法。</p>
<p>举一个通过构造器注入的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysLoginController</span>() &#123;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TokenUtils tokenUtils;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SysLoginService sysLoginService;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在这里 <span class="doctag">@Autowired</span> 是可以省略的，在这里使用只是为了介绍 onConstructor 参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SysLoginController</span> <span class="params">(TokenUtils tokenUtils, SysLoginService sysLoginService)</span> &#123;</span><br><span class="line">    	</span><br><span class="line">        <span class="built_in">this</span>.tokenUtils = tokenUtils;</span><br><span class="line">        <span class="built_in">this</span>.sysLoginService = sysLoginService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样注入 Bean 在数量较多时我们仍需编写大量代码，这个时候就可以使用 @RequiredArgsConstructor 注解来解决这个问题，至于为什么不使用 @AllArgsConstructor 注解是因为这个注解是针对所有参数的，而在这个情境下，我们只需构造 Bean 所对应的属性而不是非 Bean，所以我们只需在 Bean 对应的属性前加上 final 关键字进行修饰就可以只生成需要的有参构造函数，如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编译前</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor(onConstructor = @__(@Autowired))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysLoginController</span>() &#123;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TokenUtils tokenUtils;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SysLoginService sysLoginService;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编译后</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysLoginController</span>() &#123;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TokenUtils tokenUtils;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SysLoginService sysLoginService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SysLoginController</span> <span class="params">(TokenUtils tokenUtils, SysLoginService sysLoginService)</span> &#123;</span><br><span class="line">    	</span><br><span class="line">        <span class="built_in">this</span>.tokenUtils = tokenUtils;</span><br><span class="line">        <span class="built_in">this</span>.sysLoginService = sysLoginService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="access"><a href="#access" class="headerlink" title="access"></a>access</h2><p>有的时候我们会使用单例模式，这个时候需要我们创造一个私有的无参构造方法，那么就可以使用 access 这样一个属性来设置构造起的权限，如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编译前代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor(access = AccessLevel.PRIVATE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfo</span>() &#123;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编译后代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfo</span>() &#123;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">UserInfo</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>access 可选等级：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">AccessLevel</span> &#123;</span><br><span class="line">    PUBLIC,</span><br><span class="line">    MODULE,</span><br><span class="line">    PROTECTED,</span><br><span class="line">    PACKAGE,</span><br><span class="line">    PRIVATE,</span><br><span class="line">    NONE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">AccessLevel</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="force"><a href="#force" class="headerlink" title="force"></a>force</h2><p>当类中有被 final 关键字修饰的字段未被初始化时，编译器会报错，这时也可以设置 force 属性为 true 来为字段根据类型生成一个默认值 0&#x2F;false&#x2F;null，这样编译器就不会再报错了，如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编译前代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor(force = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfo</span>() &#123;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String gender;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编译后代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfo</span>() &#123;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">UserInfo</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="AllArgsConstructor"><a href="#AllArgsConstructor" class="headerlink" title="@AllArgsConstructor"></a>@AllArgsConstructor</h1><p>生成全参的构造方法。</p>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Lombok</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Lombok</tag>
      </tags>
  </entry>
  <entry>
    <title>NodeJS安装</title>
    <url>/blog/a3f5c67b.html</url>
    <content><![CDATA[<h1 id="NodeJS-下载"><a href="#NodeJS-下载" class="headerlink" title="NodeJS 下载"></a>NodeJS 下载</h1><p><a href="https://nodejs.org/en/">下载 NodeJS 的长期支持版本</a></p>
<p><a href="https://nodejs.org/en/about/releases/">查看 NodeJS 长期支持版本的生命周期</a></p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1671692583874-b094e213-b87b-4954-8775-efbc1d91ff24.png"></p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1671692611593-ae3989db-654e-4cc6-b36c-5e123ae233bd.png"></p>
<h1 id="NodeJS-安装"><a href="#NodeJS-安装" class="headerlink" title="NodeJS 安装"></a>NodeJS 安装</h1><p>一直 next 直至安装完成，安装位置建议：D:&#x2F;nodejs&#x2F;</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1671692749278-1f23235d-a537-45ce-9c76-ca2de0bf3900.png"></p>
<h1 id="NodeJS-安装完成检查"><a href="#NodeJS-安装完成检查" class="headerlink" title="NodeJS 安装完成检查"></a>NodeJS 安装完成检查</h1><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1671692930610-af309999-e17a-4346-b17a-b8e0f21e4c9a.png"></p>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>NodeJS</category>
      </categories>
      <tags>
        <tag>NodeJS</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>NodeJS简介</title>
    <url>/blog/ff8c64c0.html</url>
    <content><![CDATA[<blockquote>
<p>参考自博客：</p>
<p><a href="https://www.cnblogs.com/yinzhengjie/p/14219259.html">NodeJS简介</a></p>
<p><a href="https://nodejs.org/zh-cn/docs/">NodeJS doc</a></p>
</blockquote>
<h1 id="关于-NodeJS"><a href="#关于-NodeJS" class="headerlink" title="关于 NodeJS"></a>关于 NodeJS</h1><p>Node.js 是一个大部分基本模块都用 JavaScript 编写的，能够在服务器端运行的 JavaScript 的开放源代码，跨平台 JavaScript 运行环境。</p>
<p>Node.js 采用 Google 的 V8 引擎运行 JS 代码，使用事件驱动，非阻塞和异步 I&#x2F;O 模型等技术来提高性能，可优化应用程序的传输量和规模。</p>
<h1 id="NodeJS-可以做什么"><a href="#NodeJS-可以做什么" class="headerlink" title="NodeJS 可以做什么"></a>NodeJS 可以做什么</h1><ol>
<li>Web服务API，比如REST；</li>
<li>实时多人游戏；</li>
<li>后端的Web服务，例如跨域，服务器端的请求；</li>
<li>基于Web的应用；</li>
<li>多客户端的通信，如即时通信</li>
</ol>
<p>Node.js 是基于单线程实现的，但是后台拥有一个 I&#x2F;O 线程池。可以说 Node.js 成也单线程，败也单线程，尽管单线程的处理效率很高，但也是有极限的。不过值得庆幸的是，Node.js 支持分布式，即单节点性能达到瓶颈，我们可以增加机器来解决性能问题。</p>
<p>综上所述，在超大并发的场景下，Node.js 并不太适合做后端的服务器开发语言，建议还是选择支持高并发的语言，比如 Java，C++，Golang 等。当然，Python 也是可以的，但由于 GIL 的存在，因此它在后端开发能力上相比 Java 和 Go，并没有特别可圈可点的地方。</p>
<h1 id="NodeJS-VS-JavaScript"><a href="#NodeJS-VS-JavaScript" class="headerlink" title="NodeJS VS JavaScript"></a>NodeJS VS JavaScript</h1><p>JavaScript 是在浏览器中运行的代码，他的作用域只在浏览器中，并不能超出浏览器所有的权限，而 Node.js 则跳出了浏览器的限制，可以像 Java，Python，Golang 这样的编程语言一样，可以直接和操作系统进行交互。</p>
<p>从 C&#x2F;S 架构来说，JavaScript 是在客户端浏览器上渲染的程序，而 Node.js 既可以充当 Client 角色，也可以充当 Server 端角色。</p>
<h1 id="关于-npm"><a href="#关于-npm" class="headerlink" title="关于 npm"></a>关于 npm</h1><p>npm 是 Node 的包管理器。</p>
<h1 id="关于-yarn"><a href="#关于-yarn" class="headerlink" title="关于 yarn"></a>关于 yarn</h1><p></br></br></br></br></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>NodeJS</category>
      </categories>
      <tags>
        <tag>NodeJS</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>nvm使用与报错</title>
    <url>/blog/dd102d8e.html</url>
    <content><![CDATA[<p>nvm 安装后建议修改镜像地址，否则 nodejs 下载会很慢</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\Windows\system32&gt; nvm node_mirror https://npm.taobao.org/mirrors/node/</span><br><span class="line"><span class="built_in">PS</span> C:\Windows\system32&gt; nvm npm_mirror https://npm.taobao.org/mirrors/npm/</span><br></pre></td></tr></table></figure>

<h1 id="nvm-list"><a href="#nvm-list" class="headerlink" title="nvm list"></a>nvm list</h1><p>查看已安装的 nodejs版本</p>
<h1 id="nvm-install"><a href="#nvm-install" class="headerlink" title="nvm install"></a>nvm install</h1><h1 id="nvm-uninstall"><a href="#nvm-uninstall" class="headerlink" title="nvm uninstall"></a>nvm uninstall</h1><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\Windows\system32&gt; nvm list</span><br><span class="line"></span><br><span class="line">  * <span class="number">16.18</span>.<span class="number">0</span> (Currently <span class="keyword">using</span> 64-bit executable)</span><br><span class="line">    <span class="number">12.22</span>.<span class="number">12</span></span><br><span class="line"><span class="built_in">PS</span> C:\Windows\system32&gt; nvm install <span class="number">12.22</span>.<span class="number">12</span></span><br><span class="line">Downloading node.js version <span class="number">12.22</span>.<span class="number">12</span> (<span class="number">64</span><span class="literal">-bit</span>)...</span><br><span class="line">Complete</span><br><span class="line">Creating D:\nvm\temp</span><br><span class="line"></span><br><span class="line">Downloading npm version <span class="number">6.14</span>.<span class="number">16</span>... Complete</span><br><span class="line">Installing npm v6.<span class="number">14.16</span>...</span><br><span class="line"></span><br><span class="line">Installation complete. <span class="keyword">If</span> you want to use this version, <span class="built_in">type</span></span><br><span class="line"></span><br><span class="line">nvm use <span class="number">12.22</span>.<span class="number">12</span></span><br></pre></td></tr></table></figure>

<h1 id="nvm-use-报错"><a href="#nvm-use-报错" class="headerlink" title="nvm use 报错"></a>nvm use 报错</h1><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\Windows\system32&gt; nvm list</span><br><span class="line"></span><br><span class="line">  * <span class="number">16.18</span>.<span class="number">0</span> (Currently <span class="keyword">using</span> 64-bit executable)</span><br><span class="line">    <span class="number">12.22</span>.<span class="number">12</span></span><br><span class="line"><span class="built_in">PS</span> C:\Windows\system32&gt; nvm use <span class="number">12.22</span>.<span class="number">12</span></span><br><span class="line"><span class="keyword">exit</span> status <span class="number">145</span>: Ŀ¼���ǿյġ�</span><br><span class="line"></span><br><span class="line"><span class="keyword">exit</span> status <span class="number">1</span>: ���ļ��Ѵ���ʱ���޷��������ļ���</span><br></pre></td></tr></table></figure>

<h2 id="exit-status-1-乱码"><a href="#exit-status-1-乱码" class="headerlink" title="exit status 1: 乱码"></a>exit status 1: 乱码</h2><p>报错原因：当前的CMD窗口没有执行该命令的权限，需要使用管理员权限打开的窗口执行nvm use命令</p>
<p>报错原因：之前多次安装 node，出错了就删除包，再次安装，在 C:\Program Files 下是有一个 nodejs 的，但是由于已经删除了 node 的包，所以这个 nodejs 是个无效文件</p>
<p>报错解决：重新安装该版本 nodejs</p>
<h2 id="exit-status-5-乱码"><a href="#exit-status-5-乱码" class="headerlink" title="exit status 5: 乱码"></a>exit status 5: 乱码</h2><p>报错原因：nvm 不是安装在 C 盘，且当前命令提示符窗口是 user 权限</p>
<p>报错解决：cmd 窗口使用管理员权限打开即可</p>
<h2 id="exit-status-145-乱码"><a href="#exit-status-145-乱码" class="headerlink" title="exit status 145: 乱码"></a>exit status 145: 乱码</h2><p>报错原因：安装 nvm 或 nodejs 的文件本身或路径有误</p>
<p>报错解决：如果是覆盖旧的 nvm 安装，建议删除 nvm 文件夹，然后重新安装 nvm</p>
<ol>
<li>检查安装 nvm 路径与设置放置 nodejs 的路径或文件，是否出现空格或中文，比如默认安装路径 C:\Program Files 中出现了空格。如果有，更改路径或文件夹名称后再使用 nvm use</li>
<li>安装 nvm 前是否原本就有 nodejs 其它版本。如果有，且安装过程中选择合并了以前版本，可以删除 nvm 中所有 nodejs 版本（主要是安装 nvm 前就有的版本），重新安装所需 nodejs，再运行 nvm use</li>
</ol>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>NodeJS</category>
      </categories>
      <tags>
        <tag>NodeJS</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch</title>
    <url>/blog/d32d37e5.html</url>
    <content><![CDATA[<blockquote>
<p>摘录自博客：<a href="https://www.cnblogs.com/wupeixuan/tag/ElasticSearch/">ElasticSearch - 标签 - 武培轩 - 博客园 (cnblogs.com)</a></p>
</blockquote>
<h1 id="Elasticsearch-术语"><a href="#Elasticsearch-术语" class="headerlink" title="Elasticsearch 术语"></a>Elasticsearch 术语</h1><h2 id="索引（Index）"><a href="#索引（Index）" class="headerlink" title="索引（Index）"></a>索引（Index）</h2><p>索引是相似结构的文档的集合，索引中的数据分散在分片上，类似于关系型数据库中的表（Table）</p>
<h2 id="类型（Type）"><a href="#类型（Type）" class="headerlink" title="类型（Type）"></a>类型（Type）</h2><p>在 ES6.0 版本中已经废除</p>
<h2 id="文档（Document）"><a href="#文档（Document）" class="headerlink" title="文档（Document）"></a>文档（Document）</h2><p>文档是所有可搜索数据的最小单位，类似于关系型数据库中的记录（Row）</p>
<h2 id="集群（Cluster）"><a href="#集群（Cluster）" class="headerlink" title="集群（Cluster）"></a>集群（Cluster）</h2><p>一个集群可以有一个或多个节点</p>
<h3 id="集群的状态"><a href="#集群的状态" class="headerlink" title="集群的状态"></a>集群的状态</h3><ul>
<li>Green：主分片与副本都正常分配</li>
<li>Yellow：主分片全部正常分配，有副本分配未能正常分配</li>
<li>Red：有主分片未能分配</li>
</ul>
<h2 id="节点（Node）"><a href="#节点（Node）" class="headerlink" title="节点（Node）"></a>节点（Node）</h2><p>节点其实就是一个 ES 实例，本质上是一个 Java 进程</p>
<h3 id="节点类型"><a href="#节点类型" class="headerlink" title="节点类型"></a>节点类型</h3><ul>
<li>主节点（Master Node）</li>
<li>候选主节点（Master-eligible Node）</li>
<li>数据节点（Data Node）</li>
<li>协调节点（Coordinating Node）</li>
<li>冷热节点（Hot &amp; Warm Node）</li>
<li>机器学习节点（Machine Learning Node）</li>
<li>部落节点（Tribe Node）</li>
<li>预处理节点（Ingest Node）</li>
</ul>
<h2 id="映射（Mapping）"><a href="#映射（Mapping）" class="headerlink" title="映射（Mapping）"></a>映射（Mapping）</h2><p>类似于关系型数据库中的表定义（Schema）</p>
<h2 id="字段（Field）"><a href="#字段（Field）" class="headerlink" title="字段（Field）"></a>字段（Field）</h2><p>类似于关系型数据库中的字段（Column）</p>
<h2 id="分片（Shard）"><a href="#分片（Shard）" class="headerlink" title="分片（Shard）"></a>分片（Shard）</h2><p>ES 可以将一个索引中的数据切分为多个分片</p>
<h3 id="分片类型"><a href="#分片类型" class="headerlink" title="分片类型"></a>分片类型</h3><ul>
<li>主分片（Primary Shard）</li>
<li>副本分配（Replica Shard）</li>
</ul>
<h1 id="Elasticsearch-Json-结构"><a href="#Elasticsearch-Json-结构" class="headerlink" title="Elasticsearch Json 结构"></a>Elasticsearch Json 结构</h1><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;KJTnBYkB5GK1mQJI5u1p&quot;</span><span class="punctuation">,</span>            <span class="comment">// 文档唯一ID</span></span><br><span class="line">    <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;properties_camera_gn_2023_06&quot;</span><span class="punctuation">,</span> <span class="comment">// 文档所属索引名</span></span><br><span class="line">    <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span>                          <span class="comment">// 文档所属类型名</span></span><br><span class="line">    <span class="attr">&quot;_version&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span>                            <span class="comment">// 文档的版本信息</span></span><br><span class="line">    <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span>                              <span class="comment">// 评分，为相关打分，是这个文档在这次查询中的算分（暂时理解为与查询条件的相关性）</span></span><br><span class="line">    <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>                              <span class="comment">// 文档元素json数据，当搜索文档的时候，默认返回的就是_source这个字段</span></span><br><span class="line">        <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="number">1688021231207</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;deviceId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7a367c995e8044f8bd4fe3a042be789c&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;intValue&quot;</span><span class="punctuation">:</span> <span class="number">333</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;messageId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;871806074498596864&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;messageType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;system&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;property&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fdsa&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;propertyType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;int&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;timestamp&quot;</span><span class="punctuation">:</span> <span class="number">1688021231161</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;built-in&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;2023-06-29T06:47:11.207Z&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;deviceId&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;7a367c995e8044f8bd4fe3a042be789c&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;intValue&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">333</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;messageId&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;871806074498596864&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;messageType&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;system&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;property&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;fdsa&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;property.keyword&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;fdsa&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;propertyType&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;int&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;propertyType.keyword&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;int&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;timestamp&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;2023-06-29T06:47:11.161Z&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;built-in&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="Elasticsearch-CRUD"><a href="#Elasticsearch-CRUD" class="headerlink" title="Elasticsearch CRUD"></a>Elasticsearch CRUD</h1><h2 id="增"><a href="#增" class="headerlink" title="增"></a>增</h2><h3 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT my_index/_doc/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;user&quot;</span><span class="punctuation">:</span><span class="string">&quot;mike&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;comment&quot;</span><span class="punctuation">:</span><span class="string">&quot;You know, for search&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT my_index/_create/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;user&quot;</span><span class="punctuation">:</span><span class="string">&quot;mike&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;comment&quot;</span><span class="punctuation">:</span><span class="string">&quot;You know, for search&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">POST my_index/_doc（不指定 ID，则会自动生成）</span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;user&quot;</span><span class="punctuation">:</span><span class="string">&quot;mike&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;comment&quot;</span><span class="punctuation">:</span><span class="string">&quot;You know, for search&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="Index-VS-Create"><a href="#Index-VS-Create" class="headerlink" title="Index VS Create"></a>Index VS Create</h3><p>Index 和 Create 插入时都会检测 _version，即通过 id 得出文档的版本号（只获取版本而不是 doc 的全部内容，能够从一定程度上减少系统的开销）。如果没有指定文档 id 直接 add 固然最好，但如果指定了文档 id，那么就要进行更耗时的 update 操作，不同的是：</p>
<ul>
<li>Index 如果没有指定 version，那对于已有的 doc，_version 会递增，并对文档进行覆盖。如果指定了 _version，但与已有文档的 _version 对不上，则插入失败；如果对得上，则覆盖，_version 递增。</li>
<li>Create 通过 version，判断出文档已存在，则直接插入失败，抛出一个已经存在的异常。</li>
</ul>
<h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><p>在批量请求的时候最好使用 create 方式进行导入。</p>
<p>假如你批量导入一个大小为 500MB 的文件，中途突然网络中断，可能其中有 5 万条数据已经导入，那么第二次尝试导入的时候，如果选用 index 方式，那么前 5 万条数据又会重复导入，增加了很多额外的开销，如果是 create 的话，elasticsearch 针对 bulk 操作机制是忽略已经存在的（当然在 bulk 完成后会返回哪些数据是重复的），这样就不会重复被导入了。</p>
<h2 id="删（Delete）"><a href="#删（Delete）" class="headerlink" title="删（Delete）"></a>删（Delete）</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">DELETE my_index/_doc/<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h2 id="改（Update）"><a href="#改（Update）" class="headerlink" title="改（Update）"></a>改（Update）</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST my_index/_update/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;user&quot;</span><span class="punctuation">:</span><span class="string">&quot;mike&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;comment&quot;</span><span class="punctuation">:</span><span class="string">&quot;You know, Elesticsearch&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>由于 Lucene 中的 update 其实就是覆盖替换，并不支持针对特定 Field 进行修改，Elasticsearch 中的 update 为了实现针对特定字段修改，在 Lucene 的基础上做了一些改动。</p>
<p>每次 update 都会调用 InternalEngine 中的 get 方法，来获取整个文档信息，从而实现针对特定字段进行修改，这也就导致了每次更新要获取一遍原始文档，性能上会有很大影响。</p>
<p>所以根据使用场景，有时候使用 index 会比 update 好很多。</p>
<h2 id="查（Read）"><a href="#查（Read）" class="headerlink" title="查（Read）"></a>查（Read）</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET my_index/_doc/<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h1 id="Elasticsearch-Bulk-API"><a href="#Elasticsearch-Bulk-API" class="headerlink" title="Elasticsearch Bulk API"></a>Elasticsearch Bulk API</h1><p>在一个 REST 请求中，重新建立网络开销十分损耗性能，因此 ES 提供 Bulk API，支持在一次 API 调用中，对不同的索引进行操作，从而减少网络传输开销，提升写入速率。</p>
<p>它支持 Index、Create、Update、Delete 四种类型操作，可以在 URI 中指定索引，也可以在请求的方法体中进行。</p>
<p>同时多条操作中如果其中有一条失败，也不会影响其他的操作，并且返回的结果包括每一条操作执行的结果。</p>
<p>示例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST _bulk</span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span><span class="string">&quot;users&quot;</span><span class="punctuation">,</span><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span><span class="string">&quot;3&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;username&quot;</span><span class="punctuation">:</span><span class="string">&quot;wumx&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;delete&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span><span class="string">&quot;users&quot;</span><span class="punctuation">,</span><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span><span class="string">&quot;1&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;update&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span><span class="string">&quot;users&quot;</span><span class="punctuation">,</span><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span><span class="string">&quot;2&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="string">&quot;12&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;took&quot;</span><span class="punctuation">:</span> <span class="number">126</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;errors&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;items&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;users&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;_version&quot;</span><span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;result&quot;</span><span class="punctuation">:</span> <span class="string">&quot;updated&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;_shards&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">				<span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;successful&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;failed&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">			<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;_seq_no&quot;</span><span class="punctuation">:</span> <span class="number">28</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;_primary_term&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">200</span></span><br><span class="line">		<span class="punctuation">&#125;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;delete&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;users&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;_version&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;result&quot;</span><span class="punctuation">:</span> <span class="string">&quot;deleted&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;_shards&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">				<span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;successful&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;failed&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">			<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;_seq_no&quot;</span><span class="punctuation">:</span> <span class="number">29</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;_primary_term&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">200</span></span><br><span class="line">		<span class="punctuation">&#125;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;update&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;users&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">404</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;error&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">				<span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;document_missing_exception&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;reason&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[_doc][2]: document missing&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;index_uuid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;r6N_mV8VRwmxfc4TyoKIqA&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;shard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;users&quot;</span></span><br><span class="line">			<span class="punctuation">&#125;</span></span><br><span class="line">		<span class="punctuation">&#125;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>took 表示消耗了 93 毫秒，errors 为 true 表示在这些操作中错误发生，发现是 update 操作发生了错误，id 为 2 的文档不存在，所以报错了。</p>
<p>在使用 Bulk API 的时候，当 errors 为 true 时，需要把错误的操作修改掉，防止存到 ES 的数据有缺失。</p>
<h1 id="Elasticsearch-mget-API"><a href="#Elasticsearch-mget-API" class="headerlink" title="Elasticsearch _mget API"></a>Elasticsearch _mget API</h1><p>批量查询需要指明要查询文档的 id，可以在一个 _mget 操作里查询不同索引的数据，可以减少网络连接所产生的开销，提高性能。</p>
<p>下面我们来实际操作下，输入以下代码执行，就可以得到文档 id 为 1,3 的数据。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /_mget</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;docs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;users&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;users&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;docs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;users:&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;_version&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;_seq_no&quot;</span><span class="punctuation">:</span> <span class="number">27</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;_primary_term&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;found&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;wupx&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="string">&quot;18&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;job&quot;</span><span class="punctuation">:</span> <span class="string">&quot;coder&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hello world&quot;</span></span><br><span class="line">		<span class="punctuation">&#125;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;users&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;_version&quot;</span><span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;_seq_no&quot;</span><span class="punctuation">:</span> <span class="number">24</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;_primary_term&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;found&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;wumx&quot;</span></span><br><span class="line">		<span class="punctuation">&#125;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>中间件</tag>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK1.8之Lambda表达式</title>
    <url>/blog/77a7a861.html</url>
    <content><![CDATA[<h1 id="一、Lambda-表达式"><a href="#一、Lambda-表达式" class="headerlink" title="一、Lambda 表达式"></a>一、Lambda 表达式</h1><h2 id="1-1-基本格式"><a href="#1-1-基本格式" class="headerlink" title="1.1 基本格式"></a>1.1 基本格式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(参数列表)-&gt;&#123;代码&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-2-匿名内部类方式"><a href="#1-2-匿名内部类方式" class="headerlink" title="1.2 匿名内部类方式"></a>1.2 匿名内部类方式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 传统写法需要传参</span></span><br><span class="line">        <span class="type">RunnableRealization</span> <span class="variable">runnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RunnableRealization</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread01</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(runnable);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         稍微优化的【匿名内部类】写法，进一步优化就是lambda写法了</span></span><br><span class="line"><span class="comment">         匿名内部类的作用：</span></span><br><span class="line"><span class="comment">             1.避免匿名内部类定义过多；</span></span><br><span class="line"><span class="comment">             2.使代码看起来简洁</span></span><br><span class="line"><span class="comment">             3.简化代码，只留下核心逻辑</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread02</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * When an object implementing interface &lt;code&gt;Runnable&lt;/code&gt; is used</span></span><br><span class="line"><span class="comment">             * to create a thread, starting the thread causes the object&#x27;s</span></span><br><span class="line"><span class="comment">             * &lt;code&gt;run&lt;/code&gt; method to be called in that separately executing</span></span><br><span class="line"><span class="comment">             * thread.</span></span><br><span class="line"><span class="comment">             * &lt;p&gt;</span></span><br><span class="line"><span class="comment">             * The general contract of the method &lt;code&gt;run&lt;/code&gt; is that it may</span></span><br><span class="line"><span class="comment">             * take any action whatsoever.</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@see</span> Thread#run()</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;祖安狂人蒙多&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一次性的类，用在new Thread中充当Runnable对的实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RunnableRealization</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;祖安狂人蒙多&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="示例一"><a href="#示例一" class="headerlink" title="示例一"></a>示例一</h2><p>在创建线程并启动时可以使用匿名内部类的写法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure>

<p>可以使用 Lambda 的格式对其进行修改。修改后如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;).start();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最简写法</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; System.out.println(<span class="string">&quot;hello world&quot;</span>)).start();</span><br></pre></td></tr></table></figure>

<h2 id="示例二"><a href="#示例二" class="headerlink" title="示例二"></a>示例二</h2><p>现有方法定义如下，其中 IntBinaryOperator 是一个接口。先使用匿名内部类的写法调用该方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	calculateNum(<span class="keyword">new</span> <span class="title class_">IntBinaryOperator</span>() &#123;</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">applyAsInt</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> left + right;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">calculateNum</span><span class="params">(IntBinaryOperator operator)</span> &#123;</span><br><span class="line">	<span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">	<span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">	<span class="keyword">return</span> operator.applyAsInt(a, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Lambda 写法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	calculateNum((left, right) -&gt; &#123;</span><br><span class="line">		<span class="keyword">return</span> left + right;</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最简写法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	calculateNum((left, right) -&gt; left + right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="示例三"><a href="#示例三" class="headerlink" title="示例三"></a>示例三</h2><p>现有方法定义如下，其中 IntPredicate 是一个接口。先使用匿名内部类的写法调用该方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	printNum(<span class="keyword">new</span> <span class="title class_">IntPredicate</span>() &#123;</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> value%<span class="number">2</span> == <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printNum</span><span class="params">(IntPredicate predicate)</span> &#123;</span><br><span class="line">	<span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i : arr) &#123;</span><br><span class="line">		<span class="keyword">if</span> (predicate.test(i)) &#123;</span><br><span class="line">			System.out.println(i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Lambda 写法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	printNum((value) -&gt; &#123;</span><br><span class="line">		<span class="keyword">return</span> value%<span class="number">2</span> == <span class="number">0</span>;</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最简写法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	printNum(value -&gt; value%<span class="number">2</span> == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="示例四"><a href="#示例四" class="headerlink" title="示例四"></a>示例四</h2><p>现有方法定义如下，其中 Function 是一个接口。先使用匿名内部类的写法调用该方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	typeConver(<span class="keyword">new</span> <span class="title class_">Function</span>&lt;String, Integer&gt;() &#123;</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="keyword">public</span> Integer <span class="title function_">apply</span><span class="params">(String s)</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> Integer.valueOf(s);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;R&gt; R <span class="title function_">typeConver</span><span class="params">(Function&lt;String, R&gt; function)</span> &#123;</span><br><span class="line">	<span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">	<span class="type">R</span> <span class="variable">result</span> <span class="operator">=</span> function.apply(str);</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Lambda 写法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	typeConver((s) -&gt; &#123;</span><br><span class="line">		<span class="keyword">return</span> Integer.valueOf(s);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最简写法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	typeConver(Integer::valueOf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="示例五"><a href="#示例五" class="headerlink" title="示例五"></a>示例五</h2><p>现有方法定义如下，其中 Int 是一个接口。先使用匿名内部类的写法调用该方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	foreachArr(<span class="keyword">new</span> <span class="title class_">IntConsumer</span>() &#123;</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">			System.out.println(value);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">foreachArr</span><span class="params">(IntConsumer consumer)</span> &#123;</span><br><span class="line">	<span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i : arr) &#123;</span><br><span class="line">		consumer.accept(i);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Lambda 写法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	foreachArr((value) -&gt; &#123;</span><br><span class="line">		System.out.println(value);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最简写法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	foreachArr(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="二、Stream-流"><a href="#二、Stream-流" class="headerlink" title="二、Stream 流"></a>二、Stream 流</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">streamDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Stream</span> <span class="variable">stream</span> <span class="operator">=</span> Stream.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">    String[] strArray = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>&#125;;</span><br><span class="line">    stream = Stream.of(strArray);</span><br><span class="line">    stream = Arrays.stream(strArray);</span><br><span class="line">    List&lt;String&gt; list = Arrays.asList(strArray);</span><br><span class="line">    stream = list.stream();</span><br><span class="line">    <span class="comment">// 一个Stream流只可以使用一次，这段代码为了简洁而重复使用了数次，因此会抛出 stream has already been operated upon or closed 异常</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Stream&lt;String&gt; stream2 = Stream.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">        <span class="comment">// 转换成 Array</span></span><br><span class="line">        String[] strArray1 = stream2.toArray(String[]::<span class="keyword">new</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转换成 Collection</span></span><br><span class="line">        List&lt;String&gt; list1 = stream2.collect(Collectors.toList());</span><br><span class="line">        List&lt;String&gt; list2 = stream2.collect(Collectors.toCollection(ArrayList::<span class="keyword">new</span>));</span><br><span class="line">        <span class="type">Set</span> <span class="variable">set1</span> <span class="operator">=</span> stream2.collect(Collectors.toSet());</span><br><span class="line">        <span class="type">Stack</span> <span class="variable">stack1</span> <span class="operator">=</span> stream2.collect(Collectors.toCollection(Stack::<span class="keyword">new</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转换成 String</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> stream.collect(Collectors.joining()).toString();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-1-Stream-中间操作符"><a href="#2-1-Stream-中间操作符" class="headerlink" title="2.1 Stream 中间操作符"></a>2.1 Stream 中间操作符</h2><table>
<thead>
<tr>
<th>流方法</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>filter</td>
<td>用于通过设置的条件过滤出元素</td>
</tr>
<tr>
<td>distinct</td>
<td>返回一个元素各异（根据流所生成元素的hashCode和equals方法实现）的流</td>
</tr>
<tr>
<td>limit</td>
<td>会返回一个不超过给定长度的流</td>
</tr>
<tr>
<td>skip</td>
<td>返回一个扔掉了前n个元素的流</td>
</tr>
<tr>
<td>map</td>
<td>接受一个函数作为参数。这个函数会被应用到每个元素上，并将其映射成一个新的元素（使用映射一词，是因为它和转换类似，但其中的细微差别在于它是“创建一个新版本”而不是去“修改”）</td>
</tr>
<tr>
<td>flatMap</td>
<td>使用flatMap方法的效果是，各个数组并不是分别映射成一个流，而是映射成流的内容。所有使用map(Arrays::stream)时生成的单个流都被合并起来，即扁平化为一个流</td>
</tr>
<tr>
<td>sorted</td>
<td>返回排序后的流</td>
</tr>
</tbody></table>
<h3 id="stream-filter"><a href="#stream-filter" class="headerlink" title="stream().filter()"></a>stream().filter()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">filterListDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;String&gt; accountList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    accountList.add(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">    accountList.add(<span class="string">&quot;jerry&quot;</span>);</span><br><span class="line">    accountList.add(<span class="string">&quot;beita&quot;</span>);</span><br><span class="line">    accountList.add(<span class="string">&quot;shuke&quot;</span>);</span><br><span class="line">    accountList.add(<span class="string">&quot;damu&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.1 业务要求：长度大于等于5的有效账号</span></span><br><span class="line">    <span class="keyword">for</span> (String account : accountList) &#123;</span><br><span class="line">        <span class="keyword">if</span> (account.length() &gt;= <span class="number">5</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;有效账号：&quot;</span> + account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.2 迭代方式进行操作</span></span><br><span class="line">    Iterator&lt;String&gt; it = accountList.iterator();</span><br><span class="line">    <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">account</span> <span class="operator">=</span> it.next();</span><br><span class="line">        <span class="keyword">if</span> (account.length() &gt;= <span class="number">5</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;it有效账号：&quot;</span> + account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.3 Stream结合lambda表达式，完成业务处理</span></span><br><span class="line">    List&lt;String&gt; validAccounts = accountList.stream().filter(s -&gt; s.length() &gt;= <span class="number">5</span>).collect(Collectors.toList());</span><br><span class="line">    System.out.println(validAccounts);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">filterArrayDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// arrays -&gt; stream</span></span><br><span class="line">    Integer[] nums = <span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;;</span><br><span class="line">    System.out.println(Arrays.asList(nums));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// filter(Predicate(T t)-&gt;Boolean) 接受一个参数，验证参数是否符合设置的条件</span></span><br><span class="line">    <span class="comment">// toArray() 从Stream类型抽取数据转换成数组</span></span><br><span class="line">    Integer[] nums2 = Stream.of(nums).filter(x -&gt; x % <span class="number">2</span> == <span class="number">0</span>).toArray(Integer[]::<span class="keyword">new</span>);</span><br><span class="line">    System.out.println(Arrays.asList(nums2));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="stream-distinct"><a href="#stream-distinct" class="headerlink" title="stream().distinct()"></a>stream().distinct()</h3><h3 id="stream-min-：取最小值"><a href="#stream-min-：取最小值" class="headerlink" title="stream().min()：取最小值"></a>stream().min()：取最小值</h3><h3 id="stream-max-：取最大值"><a href="#stream-max-：取最大值" class="headerlink" title="stream().max()：取最大值"></a>stream().max()：取最大值</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reduceDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; numList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    numList.add(<span class="number">1</span>);</span><br><span class="line">    numList.add(<span class="number">3</span>);</span><br><span class="line">    numList.add(<span class="number">2</span>);</span><br><span class="line">    numList.add(<span class="number">5</span>);</span><br><span class="line">    numList.add(<span class="number">4</span>);</span><br><span class="line">    numList.add(<span class="number">6</span>);</span><br><span class="line">    numList.add(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// min/max/distinct</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">minNum1</span> <span class="operator">=</span> numList.stream().min((o1, o2) -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> o1 - o2;</span><br><span class="line">    &#125;).get();</span><br><span class="line">    System.out.println(minNum1);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">minNum2</span> <span class="operator">=</span> numList.stream().min(Comparator.comparingInt(o -&gt; o)).get();</span><br><span class="line">    System.out.println(minNum2);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">maxNum</span> <span class="operator">=</span> numList.stream().max((o1, o2) -&gt; o1 - o2).get();</span><br><span class="line">    System.out.println(maxNum);</span><br><span class="line">    numList.stream().distinct().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="stream-limit"><a href="#stream-limit" class="headerlink" title="stream().limit()"></a>stream().limit()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reduceDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; numList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    numList.add(<span class="number">1</span>);</span><br><span class="line">    numList.add(<span class="number">3</span>);</span><br><span class="line">    numList.add(<span class="number">2</span>);</span><br><span class="line">    numList.add(<span class="number">5</span>);</span><br><span class="line">    numList.add(<span class="number">4</span>);</span><br><span class="line">    numList.add(<span class="number">6</span>);</span><br><span class="line">    numList.add(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// limit</span></span><br><span class="line">    List&lt;Integer&gt; limitNum = numList.stream().limit(<span class="number">2</span>).collect(Collectors.toList());</span><br><span class="line">    System.out.println(limitNum);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="stream-skip"><a href="#stream-skip" class="headerlink" title="stream().skip()"></a>stream().skip()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reduceDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; numList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    numList.add(<span class="number">1</span>);</span><br><span class="line">    numList.add(<span class="number">3</span>);</span><br><span class="line">    numList.add(<span class="number">2</span>);</span><br><span class="line">    numList.add(<span class="number">5</span>);</span><br><span class="line">    numList.add(<span class="number">4</span>);</span><br><span class="line">    numList.add(<span class="number">6</span>);</span><br><span class="line">    numList.add(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// skip</span></span><br><span class="line">    List&lt;Integer&gt; limitNum2 = numList.stream().skip(<span class="number">2</span>).collect(Collectors.toList());</span><br><span class="line">    System.out.println(limitNum2);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="stream-map"><a href="#stream-map" class="headerlink" title="stream().map()"></a>stream().map()</h3><p>接受一个函数作为参数。这个函数会被应用到每个元素上，并将其映射成一个新的元素。</p>
<p>（使用映射一词，是因为它和转换类似，但其中的细微差别在于它是“创建一个新版本”而不是去“修改”） </p>
<p><strong>map 是对流中的每一个元素进行处理。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mapDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="comment">// list -&gt; stream</span></span><br><span class="line">    System.out.println(list);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// map(Function(T, R)-&gt; R) 接受一个参数，通过运算得到转换后的数据</span></span><br><span class="line">    <span class="comment">// collect()</span></span><br><span class="line">    List&lt;Double&gt; list2 = list.stream().map(x -&gt; Math.pow(x, <span class="number">2</span>)).collect(Collectors.toList());</span><br><span class="line">    System.out.println(list2);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; nameList = Arrays.asList(<span class="string">&quot;zs&quot;</span>, <span class="string">&quot;ls&quot;</span>, <span class="string">&quot;ww&quot;</span>, <span class="string">&quot;zl&quot;</span>);</span><br><span class="line">    <span class="comment">// 字母转大写</span></span><br><span class="line">    nameList.stream().map(String::toUpperCase).collect(Collectors.toList()).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转换数据类型</span></span><br><span class="line">    list.stream().map(String::valueOf).collect(Collectors.toList()).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取平方</span></span><br><span class="line">    list.stream().map(n -&gt; n*n).collect(Collectors.toList()).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    List&lt;String&gt; strList = Arrays.asList(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;abc&quot;</span>, <span class="string">&quot;bc&quot;</span>, <span class="string">&quot;efg&quot;</span>, <span class="string">&quot;abcd&quot;</span>, <span class="string">&quot;jkl&quot;</span>, <span class="string">&quot;jkl&quot;</span>);</span><br><span class="line">    List&lt;String&gt; resultList = strList.stream().map(str -&gt; str + <span class="string">&quot;-itcast&quot;</span>).collect(Collectors.toList());</span><br><span class="line">    System.out.println(resultList);</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="stream-flatMap"><a href="#stream-flatMap" class="headerlink" title="stream().flatMap()"></a>stream().flatMap()</h3><p>使用 flatMap 方法的效果是，各个数组并不是分别映射成一个流，而是映射成流的内容。所有使用 map(Arrays::stream) 时生成的单个流都被合并起来，即扁平化为一个流。</p>
<p><strong>flatMap 流扁平化，就是把流中的每一个元素都转化成另一个流，然后把所有流汇聚起来成一个流。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">flatMapDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;String&gt; strList = Arrays.asList(<span class="string">&quot;a bc&quot;</span>, <span class="string">&quot;ab c&quot;</span>, <span class="string">&quot;b c&quot;</span>, <span class="string">&quot;efg&quot;</span>, <span class="string">&quot;abcd&quot;</span>, <span class="string">&quot;jkl&quot;</span>, <span class="string">&quot;jkl&quot;</span>);</span><br><span class="line">    <span class="comment">// List&lt;String&gt; resultList = strList.stream().flatMap(x -&gt; Arrays.asList(x.split(&quot; &quot;)).stream()).collect(Collectors.toList());</span></span><br><span class="line">    List&lt;String&gt; resultList = strList.stream().flatMap(x -&gt; Arrays.stream(x.split(<span class="string">&quot; &quot;</span>))).collect(Collectors.toList());</span><br><span class="line">    System.out.println(resultList);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="stream-sorted"><a href="#stream-sorted" class="headerlink" title="stream().sorted()"></a>stream().sorted()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reduceDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; numList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    numList.add(<span class="number">1</span>);</span><br><span class="line">    numList.add(<span class="number">3</span>);</span><br><span class="line">    numList.add(<span class="number">2</span>);</span><br><span class="line">    numList.add(<span class="number">5</span>);</span><br><span class="line">    numList.add(<span class="number">4</span>);</span><br><span class="line">    numList.add(<span class="number">6</span>);</span><br><span class="line">    numList.add(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// sorted().一般在skip/limit或者filter之后进行</span></span><br><span class="line">    List&lt;Integer&gt; sortedNum = numList.stream().skip(<span class="number">2</span>).limit(<span class="number">5</span>).sorted().collect(Collectors.toList());</span><br><span class="line">    System.out.println(sortedNum);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-2-Stream-终止操作符"><a href="#2-2-Stream-终止操作符" class="headerlink" title="2.2 Stream 终止操作符"></a>2.2 Stream 终止操作符</h2><table>
<thead>
<tr>
<th>流方法</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>anyMatch</td>
<td>检查是否至少匹配一个元素，返回boolean</td>
</tr>
<tr>
<td>allMatch</td>
<td>检查是否匹配所有元素，返回boolean</td>
</tr>
<tr>
<td>noneMatch</td>
<td>检查是否没有匹配所有元素，返回boolean</td>
</tr>
<tr>
<td>findAny</td>
<td>将返回当前流中的任意元素</td>
</tr>
<tr>
<td>findFirst</td>
<td>返回第一个元素</td>
</tr>
<tr>
<td>forEach</td>
<td>遍历流</td>
</tr>
<tr>
<td>collect</td>
<td>收集器，将流转换为其他形式</td>
</tr>
<tr>
<td>reduce</td>
<td>可以将流中元素反复结合起来，得到一个值</td>
</tr>
<tr>
<td>count</td>
<td>返回流中元素总数</td>
</tr>
</tbody></table>
<h3 id="stream-anyMatch"><a href="#stream-anyMatch" class="headerlink" title="stream().anyMatch()"></a>stream().anyMatch()</h3><h3 id="stream-allMatch"><a href="#stream-allMatch" class="headerlink" title="stream().allMatch()"></a>stream().allMatch()</h3><h3 id="stream-noneMatch"><a href="#stream-noneMatch" class="headerlink" title="stream().noneMatch()"></a>stream().noneMatch()</h3><h3 id="stream-findAny"><a href="#stream-findAny" class="headerlink" title="stream().findAny()"></a>stream().findAny()</h3><h3 id="stream-findFirst"><a href="#stream-findFirst" class="headerlink" title="stream().findFirst()"></a>stream().findFirst()</h3><h3 id="stream-forEach"><a href="#stream-forEach" class="headerlink" title="stream().forEach()"></a>stream().forEach()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">forEachDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="comment">// forEach: 接受一个lambda表达式，在Stream每个元素上执行指定的操作</span></span><br><span class="line">    list.stream().filter(n -&gt; n % <span class="number">2</span> == <span class="number">0</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;b&quot;</span>, <span class="string">&quot;b&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;c&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;d&quot;</span>, <span class="string">&quot;d&quot;</span>);</span><br><span class="line">    map.forEach((k, v) -&gt; System.out.println(<span class="string">&quot;k=&quot;</span> + k + <span class="string">&quot;，v=&quot;</span> + v));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="stream-collect"><a href="#stream-collect" class="headerlink" title="stream().collect()"></a>stream().collect()</h3><h3 id="stream-reduce"><a href="#stream-reduce" class="headerlink" title="stream().reduce()"></a>stream().reduce()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reduceDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; numList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    numList.add(<span class="number">1</span>);</span><br><span class="line">    numList.add(<span class="number">3</span>);</span><br><span class="line">    numList.add(<span class="number">2</span>);</span><br><span class="line">    numList.add(<span class="number">5</span>);</span><br><span class="line">    numList.add(<span class="number">4</span>);</span><br><span class="line">    numList.add(<span class="number">6</span>);</span><br><span class="line">    numList.add(<span class="number">6</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// reduce</span></span><br><span class="line">    Optional&lt;Integer&gt; sum1 = numList.stream().reduce((x, y) -&gt; x + y);</span><br><span class="line">    System.out.println(sum1.get());</span><br><span class="line">    Optional&lt;Integer&gt; sum2 = numList.stream().reduce(Integer::sum);</span><br><span class="line">    System.out.println(sum2.get());</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="stream-count"><a href="#stream-count" class="headerlink" title="stream().count()"></a>stream().count()</h3><h1 id="三、Lambda：函数式接口"><a href="#三、Lambda：函数式接口" class="headerlink" title="三、Lambda：函数式接口"></a>三、Lambda：函数式接口</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaDemo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        MobilePhone phone;</span><br><span class="line">        <span class="comment">// 所有的Lambda的类型都是一个接口，而Lambda表达式本身，就是这个接口的实现</span></span><br><span class="line">        phone = () -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;开机！&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        phone.powerOn();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MobilePhone</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">powerOn</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OppoPhone</span> <span class="keyword">implements</span> <span class="title class_">MobilePhone</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">powerOn</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Oppo手机开机！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>如果定义成实现类，就会报错</strong></p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1655199527943-7baca5ca-351d-4d7d-b004-583907ca7170.png"></p>
<h1 id="四、Lambda：方法与构造函数引用"><a href="#四、Lambda：方法与构造函数引用" class="headerlink" title="四、Lambda：方法与构造函数引用"></a>四、Lambda：方法与构造函数引用</h1><h2 id="4-1-实例对象-实例方法（类名-方法名）"><a href="#4-1-实例对象-实例方法（类名-方法名）" class="headerlink" title="4.1 实例对象::实例方法（类名::方法名）"></a>4.1 实例对象::实例方法（类名::方法名）</h2><p>如果两个方法，除了方法名之外，方法参数和返回类型都一致，就称为：方法签名一致</p>
<p>如果某个方法和接口里定义的函数恰好一致，就可以直接传入方法引用。</p>
<p>有点接口方法懒得实现了，然后直接借用其他方法的意思</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaDemo03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 原始的lambda写法</span></span><br><span class="line">        <span class="type">parseIntNum</span> <span class="variable">parseIntNum1</span> <span class="operator">=</span> (str) -&gt; Integer.parseInt(str);</span><br><span class="line">        System.out.println(parseIntNum1.pass(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">        <span class="comment">// 改进型lambda写法</span></span><br><span class="line">        <span class="type">parseIntNum</span> <span class="variable">parseIntNum2</span> <span class="operator">=</span> Integer::parseInt;</span><br><span class="line">        System.out.println(parseIntNum2.pass(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口定义</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">parseIntNum</span> &#123;</span><br><span class="line">    <span class="comment">// 定义一个String转化成Integer的方法</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">pass</span><span class="params">(String s)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果接口中存在有多个抽象方法，那么就不能直接通过接口来匹配到具体的函数，报错：is not a functional interface</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1655203558293-07ec7c2e-d5c3-4f87-a3b6-e581ec8163af.png"></p>
<h2 id="4-2-数据类型-new（方法返回值-new）"><a href="#4-2-数据类型-new（方法返回值-new）" class="headerlink" title="4.2 数据类型::new（方法返回值::new）"></a>4.2 数据类型::new（方法返回值::new）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaDemo04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建长度为10的数组</span></span><br><span class="line">        <span class="comment">// 原始的lambda写法</span></span><br><span class="line">        IntFunction&lt;<span class="type">int</span>[]&gt; arr1 = <span class="keyword">new</span> <span class="title class_">IntFunction</span>&lt;<span class="type">int</span>[]&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span>[] apply(<span class="type">int</span> num) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[num];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        arr1.apply(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">// 改进型lambda写法</span></span><br><span class="line">        IntFunction&lt;<span class="type">int</span>[]&gt; arr2 = <span class="type">int</span>[]::<span class="keyword">new</span>;</span><br><span class="line">        arr2.apply(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="五、Lambda：作用域"><a href="#五、Lambda：作用域" class="headerlink" title="五、Lambda：作用域"></a>五、Lambda：作用域</h1><h2 id="5-1-基础类型变量"><a href="#5-1-基础类型变量" class="headerlink" title="5.1 基础类型变量"></a>5.1 基础类型变量</h2><p>传入 lambda 的变量被隐式 final 所修饰，不能被修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaDemo05</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="string">&quot;666&quot;</span>;</span><br><span class="line">        <span class="type">StrToInt05</span> <span class="variable">sti</span> <span class="operator">=</span> (str -&gt; Integer.parseInt(str + temp));</span><br><span class="line">        System.out.println(sti.change(temp));</span><br><span class="line"><span class="comment">//        temp = &quot;000&quot;;</span></span><br><span class="line"><span class="comment">//        System.out.println(sti.change(temp));</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口定义</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">StrToInt05</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个String转化成Integer的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">change</span><span class="params">(String s)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1655462587971-b10e98a3-899e-4a54-90d4-d234e602c434.png"></p>
<h2 id="5-2-引用类型变量"><a href="#5-2-引用类型变量" class="headerlink" title="5.2 引用类型变量"></a>5.2 引用类型变量</h2><p>如果是引用类型的话就不会报错，因为 Lambda 能够感知外部对引用类型变量的改变，不会出现数据不同步的问题（静态变量和实例变量也是不会报错）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaDemo06</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;111&quot;</span>);</span><br><span class="line">        <span class="type">StrToInt06</span> <span class="variable">sti</span> <span class="operator">=</span> (str -&gt; Integer.parseInt(list.get(<span class="number">0</span>)));</span><br><span class="line">        System.out.println(sti.change(<span class="string">&quot;000&quot;</span>));</span><br><span class="line">        list.set(<span class="number">0</span>, <span class="string">&quot;666&quot;</span>);</span><br><span class="line">        System.out.println(sti.change(<span class="string">&quot;000&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口定义</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">StrToInt06</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个String转化成Integer的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">change</span><span class="params">(String s)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="六、Lambda：访问局部变量"><a href="#六、Lambda：访问局部变量" class="headerlink" title="六、Lambda：访问局部变量"></a>六、Lambda：访问局部变量</h1><h1 id="七、Lambda：访问对象字段与静态变量"><a href="#七、Lambda：访问对象字段与静态变量" class="headerlink" title="七、Lambda：访问对象字段与静态变量"></a>七、Lambda：访问对象字段与静态变量</h1><h1 id="八、Lambda：访问接口的默认方法"><a href="#八、Lambda：访问接口的默认方法" class="headerlink" title="八、Lambda：访问接口的默认方法"></a>八、Lambda：访问接口的默认方法</h1><p></br></br></br></br></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Memories-大槻真希(大槻マキ)</title>
    <url>/blog/f3109477.html</url>
    <content><![CDATA[<h1 id="Memories-大槻（おおつき）真希（まき）（大槻マキ）"><a href="#Memories-大槻（おおつき）真希（まき）（大槻マキ）" class="headerlink" title="Memories - 大槻（おおつき）真希（まき）（大槻マキ）"></a>Memories - <ruby>大槻<rp>（</rp><rt>おおつき</rt><rp>）</rp></ruby><ruby>真希<rp>（</rp><rt>まき</rt><rp>）</rp></ruby>（大槻マキ）</h1><p><ruby>小<rp>（</rp><rt>ちい</rt><rp>）</rp></ruby>さな<ruby>頃<rp>（</rp><rt>ころ</rt><rp>）</rp></ruby>には<ruby>宝<rp>（</rp><rt>たから</rt><rp>）</rp></ruby>の<ruby>地図<rp>（</rp><rt>ちず</rt><rp>）</rp></ruby>が<br>小时候藏宝图</p>
<p><ruby>頭<rp>（</rp><rt>あたま</rt><rp>）</rp></ruby>の<ruby>中<rp>（</rp><rt>なか</rt><rp>）</rp></ruby>に<ruby>浮<rp>（</rp><rt>う</rt><rp>）</rp></ruby>かんでいて<br>总是浮现在脑海中</p>
<p>いつでも<ruby>探<rp>（</rp><rt>さが</rt><rp>）</rp></ruby>した<ruby>キセキ<rp>（</rp><rt>きせき</rt><rp>）</rp></ruby>の<ruby>場所<rp>（</rp><rt>ばしょ</rt><rp>）</rp></ruby>を<br>永远在寻找奇迹之地</p>
<p><ruby>知<rp>（</rp><rt>し</rt><rp>）</rp></ruby>らない<ruby>誰<rp>（</rp><rt>だれ</rt><rp>）</rp></ruby>かに<ruby>負<rp>（</rp><rt>ま</rt><rp>）</rp></ruby>けないよに<br>不输给远方的某人</p>
<p><ruby>今<rp>（</rp><rt>いま</rt><rp>）</rp></ruby>ではほこりだらけの<ruby>毎日<rp>（</rp><rt>まいにち</rt><rp>）</rp></ruby><br>现在的每一天都充满尘埃</p>
<p>いつの<ruby>日<rp>（</rp><rt>ひ</rt><rp>）</rp></ruby>かすべての<br>等到哪一天这所有的一切</p>
<p><ruby>時<rp>（</rp><rt>とき</rt><rp>）</rp></ruby>に<ruby>身<rp>（</rp><rt>み</rt><rp>）</rp></ruby>を<ruby>委<rp>（</rp><rt>まか</rt><rp>）</rp></ruby>せるだけ<br>都随风逝去</p>
<p>もしも<ruby>世界<rp>（</rp><rt>せかい</rt><rp>）</rp></ruby>が<ruby>変<rp>（</rp><rt>か</rt><rp>）</rp></ruby>わるのなら<br>如果世界能够改变</p>
<p><ruby>何<rp>（</rp><rt>なに</rt><rp>）</rp></ruby>も<ruby>知<rp>（</rp><rt>し</rt><rp>）</rp></ruby>らない<ruby>頃<rp>（</rp><rt>ころ</rt><rp>）</rp></ruby>の<ruby>私<rp>（</rp><rt>わたし</rt><rp>）</rp></ruby>に<br>请带着我回到</p>
<p><ruby>連<rp>（</rp><rt>つ</rt><rp>）</rp></ruby>れていって<br>一无所知的过去</p>
<p><ruby>思<rp>（</rp><rt>おも</rt><rp>）</rp></ruby>い<ruby>出<rp>（</rp><rt>で</rt><rp>）</rp></ruby>が<ruby>色<rp>（</rp><rt>いろ</rt><rp>）</rp></ruby>あせないように<br>但愿美好回忆永不退色</p>
<p><ruby>小<rp>（</rp><rt>ちい</rt><rp>）</rp></ruby>さな<ruby>頃<rp>（</rp><rt>ころ</rt><rp>）</rp></ruby>から<ruby>歌<rp>（</rp><rt>うた</rt><rp>）</rp></ruby>を<ruby>唄<rp>（</rp><rt>うた</rt><rp>）</rp></ruby>って<br>小时候唱起的歌</p>
<p><ruby>夢見<rp>（</rp><rt>ゆめみ</rt><rp>）</rp></ruby>る<ruby>心<rp>（</rp><rt>こころ</rt><rp>）</rp></ruby>あたためてた<br>温暖着梦想的心</p>
<p>みんなで<ruby>真似<rp>（</rp><rt>まね</rt><rp>）</rp></ruby>した<br>大家模仿过的</p>
<p><ruby>秘密<rp>（</rp><rt>ひみつ</rt><rp>）</rp></ruby>の<ruby>メロディー<rp>（</rp><rt>めろでぃー</rt><rp>）</rp></ruby><br>秘密的旋律</p>
<p><ruby>今度<rp>（</rp><rt>こんど</rt><rp>）</rp></ruby>は<ruby>上手<rp>（</rp><rt>じょうず</rt><rp>）</rp></ruby>に<ruby>聞<rp>（</rp><rt>き</rt><rp>）</rp></ruby>こえるように<br>下一次一定会更加的动听</p>
<p><ruby>今<rp>（</rp><rt>いま</rt><rp>）</rp></ruby>ではため<ruby>息<rp>（</rp><rt>いき</rt><rp>）</rp></ruby>ついてばかりで<br>现在的我仍在不断叹息</p>
<p><ruby>誰<rp>（</rp><rt>だれ</rt><rp>）</rp></ruby>もまだ<ruby>本当<rp>（</rp><rt>ほんとう</rt><rp>）</rp></ruby>の<br>我们都还未抓住</p>
<p><ruby>夢<rp>（</rp><rt>ゆめ</rt><rp>）</rp></ruby>さえつかめないまま<br>各自真正的梦想</p>
<p>もしも<ruby>時代<rp>（</rp><rt>じだい</rt><rp>）</rp></ruby>が<ruby>戻<rp>（</rp><rt>もど</rt><rp>）</rp></ruby>るのなら<br>如果时间可以倒流</p>
<p><ruby>涙<rp>（</rp><rt>なみだ</rt><rp>）</rp></ruby>を<ruby>知<rp>（</rp><rt>し</rt><rp>）</rp></ruby>った<ruby>頃<rp>（</rp><rt>ころ</rt><rp>）</rp></ruby>の<ruby>私<rp>（</rp><rt>わたし</rt><rp>）</rp></ruby>に<br>请带着我回到</p>
<p><ruby>連<rp>（</rp><rt>つ</rt><rp>）</rp></ruby>れていって<br>初识泪水的那一刻</p>
<p>せつなさが<ruby>追<rp>（</rp><rt>お</rt><rp>）</rp></ruby>いつかないように<br>但愿可以成功摆脱悲伤</p>
<p>もしも<ruby>世界<rp>（</rp><rt>せかい</rt><rp>）</rp></ruby>が<ruby>変<rp>（</rp><rt>か</rt><rp>）</rp></ruby>わるのなら<br>如果世界能够改变</p>
<p><ruby>何<rp>（</rp><rt>なに</rt><rp>）</rp></ruby>も<ruby>知<rp>（</rp><rt>し</rt><rp>）</rp></ruby>らない<ruby>頃<rp>（</rp><rt>ころ</rt><rp>）</rp></ruby>の<ruby>私<rp>（</rp><rt>わたし</rt><rp>）</rp></ruby>に<br>请带着我回到</p>
<p><ruby>連<rp>（</rp><rt>つ</rt><rp>）</rp></ruby>れていって<br>一无所知的过去</p>
<p><ruby>思<rp>（</rp><rt>おも</rt><rp>）</rp></ruby>い<ruby>出<rp>（</rp><rt>で</rt><rp>）</rp></ruby>が<ruby>色<rp>（</rp><rt>いろ</rt><rp>）</rp></ruby>あせないように<br>但愿美好回忆永不退色</p>
<p><ruby>連<rp>（</rp><rt>つ</rt><rp>）</rp></ruby>れていって<br>请带我走吧</p>
<p>せつなさが<ruby>追<rp>（</rp><rt>お</rt><rp>）</rp></ruby>いつかないように<br>但愿可以成功摆脱悲伤</p>
<p>【<ruby>终<rp>（</rp><rt>お</rt><rp>）</rp></ruby>わった】</p>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>生活</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx介绍</title>
    <url>/blog/deab9856.html</url>
    <content><![CDATA[<h1 id="一、Nginx-是什么"><a href="#一、Nginx-是什么" class="headerlink" title="一、Nginx 是什么"></a>一、Nginx 是什么</h1><p>Nginx 是一个 web 服务器，也可以用来做【负载均衡】及【反向代理】使用，目前使用最多的就是负载均衡。</p>
<h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>负载均衡就是把请求分摊到集群的多个服务上执行，例如在那个集约化改造项目的时候，我们就使用了 Nginx 的负载均衡功能，然后使用的是 ip_hash 的策略，保证每个访客访问的是同一个服务器，由此解决了 session 的问题。</p>
<h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p>反向代理就是用户只需要把请求发给特定的反向代理服务器，由 Nginx 完成对请求的分发处理，例如一个商场项目，分为商品（shopping）、订单（order）、交易（business）等服务，但是对客户端来说只需要正常的访问，然后在 url 中标识要请求的服务即可。</p>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx安装与使用</title>
    <url>/blog/c3825a32.html</url>
    <content><![CDATA[<blockquote>
<p>参考自博客：<a href="https://blog.csdn.net/w410589502/article/details/70787468">linux nginx安装以及配置</a></p>
</blockquote>
<h1 id="一、Nginx-Linux-版本的基本使用"><a href="#一、Nginx-Linux-版本的基本使用" class="headerlink" title="一、Nginx Linux 版本的基本使用"></a>一、Nginx Linux 版本的基本使用</h1><p>下载地址：<a href="http://nginx.org/">Nginx官方网址</a></p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1565086188620.png" alt="1565086188620"></p>
<p><em>其中，mainline 表示主线（最新）版本；stable 表示稳定版本</em></p>
<p>或者</p>
<p>在 Linux 中使用 wget 命令下载：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -c https://nginx.org/download/nginx-1.16.0.tar.gz</span><br></pre></td></tr></table></figure>

<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1565086440569.png" alt="1565086440569"></p>
<h1 id="二-安装步骤"><a href="#二-安装步骤" class="headerlink" title="二 安装步骤"></a>二 安装步骤</h1><h2 id="2-1-解压安装包"><a href="#2-1-解压安装包" class="headerlink" title="2.1 解压安装包"></a>2.1 解压安装包</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf nginx-1.16.0.tar.gztar -zxvf nginx-1.16.0.tar.gz</span><br></pre></td></tr></table></figure>

<h2 id="2-2-进入安装目录"><a href="#2-2-进入安装目录" class="headerlink" title="2.2 进入安装目录"></a>2.2 进入安装目录</h2><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1564470825825.png" alt="1564470825825"></p>
<h2 id="2-3-Nginx-配置"><a href="#2-3-Nginx-配置" class="headerlink" title="2.3 Nginx 配置"></a>2.3 Nginx 配置</h2><h3 id="2-3-1-使用默认配置（推荐）"><a href="#2-3-1-使用默认配置（推荐）" class="headerlink" title="2.3.1 使用默认配置（推荐）"></a>2.3.1 使用默认配置（推荐）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure./configure</span><br></pre></td></tr></table></figure>

<p>这时一般会出现错误，提示我们添加 gcc 环境</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1564471268289.png" alt="1564471268289"></p>
<h4 id="2-3-1-1-安装-gcc-环境"><a href="#2-3-1-1-安装-gcc-环境" class="headerlink" title="2.3.1.1 安装 gcc 环境"></a>2.3.1.1 安装 gcc 环境</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install gcc-c++yum install gcc-c++</span><br></pre></td></tr></table></figure>

<p><em>注：若 Linux 系统版本是 aliyun，一般已经安装了 gcc 环境；而 centos7 等系统大都需要用户安装</em></p>
<h4 id="2-3-1-2-继续使用默认配置"><a href="#2-3-1-2-继续使用默认配置" class="headerlink" title="2.3.1.2 继续使用默认配置"></a>2.3.1.2 继续使用默认配置</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装到指定路径</span></span><br><span class="line">./configure --prefix=/usr/local/nginx./configure</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装到指定路径</span></span><br><span class="line">./configure --prefix=/usr/local/nginx</span><br></pre></td></tr></table></figure>

<p>这里提示我们需要安装 PCRE 依赖库：</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1564473284232.png" alt="1564473284232"></p>
<h4 id="2-3-1-3-安装-PCRE-依赖库"><a href="#2-3-1-3-安装-PCRE-依赖库" class="headerlink" title="2.3.1.3 安装 PCRE 依赖库"></a>2.3.1.3 安装 PCRE 依赖库</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y pcre pcre-develyum install -y pcre pcre-devel</span><br></pre></td></tr></table></figure>

<p><em>PCRE（Perl Compatible Regular Expressions）是一个 Perl 库，包括 perl 兼容的</em>***正则表达式库***<em>。nginx 的 http 模块使用 pcre 来解析正则表达式，所以需要在 linux 上安装 pcre 库，pcre-devel 是使用 pcre 开发的一个二次开发库。</em></p>
<h4 id="2-3-1-4-安装-zlib-依赖库"><a href="#2-3-1-4-安装-zlib-依赖库" class="headerlink" title="2.3.1.4 安装 zlib 依赖库"></a>2.3.1.4 安装 zlib 依赖库</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y zlib zlib-develyum install -y zlib zlib-devel</span><br></pre></td></tr></table></figure>



<p><em>zlib 库提供了很多种压缩和解压缩的方式， nginx 使用 zlib 对 http 包的内容进行 gzip ，所以需要在 Centos 上安装 zlib 库。</em></p>
<h4 id="2-3-1-5-安装-OpenSSL-安全套接字层密码库"><a href="#2-3-1-5-安装-OpenSSL-安全套接字层密码库" class="headerlink" title="2.3.1.5 安装 OpenSSL 安全套接字层密码库"></a>2.3.1.5 安装 OpenSSL 安全套接字层密码库</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y openssl openssl-develyum install -y openssl openssl-devel</span><br></pre></td></tr></table></figure>

<p><em>OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及 SSL 协议，并提供丰富的应用程序供测试或其它目的使用。</em></p>
<p><em>nginx 不仅支持 http 协议，还支持 https（即在 ssl 协议上传输 http），所以需要在 Centos 安装 OpenSSL 库。</em></p>
<h4 id="2-3-1-6-最后再次执行默认配置"><a href="#2-3-1-6-最后再次执行默认配置" class="headerlink" title="2.3.1.6 最后再次执行默认配置"></a>2.3.1.6 最后再次执行默认配置</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure</span><br></pre></td></tr></table></figure>

<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1564473993088.png" alt="1564473993088"></p>
<p>成功！</p>
<p>同时，<code>./configure</code>命令会创建一个 Makefile 文件，为 C 语言提供编译需要</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1564474485304.png" alt="1564474485304"></p>
<h4 id="1-2-3-2-自定义配置（不推荐）"><a href="#1-2-3-2-自定义配置（不推荐）" class="headerlink" title="1.2.3.2 自定义配置（不推荐）"></a>1.2.3.2 自定义配置（不推荐）</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure \</span><br><span class="line">--prefix=/usr/local/nginx \</span><br><span class="line">--conf-path=/usr/local/nginx/conf/nginx.conf \</span><br><span class="line">--pid-path=/usr/local/nginx/conf/nginx.pid \</span><br><span class="line">--lock-path=/var/lock/nginx.lock \</span><br><span class="line">--error-log-path=/var/log/nginx/error.log \</span><br><span class="line">--http-log-path=/var/log/nginx/access.log \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">--http-client-body-temp-path=/var/temp/nginx/client \</span><br><span class="line">--http-proxy-temp-path=/var/temp/nginx/proxy \</span><br><span class="line">--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \</span><br><span class="line">--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \</span><br><span class="line">--http-scgi-temp-path=/var/temp/nginx/scgi./configure \</span><br><span class="line">--prefix=/usr/local/nginx \</span><br><span class="line">--conf-path=/usr/local/nginx/conf/nginx.conf \</span><br><span class="line">--pid-path=/usr/local/nginx/conf/nginx.pid \</span><br><span class="line">--lock-path=/var/lock/nginx.lock \</span><br><span class="line">--error-log-path=/var/log/nginx/error.log \</span><br><span class="line">--http-log-path=/var/log/nginx/access.log \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">--http-client-body-temp-path=/var/temp/nginx/client \</span><br><span class="line">--http-proxy-temp-path=/var/temp/nginx/proxy \</span><br><span class="line">--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \</span><br><span class="line">--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \</span><br><span class="line">--http-scgi-temp-path=/var/temp/nginx/scgi</span><br></pre></td></tr></table></figure>

<p><em>注：将临时文件目录指定为：&#x2F;var&#x2F;temp&#x2F;nginx，需要在 &#x2F;var 下创建 temp 及 nginx 目录</em></p>
<h4 id="1-2-3-3-编译并安装-Nginx"><a href="#1-2-3-3-编译并安装-Nginx" class="headerlink" title="1.2.3.3 编译并安装 Nginx"></a>1.2.3.3 编译并安装 Nginx</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make install</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span></span><br><span class="line">make &amp;&amp; make installmake install</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<p>make ：编译，它从 Makefile 中读取指令，然后编译。</p>
<p>make install ：安装，它从 Makefile 中读取指令，安装到指定的位置。</p>
<h4 id="1-2-3-4-查看安装路径"><a href="#1-2-3-4-查看安装路径" class="headerlink" title="1.2.3.4 查看安装路径"></a>1.2.3.4 查看安装路径</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">whereis nginx</span><br></pre></td></tr></table></figure>

<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1564474774892.png" alt="1564474774892"></p>
<h4 id="1-2-3-5-安装目录文件分析"><a href="#1-2-3-5-安装目录文件分析" class="headerlink" title="1.2.3.5 安装目录文件分析"></a>1.2.3.5 安装目录文件分析</h4><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1565089768083.png" alt="1565089768083"></p>
<ul>
<li>conf：配置文件</li>
<li>html：网页文件</li>
<li>logs：日志文件</li>
<li>sbin：主要二进制程序</li>
</ul>
<h2 id="2-4-启动、停止-Nginx"><a href="#2-4-启动、停止-Nginx" class="headerlink" title="2.4 启动、停止 Nginx"></a>2.4 启动、停止 Nginx</h2><p>进入 Nginx 安装目录（并不是 Nginx 的解压目录），执行命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./sbin/nginx # 启动</span><br><span class="line">./nginx # 启动</span><br><span class="line">./nginx -s stop # 停止（此方式相当于先查出nginx进程id再使用kill命令强制杀掉进程）</span><br><span class="line">./nginx -s quit # 停止（此方式停止步骤是待nginx进程处理任务完毕进行停止）</span><br><span class="line">./nginx -s reload # 在提供服务的时候，重新刷新配置文件</span><br><span class="line">kill -INT 5531 # 其中5531就是nginx的主进程号，这种方法叫做nginx信号控制</span><br><span class="line">kill -HUP 5531 # 软重启</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">其实在nginx启动后，会在logs下有一个nginx.pid文件用于记录主进程号</span></span><br><span class="line">kill -INT &#x27;cat logs/nginx.pid&#x27;</span><br><span class="line">kill -HUP &#x27;cat logs/nginx.pid&#x27;./sbin/nginx # 启动</span><br><span class="line">./nginx # 启动</span><br><span class="line">./nginx -s stop # 停止（此方式相当于先查出nginx进程id再使用kill命令强制杀掉进程）</span><br><span class="line">./nginx -s quit # 停止（此方式停止步骤是待nginx进程处理任务完毕进行停止）</span><br><span class="line">./nginx -s reload # 在提供服务的时候，重新刷新配置文件</span><br><span class="line">kill -INT 5531 # 其中5531就是nginx的主进程号，这种方法叫做nginx信号控制</span><br><span class="line">kill -HUP 5531 # 软重启</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">其实在nginx启动后，会在logs下有一个nginx.pid文件用于记录主进程号</span></span><br><span class="line">kill -INT &#x27;cat logs/nginx.pid&#x27;</span><br><span class="line">kill -HUP &#x27;cat logs/nginx.pid&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-1-Nginx-信号控制"><a href="#2-4-1-Nginx-信号控制" class="headerlink" title="2.4.1 Nginx 信号控制"></a>2.4.1 Nginx 信号控制</h3><table>
<thead>
<tr>
<th>信号</th>
<th>信号说明</th>
</tr>
</thead>
<tbody><tr>
<td>TERM, INT</td>
<td>Quick shutdown</td>
</tr>
<tr>
<td>QUIT</td>
<td>Graceful shutdown 优雅地关闭线程，即等请求结束后再关闭</td>
</tr>
<tr>
<td>KILL</td>
<td>Halts a stubborn process 停止一个顽固的过程</td>
</tr>
<tr>
<td>HUP</td>
<td>Configuration reload 配置重新加载 Start the new worker processes with a new configuration 使用新配置启动新的工作进程 Gracefully shutdown the old worker processes 优雅地关闭旧的工作进程，即工作中的暂时不变，先变工作中的进程 该命令也称为：软重启</td>
</tr>
<tr>
<td>USR1</td>
<td>Reopen the log files 重新打开日志文件 重读日志，在日志按月&#x2F;日分割时有用 例如我需要每天一个日志文件，但nginx认的并不是文件名，而是内存节点 就算重命名或新建名称一致的文件，还是一直往旧日志文件上写，这时就用USER1</td>
</tr>
<tr>
<td>USR2</td>
<td>Upgrade Executable on the fly 动态升级可执行文件（平滑地升级）</td>
</tr>
<tr>
<td>WINCH</td>
<td>Gracefully shutdown the worker processes 正常关闭工作进程（配合USER2来进行升级）</td>
</tr>
</tbody></table>
<h3 id="2-4-2-查看-Nginx-配置是否有误"><a href="#2-4-2-查看-Nginx-配置是否有误" class="headerlink" title="2.4.2 查看 Nginx 配置是否有误"></a>2.4.2 查看 Nginx 配置是否有误</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./sbin/nginx -t./sbin/nginx -t</span><br></pre></td></tr></table></figure>

<h3 id="2-4-3-查看-Nginx-是否启动成功"><a href="#2-4-3-查看-Nginx-是否启动成功" class="headerlink" title="2.4.3 查看 Nginx 是否启动成功"></a>2.4.3 查看 Nginx 是否启动成功</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps aux|grep nginx</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">这里能够看到，nginx分为两个进程：主进程-子进程，子进程负责工作，主进程负责管控子进程</span></span><br></pre></td></tr></table></figure>

<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1564475996668.png" alt="1564475996668"></p>
<p>或者</p>
<p>看能不能访问 Nginx 欢迎首页</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1564479236790.png" alt="1564479236790"></p>
<p>同时，也可以在外部局域网内使用浏览器进行访问欢迎页面</p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1564479385795.png" alt="1564479385795"></p>
<p><em>PS：如果 curl 访问成功了，但在外部访问失败，则应该是 Linux 防火墙对端口进行了拦截</em></p>
<h2 id="2-5-修改-Nginx-端口号"><a href="#2-5-修改-Nginx-端口号" class="headerlink" title="2.5 修改 Nginx 端口号"></a>2.5 修改 Nginx 端口号</h2><p>Nginx 的默认端口号为：80</p>
<h3 id="2-5-1-进入配置文件文件夹"><a href="#2-5-1-进入配置文件文件夹" class="headerlink" title="2.5.1 进入配置文件文件夹"></a>2.5.1 进入配置文件文件夹</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/nginx/confcd /usr/local/nginx/conf</span><br></pre></td></tr></table></figure>

<p><em>注：这里是usr下的安装路径，不是我们解压的安装包路径</em></p>
<h3 id="2-5-2-备份配置文件（可略）"><a href="#2-5-2-备份配置文件（可略）" class="headerlink" title="2.5.2 备份配置文件（可略）"></a>2.5.2 备份配置文件（可略）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp nginx.conf nginx.conf.backcp nginx.conf nginx.conf.back</span><br></pre></td></tr></table></figure>

<h3 id="2-5-3-编辑-nginx-conf-配置文件"><a href="#2-5-3-编辑-nginx-conf-配置文件" class="headerlink" title="2.5.3 编辑 nginx.conf 配置文件"></a>2.5.3 编辑 nginx.conf 配置文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi nginx.conf</span><br></pre></td></tr></table></figure>

<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1564475593864.png" alt="1564475593864"></p>
<p>将端口号修改为 81（自定）；Esc + :wq（保存并退出）</p>
<p>记住需要重新启动（推荐）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./nginx -s quit</span><br><span class="line">./nginx./nginx -s quit</span><br><span class="line">./nginx</span><br></pre></td></tr></table></figure>

<p>或者</p>
<p>重新刷新配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./nginx -s reload./nginx -s reload</span><br></pre></td></tr></table></figure>

<h2 id="2-6-设置-Nginx-开机自启动"><a href="#2-6-设置-Nginx-开机自启动" class="headerlink" title="2.6 设置 Nginx 开机自启动"></a>2.6 设置 Nginx 开机自启动</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/rc.localvi /etc/rc.local</span><br></pre></td></tr></table></figure>

<h3 id="2-6-1-添加语句"><a href="#2-6-1-添加语句" class="headerlink" title="2.6.1 添加语句"></a>2.6.1 添加语句</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure>

<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1564476563993.png" alt="1564476563993"></p>
<h3 id="2-6-2-设置权限"><a href="#2-6-2-设置权限" class="headerlink" title="2.6.2 设置权限"></a>2.6.2 设置权限</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod 755 /etc/rc.local</span><br></pre></td></tr></table></figure>

<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx配置</title>
    <url>/blog/ad720447.html</url>
    <content><![CDATA[<blockquote>
<p>摘录自博客：</p>
<p><a href="https://www.cnblogs.com/jingmoxukong/p/5945200.html">Nginx 简易教程</a></p>
<p><a href="https://www.jianshu.com/p/bed000e1830b">WEB请求处理二：Nginx请求反向代理</a></p>
</blockquote>
<h1 id="一、预热"><a href="#一、预热" class="headerlink" title="一、预热"></a>一、预热</h1><h2 id="1-1-反向代理是什么？"><a href="#1-1-反向代理是什么？" class="headerlink" title="1.1 反向代理是什么？"></a>1.1 反向代理是什么？</h2><p>反向代理（Reverse Proxy）是指以代理服务器来接受 internet 上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给 internet 上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。</p>
<h2 id="1-2-正向代理是什么？"><a href="#1-2-正向代理是什么？" class="headerlink" title="1.2 正向代理是什么？"></a>1.2 正向代理是什么？</h2><p>正向代理（Forward Proxy）又称转发代理，是一个位于客户端和原始服务器（origin server）之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标（原始服务器），然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端必须要进行一些特别的设置才能使用正向代理。</p>
<p><strong>客户端必须设置正向代理服务器，当然前提是要知道正向代理服务器的IP地址，还有代理程序的端口。</strong></p>
<h2 id="1-3-正向代理和反向代理区别"><a href="#1-3-正向代理和反向代理区别" class="headerlink" title="1.3 正向代理和反向代理区别"></a>1.3 正向代理和反向代理区别</h2><ul>
<li>正向代理：客户端 &lt;一&gt; 代理 一&gt;服务端</li>
<li>反向代理：客户端 一&gt; 代理 &lt;一&gt;服务端</li>
</ul>
<h1 id="二、http-反向代理配置"><a href="#二、http-反向代理配置" class="headerlink" title="二、http 反向代理配置"></a>二、http 反向代理配置</h1><h2 id="2-1-解析域名反向代理到-webapp"><a href="#2-1-解析域名反向代理到-webapp" class="headerlink" title="2.1 解析域名反向代理到 webapp"></a>2.1 解析域名反向代理到 webapp</h2><h3 id="2-1-1-配置-nginx-conf"><a href="#2-1-1-配置-nginx-conf" class="headerlink" title="2.1.1 配置 nginx.conf"></a>2.1.1 配置 nginx.conf</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/nginx //进入nginx安装目录</span><br><span class="line">cd conf //进入conf目录</span><br><span class="line">mkdir vhost //创建vhost文件夹</span><br><span class="line">vim nginx.conf //修改nginx的配置文件cd /usr/local/nginx //进入nginx安装目录</span><br><span class="line">cd conf //进入conf目录</span><br><span class="line">mkdir vhost //创建vhost文件夹</span><br><span class="line">vim nginx.conf //修改nginx的配置文件</span><br></pre></td></tr></table></figure>

<p>在配置文件中添加该语句：include vhost&#x2F;*.conf；（不能漏分号）</p>
<blockquote>
<p>这语句的意思是把 vhost 文件夹下的所有 .conf 文件加载过来（注意是 .conf 后缀名的文件），这么做的原因是方便以后维护，把每个域名做成一个 .conf 文件，通过主配置 include 进来，这样以后想维护某个域名，就只需直接对那个对应的 .conf 进行操作，而不会影响到其它的域名，且文件不会过于臃肿。这跟 Spring 的配置文件类似，Spring 配置文件通过把负责各个模块功能的文件 include 进去，从而避免配置文件过于复杂臃肿。</p>
</blockquote>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1564556248956.png" alt="1564556248956"></p>
<h3 id="2-1-2-添加一些域名来测试"><a href="#2-1-2-添加一些域名来测试" class="headerlink" title="2.1.2 添加一些域名来测试"></a>2.1.2 添加一些域名来测试</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/hosts //编辑hosts文件</span><br></pre></td></tr></table></figure>

<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1564557183237.png" alt="1564557183237"></p>
<p>IP 地址为本机 IP，后面的域名按需修改</p>
<h3 id="2-1-3-创建-conf-文件"><a href="#2-1-3-创建-conf-文件" class="headerlink" title="2.1.3 创建 .conf 文件"></a>2.1.3 创建 .conf 文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd vhost //进入vhost文件夹，刚才在上文已经创建了的，里面没有内容，现在要添加内容</span><br><span class="line">vim www.taobao.com.conf //创建该文件并添加内容</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    autoindex on;</span><br><span class="line">    server_name www.taobao.com;</span><br><span class="line">    access_log /usr/local/nginx/logs/access.log combined;</span><br><span class="line">    index index.html index.htm index.jsp index.php;</span><br><span class="line">    <span class="comment">#error_page 404 /404.html;</span></span><br><span class="line">    <span class="keyword">if</span> ( <span class="variable">$query_string</span> ~* <span class="string">&quot;.*[\;&#x27;\&lt;\&gt;].*&quot;</span> )&#123;</span><br><span class="line">    	<span class="built_in">return</span> 404;</span><br><span class="line">    &#125;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:9999;</span><br><span class="line">        add_header Access-Control-Allow-Origin *;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1564557524022.png" alt="1564557524022"></p>
<p><em>其功能是当本机访问</em> <code>www.taobao.com</code> <em>域名时，将跳转到本地的 9999 端口的程序上，即 tomcat 欢迎页面</em></p>
<h3 id="2-1-4-刷新-Nginx-服务器配置"><a href="#2-1-4-刷新-Nginx-服务器配置" class="headerlink" title="2.1.4 刷新 Nginx 服务器配置"></a>2.1.4 刷新 Nginx 服务器配置</h3><p>esc + :wq 保存并退出</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">../../sbin/nginx -s reload../../sbin/nginx -s reload</span><br></pre></td></tr></table></figure>

<p>如果配置刷新失败，可以重启 Nginx</p>
<h3 id="2-1-5-测试效果"><a href="#2-1-5-测试效果" class="headerlink" title="2.1.5 测试效果"></a>2.1.5 测试效果</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl www.taobao.com</span><br></pre></td></tr></table></figure>

<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1564558238760.png" alt="1564558238760"></p>
<p>反向代理成功！</p>
<h2 id="2-2-解析域名反向代理到本地文件"><a href="#2-2-解析域名反向代理到本地文件" class="headerlink" title="2.2 解析域名反向代理到本地文件"></a>2.2 解析域名反向代理到本地文件</h2><h3 id="2-2-1-hosts-添加域名"><a href="#2-2-1-hosts-添加域名" class="headerlink" title="2.2.1 hosts 添加域名"></a>2.2.1 hosts 添加域名</h3><h3 id="2-2-2-创建-conf-文件"><a href="#2-2-2-创建-conf-文件" class="headerlink" title="2.2.2 创建 .conf 文件"></a>2.2.2 创建 .conf 文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim image.baidu.com.conf //创建该文件并编辑</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    autoindex off;</span><br><span class="line">    server_name image.baidu.com;</span><br><span class="line">    access_log /usr/local/nginx/logs/access.log combined;</span><br><span class="line">    index index.html index.htm index.jsp index.php;</span><br><span class="line">    <span class="comment">#error_page 404 /404.html;</span></span><br><span class="line">    <span class="keyword">if</span> ( <span class="variable">$query_string</span> ~* <span class="string">&quot;.*[\;&#x27;\&lt;\&gt;].*&quot;</span> )&#123;</span><br><span class="line">    	<span class="built_in">return</span> 404;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ /(mmall_fe|mmall_admin_fe)/dist/view/* &#123;</span><br><span class="line">    deny all;</span><br><span class="line">    &#125;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root /ftpfile/;</span><br><span class="line">        add_header Access-Control-Allow-Origin *;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1564560275807.png" alt="1564560275807"></p>
<p>功能是当用户输入 <code>image.baidu.com</code> 的时候，转发到本地的 <code>/ftpfile/</code> 文件。</p>
<h3 id="2-2-3-刷新-Nginx-服务器配置"><a href="#2-2-3-刷新-Nginx-服务器配置" class="headerlink" title="2.2.3 刷新 Nginx 服务器配置"></a>2.2.3 刷新 Nginx 服务器配置</h3><h3 id="2-2-4-测试效果（略）"><a href="#2-2-4-测试效果（略）" class="headerlink" title="2.2.4 测试效果（略）"></a>2.2.4 测试效果（略）</h3><h1 id="三、负载均衡配置"><a href="#三、负载均衡配置" class="headerlink" title="三、负载均衡配置"></a>三、负载均衡配置</h1><p>负载均衡是干嘛的？举个例子：我们的小网站，刚开始就一台 nginx 服务器，后来，随着业务量增大，用户增多，一台服务器已经不够用了，我们就又多加了几台服务器。那么这几台服务器如何调度？如何均匀的提供访问？这就是负载均衡。</p>
<p><strong>负载均衡的目的是为了解决单个节点压力过大，造成 Web 服务响应过慢，甚至严重的情况下导致服务瘫痪，无法正常提供服务。其好处是可以集群多台机器一起工作，并且对外的 IP 和域名是一样的，外界看起来就好像一台机器一样。</strong></p>
<h2 id="3-1-基于-weight-权重的负载"><a href="#3-1-基于-weight-权重的负载" class="headerlink" title="3.1 基于 weight 权重的负载"></a>3.1 基于 weight 权重的负载</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ... 省略其它配置</span></span><br><span class="line"></span><br><span class="line">    upstream webservers&#123;</span><br><span class="line">        server 192.168.33.11 weight=10;</span><br><span class="line">        server 192.168.33.12 weight=10;</span><br><span class="line">        server 192.168.33.13 weight=10;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://tomcats;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ... 省略其它配置</span></span><br><span class="line">&#125;http &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ... 省略其它配置</span></span><br><span class="line"></span><br><span class="line">    upstream webservers&#123;</span><br><span class="line">        server 192.168.33.11 weight=10;</span><br><span class="line">        server 192.168.33.12 weight=10;</span><br><span class="line">        server 192.168.33.13 weight=10;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://tomcats;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ... 省略其它配置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参数：<code>max_fails</code>和<code>fail_timeout</code></p>
<ul>
<li>max_fails：允许请求失败的次数，默认为 1。当超过最大次数时，返回 proxy_next_upstream 模块定义的错误。</li>
<li>fail_timeout：在经历了 max_fails 次失败后，暂停服务的时间。max_fails 可以和 fail_timeout 一起使用，进行健康状态检查。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upstream webservers&#123;</span><br><span class="line">    server 192.168.33.11 weight=10 max_fails=2 fail_timeout=30s;</span><br><span class="line">    server 192.168.33.12 weight=10 max_fails=2 fail_timeout=30s;</span><br><span class="line">    server 192.168.33.13 weight=10 max_fails=2 fail_timeout=30s;</span><br><span class="line">&#125;upstream webservers&#123;</span><br><span class="line">    server 192.168.33.11 weight=10 max_fails=2 fail_timeout=30s;</span><br><span class="line">    server 192.168.33.12 weight=10 max_fails=2 fail_timeout=30s;</span><br><span class="line">    server 192.168.33.13 weight=10 max_fails=2 fail_timeout=30s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参数：<code>down</code>和<code>backup</code></p>
<ul>
<li>down：表示这台机器暂时不参与负载均衡。相当于注释掉了。</li>
<li>backup：表示这台机器是备用机器，是其他的机器不能用的时候，这台机器才会被使用，俗称备胎。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upstream webservers&#123;</span><br><span class="line">    server 192.168.33.11 down;</span><br><span class="line">    server 192.168.33.12 weight=10 max_fails=2 fail_timeout=30s;</span><br><span class="line">    server 192.168.33.13 backup;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/150410643.png" alt="150410643"></p>
<h2 id="3-2-基于-ip-hash-的负载"><a href="#3-2-基于-ip-hash-的负载" class="headerlink" title="3.2 基于 ip_hash 的负载"></a>3.2 基于 ip_hash 的负载</h2><p>这种分配方式，<strong>每个请求按访问 IP 的 hash 结果分配</strong>，这样来自同一个 IP 的访客固定访问一个后端服务器，有效解决了动态网页存在的 session 共享问题。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upstream webservers&#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    server 192.168.33.11 weight=1 max_fails=2 fail_timeout=30s;</span><br><span class="line">    server 192.168.33.12 weight=1 max_fails=2 fail_timeout=30s;</span><br><span class="line">    server 192.168.33.13 down;</span><br><span class="line">&#125;upstream webservers&#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    server 192.168.33.11 weight=1 max_fails=2 fail_timeout=30s;</span><br><span class="line">    server 192.168.33.12 weight=1 max_fails=2 fail_timeout=30s;</span><br><span class="line">    server 192.168.33.13 down;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ip_hash 模式下，最好不要设置 weight 参数</strong>，因为你设置了，就相当于手动设置了，将会导致很多的流量分配不均匀。</p>
<p><strong>ip_hash 模式下，backup 参数不可用</strong>，加了会报错，为啥呢？因为，本身我们的访问就是固定的了，其实，备用已经不管什么作用了。</p>
<h1 id="四、网站有多个-webapp-配置"><a href="#四、网站有多个-webapp-配置" class="headerlink" title="四、网站有多个 webapp 配置"></a>四、网站有多个 webapp 配置</h1><h1 id="五、https-反向代理配置"><a href="#五、https-反向代理配置" class="headerlink" title="五、https 反向代理配置"></a>五、https 反向代理配置</h1><h1 id="六、静态站点配置"><a href="#六、静态站点配置" class="headerlink" title="六、静态站点配置"></a>六、静态站点配置</h1><h1 id="七、搭建文件服务器"><a href="#七、搭建文件服务器" class="headerlink" title="七、搭建文件服务器"></a>七、搭建文件服务器</h1><h1 id="八、跨域解决方案"><a href="#八、跨域解决方案" class="headerlink" title="八、跨域解决方案"></a>八、跨域解决方案</h1><h2 id="8-1-Nginx-反向代理解决跨域"><a href="#8-1-Nginx-反向代理解决跨域" class="headerlink" title="8.1 Nginx 反向代理解决跨域"></a>8.1 Nginx 反向代理解决跨域</h2><h3 id="8-1-1-Nginx-处理跨域原理"><a href="#8-1-1-Nginx-处理跨域原理" class="headerlink" title="8.1.1 Nginx 处理跨域原理"></a>8.1.1 Nginx 处理跨域原理</h3><p>a 网站向 b 网站请求 1.js 文件时，向 b 网站发送一个获取的请求，nginx 根据配置文件接收这个请求，代替 a 网站向 b 网站来请求这个资源，nginx 拿到这个资源后再返回给 a 网站，以此来解决了跨域问题。</p>
<h3 id="8-1-2-具体操作"><a href="#8-1-2-具体操作" class="headerlink" title="8.1.2 具体操作"></a>8.1.2 具体操作</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/nginx //进入nginx安装\目录</span><br><span class="line">cd conf //进入conf目录</span><br><span class="line">vim nginx.conf //修改nginx的配置文件</span><br></pre></td></tr></table></figure>

<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1564649559457.png" alt="1564649559457"></p>
<p>其中 server 代表启动的一个服务，location 是一个定位规则。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 所有以/开头的地址，表示是所有请求</span></span><br><span class="line">location / &#123;</span><br><span class="line">	<span class="comment"># 去请求../html文件夹里的文件,其中..的路径在nginx里面有定义，安装的时候会有默认路径</span></span><br><span class="line">    root   html;</span><br><span class="line">    <span class="comment"># 首页响应地址 </span></span><br><span class="line">    index  index.html index.htm;</span><br><span class="line">&#125;<span class="comment"># 所有以/开头的地址，表示是所有请求</span></span><br><span class="line">location / &#123;</span><br><span class="line">	<span class="comment"># 去请求../html文件夹里的文件,其中..的路径在nginx里面有定义，安装的时候会有默认路径</span></span><br><span class="line">    root   html;</span><br><span class="line">    <span class="comment"># 首页响应地址 </span></span><br><span class="line">    index  index.html index.htm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由此可知，location 是 nginx 用来路由的入口，所以接下来要在 location 里面完成反向代理的配置。</p>
<p>现在假设是 <code>www.a.com/html/msg.html</code> 想请求 <code>www.b.com/api/?method=1&amp;para=2</code>；</p>
<p>ajax：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="string">&#x27;http://www.b.com/api/msg?method=1&amp;para=2&#x27;</span>;</span><br><span class="line">$.ajax (&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">    <span class="attr">url</span>: url,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>)&#123;..&#125;,</span><br><span class="line">    ....</span><br><span class="line">&#125;)<span class="keyword">var</span> url = <span class="string">&#x27;http://www.b.com/api/msg?method=1&amp;para=2&#x27;</span>;</span><br><span class="line">$.ajax (&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">    <span class="attr">url</span>: url,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>)&#123;..&#125;,</span><br><span class="line">    ....</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>这时会出现跨域的问题，所以修改一下请求的 url，让请求发在 nginx 的一个 url 下。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="string">&#x27;http://www.b.com/api/msg?method=1&amp;para=2&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> proxyurl = <span class="string">&#x27;msg?method=1&amp;para=2&#x27;</span>;</span><br><span class="line"><span class="comment">// 假如实际地址是：www.c.com/proxy/html/api/msg?method=1&amp;para=2;其中www.c.com是nginx主机地址</span></span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">    <span class="attr">url</span>: proxyurl,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>)&#123;..&#125;,</span><br><span class="line">    ....</span><br><span class="line">&#125;)<span class="keyword">var</span> url = <span class="string">&#x27;http://www.b.com/api/msg?method=1&amp;para=2&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> proxyurl = <span class="string">&#x27;msg?method=1&amp;para=2&#x27;</span>;</span><br><span class="line"><span class="comment">// 假如实际地址是：www.c.com/proxy/html/api/msg?method=1&amp;para=2;其中www.c.com是nginx主机地址</span></span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">    <span class="attr">url</span>: proxyurl,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>)&#123;..&#125;,</span><br><span class="line">    ....</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>再在刚才的路径中匹配到这个请求，我们在 location 下面再添加一个 location。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># &#x27;^~/proxy/html/&#x27;是一个匹配规则，用于拦截请求，匹配任何以 /proxy/html/开头的地址，匹配符合以后，停止往下搜索正则</span></span><br><span class="line">location ^~/proxy/html/&#123;</span><br><span class="line">	<span class="comment"># 代表重写拦截进来的请求，并且只能对域名后边的除去传递的参数外的字符串起作用。例如www.c.com/proxy/html/api/msg?method=1&amp;para=2中只对/proxy/html/api/msg重写</span></span><br><span class="line">	<span class="comment"># rewrite后面的参数是一个简单的正则：^/proxy/html/(.*)$，$1代表正则中的第一个()，$2代表第二个()的值,以此类推</span></span><br><span class="line">	<span class="comment"># break代表匹配一个之后停止匹配</span></span><br><span class="line">    rewrite ^/proxy/html/(.*)$ /<span class="variable">$1</span> <span class="built_in">break</span>;</span><br><span class="line">    <span class="comment"># proxy_pass表示把请求代理到其他主机</span></span><br><span class="line">    proxy_pass http://www.b.com/;</span><br><span class="line">&#125;<span class="comment"># &#x27;^~/proxy/html/&#x27;是一个匹配规则，用于拦截请求，匹配任何以 /proxy/html/开头的地址，匹配符合以后，停止往下搜索正则</span></span><br><span class="line">location ^~/proxy/html/&#123;</span><br><span class="line">	<span class="comment"># 代表重写拦截进来的请求，并且只能对域名后边的除去传递的参数外的字符串起作用。例如www.c.com/proxy/html/api/msg?method=1&amp;para=2中只对/proxy/html/api/msg重写</span></span><br><span class="line">	<span class="comment"># rewrite后面的参数是一个简单的正则：^/proxy/html/(.*)$，$1代表正则中的第一个()，$2代表第二个()的值,以此类推</span></span><br><span class="line">	<span class="comment"># break代表匹配一个之后停止匹配</span></span><br><span class="line">    rewrite ^/proxy/html/(.*)$ /<span class="variable">$1</span> <span class="built_in">break</span>;</span><br><span class="line">    <span class="comment"># proxy_pass表示把请求代理到其他主机</span></span><br><span class="line">    proxy_pass http://www.b.com/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8-2-Nginx-配置-CORS-实现指定子域名跨域"><a href="#8-2-Nginx-配置-CORS-实现指定子域名跨域" class="headerlink" title="8.2 Nginx 配置 CORS 实现指定子域名跨域"></a>8.2 Nginx 配置 CORS 实现指定子域名跨域</h2><h3 id="8-2-1-什么是-CORS"><a href="#8-2-1-什么是-CORS" class="headerlink" title="8.2.1 什么是 CORS"></a>8.2.1 什么是 CORS</h3><p>CORS 是一个 W3C 标准，全称是跨域资源共享（Cross-Origin Resource Sharing）。它允许浏览器向跨源服务器，发出 XMLHttpRequest 请求，从而克服了 AJAX 请求只能同源使用的限制。</p>
<p>当前几乎所有的浏览器（Internet Explorer 8+，Firefox 3.5+，Safari 4+ 和 Chrome 3+）都可通过名为跨域资源共享（Cross-Origin Resource Sharing）的协议支持 AJAX 跨域调用。</p>
<p>Chrome，Firefox，Opera，Safari 都使用的是 XMLHttpRequest2 对象，IE 使用 XDomainRequest。</p>
<p>简单来说就是跨域的目标服务器要返回一系列的 Headers，通过这些 Headers 来控制是否同意跨域。跨域资源共享（CORS）也是未来的跨域问题的标准解决方案。</p>
<p>CORS 提供如下 Headers，Request 包和 Response 包中都有一部分。</p>
<h4 id="HTTP-Response-Header"><a href="#HTTP-Response-Header" class="headerlink" title="HTTP Response Header"></a>HTTP Response Header</h4><ul>
<li>Access-Control-Allow-Origin</li>
<li>Access-Control-Allow-Credentials</li>
<li>Access-Control-Allow-Methods</li>
<li>Access-Control-Allow-Headers</li>
<li>Access-Control-Expose-Headers</li>
<li>Access-Control-Max-Age</li>
</ul>
<h4 id="HTTP-Request-Header"><a href="#HTTP-Request-Header" class="headerlink" title="HTTP Request Header"></a>HTTP Request Header</h4><ul>
<li>Access-Control-Request-Method</li>
<li>Access-Control-Request-Headers</li>
</ul>
<p>其中最敏感的就是 Access-Control-Allow-Origin 这个 Header，它是 W3C 标准里用来检查该跨域请求是否可以被通过（Access Control Check）。如果需要跨域，解决方法就是在资源的头中加入 Access-Control-Allow-Origin 指定你授权的域。</p>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>ONE DAY-The ROOTLESS</title>
    <url>/blog/29bc4ab0.html</url>
    <content><![CDATA[<h1 id="ONE-DAY-The-ROOTLESS"><a href="#ONE-DAY-The-ROOTLESS" class="headerlink" title="ONE DAY - The ROOTLESS"></a>ONE DAY - The ROOTLESS</h1><p><ruby><rt></rt>雨<rp>（</rp><rt>あめ</rt><rp>）</rp><rt></rt>上<rp>（</rp><rt>あ</rt><rp>）</rp></ruby>がりの<ruby><rt></rt>空<rp>（</rp><rt>そら</rt><rp>）</rp></ruby>を<ruby><rt></rt>仰<rp>（</rp><rt>あお</rt><rp>）</rp></ruby>ぐ<ruby><rt></rt>度<rp>（</rp><rt>たび</rt><rp>）</rp></ruby><br>每当仰望雨后的天空</p>
<p><ruby><rt></rt>泣<rp>（</rp><rt>な</rt><rp>）</rp></ruby>き<ruby><rt></rt>虫<rp>（</rp><rt>むし</rt><rp>）</rp></ruby>だった<ruby><rt></rt>頃<rp>（</rp><rt>ころ</rt><rp>）</rp></ruby>の<ruby><rt></rt>僕<rp>（</rp><rt>ぼく</rt><rp>）</rp></ruby>を<ruby><rt></rt>想<rp>（</rp><rt>おも</rt><rp>）</rp></ruby>う<br>就会浮现出那个爱哭的自己</p>
<p><ruby><rt></rt>誰<rp>（</rp><rt>たれ</rt><rp>）</rp></ruby>かの<ruby><rt></rt>背<rp>（</rp><rt>せ</rt><rp>）</rp><rt></rt>中<rp>（</rp><rt>なが</rt><rp>）</rp></ruby>を<br>某人的背影</p>
<p>がむしゃらに<ruby><rt></rt>追<rp>（</rp><rt>お</rt><rp>）</rp></ruby>いかけた<br>曾经疯狂地追赶着某个人</p>
<p>「<ruby><rt></rt>強<rp>（</rp><rt>つよ</rt><rp>）</rp></ruby>くなりたい」って<br>曾经希望能变得更强大</p>
<p><ruby><rt></rt>今<rp>（</rp><rt>いま</rt><rp>）</rp></ruby>は<ruby><rt></rt>風<rp>（</rp><rt>かぜ</rt><rp>）</rp></ruby>に<ruby><rt></rt>消<rp>（</rp><rt>き</rt><rp>）</rp></ruby>えた「ありがとう」<br>现在消失在风中的那声谢谢你</p>
<p><ruby><rt></rt>僕<rp>（</rp><rt>ぼく</rt><rp>）</rp></ruby>は<ruby><rt></rt>強<rp>（</rp><rt>つよ</rt><rp>）</rp></ruby>くなれているのかな?<br>我到底成长了没有呢</p>
<p><ruby><rt></rt>答<rp>（</rp><rt>こた</rt><rp>）</rp></ruby>えはまだ<ruby><rt></rt>出<rp>（</rp><rt>で</rt><rp>）</rp></ruby>そうにないからさ<br>这个问题还没有确切的答案</p>
<p>やっぱりまだ<br>还需要继续</p>
<p><ruby><rt></rt>歩<rp>（</rp><rt>ある</rt><rp>）</rp></ruby>いていくよ<br>努力向前</p>
<p>さあ<ruby><rt></rt>行<rp>（</rp><rt>ゆ</rt><rp>）</rp></ruby>こう<br>出发吧</p>
<p><ruby><rt></rt>立<rp>（</rp><rt>た</rt><rp>）</rp></ruby>ち<ruby><rt></rt>止<rp>（</rp><rt>ど</rt><rp>）</rp></ruby>まることなく<br>永不停息</p>
<p><ruby><rt></rt>流<rp>（</rp><rt>なが</rt><rp>）</rp></ruby>れる<ruby><rt></rt>時<rp>（</rp><rt>とき</rt><rp>）</rp></ruby>に<ruby><rt></rt>負<rp>（</rp><rt>ま</rt><rp>）</rp></ruby>けないように<br>为了不输给时代的浪潮</p>
<p><ruby><rt></rt>何度<rp>（</rp><rt>なんど</rt><rp>）</rp></ruby>も<ruby><rt></rt>立<rp>（</rp><rt>た</rt><rp>）</rp></ruby>ち<ruby><rt></rt>向<rp>（</rp><rt>む</rt><rp>）</rp></ruby>かい<ruby><rt></rt>続<rp>（</rp><rt>つづ</rt><rp>）</rp></ruby>けよう<br>一次又一次奋勇向前</p>
<p><ruby><rt></rt>大<rp>（</rp><rt>たい</rt><rp>）</rp><rt></rt>切<rp>（</rp><rt>せつ</rt><rp>）</rp></ruby>なもの<ruby><rt></rt>失<rp>（</rp><rt>うしな</rt><rp>）</rp></ruby> いたくないから<br>不想再失去重要的人</p>
<p><ruby><rt></rt>夕暮<rp>（</rp><rt>ゆうぐ</rt><rp>）</rp></ruby>れに<ruby><rt></rt>舞<rp>（</rp><rt>ま</rt><rp>）</rp></ruby>う<ruby><rt></rt>鳥<rp>（</rp><rt></rt><rp>）</rp></ruby>の<ruby><rt></rt>様<rp>（</rp><rt>よう</rt><rp>）</rp></ruby>に<br>宛如夕阳下起舞的鸟儿</p>
<p><ruby><rt></rt>見<rp>（</rp><rt>み</rt><rp>）</rp></ruby>えない<ruby><rt></rt>明日<rp>（</rp><rt>あす</rt><rp>）</rp></ruby>を<ruby><rt></rt>探<rp>（</rp><rt>さが</rt><rp>）</rp></ruby>してる<br>奋力追寻着未知的明日</p>
<p><ruby><rt></rt>躓<rp>（</rp><rt>つまず</rt><rp>）</rp></ruby>きながら <ruby><rt></rt>怖<rp>（</rp><rt>こわ</rt><rp>）</rp></ruby>くても<br>纵使害怕受到挫折</p>
<p><ruby><rt></rt>足元<rp>（</rp><rt>あしもと</rt><rp>）</rp></ruby>に<ruby><rt></rt>目<rp>（</rp><rt>め</rt><rp>）</rp></ruby>は<ruby><rt></rt>落<rp>（</rp><rt>お</rt><rp>）</rp></ruby>と  さないよ<br>也绝不付下视线  勇敢面对</p>
<p><ruby><rt></rt>諦<rp>（</rp><rt>あきら</rt><rp>）</rp></ruby>める<ruby><rt></rt>言葉<rp>（</rp><rt>ことば</rt><rp>）</rp></ruby>は<br>虽然泄气的话</p>
<p><ruby><rt></rt>転<rp>（</rp><rt>こ</rt><rp>）</rp></ruby>がってるけど<br>满口尽是</p>
<p><ruby><rt></rt>諦<rp>（</rp><rt>あきら</rt><rp>）</rp></ruby>めないゴールは<ruby><rt></rt>一<rp>（</rp><rt>ひと</rt><rp>）</rp></ruby>つだけ<br>然而不愿放弃的目标唯有一个</p>
<p><ruby><rt></rt>喜<rp>（</rp><rt>よろこ</rt><rp>）</rp></ruby>び<ruby><rt></rt>悲<rp>（</rp><rt>かな</rt><rp>）</rp></ruby>しみ<ruby><rt></rt>乗<rp>（</rp><rt>の</rt><rp>）</rp></ruby>り<ruby><rt></rt>越<rp>（</rp><rt>こ</rt><rp>）</rp></ruby>えては<br>经历过种种喜怒哀乐之后</p>
<p><ruby><rt></rt>少<rp>（</rp><rt>そこ</rt><rp>）</rp></ruby>しずつ<ruby><rt></rt>歩<rp>（</rp><rt>ある</rt><rp>）</rp></ruby>いてくよ<br>再一步步稳定向前</p>
<p><ruby><rt></rt>果<rp>（</rp><rt>は</rt><rp>）</rp></ruby>てしない<ruby><rt></rt>空<rp>（</rp><rt>そら</rt><rp>）</rp></ruby>に<br>把手伸向</p>
<p><ruby><rt></rt>手<rp>（</rp><rt>て</rt><rp>）</rp></ruby>をかざそう<br>无边无际的天空吧</p>
<p>たった<ruby><rt></rt>一<rp>（</rp><rt>ひと</rt><rp>）</rp></ruby>つの<ruby><rt></rt>未来<rp>（</rp><rt>みらい</rt><rp>）</rp></ruby>を<ruby><rt></rt>信<rp>（</rp><rt>しん</rt><rp>）</rp></ruby>じながら<br>内心坚信着唯独仅有的未来</p>
<p><ruby><rt></rt>戾<rp>（</rp><rt>もと</rt><rp>）</rp></ruby>らない <ruby><rt></rt>時<rp>（</rp><rt>とき</rt><rp>）</rp></ruby>は<ruby><rt></rt>移<rp>（</rp><rt>うつ</rt><rp>）</rp></ruby>ろうけど<br>哪怕宝贵的时光已轻逝</p>
<p><ruby><rt></rt>大切<rp>（</rp><rt>たいせつ</rt><rp>）</rp></ruby>なもの<ruby><rt></rt>失<rp>（</rp><rt>うしな</rt><rp>）</rp></ruby> いたくないから<br>我亦不愿再失去重要的人</p>
<p><ruby><rt></rt>僕<rp>（</rp><rt>ぼく</rt><rp>）</rp></ruby>の<ruby><rt></rt>中<rp>（</rp><rt>なか</rt><rp>）</rp></ruby>に<ruby><rt></rt>流<rp>（</rp><rt>なが</rt><rp>）</rp></ruby>れる<ruby><rt></rt>声<rp>（</rp><rt>かえ</rt><rp>）</rp></ruby>は<br>响彻我胸口的声音</p>
<p>ずっとずっと<ruby><rt></rt>僕<rp>（</rp><rt>ぼく</rt><rp>）</rp></ruby>を<ruby><rt></rt>支<rp>（</rp><rt>ささ</rt><rp>）</rp></ruby>えてる<br>一直一直都支撑着我</p>
<p>イタズラな<ruby><rt></rt>雨<rp>（</rp><rt>あめ</rt><rp>）</rp></ruby>が<ruby><rt></rt>邪魔<rp>（</rp><rt>じゃま</rt><rp>）</rp></ruby>するけど<br>虽然那淘气的雨前来阻止</p>
<p><ruby><rt></rt>逃<rp>（</rp><rt>に</rt><rp>）</rp></ruby>げ<ruby><rt></rt>出<rp>（</rp><rt>だ</rt><rp>）</rp></ruby>さないから<br>我也再不会逃避了</p>
<p>Oh</p>
<p>さあ<ruby><rt></rt>行<rp>（</rp><rt>ゆ</rt><rp>）</rp></ruby>こう<br>好了出发吧</p>
<p><ruby><rt></rt>立<rp>（</rp><rt>た</rt><rp>）</rp></ruby>ち<ruby><rt></rt>止<rp>（</rp><rt>ど</rt><rp>）</rp></ruby>まることなく<br>永不停息</p>
<p><ruby><rt></rt>流<rp>（</rp><rt>なが</rt><rp>）</rp></ruby>れる<ruby><rt></rt>時<rp>（</rp><rt>とき</rt><rp>）</rp></ruby>に<ruby><rt></rt>負<rp>（</rp><rt>ま</rt><rp>）</rp></ruby>けないように<br>为了不输给时代的潮流</p>
<p><ruby><rt></rt>何度<rp>（</rp><rt>なんど</rt><rp>）</rp></ruby>も<ruby><rt></rt>立<rp>（</rp><rt>た</rt><rp>）</rp></ruby>ち<ruby><rt></rt>向<rp>（</rp><rt>む</rt><rp>）</rp></ruby>かい<ruby><rt></rt>続<rp>（</rp><rt>つづ</rt><rp>）</rp></ruby>けよう<br>无论几度亦奋勇面对</p>
<p><ruby><rt></rt>大切<rp>（</rp><rt>たいせつ</rt><rp>）</rp></ruby>なもの<ruby><rt></rt>失<rp>（</rp><rt>うしな</rt><rp>）</rp></ruby> いたくないから<br>只因不愿再失去重要的人</p>
<p><ruby><rt></rt>信<rp>（</rp><rt>しん</rt><rp>）</rp></ruby>じたその<ruby><rt></rt>先<rp>（</rp><rt>さき</rt><rp>）</rp></ruby>へと<br>迈向深信的未来</p>
<p>【<ruby>终<rp>（</rp><rt>お</rt><rp>）</rp></ruby>わった】</p>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>生活</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx.conf文件解析</title>
    <url>/blog/b54088f4.html</url>
    <content><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">全局区</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">user  nobody;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">表示有1个工作的子进程，可以自行修改，但太大无益，因为都需要争夺CPU，设置为 CPU数*核数 最优</span></span><br><span class="line">worker_processes  1;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">error_log  logs/error.log;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">error_log  logs/error.log  info;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">一般是配置nginx进程与连接的特性，如几个同事工作</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">这里表示一个子进程worker最大允许有1024个连接</span></span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里配置http服务器的主要段</span></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line">    </span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">这是虚拟主机段</span></span><br><span class="line">    server &#123;</span><br><span class="line">    	# nginx监听哪个端口</span><br><span class="line">        listen       8081;</span><br><span class="line">        # nginx监听哪个域名</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">定位，把特殊的路径或文件再次定位，如image目录单独处理；.php单独处理等</span></span><br><span class="line">        location / &#123;</span><br><span class="line">        	# 默认</span><br><span class="line">            root   html;</span><br><span class="line">            # 默认主页</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    proxy_pass   http://127.0.0.1;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class="line">        # concurs with nginx&#x27;s one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       8000;</span><br><span class="line">    #    listen       somename:8080;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line">    include vhost/*.conf;</span><br><span class="line"></span><br><span class="line">    # HTTPS server</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       443 ssl;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #    ssl_certificate      cert.pem;</span><br><span class="line">    #    ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty学习</title>
    <url>/blog/cfd68dd0.html</url>
    <content><![CDATA[<h1 id="一、Buffer（缓冲区）"><a href="#一、Buffer（缓冲区）" class="headerlink" title="一、Buffer（缓冲区）"></a>一、Buffer（缓冲区）</h1><p>IO 面向流（Stream oriented），NIO 面向缓冲区（Buffer oriented）。</p>
<p>Buffer 是一个对象，它包含一些要写入或者要读出的数据。在面向流的 I&#x2F;O 中可以将数据直接写入或者将数据直接读到 Stream 对象中。虽然 Stream 中也有 Buffer 开头的扩展类，但只是流的包装类，还是从流读到缓冲区，而 NIO 却是直接读到 Buffer 中进行操作。</p>
<p>在 NIO 厍中，所有数据都是用缓冲区处理的。在读取数据时，它是直接读到缓冲区中的；在写入数据时，写入到缓冲区中。任何时候访问 NIO 中的数据，都是通过缓冲区进行操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Buffer</span> &#123;</span><br><span class="line">    <span class="comment">// 关系: mark &lt;= position &lt;= limit &lt;= capacity</span></span><br><span class="line">    <span class="comment">// 标记字节内容中的某个元素，配合reset()方法可以从这个标记的位置反复读取内容</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">mark</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 下一个要被读写的byte元素的下标索引</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">position</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 缓冲区中第一个不能读写的元素的数组下标索引，也可以认为是缓冲区中实际元素的数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> limit;</span><br><span class="line">    <span class="comment">// 缓冲区能够容纳元素的最大数量，这个值在缓冲区创建时被设定，而且不能够改变</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> capacity;</span><br><span class="line">    <span class="type">long</span> address; <span class="comment">// Used only by direct buffers，直接内存的地址</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ……</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-1-ByteBuffer"><a href="#1-1-ByteBuffer" class="headerlink" title="1.1 ByteBuffer"></a>1.1 ByteBuffer</h2><p>最常用的缓冲区是 ByteBuffer，一个 ByteBuffer 提供了一组功能用于操作 byte 数组。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ByteBuffer</span> <span class="keyword">extends</span> <span class="title class_">Buffer</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;ByteBuffer&gt; &#123;</span><br><span class="line">    <span class="comment">// 仅限堆内内存使用</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">byte</span>[] hb;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> offset;</span><br><span class="line">    <span class="type">boolean</span> isReadOnly;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-2-ByteBuffer-API"><a href="#1-2-ByteBuffer-API" class="headerlink" title="1.2 ByteBuffer.API"></a>1.2 ByteBuffer.API</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 申请堆外内存（直接内存，少一次拷贝，读写效率高，分配效率低，不受 GC 影响）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ByteBuffer <span class="title function_">allocateDirect</span><span class="params">(<span class="type">int</span> capacity)</span></span><br><span class="line"><span class="comment">// 申请堆内内存（读写效率低，分配效率高，受到 GC 的影响）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ByteBuffer <span class="title function_">allocate</span><span class="params">(<span class="type">int</span> capacity)</span> </span><br><span class="line"><span class="comment">// 原始字节包装成ByteBuffer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ByteBuffer <span class="title function_">wrap</span><span class="params">(<span class="type">byte</span>[] array, <span class="type">int</span> offset, <span class="type">int</span> length)</span></span><br><span class="line"><span class="comment">// 原始字节包装成ByteBuffer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ByteBuffer <span class="title function_">wrap</span><span class="params">(<span class="type">byte</span>[] array)</span></span><br><span class="line"><span class="comment">// 创建共享此缓冲区内容的新字节缓冲区</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title function_">duplicate</span><span class="params">()</span></span><br><span class="line"><span class="comment">// 分片，创建一个新的字节缓冲区</span></span><br><span class="line"><span class="comment">// 新ByteBuffer的开始位置是此缓冲区的当前位置position</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title function_">slice</span><span class="params">()</span></span><br><span class="line"><span class="comment">// 获取字节内容</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">byte</span> <span class="title function_">get</span><span class="params">()</span></span><br><span class="line"><span class="comment">// 从ByteBuffer偏移offset的位置，获取length长的字节数组，然后返回当前ByteBuffer对象</span></span><br><span class="line"><span class="keyword">public</span> ByteBuffer <span class="title function_">get</span><span class="params">(<span class="type">byte</span>[] dst, <span class="type">int</span> offset, <span class="type">int</span> length)</span></span><br><span class="line"><span class="comment">// 设置byte内存</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title function_">put</span><span class="params">(<span class="type">byte</span> b)</span>;</span><br><span class="line"><span class="comment">// 以offset为起始位置设置length长src的内容，并返回当前ByteBuffer对象</span></span><br><span class="line"><span class="keyword">public</span> ByteBuffer <span class="title function_">put</span><span class="params">(<span class="type">byte</span>[] src, <span class="type">int</span> offset, <span class="type">int</span> length)</span>;</span><br><span class="line"><span class="comment">// 将没有读完的数据移到到缓冲区的初始位置，position设置为最后一没读字节数据的下个索引，limit重置为capacity</span></span><br><span class="line"><span class="comment">// 读-&gt;写模式，相当于flip的反向操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title function_">compact</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 是否是直接内存</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">boolean</span> <span class="title function_">isDirect</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 转换缓冲区为写模式</span></span><br><span class="line"><span class="keyword">public</span> ByteBuffer <span class="title function_">clear</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>

<ol>
<li>创建大小为 10 的 ByteBuffer 对象</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ByteBuffer</span> <span class="variable">bf</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">10</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1943529272.jpg"></p>
<ol start="2">
<li>写入数据</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ByteBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">buf.put(<span class="string">&quot;csc&quot;</span>.getBytes());</span><br></pre></td></tr></table></figure>

<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/2064948393.jpg"></p>
<ol start="3">
<li>调用 flip 转换缓冲区为读模式</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">buf.flip();</span><br></pre></td></tr></table></figure>

<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/L2RlZmF1bHQvaW5.jpg"></p>
<ol start="4">
<li>读取缓冲区中到内容，buf.get()</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println((<span class="type">char</span>) buf.get());</span><br></pre></td></tr></table></figure>

<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/EwTmpOa09HRmhZVG.jpg"></p>
<p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/pT0RJME5qSm1Zemsw.jpg"></p>
<ol start="5">
<li>调用 clear() 或 compact() 转换缓冲区为写模式，循环至步骤 1</li>
</ol>
<p>除了 ByteBuffer，还有其他的一些缓冲区，事实上，每一种 Java 基本类型（除了 Boolean 类型）都对应有一种缓冲区。</p>
<h2 id="1-3-Scattering-Reads（分散读取）"><a href="#1-3-Scattering-Reads（分散读取）" class="headerlink" title="1.3 Scattering Reads（分散读取）"></a>1.3 Scattering Reads（分散读取）</h2><p>需要在已知所需文本信息长度的前提下，将文本分割后，分散填充至不同的 buffer 中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 读取一个文本文件 HelloWord.txt，然后将数据填充至多个 buffer</span></span><br><span class="line"><span class="keyword">try</span> (<span class="type">RandomAccessFile</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="string">&quot;HelloWorld.txt&quot;</span>, <span class="string">&quot;rw&quot;</span>)) &#123;</span><br><span class="line">	<span class="type">FileChannel</span> <span class="variable">channel</span> <span class="operator">=</span> file.getChannel();</span><br><span class="line">	<span class="type">ByteBuffer</span> <span class="variable">bba</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">3</span>);</span><br><span class="line">	<span class="type">ByteBuffer</span> <span class="variable">bbb</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">3</span>);</span><br><span class="line">	<span class="type">ByteBuffer</span> <span class="variable">bbc</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">5</span>);</span><br><span class="line">	channel.read(<span class="keyword">new</span> <span class="title class_">ByteBuffer</span>[]&#123;bba, bbb, bbc&#125;);</span><br><span class="line">	bba.flip();</span><br><span class="line">	bbb.flip();</span><br><span class="line">	bbc.flip();</span><br><span class="line">	debugAll(bba);</span><br><span class="line">	debugAll(bbb);</span><br><span class="line">	debugAll(bbc);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">	<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-4-Gatering-Writes（集中写入）"><a href="#1-4-Gatering-Writes（集中写入）" class="headerlink" title="1.4 Gatering Writes（集中写入）"></a>1.4 Gatering Writes（集中写入）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ByteBuffer</span> <span class="variable">bba</span> <span class="operator">=</span> StandardCharsets.UTF_8.encode(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="type">ByteBuffer</span> <span class="variable">bbb</span> <span class="operator">=</span> StandardCharsets.UTF_8.encode(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"><span class="type">ByteBuffer</span> <span class="variable">bbc</span> <span class="operator">=</span> StandardCharsets.UTF_8.encode(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> (<span class="type">FileChannel</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="string">&quot;HelloWorld.txt&quot;</span>, <span class="string">&quot;rw&quot;</span>).getChannel()) &#123;</span><br><span class="line">	file.write(<span class="keyword">new</span> <span class="title class_">ByteBuffer</span>[]&#123;bba, bbb, bbc&#125;);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">	<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-5-综合案例"><a href="#1-5-综合案例" class="headerlink" title="1.5 综合案例"></a>1.5 综合案例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line">	<span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">	buffer.put(<span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>, <span class="number">100</span>&#125;);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	网络上有多条数据发送给服务器，数据之间使用 \n 进行分离</span></span><br><span class="line"><span class="comment">	但由于某种原因这些数据在接收时，被进行了重新组合，例如原始数据有3条为</span></span><br><span class="line"><span class="comment">		Hello,world\n</span></span><br><span class="line"><span class="comment">		I&#x27;m zhangsan\n</span></span><br><span class="line"><span class="comment">		How are you?\n</span></span><br><span class="line"><span class="comment">	变成了下面的两个 byteBuffer（黏包，半包）</span></span><br><span class="line"><span class="comment">		Hello,world\nI&#x27;m zhangsan\nHo</span></span><br><span class="line"><span class="comment">		w are you?\n</span></span><br><span class="line"><span class="comment">	现在要求变写程序，将错乱的数据恢复成原始的按 \n 分隔的数据</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="type">ByteBuffer</span> <span class="variable">source</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">64</span>);</span><br><span class="line">	source.put(<span class="string">&quot;Hello,world\nI&#x27;m zhangsan\nHo&quot;</span>.getBytes());</span><br><span class="line">	split(source);</span><br><span class="line">	source.put(<span class="string">&quot;w are you?\n&quot;</span>.getBytes());</span><br><span class="line">	split(source);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">split</span><span class="params">(ByteBuffer source)</span> &#123;</span><br><span class="line">	source.flip();</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; source.limit(); i++) &#123;</span><br><span class="line">		<span class="comment">// 找到一条完整的消息</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">new</span> <span class="title class_">String</span>(<span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;source.get(i)&#125;).equals(<span class="string">&quot;\n&quot;</span>)) &#123;</span><br><span class="line">			<span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> i + <span class="number">1</span> - source.position();</span><br><span class="line">			<span class="type">ByteBuffer</span> <span class="variable">target</span> <span class="operator">=</span> ByteBuffer.allocate(length);</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; length; j++) &#123;</span><br><span class="line">				target.put(source.get());</span><br><span class="line">			&#125;</span><br><span class="line">			debugAll(target);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	source.compact();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="二、Channel（通道）"><a href="#二、Channel（通道）" class="headerlink" title="二、Channel（通道）"></a>二、Channel（通道）</h1><p>NIO 通过 Channel（通道）进行读写。</p>
<p>通道是双向的，可读也可写，而流的读写是单向的。</p>
<p>无论读写，通道只能和 Buffer 交互。因为 Buffer，通道可以异步地读写。</p>
<h2 id="2-1-FileChannel"><a href="#2-1-FileChannel" class="headerlink" title="2.1 FileChannel"></a>2.1 FileChannel</h2><blockquote>
<p>FileChannel 只能工作在阻塞模式下</p>
</blockquote>
<h3 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h3><p>不能直接打开 FileChannel，必须通过 FileInputStream、FileOutputStream 或者 RandomAccessFile 来获取 FileChannel，它们都有 getChannel 方法。</p>
<ul>
<li>通过 FileInputStream 获取的 channel 只能读</li>
<li>通过 FileOutputStream 获取的 channel 只能写</li>
<li>通过 RandomAccessFile 获取的 channel 是否能读写，根据构造时的传入读写模式参数决定</li>
</ul>
<h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><p>会从 channel 读取数据填充 ByteBuffer，返回值表示读到了多少字节，-1 表示到达了文件的末尾</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">readBytes</span> <span class="operator">=</span> channel.read(buffer);</span><br></pre></td></tr></table></figure>

<h3 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h3><p>SocketChannel</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ...;</span><br><span class="line">buffer.put(...); <span class="comment">// 存入数据</span></span><br><span class="line">buffer.flip();   <span class="comment">// 切换读模式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测 buffer 中还有没有剩余数据</span></span><br><span class="line"><span class="keyword">while</span>(buffer.hasRemaining) &#123;</span><br><span class="line">    channel.write(buffer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 while 中调用 channel.write 是因为 write 方法并不能保证一次将 buffer 中的内容全部写入 channel</p>
<h3 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h3><p>channel 必须关闭，不过调用了 FileInputStream、FileOutputStream 或者 RandomAccessFile 的 close 方法会间接地调用 channel 的 close 方法。</p>
<h3 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取当前位置</span></span><br><span class="line"><span class="type">long</span> <span class="variable">pos</span> <span class="operator">=</span> channel.position();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置当前位置</span></span><br><span class="line"><span class="type">long</span> <span class="variable">newPos</span> <span class="operator">=</span> ...;</span><br><span class="line">channel.position(newPos);</span><br></pre></td></tr></table></figure>

<p>设置当前位置时，如果设置为文件的末尾</p>
<ul>
<li>这时读取会返回 -1</li>
<li>这时写入，会追加内容，但要注意如果 position 超过了文件末尾，再写入时在新内容和原末尾之间会有空洞(00)</li>
</ul>
<h1 id="三、Selector（选择器）"><a href="#三、Selector（选择器）" class="headerlink" title="三、Selector（选择器）"></a>三、Selector（选择器）</h1><p>NIO 有选择器，而 IO 没有。</p>
<p>选择器满足了单个线程处理多个通道的效果，因此大大减少了线程的数量。</p>
<p>因为线程之间的切换对于操作系统来说是昂贵的（每次切换线程都要重新读取线程之前的状态、值、上下文等信息），因此选择器提高了系统的效率。</p>
<h1 id="三、一些关键类"><a href="#三、一些关键类" class="headerlink" title="三、一些关键类"></a>三、一些关键类</h1><h2 id="ServerBootstrap"><a href="#ServerBootstrap" class="headerlink" title="ServerBootstrap"></a>ServerBootstrap</h2><p>Netty 建立服务端的辅助类。</p>
<h2 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h2><p>频道、通道的意思。</p>
<p>是传入（入站）或者传出（出站）数据的载体。</p>
<p>可以被打开或者被关闭，连接或者断开连接。</p>
<p>在内部会为每个 Channel 分配一个 EventLoop，用以处理所有事件。</p>
<h2 id="EventLoop"><a href="#EventLoop" class="headerlink" title="EventLoop"></a>EventLoop</h2><h2 id="EventLoopGroup"><a href="#EventLoopGroup" class="headerlink" title="EventLoopGroup"></a>EventLoopGroup</h2><p>是一组 EventLoop</p>
<h2 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h2><h2 id="ChannelHandle"><a href="#ChannelHandle" class="headerlink" title="ChannelHandle"></a>ChannelHandle</h2><p>通道处理者，是所有处理入站和出站数据的应用程序逻辑的容器。</p>
<h3 id="ChannelHandlerAdapter"><a href="#ChannelHandlerAdapter" class="headerlink" title="ChannelHandlerAdapter"></a>ChannelHandlerAdapter</h3><h3 id="ChannelInboundHandlerAdapter"><a href="#ChannelInboundHandlerAdapter" class="headerlink" title="ChannelInboundHandlerAdapter"></a>ChannelInboundHandlerAdapter</h3><p>Netty 接收数据 Handler 处理器。</p>
<p></br></br></br></br></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Netty</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Netty</tag>
      </tags>
  </entry>
</search>
