<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Liangxj</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-07-06T10:00:44.834Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Liangxj</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JDK1.8之Lambda表达式</title>
    <link href="http://example.com/blog/77a7a861.html"/>
    <id>http://example.com/blog/77a7a861.html</id>
    <published>2023-07-06T07:41:30.000Z</published>
    <updated>2023-07-06T10:00:44.834Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、Lambda-表达式"><a href="#一、Lambda-表达式" class="headerlink" title="一、Lambda 表达式"></a>一、Lambda 表达式</h1><h2 id="1-1-基本格式"><a href="#1-1-基本格式" class="headerlink" title="1.1 基本格式"></a>1.1 基本格式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(参数列表)-&gt;&#123;代码&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-匿名内部类方式"><a href="#1-2-匿名内部类方式" class="headerlink" title="1.2 匿名内部类方式"></a>1.2 匿名内部类方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 传统写法需要传参</span></span><br><span class="line">        <span class="type">RunnableRealization</span> <span class="variable">runnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RunnableRealization</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread01</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(runnable);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         稍微优化的【匿名内部类】写法，进一步优化就是lambda写法了</span></span><br><span class="line"><span class="comment">         匿名内部类的作用：</span></span><br><span class="line"><span class="comment">             1.避免匿名内部类定义过多；</span></span><br><span class="line"><span class="comment">             2.使代码看起来简洁</span></span><br><span class="line"><span class="comment">             3.简化代码，只留下核心逻辑</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread02</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * When an object implementing interface &lt;code&gt;Runnable&lt;/code&gt; is used</span></span><br><span class="line"><span class="comment">             * to create a thread, starting the thread causes the object&#x27;s</span></span><br><span class="line"><span class="comment">             * &lt;code&gt;run&lt;/code&gt; method to be called in that separately executing</span></span><br><span class="line"><span class="comment">             * thread.</span></span><br><span class="line"><span class="comment">             * &lt;p&gt;</span></span><br><span class="line"><span class="comment">             * The general contract of the method &lt;code&gt;run&lt;/code&gt; is that it may</span></span><br><span class="line"><span class="comment">             * take any action whatsoever.</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@see</span> Thread#run()</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;祖安狂人蒙多&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一次性的类，用在new Thread中充当Runnable对的实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RunnableRealization</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;祖安狂人蒙多&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="示例一"><a href="#示例一" class="headerlink" title="示例一"></a>示例一</h2><p>在创建线程并启动时可以使用匿名内部类的写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure><p>可以使用 Lambda 的格式对其进行修改。修改后如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;).start();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最简写法</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; System.out.println(<span class="string">&quot;hello world&quot;</span>)).start();</span><br></pre></td></tr></table></figure><h2 id="示例二"><a href="#示例二" class="headerlink" title="示例二"></a>示例二</h2><p>现有方法定义如下，其中 IntBinaryOperator 是一个接口。先使用匿名内部类的写法调用该方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">calculateNum(<span class="keyword">new</span> <span class="title class_">IntBinaryOperator</span>() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">applyAsInt</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> left + right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">calculateNum</span><span class="params">(IntBinaryOperator operator)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="keyword">return</span> operator.applyAsInt(a, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Lambda 写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">calculateNum((left, right) -&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> left + right;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最简写法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">calculateNum((left, right) -&gt; left + right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="示例三"><a href="#示例三" class="headerlink" title="示例三"></a>示例三</h2><p>现有方法定义如下，其中 IntPredicate 是一个接口。先使用匿名内部类的写法调用该方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">printNum(<span class="keyword">new</span> <span class="title class_">IntPredicate</span>() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> value%<span class="number">2</span> == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printNum</span><span class="params">(IntPredicate predicate)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i : arr) &#123;</span><br><span class="line"><span class="keyword">if</span> (predicate.test(i)) &#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Lambda 写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">printNum((value) -&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> value%<span class="number">2</span> == <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最简写法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">printNum(value -&gt; value%<span class="number">2</span> == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="示例四"><a href="#示例四" class="headerlink" title="示例四"></a>示例四</h2><p>现有方法定义如下，其中 Function 是一个接口。先使用匿名内部类的写法调用该方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">typeConver(<span class="keyword">new</span> <span class="title class_">Function</span>&lt;String, Integer&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Integer <span class="title function_">apply</span><span class="params">(String s)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> Integer.valueOf(s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;R&gt; R <span class="title function_">typeConver</span><span class="params">(Function&lt;String, R&gt; function)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"><span class="type">R</span> <span class="variable">result</span> <span class="operator">=</span> function.apply(str);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Lambda 写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">typeConver((s) -&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> Integer.valueOf(s);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最简写法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">typeConver(Integer::valueOf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="示例五"><a href="#示例五" class="headerlink" title="示例五"></a>示例五</h2><p>现有方法定义如下，其中 Int 是一个接口。先使用匿名内部类的写法调用该方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">foreachArr(<span class="keyword">new</span> <span class="title class_">IntConsumer</span>() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">System.out.println(value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">foreachArr</span><span class="params">(IntConsumer consumer)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i : arr) &#123;</span><br><span class="line">consumer.accept(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Lambda 写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">foreachArr((value) -&gt; &#123;</span><br><span class="line">System.out.println(value);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最简写法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">foreachArr(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、Stream-流"><a href="#二、Stream-流" class="headerlink" title="二、Stream 流"></a>二、Stream 流</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">streamDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Stream</span> <span class="variable">stream</span> <span class="operator">=</span> Stream.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">    String[] strArray = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>&#125;;</span><br><span class="line">    stream = Stream.of(strArray);</span><br><span class="line">    stream = Arrays.stream(strArray);</span><br><span class="line">    List&lt;String&gt; list = Arrays.asList(strArray);</span><br><span class="line">    stream = list.stream();</span><br><span class="line">    <span class="comment">// 一个Stream流只可以使用一次，这段代码为了简洁而重复使用了数次，因此会抛出 stream has already been operated upon or closed 异常</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Stream&lt;String&gt; stream2 = Stream.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">        <span class="comment">// 转换成 Array</span></span><br><span class="line">        String[] strArray1 = stream2.toArray(String[]::<span class="keyword">new</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转换成 Collection</span></span><br><span class="line">        List&lt;String&gt; list1 = stream2.collect(Collectors.toList());</span><br><span class="line">        List&lt;String&gt; list2 = stream2.collect(Collectors.toCollection(ArrayList::<span class="keyword">new</span>));</span><br><span class="line">        <span class="type">Set</span> <span class="variable">set1</span> <span class="operator">=</span> stream2.collect(Collectors.toSet());</span><br><span class="line">        <span class="type">Stack</span> <span class="variable">stack1</span> <span class="operator">=</span> stream2.collect(Collectors.toCollection(Stack::<span class="keyword">new</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转换成 String</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> stream.collect(Collectors.joining()).toString();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-1-Stream-中间操作符"><a href="#2-1-Stream-中间操作符" class="headerlink" title="2.1 Stream 中间操作符"></a>2.1 Stream 中间操作符</h2><table><thead><tr><th>流方法</th><th>含义</th></tr></thead><tbody><tr><td>filter</td><td>用于通过设置的条件过滤出元素</td></tr><tr><td>distinct</td><td>返回一个元素各异（根据流所生成元素的hashCode和equals方法实现）的流</td></tr><tr><td>limit</td><td>会返回一个不超过给定长度的流</td></tr><tr><td>skip</td><td>返回一个扔掉了前n个元素的流</td></tr><tr><td>map</td><td>接受一个函数作为参数。这个函数会被应用到每个元素上，并将其映射成一个新的元素（使用映射一词，是因为它和转换类似，但其中的细微差别在于它是“创建一个新版本”而不是去“修改”）</td></tr><tr><td>flatMap</td><td>使用flatMap方法的效果是，各个数组并不是分别映射成一个流，而是映射成流的内容。所有使用map(Arrays::stream)时生成的单个流都被合并起来，即扁平化为一个流</td></tr><tr><td>sorted</td><td>返回排序后的流</td></tr></tbody></table><h3 id="stream-filter"><a href="#stream-filter" class="headerlink" title="stream().filter()"></a>stream().filter()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">filterListDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;String&gt; accountList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    accountList.add(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">    accountList.add(<span class="string">&quot;jerry&quot;</span>);</span><br><span class="line">    accountList.add(<span class="string">&quot;beita&quot;</span>);</span><br><span class="line">    accountList.add(<span class="string">&quot;shuke&quot;</span>);</span><br><span class="line">    accountList.add(<span class="string">&quot;damu&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.1 业务要求：长度大于等于5的有效账号</span></span><br><span class="line">    <span class="keyword">for</span> (String account : accountList) &#123;</span><br><span class="line">        <span class="keyword">if</span> (account.length() &gt;= <span class="number">5</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;有效账号：&quot;</span> + account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.2 迭代方式进行操作</span></span><br><span class="line">    Iterator&lt;String&gt; it = accountList.iterator();</span><br><span class="line">    <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">account</span> <span class="operator">=</span> it.next();</span><br><span class="line">        <span class="keyword">if</span> (account.length() &gt;= <span class="number">5</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;it有效账号：&quot;</span> + account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.3 Stream结合lambda表达式，完成业务处理</span></span><br><span class="line">    List&lt;String&gt; validAccounts = accountList.stream().filter(s -&gt; s.length() &gt;= <span class="number">5</span>).collect(Collectors.toList());</span><br><span class="line">    System.out.println(validAccounts);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">filterArrayDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// arrays -&gt; stream</span></span><br><span class="line">    Integer[] nums = <span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;;</span><br><span class="line">    System.out.println(Arrays.asList(nums));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// filter(Predicate(T t)-&gt;Boolean) 接受一个参数，验证参数是否符合设置的条件</span></span><br><span class="line">    <span class="comment">// toArray() 从Stream类型抽取数据转换成数组</span></span><br><span class="line">    Integer[] nums2 = Stream.of(nums).filter(x -&gt; x % <span class="number">2</span> == <span class="number">0</span>).toArray(Integer[]::<span class="keyword">new</span>);</span><br><span class="line">    System.out.println(Arrays.asList(nums2));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="stream-distinct"><a href="#stream-distinct" class="headerlink" title="stream().distinct()"></a>stream().distinct()</h3><h3 id="stream-min-：取最小值"><a href="#stream-min-：取最小值" class="headerlink" title="stream().min()：取最小值"></a>stream().min()：取最小值</h3><h3 id="stream-max-：取最大值"><a href="#stream-max-：取最大值" class="headerlink" title="stream().max()：取最大值"></a>stream().max()：取最大值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reduceDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; numList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    numList.add(<span class="number">1</span>);</span><br><span class="line">    numList.add(<span class="number">3</span>);</span><br><span class="line">    numList.add(<span class="number">2</span>);</span><br><span class="line">    numList.add(<span class="number">5</span>);</span><br><span class="line">    numList.add(<span class="number">4</span>);</span><br><span class="line">    numList.add(<span class="number">6</span>);</span><br><span class="line">    numList.add(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// min/max/distinct</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">minNum1</span> <span class="operator">=</span> numList.stream().min((o1, o2) -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> o1 - o2;</span><br><span class="line">    &#125;).get();</span><br><span class="line">    System.out.println(minNum1);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">minNum2</span> <span class="operator">=</span> numList.stream().min(Comparator.comparingInt(o -&gt; o)).get();</span><br><span class="line">    System.out.println(minNum2);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">maxNum</span> <span class="operator">=</span> numList.stream().max((o1, o2) -&gt; o1 - o2).get();</span><br><span class="line">    System.out.println(maxNum);</span><br><span class="line">    numList.stream().distinct().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="stream-limit"><a href="#stream-limit" class="headerlink" title="stream().limit()"></a>stream().limit()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reduceDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; numList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    numList.add(<span class="number">1</span>);</span><br><span class="line">    numList.add(<span class="number">3</span>);</span><br><span class="line">    numList.add(<span class="number">2</span>);</span><br><span class="line">    numList.add(<span class="number">5</span>);</span><br><span class="line">    numList.add(<span class="number">4</span>);</span><br><span class="line">    numList.add(<span class="number">6</span>);</span><br><span class="line">    numList.add(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// limit</span></span><br><span class="line">    List&lt;Integer&gt; limitNum = numList.stream().limit(<span class="number">2</span>).collect(Collectors.toList());</span><br><span class="line">    System.out.println(limitNum);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="stream-skip"><a href="#stream-skip" class="headerlink" title="stream().skip()"></a>stream().skip()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reduceDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; numList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    numList.add(<span class="number">1</span>);</span><br><span class="line">    numList.add(<span class="number">3</span>);</span><br><span class="line">    numList.add(<span class="number">2</span>);</span><br><span class="line">    numList.add(<span class="number">5</span>);</span><br><span class="line">    numList.add(<span class="number">4</span>);</span><br><span class="line">    numList.add(<span class="number">6</span>);</span><br><span class="line">    numList.add(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// skip</span></span><br><span class="line">    List&lt;Integer&gt; limitNum2 = numList.stream().skip(<span class="number">2</span>).collect(Collectors.toList());</span><br><span class="line">    System.out.println(limitNum2);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="stream-map"><a href="#stream-map" class="headerlink" title="stream().map()"></a>stream().map()</h3><p>接受一个函数作为参数。这个函数会被应用到每个元素上，并将其映射成一个新的元素。</p><p>（使用映射一词，是因为它和转换类似，但其中的细微差别在于它是“创建一个新版本”而不是去“修改”） </p><p><strong>map 是对流中的每一个元素进行处理。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mapDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="comment">// list -&gt; stream</span></span><br><span class="line">    System.out.println(list);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// map(Function(T, R)-&gt; R) 接受一个参数，通过运算得到转换后的数据</span></span><br><span class="line">    <span class="comment">// collect()</span></span><br><span class="line">    List&lt;Double&gt; list2 = list.stream().map(x -&gt; Math.pow(x, <span class="number">2</span>)).collect(Collectors.toList());</span><br><span class="line">    System.out.println(list2);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; nameList = Arrays.asList(<span class="string">&quot;zs&quot;</span>, <span class="string">&quot;ls&quot;</span>, <span class="string">&quot;ww&quot;</span>, <span class="string">&quot;zl&quot;</span>);</span><br><span class="line">    <span class="comment">// 字母转大写</span></span><br><span class="line">    nameList.stream().map(String::toUpperCase).collect(Collectors.toList()).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转换数据类型</span></span><br><span class="line">    list.stream().map(String::valueOf).collect(Collectors.toList()).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取平方</span></span><br><span class="line">    list.stream().map(n -&gt; n*n).collect(Collectors.toList()).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    List&lt;String&gt; strList = Arrays.asList(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;abc&quot;</span>, <span class="string">&quot;bc&quot;</span>, <span class="string">&quot;efg&quot;</span>, <span class="string">&quot;abcd&quot;</span>, <span class="string">&quot;jkl&quot;</span>, <span class="string">&quot;jkl&quot;</span>);</span><br><span class="line">    List&lt;String&gt; resultList = strList.stream().map(str -&gt; str + <span class="string">&quot;-itcast&quot;</span>).collect(Collectors.toList());</span><br><span class="line">    System.out.println(resultList);</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="stream-flatMap"><a href="#stream-flatMap" class="headerlink" title="stream().flatMap()"></a>stream().flatMap()</h3><p>使用 flatMap 方法的效果是，各个数组并不是分别映射成一个流，而是映射成流的内容。所有使用 map(Arrays::stream) 时生成的单个流都被合并起来，即扁平化为一个流。</p><p><strong>flatMap 流扁平化，就是把流中的每一个元素都转化成另一个流，然后把所有流汇聚起来成一个流。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">flatMapDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;String&gt; strList = Arrays.asList(<span class="string">&quot;a bc&quot;</span>, <span class="string">&quot;ab c&quot;</span>, <span class="string">&quot;b c&quot;</span>, <span class="string">&quot;efg&quot;</span>, <span class="string">&quot;abcd&quot;</span>, <span class="string">&quot;jkl&quot;</span>, <span class="string">&quot;jkl&quot;</span>);</span><br><span class="line">    <span class="comment">// List&lt;String&gt; resultList = strList.stream().flatMap(x -&gt; Arrays.asList(x.split(&quot; &quot;)).stream()).collect(Collectors.toList());</span></span><br><span class="line">    List&lt;String&gt; resultList = strList.stream().flatMap(x -&gt; Arrays.stream(x.split(<span class="string">&quot; &quot;</span>))).collect(Collectors.toList());</span><br><span class="line">    System.out.println(resultList);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="stream-sorted"><a href="#stream-sorted" class="headerlink" title="stream().sorted()"></a>stream().sorted()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reduceDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; numList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    numList.add(<span class="number">1</span>);</span><br><span class="line">    numList.add(<span class="number">3</span>);</span><br><span class="line">    numList.add(<span class="number">2</span>);</span><br><span class="line">    numList.add(<span class="number">5</span>);</span><br><span class="line">    numList.add(<span class="number">4</span>);</span><br><span class="line">    numList.add(<span class="number">6</span>);</span><br><span class="line">    numList.add(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// sorted().一般在skip/limit或者filter之后进行</span></span><br><span class="line">    List&lt;Integer&gt; sortedNum = numList.stream().skip(<span class="number">2</span>).limit(<span class="number">5</span>).sorted().collect(Collectors.toList());</span><br><span class="line">    System.out.println(sortedNum);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-Stream-终止操作符"><a href="#2-2-Stream-终止操作符" class="headerlink" title="2.2 Stream 终止操作符"></a>2.2 Stream 终止操作符</h2><table><thead><tr><th>流方法</th><th>含义</th></tr></thead><tbody><tr><td>anyMatch</td><td>检查是否至少匹配一个元素，返回boolean</td></tr><tr><td>allMatch</td><td>检查是否匹配所有元素，返回boolean</td></tr><tr><td>noneMatch</td><td>检查是否没有匹配所有元素，返回boolean</td></tr><tr><td>findAny</td><td>将返回当前流中的任意元素</td></tr><tr><td>findFirst</td><td>返回第一个元素</td></tr><tr><td>forEach</td><td>遍历流</td></tr><tr><td>collect</td><td>收集器，将流转换为其他形式</td></tr><tr><td>reduce</td><td>可以将流中元素反复结合起来，得到一个值</td></tr><tr><td>count</td><td>返回流中元素总数</td></tr></tbody></table><h3 id="stream-anyMatch"><a href="#stream-anyMatch" class="headerlink" title="stream().anyMatch()"></a>stream().anyMatch()</h3><h3 id="stream-allMatch"><a href="#stream-allMatch" class="headerlink" title="stream().allMatch()"></a>stream().allMatch()</h3><h3 id="stream-noneMatch"><a href="#stream-noneMatch" class="headerlink" title="stream().noneMatch()"></a>stream().noneMatch()</h3><h3 id="stream-findAny"><a href="#stream-findAny" class="headerlink" title="stream().findAny()"></a>stream().findAny()</h3><h3 id="stream-findFirst"><a href="#stream-findFirst" class="headerlink" title="stream().findFirst()"></a>stream().findFirst()</h3><h3 id="stream-forEach"><a href="#stream-forEach" class="headerlink" title="stream().forEach()"></a>stream().forEach()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">forEachDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="comment">// forEach: 接受一个lambda表达式，在Stream每个元素上执行指定的操作</span></span><br><span class="line">    list.stream().filter(n -&gt; n % <span class="number">2</span> == <span class="number">0</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;b&quot;</span>, <span class="string">&quot;b&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;c&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;d&quot;</span>, <span class="string">&quot;d&quot;</span>);</span><br><span class="line">    map.forEach((k, v) -&gt; System.out.println(<span class="string">&quot;k=&quot;</span> + k + <span class="string">&quot;，v=&quot;</span> + v));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="stream-collect"><a href="#stream-collect" class="headerlink" title="stream().collect()"></a>stream().collect()</h3><h3 id="stream-reduce"><a href="#stream-reduce" class="headerlink" title="stream().reduce()"></a>stream().reduce()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reduceDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; numList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    numList.add(<span class="number">1</span>);</span><br><span class="line">    numList.add(<span class="number">3</span>);</span><br><span class="line">    numList.add(<span class="number">2</span>);</span><br><span class="line">    numList.add(<span class="number">5</span>);</span><br><span class="line">    numList.add(<span class="number">4</span>);</span><br><span class="line">    numList.add(<span class="number">6</span>);</span><br><span class="line">    numList.add(<span class="number">6</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// reduce</span></span><br><span class="line">    Optional&lt;Integer&gt; sum1 = numList.stream().reduce((x, y) -&gt; x + y);</span><br><span class="line">    System.out.println(sum1.get());</span><br><span class="line">    Optional&lt;Integer&gt; sum2 = numList.stream().reduce(Integer::sum);</span><br><span class="line">    System.out.println(sum2.get());</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="stream-count"><a href="#stream-count" class="headerlink" title="stream().count()"></a>stream().count()</h3><h1 id="三、Lambda：函数式接口"><a href="#三、Lambda：函数式接口" class="headerlink" title="三、Lambda：函数式接口"></a>三、Lambda：函数式接口</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaDemo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        MobilePhone phone;</span><br><span class="line">        <span class="comment">// 所有的Lambda的类型都是一个接口，而Lambda表达式本身，就是这个接口的实现</span></span><br><span class="line">        phone = () -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;开机！&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        phone.powerOn();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MobilePhone</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">powerOn</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OppoPhone</span> <span class="keyword">implements</span> <span class="title class_">MobilePhone</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">powerOn</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Oppo手机开机！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>如果定义成实现类，就会报错</strong></p><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1655199527943-7baca5ca-351d-4d7d-b004-583907ca7170.png"></p><h1 id="四、Lambda：方法与构造函数引用"><a href="#四、Lambda：方法与构造函数引用" class="headerlink" title="四、Lambda：方法与构造函数引用"></a>四、Lambda：方法与构造函数引用</h1><h2 id="4-1-实例对象-实例方法（类名-方法名）"><a href="#4-1-实例对象-实例方法（类名-方法名）" class="headerlink" title="4.1 实例对象::实例方法（类名::方法名）"></a>4.1 实例对象::实例方法（类名::方法名）</h2><p>如果两个方法，除了方法名之外，方法参数和返回类型都一致，就称为：方法签名一致</p><p>如果某个方法和接口里定义的函数恰好一致，就可以直接传入方法引用。</p><p>有点接口方法懒得实现了，然后直接借用其他方法的意思</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaDemo03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 原始的lambda写法</span></span><br><span class="line">        <span class="type">parseIntNum</span> <span class="variable">parseIntNum1</span> <span class="operator">=</span> (str) -&gt; Integer.parseInt(str);</span><br><span class="line">        System.out.println(parseIntNum1.pass(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">        <span class="comment">// 改进型lambda写法</span></span><br><span class="line">        <span class="type">parseIntNum</span> <span class="variable">parseIntNum2</span> <span class="operator">=</span> Integer::parseInt;</span><br><span class="line">        System.out.println(parseIntNum2.pass(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口定义</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">parseIntNum</span> &#123;</span><br><span class="line">    <span class="comment">// 定义一个String转化成Integer的方法</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">pass</span><span class="params">(String s)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果接口中存在有多个抽象方法，那么就不能直接通过接口来匹配到具体的函数，报错：is not a functional interface</p><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1655203558293-07ec7c2e-d5c3-4f87-a3b6-e581ec8163af.png"></p><h2 id="4-2-数据类型-new（方法返回值-new）"><a href="#4-2-数据类型-new（方法返回值-new）" class="headerlink" title="4.2 数据类型::new（方法返回值::new）"></a>4.2 数据类型::new（方法返回值::new）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaDemo04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建长度为10的数组</span></span><br><span class="line">        <span class="comment">// 原始的lambda写法</span></span><br><span class="line">        IntFunction&lt;<span class="type">int</span>[]&gt; arr1 = <span class="keyword">new</span> <span class="title class_">IntFunction</span>&lt;<span class="type">int</span>[]&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span>[] apply(<span class="type">int</span> num) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[num];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        arr1.apply(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">// 改进型lambda写法</span></span><br><span class="line">        IntFunction&lt;<span class="type">int</span>[]&gt; arr2 = <span class="type">int</span>[]::<span class="keyword">new</span>;</span><br><span class="line">        arr2.apply(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五、Lambda：作用域"><a href="#五、Lambda：作用域" class="headerlink" title="五、Lambda：作用域"></a>五、Lambda：作用域</h1><h2 id="5-1-基础类型变量"><a href="#5-1-基础类型变量" class="headerlink" title="5.1 基础类型变量"></a>5.1 基础类型变量</h2><p>传入 lambda 的变量被隐式 final 所修饰，不能被修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaDemo05</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="string">&quot;666&quot;</span>;</span><br><span class="line">        <span class="type">StrToInt05</span> <span class="variable">sti</span> <span class="operator">=</span> (str -&gt; Integer.parseInt(str + temp));</span><br><span class="line">        System.out.println(sti.change(temp));</span><br><span class="line"><span class="comment">//        temp = &quot;000&quot;;</span></span><br><span class="line"><span class="comment">//        System.out.println(sti.change(temp));</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口定义</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">StrToInt05</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个String转化成Integer的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">change</span><span class="params">(String s)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1655462587971-b10e98a3-899e-4a54-90d4-d234e602c434.png"></p><h2 id="5-2-引用类型变量"><a href="#5-2-引用类型变量" class="headerlink" title="5.2 引用类型变量"></a>5.2 引用类型变量</h2><p>如果是引用类型的话就不会报错，因为 Lambda 能够感知外部对引用类型变量的改变，不会出现数据不同步的问题（静态变量和实例变量也是不会报错）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaDemo06</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;111&quot;</span>);</span><br><span class="line">        <span class="type">StrToInt06</span> <span class="variable">sti</span> <span class="operator">=</span> (str -&gt; Integer.parseInt(list.get(<span class="number">0</span>)));</span><br><span class="line">        System.out.println(sti.change(<span class="string">&quot;000&quot;</span>));</span><br><span class="line">        list.set(<span class="number">0</span>, <span class="string">&quot;666&quot;</span>);</span><br><span class="line">        System.out.println(sti.change(<span class="string">&quot;000&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口定义</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">StrToInt06</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个String转化成Integer的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">change</span><span class="params">(String s)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="六、Lambda：访问局部变量"><a href="#六、Lambda：访问局部变量" class="headerlink" title="六、Lambda：访问局部变量"></a>六、Lambda：访问局部变量</h1><h1 id="七、Lambda：访问对象字段与静态变量"><a href="#七、Lambda：访问对象字段与静态变量" class="headerlink" title="七、Lambda：访问对象字段与静态变量"></a>七、Lambda：访问对象字段与静态变量</h1><h1 id="八、Lambda：访问接口的默认方法"><a href="#八、Lambda：访问接口的默认方法" class="headerlink" title="八、Lambda：访问接口的默认方法"></a>八、Lambda：访问接口的默认方法</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、Lambda-表达式&quot;&gt;&lt;a href=&quot;#一、Lambda-表达式&quot; class=&quot;headerlink&quot; title=&quot;一、Lambda 表达式&quot;&gt;&lt;/a&gt;一、Lambda 表达式&lt;/h1&gt;&lt;h2 id=&quot;1-1-基本格式&quot;&gt;&lt;a href=&quot;#1-1-基</summary>
      
    
    
    
    <category term="编程" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Java" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/Java/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch</title>
    <link href="http://example.com/blog/d32d37e5.html"/>
    <id>http://example.com/blog/d32d37e5.html</id>
    <published>2023-07-04T07:28:35.000Z</published>
    <updated>2023-07-05T02:04:39.009Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘录自博客：<a href="https://www.cnblogs.com/wupeixuan/tag/ElasticSearch/">ElasticSearch - 标签 - 武培轩 - 博客园 (cnblogs.com)</a></p></blockquote><h1 id="Elasticsearch-术语"><a href="#Elasticsearch-术语" class="headerlink" title="Elasticsearch 术语"></a>Elasticsearch 术语</h1><h2 id="索引（Index）"><a href="#索引（Index）" class="headerlink" title="索引（Index）"></a>索引（Index）</h2><p>索引是相似结构的文档的集合，索引中的数据分散在分片上，类似于关系型数据库中的表（Table）</p><h2 id="类型（Type）"><a href="#类型（Type）" class="headerlink" title="类型（Type）"></a>类型（Type）</h2><p>在 ES6.0 版本中已经废除</p><h2 id="文档（Document）"><a href="#文档（Document）" class="headerlink" title="文档（Document）"></a>文档（Document）</h2><p>文档是所有可搜索数据的最小单位，类似于关系型数据库中的记录（Row）</p><h2 id="集群（Cluster）"><a href="#集群（Cluster）" class="headerlink" title="集群（Cluster）"></a>集群（Cluster）</h2><p>一个集群可以有一个或多个节点</p><h3 id="集群的状态"><a href="#集群的状态" class="headerlink" title="集群的状态"></a>集群的状态</h3><ul><li>Green：主分片与副本都正常分配</li><li>Yellow：主分片全部正常分配，有副本分配未能正常分配</li><li>Red：有主分片未能分配</li></ul><h2 id="节点（Node）"><a href="#节点（Node）" class="headerlink" title="节点（Node）"></a>节点（Node）</h2><p>节点其实就是一个 ES 实例，本质上是一个 Java 进程</p><h3 id="节点类型"><a href="#节点类型" class="headerlink" title="节点类型"></a>节点类型</h3><ul><li>主节点（Master Node）</li><li>候选主节点（Master-eligible Node）</li><li>数据节点（Data Node）</li><li>协调节点（Coordinating Node）</li><li>冷热节点（Hot &amp; Warm Node）</li><li>机器学习节点（Machine Learning Node）</li><li>部落节点（Tribe Node）</li><li>预处理节点（Ingest Node）</li></ul><h2 id="映射（Mapping）"><a href="#映射（Mapping）" class="headerlink" title="映射（Mapping）"></a>映射（Mapping）</h2><p>类似于关系型数据库中的表定义（Schema）</p><h2 id="字段（Field）"><a href="#字段（Field）" class="headerlink" title="字段（Field）"></a>字段（Field）</h2><p>类似于关系型数据库中的字段（Column）</p><h2 id="分片（Shard）"><a href="#分片（Shard）" class="headerlink" title="分片（Shard）"></a>分片（Shard）</h2><p>ES 可以将一个索引中的数据切分为多个分片</p><h3 id="分片类型"><a href="#分片类型" class="headerlink" title="分片类型"></a>分片类型</h3><ul><li>主分片（Primary Shard）</li><li>副本分配（Replica Shard）</li></ul><h1 id="Elasticsearch-Json-结构"><a href="#Elasticsearch-Json-结构" class="headerlink" title="Elasticsearch Json 结构"></a>Elasticsearch Json 结构</h1><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;KJTnBYkB5GK1mQJI5u1p&quot;</span><span class="punctuation">,</span>            <span class="comment">// 文档唯一ID</span></span><br><span class="line">    <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;properties_camera_gn_2023_06&quot;</span><span class="punctuation">,</span> <span class="comment">// 文档所属索引名</span></span><br><span class="line">    <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span>                          <span class="comment">// 文档所属类型名</span></span><br><span class="line">    <span class="attr">&quot;_version&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span>                            <span class="comment">// 文档的版本信息</span></span><br><span class="line">    <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span>                              <span class="comment">// 评分，为相关打分，是这个文档在这次查询中的算分（暂时理解为与查询条件的相关性）</span></span><br><span class="line">    <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>                              <span class="comment">// 文档元素json数据，当搜索文档的时候，默认返回的就是_source这个字段</span></span><br><span class="line">        <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="number">1688021231207</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;deviceId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7a367c995e8044f8bd4fe3a042be789c&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;intValue&quot;</span><span class="punctuation">:</span> <span class="number">333</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;messageId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;871806074498596864&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;messageType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;system&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;property&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fdsa&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;propertyType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;int&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;timestamp&quot;</span><span class="punctuation">:</span> <span class="number">1688021231161</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;built-in&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;2023-06-29T06:47:11.207Z&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;deviceId&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;7a367c995e8044f8bd4fe3a042be789c&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;intValue&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">333</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;messageId&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;871806074498596864&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;messageType&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;system&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;property&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;fdsa&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;property.keyword&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;fdsa&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;propertyType&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;int&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;propertyType.keyword&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;int&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;timestamp&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;2023-06-29T06:47:11.161Z&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;built-in&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="Elasticsearch-CRUD"><a href="#Elasticsearch-CRUD" class="headerlink" title="Elasticsearch CRUD"></a>Elasticsearch CRUD</h1><h2 id="增"><a href="#增" class="headerlink" title="增"></a>增</h2><h3 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PUT my_index/_doc/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;user&quot;</span><span class="punctuation">:</span><span class="string">&quot;mike&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;comment&quot;</span><span class="punctuation">:</span><span class="string">&quot;You know, for search&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PUT my_index/_create/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;user&quot;</span><span class="punctuation">:</span><span class="string">&quot;mike&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;comment&quot;</span><span class="punctuation">:</span><span class="string">&quot;You know, for search&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">POST my_index/_doc（不指定 ID，则会自动生成）</span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;user&quot;</span><span class="punctuation">:</span><span class="string">&quot;mike&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;comment&quot;</span><span class="punctuation">:</span><span class="string">&quot;You know, for search&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Index-VS-Create"><a href="#Index-VS-Create" class="headerlink" title="Index VS Create"></a>Index VS Create</h3><p>Index 和 Create 插入时都会检测 _version，即通过 id 得出文档的版本号（只获取版本而不是 doc 的全部内容，能够从一定程度上减少系统的开销）。如果没有指定文档 id 直接 add 固然最好，但如果指定了文档 id，那么就要进行更耗时的 update 操作，不同的是：</p><ul><li>Index 如果没有指定 version，那对于已有的 doc，_version 会递增，并对文档进行覆盖。如果指定了 _version，但与已有文档的 _version 对不上，则插入失败；如果对得上，则覆盖，_version 递增。</li><li>Create 通过 version，判断出文档已存在，则直接插入失败，抛出一个已经存在的异常。</li></ul><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><p>在批量请求的时候最好使用 create 方式进行导入。</p><p>假如你批量导入一个大小为 500MB 的文件，中途突然网络中断，可能其中有 5 万条数据已经导入，那么第二次尝试导入的时候，如果选用 index 方式，那么前 5 万条数据又会重复导入，增加了很多额外的开销，如果是 create 的话，elasticsearch 针对 bulk 操作机制是忽略已经存在的（当然在 bulk 完成后会返回哪些数据是重复的），这样就不会重复被导入了。</p><h2 id="删（Delete）"><a href="#删（Delete）" class="headerlink" title="删（Delete）"></a>删（Delete）</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE my_index/_doc/<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="改（Update）"><a href="#改（Update）" class="headerlink" title="改（Update）"></a>改（Update）</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">POST my_index/_update/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;user&quot;</span><span class="punctuation">:</span><span class="string">&quot;mike&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;comment&quot;</span><span class="punctuation">:</span><span class="string">&quot;You know, Elesticsearch&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>由于 Lucene 中的 update 其实就是覆盖替换，并不支持针对特定 Field 进行修改，Elasticsearch 中的 update 为了实现针对特定字段修改，在 Lucene 的基础上做了一些改动。</p><p>每次 update 都会调用 InternalEngine 中的 get 方法，来获取整个文档信息，从而实现针对特定字段进行修改，这也就导致了每次更新要获取一遍原始文档，性能上会有很大影响。</p><p>所以根据使用场景，有时候使用 index 会比 update 好很多。</p><h2 id="查（Read）"><a href="#查（Read）" class="headerlink" title="查（Read）"></a>查（Read）</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET my_index/_doc/<span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="Elasticsearch-Bulk-API"><a href="#Elasticsearch-Bulk-API" class="headerlink" title="Elasticsearch Bulk API"></a>Elasticsearch Bulk API</h1><p>在一个 REST 请求中，重新建立网络开销十分损耗性能，因此 ES 提供 Bulk API，支持在一次 API 调用中，对不同的索引进行操作，从而减少网络传输开销，提升写入速率。</p><p>它支持 Index、Create、Update、Delete 四种类型操作，可以在 URI 中指定索引，也可以在请求的方法体中进行。</p><p>同时多条操作中如果其中有一条失败，也不会影响其他的操作，并且返回的结果包括每一条操作执行的结果。</p><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST _bulk</span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span><span class="string">&quot;users&quot;</span><span class="punctuation">,</span><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span><span class="string">&quot;3&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;username&quot;</span><span class="punctuation">:</span><span class="string">&quot;wumx&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;delete&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span><span class="string">&quot;users&quot;</span><span class="punctuation">,</span><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span><span class="string">&quot;1&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;update&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span><span class="string">&quot;users&quot;</span><span class="punctuation">,</span><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span><span class="string">&quot;2&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="string">&quot;12&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;took&quot;</span><span class="punctuation">:</span> <span class="number">126</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;errors&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;items&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;users&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_version&quot;</span><span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;result&quot;</span><span class="punctuation">:</span> <span class="string">&quot;updated&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_shards&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;successful&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;failed&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_seq_no&quot;</span><span class="punctuation">:</span> <span class="number">28</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_primary_term&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">200</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;delete&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;users&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_version&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;result&quot;</span><span class="punctuation">:</span> <span class="string">&quot;deleted&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_shards&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;successful&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;failed&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_seq_no&quot;</span><span class="punctuation">:</span> <span class="number">29</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_primary_term&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">200</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;update&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;users&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">404</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;error&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;document_missing_exception&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;reason&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[_doc][2]: document missing&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;index_uuid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;r6N_mV8VRwmxfc4TyoKIqA&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;shard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;users&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>took 表示消耗了 93 毫秒，errors 为 true 表示在这些操作中错误发生，发现是 update 操作发生了错误，id 为 2 的文档不存在，所以报错了。</p><p>在使用 Bulk API 的时候，当 errors 为 true 时，需要把错误的操作修改掉，防止存到 ES 的数据有缺失。</p><h1 id="Elasticsearch-mget-API"><a href="#Elasticsearch-mget-API" class="headerlink" title="Elasticsearch _mget API"></a>Elasticsearch _mget API</h1><p>批量查询需要指明要查询文档的 id，可以在一个 _mget 操作里查询不同索引的数据，可以减少网络连接所产生的开销，提高性能。</p><p>下面我们来实际操作下，输入以下代码执行，就可以得到文档 id 为 1,3 的数据。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET /_mget</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;docs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;users&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;users&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;docs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;users:&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_version&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_seq_no&quot;</span><span class="punctuation">:</span> <span class="number">27</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_primary_term&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;found&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;wupx&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="string">&quot;18&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;job&quot;</span><span class="punctuation">:</span> <span class="string">&quot;coder&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;users&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_version&quot;</span><span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_seq_no&quot;</span><span class="punctuation">:</span> <span class="number">24</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_primary_term&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;found&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;wumx&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;摘录自博客：&lt;a href=&quot;https://www.cnblogs.com/wupeixuan/tag/ElasticSearch/&quot;&gt;ElasticSearch - 标签 - 武培轩 - 博客园 (cnblogs.com)&lt;/a&gt;&lt;/p&gt;
&lt;/</summary>
      
    
    
    
    <category term="编程" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Elasticsearch" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/Elasticsearch/"/>
    
    
    <category term="中间件" scheme="http://example.com/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    <category term="Elasticsearch" scheme="http://example.com/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>NodeJS安装</title>
    <link href="http://example.com/blog/a3f5c67b.html"/>
    <id>http://example.com/blog/a3f5c67b.html</id>
    <published>2023-06-09T09:46:19.000Z</published>
    <updated>2023-06-09T09:47:53.517Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NodeJS-下载"><a href="#NodeJS-下载" class="headerlink" title="NodeJS 下载"></a>NodeJS 下载</h1><p><a href="https://nodejs.org/en/">下载 NodeJS 的长期支持版本</a></p><p><a href="https://nodejs.org/en/about/releases/">查看 NodeJS 长期支持版本的生命周期</a></p><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1671692583874-b094e213-b87b-4954-8775-efbc1d91ff24.png"></p><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1671692611593-ae3989db-654e-4cc6-b36c-5e123ae233bd.png"></p><h1 id="NodeJS-安装"><a href="#NodeJS-安装" class="headerlink" title="NodeJS 安装"></a>NodeJS 安装</h1><p>一直 next 直至安装完成，安装位置建议：D:&#x2F;nodejs&#x2F;</p><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1671692749278-1f23235d-a537-45ce-9c76-ca2de0bf3900.png"></p><h1 id="NodeJS-安装完成检查"><a href="#NodeJS-安装完成检查" class="headerlink" title="NodeJS 安装完成检查"></a>NodeJS 安装完成检查</h1><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1671692930610-af309999-e17a-4346-b17a-b8e0f21e4c9a.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;NodeJS-下载&quot;&gt;&lt;a href=&quot;#NodeJS-下载&quot; class=&quot;headerlink&quot; title=&quot;NodeJS 下载&quot;&gt;&lt;/a&gt;NodeJS 下载&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://nodejs.org/en/&quot;&gt;下载 NodeJS</summary>
      
    
    
    
    <category term="编程" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="NodeJS" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/NodeJS/"/>
    
    
    <category term="NodeJS" scheme="http://example.com/tags/NodeJS/"/>
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>NodeJS简介</title>
    <link href="http://example.com/blog/ff8c64c0.html"/>
    <id>http://example.com/blog/ff8c64c0.html</id>
    <published>2023-06-09T03:33:37.000Z</published>
    <updated>2023-06-09T09:47:53.518Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>笔记参考自博客：<a href="https://www.cnblogs.com/yinzhengjie/p/14219259.html">NodeJS简介</a></p><p><a href="https://nodejs.org/zh-cn/docs/">NodeJS doc</a></p></blockquote><h1 id="关于-NodeJS"><a href="#关于-NodeJS" class="headerlink" title="关于 NodeJS"></a>关于 NodeJS</h1><p>Node.js 是一个大部分基本模块都用 JavaScript 编写的，能够在服务器端运行的 JavaScript 的开放源代码，跨平台 JavaScript 运行环境。</p><p>Node.js 采用 Google 的 V8 引擎运行 JS 代码，使用事件驱动，非阻塞和异步 I&#x2F;O 模型等技术来提高性能，可优化应用程序的传输量和规模。</p><h1 id="NodeJS-可以做什么"><a href="#NodeJS-可以做什么" class="headerlink" title="NodeJS 可以做什么"></a>NodeJS 可以做什么</h1><ol><li>Web服务API，比如REST；</li><li>实时多人游戏；</li><li>后端的Web服务，例如跨域，服务器端的请求；</li><li>基于Web的应用；</li><li>多客户端的通信，如即时通信</li></ol><p>Node.js 是基于单线程实现的，但是后台拥有一个 I&#x2F;O 线程池。可以说 Node.js 成也单线程，败也单线程，尽管单线程的处理效率很高，但也是有极限的。不过值得庆幸的是，Node.js 支持分布式，即单节点性能达到瓶颈，我们可以增加机器来解决性能问题。</p><p>综上所述，在超大并发的场景下，Node.js 并不太适合做后端的服务器开发语言，建议还是选择支持高并发的语言，比如 Java，C++，Golang 等。当然，Python 也是可以的，但由于 GIL 的存在，因此它在后端开发能力上相比 Java 和 Go，并没有特别可圈可点的地方。</p><h1 id="NodeJS-VS-JavaScript"><a href="#NodeJS-VS-JavaScript" class="headerlink" title="NodeJS VS JavaScript"></a>NodeJS VS JavaScript</h1><p>JavaScript 是在浏览器中运行的代码，他的作用域只在浏览器中，并不能超出浏览器所有的权限，而 Node.js 则跳出了浏览器的限制，可以像 Java，Python，Golang 这样的编程语言一样，可以直接和操作系统进行交互。</p><p>从 C&#x2F;S 架构来说，JavaScript 是在客户端浏览器上渲染的程序，而 Node.js 既可以充当 Client 角色，也可以充当 Server 端角色。</p><h1 id="关于-npm"><a href="#关于-npm" class="headerlink" title="关于 npm"></a>关于 npm</h1><p>npm 是 Node 的包管理器。</p><h1 id="关于-yarn"><a href="#关于-yarn" class="headerlink" title="关于 yarn"></a>关于 yarn</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;笔记参考自博客：&lt;a href=&quot;https://www.cnblogs.com/yinzhengjie/p/14219259.html&quot;&gt;NodeJS简介&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://nodejs.org/zh-cn/</summary>
      
    
    
    
    <category term="编程" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="NodeJS" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/NodeJS/"/>
    
    
    <category term="NodeJS" scheme="http://example.com/tags/NodeJS/"/>
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>nvm使用与报错</title>
    <link href="http://example.com/blog/dd102d8e.html"/>
    <id>http://example.com/blog/dd102d8e.html</id>
    <published>2023-06-09T03:32:21.000Z</published>
    <updated>2023-06-09T09:47:53.520Z</updated>
    
    <content type="html"><![CDATA[<p>nvm 安装后建议修改镜像地址，否则 nodejs 下载会很慢</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\Windows\system32&gt; nvm node_mirror https://npm.taobao.org/mirrors/node/</span><br><span class="line"><span class="built_in">PS</span> C:\Windows\system32&gt; nvm npm_mirror https://npm.taobao.org/mirrors/npm/</span><br></pre></td></tr></table></figure><h1 id="nvm-list"><a href="#nvm-list" class="headerlink" title="nvm list"></a>nvm list</h1><p>查看已安装的 nodejs版本</p><h1 id="nvm-install"><a href="#nvm-install" class="headerlink" title="nvm install"></a>nvm install</h1><h1 id="nvm-uninstall"><a href="#nvm-uninstall" class="headerlink" title="nvm uninstall"></a>nvm uninstall</h1><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\Windows\system32&gt; nvm list</span><br><span class="line"></span><br><span class="line">  * <span class="number">16.18</span>.<span class="number">0</span> (Currently <span class="keyword">using</span> 64-bit executable)</span><br><span class="line">    <span class="number">12.22</span>.<span class="number">12</span></span><br><span class="line"><span class="built_in">PS</span> C:\Windows\system32&gt; nvm install <span class="number">12.22</span>.<span class="number">12</span></span><br><span class="line">Downloading node.js version <span class="number">12.22</span>.<span class="number">12</span> (<span class="number">64</span><span class="literal">-bit</span>)...</span><br><span class="line">Complete</span><br><span class="line">Creating D:\nvm\temp</span><br><span class="line"></span><br><span class="line">Downloading npm version <span class="number">6.14</span>.<span class="number">16</span>... Complete</span><br><span class="line">Installing npm v6.<span class="number">14.16</span>...</span><br><span class="line"></span><br><span class="line">Installation complete. <span class="keyword">If</span> you want to use this version, <span class="built_in">type</span></span><br><span class="line"></span><br><span class="line">nvm use <span class="number">12.22</span>.<span class="number">12</span></span><br></pre></td></tr></table></figure><h1 id="nvm-use-报错"><a href="#nvm-use-报错" class="headerlink" title="nvm use 报错"></a>nvm use 报错</h1><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\Windows\system32&gt; nvm list</span><br><span class="line"></span><br><span class="line">  * <span class="number">16.18</span>.<span class="number">0</span> (Currently <span class="keyword">using</span> 64-bit executable)</span><br><span class="line">    <span class="number">12.22</span>.<span class="number">12</span></span><br><span class="line"><span class="built_in">PS</span> C:\Windows\system32&gt; nvm use <span class="number">12.22</span>.<span class="number">12</span></span><br><span class="line"><span class="keyword">exit</span> status <span class="number">145</span>: Ŀ¼���ǿյġ�</span><br><span class="line"></span><br><span class="line"><span class="keyword">exit</span> status <span class="number">1</span>: ���ļ��Ѵ���ʱ���޷��������ļ���</span><br></pre></td></tr></table></figure><h2 id="exit-status-1-乱码"><a href="#exit-status-1-乱码" class="headerlink" title="exit status 1: 乱码"></a>exit status 1: 乱码</h2><p>报错原因：当前的CMD窗口没有执行该命令的权限，需要使用管理员权限打开的窗口执行nvm use命令</p><p>报错原因：之前多次安装 node，出错了就删除包，再次安装，在 C:\Program Files 下是有一个 nodejs 的，但是由于已经删除了 node 的包，所以这个 nodejs 是个无效文件</p><p>报错解决：重新安装该版本 nodejs</p><h2 id="exit-status-5-乱码"><a href="#exit-status-5-乱码" class="headerlink" title="exit status 5: 乱码"></a>exit status 5: 乱码</h2><p>报错原因：nvm 不是安装在 C 盘，且当前命令提示符窗口是 user 权限</p><p>报错解决：cmd 窗口使用管理员权限打开即可</p><h2 id="exit-status-145-乱码"><a href="#exit-status-145-乱码" class="headerlink" title="exit status 145: 乱码"></a>exit status 145: 乱码</h2><p>报错原因：安装 nvm 或 nodejs 的文件本身或路径有误</p><p>报错解决：如果是覆盖旧的 nvm 安装，建议删除 nvm 文件夹，然后重新安装 nvm</p><ol><li>检查安装 nvm 路径与设置放置 nodejs 的路径或文件，是否出现空格或中文，比如默认安装路径 C:\Program Files 中出现了空格。如果有，更改路径或文件夹名称后再使用 nvm use</li><li>安装 nvm 前是否原本就有 nodejs 其它版本。如果有，且安装过程中选择合并了以前版本，可以删除 nvm 中所有 nodejs 版本（主要是安装 nvm 前就有的版本），重新安装所需 nodejs，再运行 nvm use</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;nvm 安装后建议修改镜像地址，否则 nodejs 下载会很慢&lt;/p&gt;
&lt;figure class=&quot;highlight powershell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;b</summary>
      
    
    
    
    <category term="编程" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="NodeJS" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/NodeJS/"/>
    
    
    <category term="NodeJS" scheme="http://example.com/tags/NodeJS/"/>
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Lombok注解记录</title>
    <link href="http://example.com/blog/47f664bf.html"/>
    <id>http://example.com/blog/47f664bf.html</id>
    <published>2023-06-09T03:29:49.000Z</published>
    <updated>2023-06-09T09:47:53.516Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Setter"><a href="#Setter" class="headerlink" title="@Setter"></a>@Setter</h1><p>自动添加类中所有属性相关的 set() 方法</p><h1 id="Getter"><a href="#Getter" class="headerlink" title="@Getter"></a>@Getter</h1><p>自动添加类中所有属性相关的 get() 方法</p><h1 id="Builder"><a href="#Builder" class="headerlink" title="@Builder"></a>@Builder</h1><p>使得该类可以通过 builder（建造者模式）构建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Student.builder().sno(<span class="string">&quot;001&quot;</span>).sname(<span class="string">&quot;admin&quot;</span>).sage(<span class="number">18</span>).sphone(<span class="string">&quot;110&quot;</span>).build();</span><br></pre></td></tr></table></figure><h1 id="RequiredArgsConstructor"><a href="#RequiredArgsConstructor" class="headerlink" title="@RequiredArgsConstructor"></a>@RequiredArgsConstructor</h1><p>生成一个该类的构造方法，禁止无参构造</p><h1 id="ToString"><a href="#ToString" class="headerlink" title="@ToString"></a>@ToString</h1><p>重写该类的 toString() 方法</p><h1 id="EqualsAndHashCode"><a href="#EqualsAndHashCode" class="headerlink" title="@EqualsAndHashCode"></a>@EqualsAndHashCode</h1><p>重写该类的 equals() 和 hashCode() 方法</p><h2 id="callSuper-x3D-true"><a href="#callSuper-x3D-true" class="headerlink" title="callSuper &#x3D; true"></a>callSuper &#x3D; true</h2><p>根据（子类自身的字段值 + 从父类继承的字段值）生成 hashcode</p><p>当两个子类对象比较时，如果生成的 hashcode 相同，equals() 返回 true。</p><h2 id="callSuper-x3D-false"><a href="#callSuper-x3D-false" class="headerlink" title="callSuper &#x3D; false"></a>callSuper &#x3D; false</h2><p>根据（子类自身的字段值）生成 hashcode</p><p>当两个子类对象比较时，如果只有子类对象的本身的字段值相同，equals() 就返回 true（父类字段值可以不同）</p><h1 id="Data"><a href="#Data" class="headerlink" title="@Data"></a>@Data</h1><p>&#x3D; @Setter + @Getter + @RequiredArgsConstructor + @ToString + @EqualsAndHashCode</p><p>@Data 默认比较两个对象的 hashCode，需要依据业务要求显式重写 equals() 方法，或者类上加上注解：@EqualsAndHashCode(onlyExplicitlyIncluded &#x3D; true)，然后为每一个需要比较的属性加上注解：@EqualsAndHashCode.Include</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(onlyExplicitlyIncluded = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cs</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="meta">@EqualsAndHashCode</span>.Include</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cs</span><span class="params">(<span class="type">int</span> id, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="NoArgsConstructor"><a href="#NoArgsConstructor" class="headerlink" title="@NoArgsConstructor"></a>@NoArgsConstructor</h1><p>生成无参的构造方法。</p><h2 id="staticName"><a href="#staticName" class="headerlink" title="staticName"></a>staticName</h2><p>staticName 代表的是是否生成静态构造方法，也就是说当 staticName 属性有值时则会生成一个静态构造方法，这时无参构造方法会被私有，然后创建一个指定名称的静态构造方法，并且是公有的，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编译前代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor(staticName = &quot;UserStatic&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfo</span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编译后代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfo</span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">UserInfo</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserStatic</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserStatic</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="onConstructor"><a href="#onConstructor" class="headerlink" title="onConstructor"></a>onConstructor</h2><p>经常写 Spring 或者 SpringBoot 代码的人应该知道，Spring 对于依赖注入提供了三种写法，分别是属性注入、Setter 方法注入以及构造器注入，但是在日常工作中我们更多采用的是依赖于 @Autowired 注解方式进行依赖注入，不过过多的依赖注入会使我们的代码过于冗长，甚至 Spring4.0 起就已经开始不推荐这种写法了，而是推荐使用 Setter 方法注入以及构造器注入，lombok 的生成构造器的方法就可以很方便的实现这种写法。</p><p>举一个通过构造器注入的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysLoginController</span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TokenUtils tokenUtils;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SysLoginService sysLoginService;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在这里 <span class="doctag">@Autowired</span> 是可以省略的，在这里使用只是为了介绍 onConstructor 参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SysLoginController</span> <span class="params">(TokenUtils tokenUtils, SysLoginService sysLoginService)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="built_in">this</span>.tokenUtils = tokenUtils;</span><br><span class="line">        <span class="built_in">this</span>.sysLoginService = sysLoginService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样注入 Bean 在数量较多时我们仍需编写大量代码，这个时候就可以使用 @RequiredArgsConstructor 注解来解决这个问题，至于为什么不使用 @AllArgsConstructor 注解是因为这个注解是针对所有参数的，而在这个情境下，我们只需构造 Bean 所对应的属性而不是非 Bean，所以我们只需在 Bean 对应的属性前加上 final 关键字进行修饰就可以只生成需要的有参构造函数，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编译前</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor(onConstructor = @__(@Autowired))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysLoginController</span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TokenUtils tokenUtils;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SysLoginService sysLoginService;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编译后</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysLoginController</span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TokenUtils tokenUtils;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SysLoginService sysLoginService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SysLoginController</span> <span class="params">(TokenUtils tokenUtils, SysLoginService sysLoginService)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="built_in">this</span>.tokenUtils = tokenUtils;</span><br><span class="line">        <span class="built_in">this</span>.sysLoginService = sysLoginService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="access"><a href="#access" class="headerlink" title="access"></a>access</h2><p>有的时候我们会使用单例模式，这个时候需要我们创造一个私有的无参构造方法，那么就可以使用 access 这样一个属性来设置构造起的权限，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编译前代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor(access = AccessLevel.PRIVATE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfo</span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编译后代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfo</span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">UserInfo</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>access 可选等级：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">AccessLevel</span> &#123;</span><br><span class="line">    PUBLIC,</span><br><span class="line">    MODULE,</span><br><span class="line">    PROTECTED,</span><br><span class="line">    PACKAGE,</span><br><span class="line">    PRIVATE,</span><br><span class="line">    NONE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">AccessLevel</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="force"><a href="#force" class="headerlink" title="force"></a>force</h2><p>当类中有被 final 关键字修饰的字段未被初始化时，编译器会报错，这时也可以设置 force 属性为 true 来为字段根据类型生成一个默认值 0&#x2F;false&#x2F;null，这样编译器就不会再报错了，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编译前代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor(force = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfo</span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String gender;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编译后代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfo</span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">UserInfo</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="AllArgsConstructor"><a href="#AllArgsConstructor" class="headerlink" title="@AllArgsConstructor"></a>@AllArgsConstructor</h1><p>生成全参的构造方法。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Setter&quot;&gt;&lt;a href=&quot;#Setter&quot; class=&quot;headerlink&quot; title=&quot;@Setter&quot;&gt;&lt;/a&gt;@Setter&lt;/h1&gt;&lt;p&gt;自动添加类中所有属性相关的 set() 方法&lt;/p&gt;
&lt;h1 id=&quot;Getter&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="编程" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Lombok" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/Lombok/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="Lombok" scheme="http://example.com/tags/Lombok/"/>
    
  </entry>
  
  <entry>
    <title>Lombok介绍</title>
    <link href="http://example.com/blog/b369cd6a.html"/>
    <id>http://example.com/blog/b369cd6a.html</id>
    <published>2023-06-09T03:27:08.000Z</published>
    <updated>2023-06-09T09:47:53.512Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、Lombok-是什么"><a href="#一、Lombok-是什么" class="headerlink" title="一、Lombok 是什么"></a>一、Lombok 是什么</h1><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1672124784402-4a31184d-a98c-4c97-a15c-d0a900b54c4f.png"></p><p>Lombok 项目是一个 <strong>Java 库</strong>，它可以自动插入到编辑器和构建工具中，增强 Java 的性能。不需要再写 getter、setter 或 equals方法，只要有一个注解，你的类就有一个功能齐全的构建器、自动记录变量等等。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、Lombok-是什么&quot;&gt;&lt;a href=&quot;#一、Lombok-是什么&quot; class=&quot;headerlink&quot; title=&quot;一、Lombok 是什么&quot;&gt;&lt;/a&gt;一、Lombok 是什么&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://md-pic-liang</summary>
      
    
    
    
    <category term="编程" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Lombok" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/Lombok/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="Lombok" scheme="http://example.com/tags/Lombok/"/>
    
  </entry>
  
  <entry>
    <title>JDK1.8之Lambda写法记录</title>
    <link href="http://example.com/blog/c0ad33ff.html"/>
    <id>http://example.com/blog/c0ad33ff.html</id>
    <published>2023-06-09T00:51:04.000Z</published>
    <updated>2023-06-09T01:12:13.887Z</updated>
    
    <content type="html"><![CDATA[<h1 id="List-转-Set"><a href="#List-转-Set" class="headerlink" title="List 转 Set"></a>List 转 Set</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; userList = Lists.newArrayList();</span><br><span class="line">Set&lt;String&gt; userNameSet1 = userList.stream().map(User::getUserName).collect(Collectors.toSet());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先过滤，再转Set</span></span><br><span class="line">Set&lt;String&gt; userNameSet2 = userList.stream().filter(u -&gt; u.getAge() &gt;= <span class="number">20</span>).map(User::getUserName).collect(Collectors.toSet());</span><br></pre></td></tr></table></figure><h1 id="List-转-Map"><a href="#List-转-Map" class="headerlink" title="List 转 Map"></a>List 转 Map</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; userList = Lists.newArrayList();</span><br><span class="line">Map&lt;String, List&lt;User&gt;&gt; userMap1 = userList.stream().collect(Collectors.groupingBy(User::getUserId));</span><br><span class="line"></span><br><span class="line">Map&lt;String, User&gt; userMap2 = userList.stream().collect(Collectors.toMap(User::getUserId, Function.identity()));</span><br><span class="line"></span><br><span class="line">Map&lt;String, User&gt; userMap3 = userList.stream().collect(Collectors.toMap(User::getUserId, User::getUserName));</span><br></pre></td></tr></table></figure><h1 id="List-过滤"><a href="#List-过滤" class="headerlink" title="List 过滤"></a>List 过滤</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; userList = Lists.newArrayList();</span><br><span class="line">List&lt;String&gt; schoolIdList = Lists.newArrayList();</span><br><span class="line">List&lt;User&gt; stuUserList = userList.stream().filter(u -&gt; schoolIdList.contains(u.getSchoolId())).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><h1 id="根据实体类某个属性去重"><a href="#根据实体类某个属性去重" class="headerlink" title="根据实体类某个属性去重"></a>根据实体类某个属性去重</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Collectors.collectingAndThen</span></span><br><span class="line">List&lt;User&gt; distinctList = userList.stream().collect(Collectors.collectingAndThen(Collectors.toCollection(() -&gt; <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(Comparator.comparing(User::getName))), ArrayList::<span class="keyword">new</span>));</span><br></pre></td></tr></table></figure><h1 id="Map-取-Key-补集和差集"><a href="#Map-取-Key-补集和差集" class="headerlink" title="Map 取 Key 补集和差集"></a>Map 取 Key 补集和差集</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.common.collect.Maps;</span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Sets;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NapUtil</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取Map集合的差集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S,T&gt; Map&lt;S, T&gt; <span class="title function_">getDifferenceSetByGuava</span><span class="params">(Map&lt;S, T&gt; leftMap, Map&lt;S, T&gt; rightMap)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != leftMap &amp;&amp; <span class="literal">null</span> != rightMap) &#123;</span><br><span class="line"></span><br><span class="line">            Set&lt;S&gt; leftMapKey = leftMap.keySet();</span><br><span class="line">            Set&lt;S&gt; rightMapKey = rightMap.keySet();</span><br><span class="line">            Set&lt;S&gt; differenceSet = Sets.difference(leftMapKey, rightMapKey);</span><br><span class="line">            Map&lt;S, T&gt; result = Maps.newHashMap();</span><br><span class="line">            <span class="keyword">for</span> (S key : differenceSet) &#123;</span><br><span class="line">                result.put(key, leftMap.get(key));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取Map集合的并集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S,T&gt; Map&lt;S, T&gt; <span class="title function_">getUnionSetByGuava</span><span class="params">(Map&lt;S, T&gt; leftMap, Map&lt;S, T&gt; rightMap)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != leftMap &amp;&amp; <span class="literal">null</span> != rightMap) &#123;</span><br><span class="line"></span><br><span class="line">            Set&lt;S&gt; leftMapKey = leftMap.keySet();</span><br><span class="line">            Set&lt;S&gt; rightMapKey = rightMap.keySet();</span><br><span class="line">            Set&lt;S&gt; differenceSet = Sets.union(leftMapKey, rightMapKey);</span><br><span class="line">            Map&lt;S, T&gt; result = Maps.newHashMap();</span><br><span class="line">            <span class="keyword">for</span> (S key : differenceSet) &#123;</span><br><span class="line">                <span class="keyword">if</span> (leftMap.containsKey(key)) &#123;</span><br><span class="line">                    result.put(key, leftMap.get(key));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result.put(key, rightMap.get(key));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取Map集合的交集（String,String）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S,T&gt; Map&lt;S, T&gt; <span class="title function_">getIntersectionSetByGuava</span><span class="params">(Map&lt;S, T&gt; leftMap, Map&lt;S, T&gt; rightMap)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != leftMap &amp;&amp; <span class="literal">null</span> != rightMap) &#123;</span><br><span class="line"></span><br><span class="line">            Set&lt;S&gt; leftMapKey = leftMap.keySet();</span><br><span class="line">            Set&lt;S&gt; rightMapKey = rightMap.keySet();</span><br><span class="line">            Set&lt;S&gt; differenceSet = Sets.intersection(leftMapKey, rightMapKey);</span><br><span class="line">            Map&lt;S, T&gt; result = Maps.newHashMap();</span><br><span class="line">            <span class="keyword">for</span> (S key : differenceSet) &#123;</span><br><span class="line">                result.put(key, leftMap.get(key));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Map&lt;String, Person&gt; map1 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map1.put(<span class="string">&quot;a&quot;</span>, <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">1</span>));</span><br><span class="line">        map1.put(<span class="string">&quot;b&quot;</span>, <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">2</span>));</span><br><span class="line">        map1.put(<span class="string">&quot;c&quot;</span>, <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Person&gt; map2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map2.put(<span class="string">&quot;c&quot;</span>, <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">3</span>));</span><br><span class="line">        map2.put(<span class="string">&quot;d&quot;</span>, <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">4</span>));</span><br><span class="line">        map2.put(<span class="string">&quot;e&quot;</span>, <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Map&lt;String, Person&gt; diffMap1 = getDifferenceSetByGuava(map1, map2);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------差集结果,入参:A,B  出参:A-B后A中剩余的  -----------&quot;</span>);</span><br><span class="line">        diffMap1.forEach((k, v) -&gt; System.out.println(k + <span class="string">&quot;:&quot;</span> + v));</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Person&gt; diffMap2 = getDifferenceSetByGuava(map2, map1);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------差集结果,入参:B,A  出参:B-A后B中剩余的  -----------&quot;</span>);</span><br><span class="line">        diffMap2.forEach((k, v) -&gt; System.out.println(k + <span class="string">&quot;:&quot;</span> + v));</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Person&gt; unionMap = getUnionSetByGuava(map1, map2);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------并集结果-----------&quot;</span>);</span><br><span class="line">        unionMap.forEach((k, v) -&gt; System.out.println(k + <span class="string">&quot;:&quot;</span> + v));</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Person&gt; intersectionMap = getIntersectionSetByGuava(map1, map2);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------交结果-----------&quot;</span>);</span><br><span class="line">        intersectionMap.forEach((k, v) -&gt; System.out.println(k + <span class="string">&quot;:&quot;</span> + v));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;List-转-Set&quot;&gt;&lt;a href=&quot;#List-转-Set&quot; class=&quot;headerlink&quot; title=&quot;List 转 Set&quot;&gt;&lt;/a&gt;List 转 Set&lt;/h1&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr</summary>
      
    
    
    
    <category term="编程" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Java" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/Java/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Memories-大槻真希(大槻マキ)</title>
    <link href="http://example.com/blog/f3109477.html"/>
    <id>http://example.com/blog/f3109477.html</id>
    <published>2023-06-01T08:57:56.000Z</published>
    <updated>2023-06-01T10:07:32.994Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Memories-大槻（おおつき）真希（まき）（大槻マキ）"><a href="#Memories-大槻（おおつき）真希（まき）（大槻マキ）" class="headerlink" title="Memories - 大槻（おおつき）真希（まき）（大槻マキ）"></a>Memories - <ruby>大槻<rp>（</rp><rt>おおつき</rt><rp>）</rp></ruby><ruby>真希<rp>（</rp><rt>まき</rt><rp>）</rp></ruby>（大槻マキ）</h1><p><ruby>小<rp>（</rp><rt>ちい</rt><rp>）</rp></ruby>さな<ruby>頃<rp>（</rp><rt>ころ</rt><rp>）</rp></ruby>には<ruby>宝<rp>（</rp><rt>たから</rt><rp>）</rp></ruby>の<ruby>地図<rp>（</rp><rt>ちず</rt><rp>）</rp></ruby>が<br>小时候藏宝图</p><p><ruby>頭<rp>（</rp><rt>あたま</rt><rp>）</rp></ruby>の<ruby>中<rp>（</rp><rt>なか</rt><rp>）</rp></ruby>に<ruby>浮<rp>（</rp><rt>う</rt><rp>）</rp></ruby>かんでいて<br>总是浮现在脑海中</p><p>いつでも<ruby>探<rp>（</rp><rt>さが</rt><rp>）</rp></ruby>した<ruby>キセキ<rp>（</rp><rt>きせき</rt><rp>）</rp></ruby>の<ruby>場所<rp>（</rp><rt>ばしょ</rt><rp>）</rp></ruby>を<br>永远在寻找奇迹之地</p><p><ruby>知<rp>（</rp><rt>し</rt><rp>）</rp></ruby>らない<ruby>誰<rp>（</rp><rt>だれ</rt><rp>）</rp></ruby>かに<ruby>負<rp>（</rp><rt>ま</rt><rp>）</rp></ruby>けないよに<br>不输给远方的某人</p><p><ruby>今<rp>（</rp><rt>いま</rt><rp>）</rp></ruby>ではほこりだらけの<ruby>毎日<rp>（</rp><rt>まいにち</rt><rp>）</rp></ruby><br>现在的每一天都充满尘埃</p><p>いつの<ruby>日<rp>（</rp><rt>ひ</rt><rp>）</rp></ruby>かすべての<br>等到哪一天这所有的一切</p><p><ruby>時<rp>（</rp><rt>とき</rt><rp>）</rp></ruby>に<ruby>身<rp>（</rp><rt>み</rt><rp>）</rp></ruby>を<ruby>委<rp>（</rp><rt>まか</rt><rp>）</rp></ruby>せるだけ<br>都随风逝去</p><p>もしも<ruby>世界<rp>（</rp><rt>せかい</rt><rp>）</rp></ruby>が<ruby>変<rp>（</rp><rt>か</rt><rp>）</rp></ruby>わるのなら<br>如果世界能够改变</p><p><ruby>何<rp>（</rp><rt>なに</rt><rp>）</rp></ruby>も<ruby>知<rp>（</rp><rt>し</rt><rp>）</rp></ruby>らない<ruby>頃<rp>（</rp><rt>ころ</rt><rp>）</rp></ruby>の<ruby>私<rp>（</rp><rt>わたし</rt><rp>）</rp></ruby>に<br>请带着我回到</p><p><ruby>連<rp>（</rp><rt>つ</rt><rp>）</rp></ruby>れていって<br>一无所知的过去</p><p><ruby>思<rp>（</rp><rt>おも</rt><rp>）</rp></ruby>い<ruby>出<rp>（</rp><rt>で</rt><rp>）</rp></ruby>が<ruby>色<rp>（</rp><rt>いろ</rt><rp>）</rp></ruby>あせないように<br>但愿美好回忆永不退色</p><p><ruby>小<rp>（</rp><rt>ちい</rt><rp>）</rp></ruby>さな<ruby>頃<rp>（</rp><rt>ころ</rt><rp>）</rp></ruby>から<ruby>歌<rp>（</rp><rt>うた</rt><rp>）</rp></ruby>を<ruby>唄<rp>（</rp><rt>うた</rt><rp>）</rp></ruby>って<br>小时候唱起的歌</p><p><ruby>夢見<rp>（</rp><rt>ゆめみ</rt><rp>）</rp></ruby>る<ruby>心<rp>（</rp><rt>こころ</rt><rp>）</rp></ruby>あたためてた<br>温暖着梦想的心</p><p>みんなで<ruby>真似<rp>（</rp><rt>まね</rt><rp>）</rp></ruby>した<br>大家模仿过的</p><p><ruby>秘密<rp>（</rp><rt>ひみつ</rt><rp>）</rp></ruby>の<ruby>メロディー<rp>（</rp><rt>めろでぃー</rt><rp>）</rp></ruby><br>秘密的旋律</p><p><ruby>今度<rp>（</rp><rt>こんど</rt><rp>）</rp></ruby>は<ruby>上手<rp>（</rp><rt>じょうず</rt><rp>）</rp></ruby>に<ruby>聞<rp>（</rp><rt>き</rt><rp>）</rp></ruby>こえるように<br>下一次一定会更加的动听</p><p><ruby>今<rp>（</rp><rt>いま</rt><rp>）</rp></ruby>ではため<ruby>息<rp>（</rp><rt>いき</rt><rp>）</rp></ruby>ついてばかりで<br>现在的我仍在不断叹息</p><p><ruby>誰<rp>（</rp><rt>だれ</rt><rp>）</rp></ruby>もまだ<ruby>本当<rp>（</rp><rt>ほんとう</rt><rp>）</rp></ruby>の<br>我们都还未抓住</p><p><ruby>夢<rp>（</rp><rt>ゆめ</rt><rp>）</rp></ruby>さえつかめないまま<br>各自真正的梦想</p><p>もしも<ruby>時代<rp>（</rp><rt>じだい</rt><rp>）</rp></ruby>が<ruby>戻<rp>（</rp><rt>もど</rt><rp>）</rp></ruby>るのなら<br>如果时间可以倒流</p><p><ruby>涙<rp>（</rp><rt>なみだ</rt><rp>）</rp></ruby>を<ruby>知<rp>（</rp><rt>し</rt><rp>）</rp></ruby>った<ruby>頃<rp>（</rp><rt>ころ</rt><rp>）</rp></ruby>の<ruby>私<rp>（</rp><rt>わたし</rt><rp>）</rp></ruby>に<br>请带着我回到</p><p><ruby>連<rp>（</rp><rt>つ</rt><rp>）</rp></ruby>れていって<br>初识泪水的那一刻</p><p>せつなさが<ruby>追<rp>（</rp><rt>お</rt><rp>）</rp></ruby>いつかないように<br>但愿可以成功摆脱悲伤</p><p>もしも<ruby>世界<rp>（</rp><rt>せかい</rt><rp>）</rp></ruby>が<ruby>変<rp>（</rp><rt>か</rt><rp>）</rp></ruby>わるのなら<br>如果世界能够改变</p><p><ruby>何<rp>（</rp><rt>なに</rt><rp>）</rp></ruby>も<ruby>知<rp>（</rp><rt>し</rt><rp>）</rp></ruby>らない<ruby>頃<rp>（</rp><rt>ころ</rt><rp>）</rp></ruby>の<ruby>私<rp>（</rp><rt>わたし</rt><rp>）</rp></ruby>に<br>请带着我回到</p><p><ruby>連<rp>（</rp><rt>つ</rt><rp>）</rp></ruby>れていって<br>一无所知的过去</p><p><ruby>思<rp>（</rp><rt>おも</rt><rp>）</rp></ruby>い<ruby>出<rp>（</rp><rt>で</rt><rp>）</rp></ruby>が<ruby>色<rp>（</rp><rt>いろ</rt><rp>）</rp></ruby>あせないように<br>但愿美好回忆永不退色</p><p><ruby>連<rp>（</rp><rt>つ</rt><rp>）</rp></ruby>れていって<br>请带我走吧</p><p>せつなさが<ruby>追<rp>（</rp><rt>お</rt><rp>）</rp></ruby>いつかないように<br>但愿可以成功摆脱悲伤</p><p>【<ruby>终<rp>（</rp><rt>お</rt><rp>）</rp></ruby>わった】</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Memories-大槻（おおつき）真希（まき）（大槻マキ）&quot;&gt;&lt;a href=&quot;#Memories-大槻（おおつき）真希（まき）（大槻マキ）&quot; class=&quot;headerlink&quot; title=&quot;Memories - 大槻（おおつき）真希（まき）（大槻マキ）&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="生活" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="学习" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>数据库事务</title>
    <link href="http://example.com/blog/587418e1.html"/>
    <id>http://example.com/blog/587418e1.html</id>
    <published>2023-04-24T03:37:42.000Z</published>
    <updated>2023-04-24T05:05:31.449Z</updated>
    
    <content type="html"><![CDATA[<p>数据库事务就是一组 SQL 语句，这组 SQL 语句是一个逻辑工作单元。该单元<strong>作为一个整体永久性地修改</strong>或<strong>作为一个整体取消</strong>对数据库的修改。</p><p>定义事务的语句一般有三条：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span> TRANSACTION; <span class="comment">-- 表示事务开始</span></span><br><span class="line"><span class="keyword">COMMIT</span>;            <span class="comment">-- 表示事务提交</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;          <span class="comment">-- 表示事务回滚</span></span><br></pre></td></tr></table></figure><h1 id="一、-当前读和快照读"><a href="#一、-当前读和快照读" class="headerlink" title="一、 当前读和快照读"></a>一、 当前读和快照读</h1><h2 id="1-1-当前读"><a href="#1-1-当前读" class="headerlink" title="1.1 当前读"></a>1.1 当前读</h2><p>当前读<strong>读取的是数据的最新版本</strong>，要保证其他并发事务不能修改当前记录，所以会对读取的记录进行加锁。</p><p>像 select …… lock in share mode（共享锁）；select …… for update，update，insert，delete（排他锁）这些操作都会触发当前读。</p><h2 id="1-2-快照读"><a href="#1-2-快照读" class="headerlink" title="1.2 快照读"></a>1.2 快照读</h2><p>像不加锁的 select …… 操作就是快照读，即不加锁的非阻塞读。</p><p>快照读的前提是：<strong>隔离级别不是串行级别</strong>，串行级别下的快照读会退化成当前读。</p><p>之所以出现快照读的情况，是基于提高并发性能的考虑，快照读的实现是基于多版本并发控制，即 MVCC，可以认为 MVCC 是行锁的一个变种，但它在很多情况下，避免了加锁操作，降低了开销；既然是基于多版本，即快照读<strong>可能读到的并不一定是数据的最新版本，而有可能是之前的历史版本</strong>。</p><h1 id="二、MVCC（多版本并发控制）"><a href="#二、MVCC（多版本并发控制）" class="headerlink" title="二、MVCC（多版本并发控制）"></a>二、MVCC（多版本并发控制）</h1><p>MVCC（Multi-Version Concurrency Control），即多版本并发控制，是 MySQL 事务隔离级别中的一个重要概念。</p><p>这是一种并发控制的方法，一般在数据库管理系统中，实现对数据库的并发访问，在编程语言中实现事务内存。</p><p>MVCC 在 MySQL InnoDB 中的实现主要是为了提高数据库并发性能，用更好的方式去处理读-写冲突，做到即使有读写冲突时，也能做到不加锁，非阻塞并发读。</p><p>这仅仅只是一种理想的概念，即：维持一个数据的多个版本，使得读写操作没有冲突。</p><p>快照读就是 MySQL 为了实现 MVCC 理想模型，的其中一个具体非阻塞读功能。</p><h2 id="2-1-MVCC-实现原理"><a href="#2-1-MVCC-实现原理" class="headerlink" title="2.1 MVCC 实现原理"></a>2.1 MVCC 实现原理</h2><p>MySQL 4.1开始支持每个 InnoDB 引擎的表单独放到一个表空间里。InnoDB 通过使用 MVCC 来获取高并发性，并且实现 SQL 标准的 4 种隔离级别，同时使用一种被称为 next-key locking 的策略来避免幻读（phantom）现象。</p><p>除此之外 InnoDB 引擎还提供了插入缓存（insert buffer）、二次写（double write）、自适应哈西索引（adaptive hash index）、预读（read ahead）等高性能技术。</p><h3 id="2-1-1-隐式字段"><a href="#2-1-1-隐式字段" class="headerlink" title="2.1.1 隐式字段"></a>2.1.1 隐式字段</h3><ul><li>DB_TRX_ID：6byte，创建或者最后一次修改该记录的事务 ID</li><li>DB_ROW_ID：6byte，隐藏主键【如果当前表有主键，则隐藏主键&#x3D;主键；如果没有主键，则 InnoDB 会自动以 DB_ROW_ID 产生一个聚簇索引】</li><li>DB_ROLL_PTR：7byte，回滚指针【如果是新插入的数据，回滚指针为null】</li></ul><p>例如：insert 一条数据</p><table border="1" style="table-layout:fixed;">    <tr>        <th style="text-align:center" bgcolor="#91d5ff">name</th>        <th style="text-align:center" bgcolor="#91d5ff">age</th>        <th style="text-align:center" bgcolor="#91d5ff">gender</th>        <th style="text-align:center" bgcolor="#ffa940">DB_TRX_ID</th>        <th style="text-align:center" bgcolor="#ffa940">DB_ROLL_PTR</th>        <th style="text-align:center" bgcolor="#ffa940">DB_ROW_ID</th>    </tr>    <tr align="center">        <td bgcolor="#91d5ff">李四</td>        <td bgcolor="#91d5ff">12</td>        <td bgcolor="#91d5ff">man</td>        <td bgcolor="#ffa940">1</td>        <td bgcolor="#ffa940">1</td>        <td bgcolor="#ffa940">null</td>    </tr>    <tr align="center">        <td colspan="3">对用户可见</td>        <td colspan="3">对用户不可见</td>    </tr></table><h3 id="2-1-2-undolog（回滚日志）"><a href="#2-1-2-undolog（回滚日志）" class="headerlink" title="2.1.2 undolog（回滚日志）"></a>2.1.2 undolog（回滚日志）</h3><p>同一条数据，多次修改会存在多个历史版本，保存在 undolog 中，形成一个<strong>线性表（链表）</strong>。其中链首存储的是最新的历史记录，链尾是最早的历史记录。</p><p>数据表中有多条数据，多条数据发生了多次修改，那么则会存在多个链表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> table_a <span class="keyword">SET</span> name <span class="operator">=</span> &quot;李四&quot;;</span><br></pre></td></tr></table></figure><table border="1" style="table-layout:fixed;">    <tr>        <th style="text-align:center" bgcolor="#40a9ff">name</th>        <th style="text-align:center" bgcolor="#40a9ff">age</th>        <th style="text-align:center" bgcolor="#40a9ff">gender</th>        <th style="text-align:center" bgcolor="#ffa940">DB_TRX_ID</th>        <th style="text-align:center" bgcolor="#ffa940">DB_ROLL_PTR</th>        <th style="text-align:center" bgcolor="#ffa940">DB_ROW_ID</th>    </tr>    <tr align="center">        <td bgcolor="#40a9ff">李四</td>        <td bgcolor="#40a9ff">12</td>        <td bgcolor="#40a9ff">man</td>        <td bgcolor="#ffa940">2</td>        <td bgcolor="#ffa940">1</td>        <td bgcolor="#ffa940">0x123</td>    </tr>    <tr align="center">        <td colspan="3">对用户可见</td>        <td colspan="3">对用户不可见</td>    </tr></table>这时旧数据会保存到 undolog 中，新数据的【回滚指针（DB_ROLL_PTR）】指向 undolog 中旧数据的【回滚指针（DB_ROLL_PTR）】<h3 id="2-1-3-readview（读视图）"><a href="#2-1-3-readview（读视图）" class="headerlink" title="2.1.3 readview（读视图）"></a>2.1.3 readview（读视图）</h3><p>事务在进行快照读（select ……）的时候，会产生【readview（读视图）】</p><p>事务在执行快照读的那一刻，会生成数据库系统当前的一个快照。记录并维护系统当前活跃事务的ID（当每个事务开启时，都会被分配一个ID, 这个ID是递增的，所以最新的事务，ID值越大）</p><ul><li>trx_list：系统活跃的事务 ID</li><li>up_limit_id：列表中事务最小的 ID</li><li>low_limit_id：系统尚未分配的下一个事务 ID</li></ul><p>当一个事务在进行快照读时，能否读取到其他事务刚刚 update 并 commit 的记录？</p><ol><li>首先判断 DB_TRX_ID 和 update_limit_id 的关系。如果 DB_TRX_ID &lt; update_limit_id，则当前事务能看到 DB_TRX_ID 所 commit 的记录；否则进入下个判断</li><li>接着判断 DB_TRX_ID 和 low_limit_id 的关系。如果 DB_TRX_ID &gt;&#x3D; low_limit_id，则代表 DB_TRX_ID 所 commit 的记录是在生成 readview 之后，对于当前事务肯定是不可见的；反之进入下个判断</li><li>最后判断 DB_TRX_ID 和 trx_list 的关系。如果 DB_TRX_ID 存在于 【活跃事务（trx_list）】中，则代表在生成 readview 的时候，DB_TRX_ID 还是处在活跃状态，还没有 commit，因此 DB_TRX_ID update 的数据在当前事务是看不到的；如果不在，则说明这个事务在 readview 生成之前就已经 commit 了，那么DB_TRX_ID update 的结果是能够看见的</li></ol><h4 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h4><table border="1" style="table-layout:fixed;">    <tr align="center">        <td>事务1</td>        <td>事务2</td>        <td>事务3</td>        <td>事务4</td>    </tr>    <tr align="center">        <td>begin（开启）</td>        <td>begin（开启）</td>        <td>begin（开启）</td>        <td>begin（开启）</td>    </tr>    <tr align="center">        <td></td>        <td></td>        <td></td>        <td>update<br>commit</td>    </tr>    <tr align="center">        <td></td>        <td>select ……（快照读）</td>        <td></td>        <td></td>    </tr></table><p>此时事务2能不能读取到事务4 commit 的记录？</p><p>分析：事务2 select ……（快照读）产生的 readview</p><table border="1" style="table-layout:fixed;">    <tr>        <td>low_limit_id</td>        <td>1，2，3（因为4已经 commit，因此不是活跃事务）</td>    </tr>    <tr>        <td>up_limit_id</td>        <td>1</td>    </tr>    <tr>        <td>low_limit_id</td>        <td>5</td>    </tr></table><table border="1" style="table-layout:fixed;">    <tr>        <td>DB_TRX_ID</td>        <td>4</td>    </tr></table><ol><li>4 &gt; 1（DB_TRX_ID &gt; update_limit_id），进入下个判断</li><li>4 &lt; 5（DB_TRX_ID &lt; low_limit_id），进入下个判断</li><li>4 不存在于 trx_list 中，事务2 select ……（快照读）能够看到事务4 commit 的记录。</li></ol><p>实际测试：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;autocommit&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="operator">|</span> autocommit    <span class="operator">|</span> <span class="keyword">ON</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> autocommit<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;autocommit&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="operator">|</span> autocommit    <span class="operator">|</span> OFF   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><table border="1" style="table-layout:fixed;">    <tr>        <th style="text-align:center">窗口1</th>        <th style="text-align:center">窗口2</th>    </tr>    <tr>        <td>mysql> begin;<br>Query OK, 0 rows affected (0.00 sec)</td>        <td>mysql> begin;<br>Query OK, 0 rows affected (0.00 sec)</td>    </tr>    <tr>        <td>mysql> select * from tt17;<br>+----+------+------+<br>| id | name | age  |<br>+----+------+------+<br>|  1 | 1    |    1 |<br>|  2 | 2    |    2 |<br>|  3 | 3    |    3 |<br>+----+------+------+<br>3 rows in set (0.00 sec)</td>        <td>mysql> select * from tt17;<br>+----+------+------+<br>| id | name | age  |<br>+----+------+------+<br>|  1 | 1    |    1 |<br>|  2 | 2    |    2 |<br>|  3 | 3    |    3 |<br>+----+------+------+<br>3 rows in set (0.00 sec)</td>    </tr>    <tr>        <td></td>        <td>mysql> update tt17 set name = "zhangsan";<br>Query OK, 3 rows affected (0.00 sec)<br>Rows matched: 3  Changed: 3  Warnings: 0<br><br>mysql> commit;<br>Query OK, 0 rows affected (0.04 sec)</td>    </tr>    <tr>        <td>mysql> select * from tt17;<br>+----+------+------+<br>| id | name | age  |<br>+----+------+------+<br>|  1 | 1    |    1 |<br>|  2 | 2    |    2 |<br>|  3 | 3    |    3 |<br>+----+------+------+<br>3 rows in set (0.00 sec)</td>        <td>mysql> select * from tt17;<br>+----+------+------+<br>| id | name | age  |<br>+----+------+------+<br>|  1 | 1    |    1 |<br>|  2 | 2    |    2 |<br>|  3 | 3    |    3 |<br>+----+------+------+<br>3 rows in set (0.00 sec)</td>    </tr></table><p>此时，在实际测试中，事务2 select ……（快照读）看不到事务4 commit 的记录，与分析结果相反！(╬￣皿￣)</p><p>继续冷静分析：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> @<span class="variable">@transaction</span>_isolation;</span><br><span class="line">ERROR <span class="number">1193</span> (HY000): <span class="literal">Unknown</span> <span class="keyword">system</span> variable <span class="string">&#x27;transaction_isolation&#x27;</span></span><br><span class="line"><span class="comment">-- 这里可能会遇到 mysql-connector-java 的 jar 包版本高，而 mysql 版本低的情况。低版本的 mysql 只识别 tx_isolation，不识别 transaction_isolation</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> @<span class="variable">@tx</span>_isolation;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@tx</span>_isolation  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+</span></span><br><span class="line"><span class="operator">|</span> REPEATABLE<span class="operator">-</span>READ <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>可知当前数据的隔离级别为默认的可重复读（RR）。</p><p>因为<strong>可重复读（RR）和读已提交（RC）生成 readview 的时机是不同的</strong>。</p><ul><li>读已提交（RC）每次在进行 select ……（快照读）的时候都会生成新的 readview；</li><li>可重复读（RR）只有在第一次进行 select ……（快照读）的时候才会生成 readview，之后的读操作都只会用第一次生成的 readview</li></ul><p>在实际测试时，是先进行了一次 select ……（快照读），生成了 readview，与分析案例有出入，此时事务4仍然在 trx_list 中，在第三步判断时，commit 发生于生成快照读之后，因此看不到是正常现象。</p><p>总结：</p><ul><li>隔离级别为读已提交（RC）的时候，事务2 select ……（快照读）可以看到事务4 commit 的记录；</li><li>隔离级别为可重复读（RR）的时候，事务2 select ……（快照读）看不到事务4 commit 的记录</li></ul><h1 id="三、事务的-ACID-特性"><a href="#三、事务的-ACID-特性" class="headerlink" title="三、事务的 ACID 特性"></a>三、事务的 ACID 特性</h1><h2 id="3-1-A【Atomicity（原子性）】"><a href="#3-1-A【Atomicity（原子性）】" class="headerlink" title="3.1 A【Atomicity（原子性）】"></a>3.1 A【Atomicity（原子性）】</h2><p>一个事务中所包含的全部 SQL 语句是一个执行整体，不可分割，要么全执行，要么全取消。</p><p><strong>通过【回滚日志（undolog）】来实现</strong></p><h2 id="3-2-C【Consistency（一致性）】"><a href="#3-2-C【Consistency（一致性）】" class="headerlink" title="3.2 C【Consistency（一致性）】"></a>3.2 C【Consistency（一致性）】</h2><p>即数据库在事务操作前和事务处理后，其中的数据必须都要满足业务规范约束。如果在事务中出现错误，那么系统中的所有变化将自动地回滚，系统返回到原始状态。</p><p>（例如：银行转账，应先减后加，如果减后断电没有加上，不满足业务规范的约束，事务就要回滚，转账取消）</p><p><strong>依赖于其他三个特性来实现</strong></p><h2 id="3-3-I【-Isolation（隔离性）】"><a href="#3-3-I【-Isolation（隔离性）】" class="headerlink" title="3.3 I【 Isolation（隔离性）】"></a>3.3 I【 Isolation（隔离性）】</h2><p>指的是多个事务并发地独立运行，而不能互相干扰，事务提交时根据当前数据库状态进行操作。</p><p><strong>通过【MVCC】来实现</strong></p><h3 id="3-3-1-四种隔离级别"><a href="#3-3-1-四种隔离级别" class="headerlink" title="3.3.1 四种隔离级别"></a>3.3.1 四种隔离级别</h3><p><a href="https://liangxujian.github.io/blog/ebc52c.html">事务的四种隔离级别</a></p><h3 id="3-3-2-RR-和-RC"><a href="#3-3-2-RR-和-RC" class="headerlink" title="3.3.2 RR 和 RC"></a>3.3.2 RR 和 RC</h3><p>MVCC 只在 RR 和 RC 两个隔离级别下工作。</p><ol><li>在 RR 隔离级别下，【事务A】对某些记录的第一次查询会生成一个【快照（readview）】，此后【事务A】对这些记录的查询会继续使用这个【快照（readview）】。这会导致在生成【快照（readview）】之后，其他事务对这些记录的修改对【事务A】不可见；</li><li>在 RC 隔离级别下，【事务B】对某些记录的第一次查询会生成一个【快照（readview）】，但是【事务B】之后对这些记录的查询都会重新生成一个【快照（readview）】。也就是说，其他事务对这些记录的修改对【事务B】可见；</li><li>RC 的性能比 RR 好，因为 RC 允许【不可重复读】和【幻读】。</li></ol><h3 id="3-3-3-怎么处理幻读"><a href="#3-3-3-怎么处理幻读" class="headerlink" title="3.3.3 怎么处理幻读"></a>3.3.3 怎么处理幻读</h3><p>处理幻读有两种方案：</p><ul><li>将隔离级别提高到 Serializable 级别</li><li>加 Next-Key Lock 锁</li></ul><p>一般不会将数据库的隔离级别设置为 Serializable，加 Next-Key Lock 锁是比较常用的方法。</p><p>InnoDB 有三种锁算法：</p><ul><li>记录锁（Record Lock）：单个行记录加锁</li><li>间隙锁（Gap Lock）：锁定一个范围，但不含记录本身</li><li>临键锁（Next-Key Lock）：Record Lock + Gap Lock</li></ul><p>table_a 表中有如下数据：</p><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230423170339990.png"></p><p>这里可知有：</p><ul><li>间隙锁：（-∞，1）</li><li>记录锁：1</li><li>间隙锁：（1，10）</li><li>记录锁：10</li><li>间隙锁：（10，30）</li><li>记录锁：30</li><li>间隙锁：（30，+∞）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- uid列为主键</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_a <span class="keyword">WHERE</span> uid <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="comment">-- 主键uid=10记录存在，只对id=10的记录加Record Lock</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_a <span class="keyword">WHERE</span> uid <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"><span class="comment">-- 主键uid=8记录不存在，加间隙锁Gap Lock：（1, 10）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_a <span class="keyword">WHERE</span> uid <span class="operator">&gt;</span> <span class="number">12</span>;</span><br><span class="line"><span class="comment">-- 主键使用范围查询，上锁范围为：（10,30）∪30∪（30，+∞）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- age列为索引列</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_a <span class="keyword">WHERE</span> age <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line"><span class="comment">-- 条件过滤对应记录存在，除了会对主键uid=10的记录加Record Lock，</span></span><br><span class="line"><span class="comment">-- 还会对普通索引字段加锁：[10，50]</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_a <span class="keyword">WHERE</span> age <span class="operator">=</span> <span class="number">40</span>;</span><br><span class="line"><span class="comment">-- 条件过滤对应记录不存在，只会对普通索引字段加锁：(30，50]</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_a <span class="keyword">WHERE</span> age <span class="operator">&gt;</span> <span class="number">40</span>;</span><br><span class="line"><span class="comment">-- 普通索引使用范围查询，上锁范围为：（30，+∞）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_a <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;AAA&#x27;</span>;</span><br><span class="line"><span class="comment">-- name列没有索引，则会进行全表扫描，所有记录都会加上临键锁，相当于锁表</span></span><br></pre></td></tr></table></figure><h2 id="3-4-D【Durability（持久性）】"><a href="#3-4-D【Durability（持久性）】" class="headerlink" title="3.4 D【Durability（持久性）】"></a>3.4 D【Durability（持久性）】</h2><p>也称为永久性，指的是事务在处理结束后，对数据库的修改是永久性的，即使系统故障也不会丢失。</p><p><strong>通过【redolog】来实现</strong></p><h3 id="3-4-1-数据更新流程"><a href="#3-4-1-数据更新流程" class="headerlink" title="3.4.1 数据更新流程"></a>3.4.1 数据更新流程</h3><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230423170339991.png"></p><ol><li>执行器先从 InnoDB 引擎中找到数据，如果在 Buffer Pool 内存中则直接返回；如果不在则【随机读】查询磁盘文件后返回</li><li>执行器拿到数据之后会先修改数据，然后调用 InnoDB 引擎接口重新写入数据</li><li>InnoDB 引擎将数据更新到内存，同时【顺序写】数据到 redolog 中，此时 redolog 状态为 prepare</li><li>执行器生成这个操作的 binlog</li><li>执行器调用 InnoDB 引擎的事务提交接口，InnoDB 引擎把刚刚写完的 redolog 状态改为 commit，数据更新完成</li></ol><h3 id="3-4-2-【随机读写】和【顺序读写】"><a href="#3-4-2-【随机读写】和【顺序读写】" class="headerlink" title="3.4.2 【随机读写】和【顺序读写】"></a>3.4.2 【随机读写】和【顺序读写】</h3><p>因为，【顺序读写】的效率远远高于【随机读写】。</p><p>所以，为了保证数据的一致性，会先将数据的更新结果【顺序写】入到 redolog 日志文件中，然后再将数据写入到对应的磁盘文件中【WAL（write ahead log）机制：先写日志，再写数据】。这样的设计，其效率优于直接随机读写磁盘文件。</p><p>由此可知，如果发生异常情况，导致实际数据未能写入到磁盘，只要日志文件保存成功了，那么数据就不会丢失，可以根据日志来进行数据恢复。</p><h3 id="3-4-3-数据恢复分析"><a href="#3-4-3-数据恢复分析" class="headerlink" title="3.4.3 数据恢复分析"></a>3.4.3 数据恢复分析</h3><ul><li>redolog 处于 prepare 状态，binlog 未写入，干掉 redolog 的 prepare 状态，数据更新操作丢失、回滚；</li><li>redolog 处于 prepare 状态，binlog 已写入，redolog 的 prepare 状态改为 commit，更新数据提交</li></ul><h1 id="四、不能用于事务的操作"><a href="#四、不能用于事务的操作" class="headerlink" title="四、不能用于事务的操作"></a>四、不能用于事务的操作</h1><ul><li>创建数据库（create database）</li><li>修改数据库（alter database）</li><li>删除数据库（drop database）</li><li>恢复数据库（restore database）</li><li>加载数据库（load database）</li><li>备份日志文件（backup log）</li><li>恢复日志文件（restore log）</li><li>更新统计数据（update statitics）</li><li>授权操作（grant）</li><li>复制事务日志（dump tran）</li><li>磁盘初始化（disk init）</li><li>更新使用sp_configure后的系统配置（reconfigure）</li></ul><p></br></br></br></br></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;数据库事务就是一组 SQL 语句，这组 SQL 语句是一个逻辑工作单元。该单元&lt;strong&gt;作为一个整体永久性地修改&lt;/strong&gt;或&lt;strong&gt;作为一个整体取消&lt;/strong&gt;对数据库的修改。&lt;/p&gt;
&lt;p&gt;定义事务的语句一般有三条：&lt;/p&gt;
&lt;figure c</summary>
      
    
    
    
    <category term="编程" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="MySQL" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/MySQL/"/>
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
    <category term="Database" scheme="http://example.com/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>事务的四种隔离级别</title>
    <link href="http://example.com/blog/ebc52c.html"/>
    <id>http://example.com/blog/ebc52c.html</id>
    <published>2023-04-24T03:18:56.000Z</published>
    <updated>2023-04-24T13:23:09.275Z</updated>
    
    <content type="html"><![CDATA[<ol><li>Read Uncommitted（读未提交）：保证了读取过程中不会读取到非法数据。</li><li>READ COMMITTED（读已提交）：大多数主流数据库的默认事务等级，保证了一个事务不会读到另一个并行事务已修改但仍未提交的数据，避免了“脏读”。该级别适用大多数系统。</li><li>REPEATABLE READ（可重复读）：保证了一个事务不会修改已经由另一个事务读取但未提交（回滚）的数据。避免了“脏读”和“不可重复读”，但是带来了更多的性能损失。</li><li>Serializable（串行化）：最严格的级别，事务串行执行，资源消耗最大。</li></ol><table border="1" style="table-layout:fixed;">    <tr>        <th style="text-align:center">隔离级别</th>        <th style="text-align:center">脏读<br>Dirty reads</th>        <th style="text-align:center">脏读<br>Dirty reads</th>        <th style="text-align:center">幻读<br>phantom</th>    </tr>    <tr>        <td>Read Uncommitted<br>读未提交（不加锁）</td>        <td bgcolor="#73d13d" style="text-align:center">√</td>        <td bgcolor="#73d13d" style="text-align:center">√</td>        <td bgcolor="#73d13d" style="text-align:center">√</td>    </tr>    <tr>        <td>READ COMMITTED<br>读已提交（RC）</td>        <td bgcolor="#ff4d4f" style="text-align:center">×</td>        <td bgcolor="#73d13d" style="text-align:center">√</td>        <td bgcolor="#73d13d" style="text-align:center">√</td>    </tr>    <tr>        <td>REPEATABLE READ<br>可重复读（RR）（默认）</td>        <td bgcolor="#ff4d4f" style="text-align:center">×</td>        <td bgcolor="#ff4d4f" style="text-align:center">×</td>        <td bgcolor="#73d13d" style="text-align:center">√</td>    </tr>    <tr>        <td>Serializable<br>串行化（全程加锁）</td>        <td bgcolor="#ff4d4f" style="text-align:center">×</td>        <td bgcolor="#ff4d4f" style="text-align:center">×</td>        <td bgcolor="#ff4d4f" style="text-align:center">×</td>    </tr></table><ul><li>脏读：读到了其他事务未提交的脏数据。<br>例如：事务 B 执行过程中修改了数据 X，在未提交前，事务 A 也读取了 X，但事务 B 却回滚了，这样事务 A 就形成了脏读。</li><li>不可重复读：在一个事务内，最开始读到的数据和事务结束前任意时刻读到的同一批数据出现不一致的情况。<br>例如：事务 A 先读取了一条数据，然后再执行逻辑的时候，事务 B 将这条数据改变了，然后事务 A 再次读取该数据，发现数据不匹配，这就是所谓的不可重复读。</li><li>幻读：事务的某次 select 操作得到的结果所表示的数据状态无法支撑其后续的业务操作。<br>例如：事务 A select 某条记录是否存在，不存在，准备插入此记录，但执行 insert 操作的时候发现此记录已存在，此时就产生了幻读。</li></ul><p></br></br></br></br></p>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;Read Uncommitted（读未提交）：保证了读取过程中不会读取到非法数据。&lt;/li&gt;
&lt;li&gt;READ COMMITTED（读已提交）：大多数主流数据库的默认事务等级，保证了一个事务不会读到另一个并行事务已修改但仍未提交的数据，避免了“脏读”。该级别适用</summary>
      
    
    
    
    <category term="编程" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="MySQL" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/MySQL/"/>
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
    <category term="Database" scheme="http://example.com/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>椰汁南瓜西米露</title>
    <link href="http://example.com/blog/c034f861.html"/>
    <id>http://example.com/blog/c034f861.html</id>
    <published>2023-04-04T03:06:08.000Z</published>
    <updated>2023-04-04T08:06:16.863Z</updated>
    
    <content type="html"><![CDATA[<h1 id="材料"><a href="#材料" class="headerlink" title="材料"></a>材料</h1><h2 id="主料"><a href="#主料" class="headerlink" title="主料"></a>主料</h2><ul><li>南瓜（一小圈）</li><li>西米露</li></ul><h2 id="配料"><a href="#配料" class="headerlink" title="配料"></a>配料</h2><h2 id="调味料"><a href="#调味料" class="headerlink" title="调味料"></a>调味料</h2><ul><li>冰糖</li><li>椰汁</li></ul><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li>烧开水下西米，搅拌均匀</li><li>上盖转小火 15 分钟，直到西米半透明只有中间白点，关火盖盖焖 25 分钟</li><li>南瓜去皮切块</li><li>西米捞出到冰水，防止粘到一起</li><li>南瓜块 + 冰糖 + 冷水，盖盖 15 分钟</li><li>放入西米 + 椰浆，搅拌均匀 End</li></ol><p></br></br></br></br></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;材料&quot;&gt;&lt;a href=&quot;#材料&quot; class=&quot;headerlink&quot; title=&quot;材料&quot;&gt;&lt;/a&gt;材料&lt;/h1&gt;&lt;h2 id=&quot;主料&quot;&gt;&lt;a href=&quot;#主料&quot; class=&quot;headerlink&quot; title=&quot;主料&quot;&gt;&lt;/a&gt;主料&lt;/h2&gt;&lt;ul&gt;
&lt;</summary>
      
    
    
    
    <category term="生活" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="饮品" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB/%E9%A5%AE%E5%93%81/"/>
    
    
    <category term="饮品" scheme="http://example.com/tags/%E9%A5%AE%E5%93%81/"/>
    
  </entry>
  
  <entry>
    <title>广州地铁</title>
    <link href="http://example.com/blog/ca50bba4.html"/>
    <id>http://example.com/blog/ca50bba4.html</id>
    <published>2023-03-31T03:38:05.000Z</published>
    <updated>2023-04-04T03:40:35.146Z</updated>
    
    <content type="html"><![CDATA[<h1 id="广州市城市轨道交通第三期建设规划（2017-2023）"><a href="#广州市城市轨道交通第三期建设规划（2017-2023）" class="headerlink" title="广州市城市轨道交通第三期建设规划（2017-2023）"></a>广州市城市轨道交通第三期建设规划（2017-2023）</h1><p><img src="http://localhost:4000/assets/%E5%B9%BF%E5%B7%9E%E5%9C%B0%E9%93%81/homePage.jpg"></p><h2 id="地铁05号线"><a href="#地铁05号线" class="headerlink" title="地铁05号线"></a>地铁05号线</h2><p><img src="http://localhost:4000/assets/%E5%B9%BF%E5%B7%9E%E5%9C%B0%E9%93%81/2.%E5%9C%B0%E9%93%81%E4%BA%94%E5%8F%B7%E7%BA%BF%E4%B8%9C%E5%BB%B6%E6%AE%B5%E5%B7%A5%E7%A8%8B%E7%BA%BF%E8%B7%AF%E5%B9%B3%E9%9D%A2%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg"></p><h2 id="地铁07号线"><a href="#地铁07号线" class="headerlink" title="地铁07号线"></a>地铁07号线</h2><p><img src="http://localhost:4000/assets/%E5%B9%BF%E5%B7%9E%E5%9C%B0%E9%93%81/4.%E5%9C%B0%E9%93%81%E4%B8%83%E5%8F%B7%E7%BA%BF%E4%BA%8C%E6%9C%9F%E5%B7%A5%E7%A8%8B%E7%BA%BF%E8%B7%AF%E5%B9%B3%E9%9D%A2%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg"></p><h2 id="地铁13号线"><a href="#地铁13号线" class="headerlink" title="地铁13号线"></a>地铁13号线</h2><h2 id="地铁21号线"><a href="#地铁21号线" class="headerlink" title="地铁21号线"></a>地铁21号线</h2><p></br></br></br></br></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;广州市城市轨道交通第三期建设规划（2017-2023）&quot;&gt;&lt;a href=&quot;#广州市城市轨道交通第三期建设规划（2017-2023）&quot; class=&quot;headerlink&quot; title=&quot;广州市城市轨道交通第三期建设规划（2017-2023）&quot;&gt;&lt;/a&gt;广州市城市</summary>
      
    
    
    
    <category term="生活" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="日常" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="日常" scheme="http://example.com/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>Docker命令与操作</title>
    <link href="http://example.com/blog/3cd84c3d.html"/>
    <id>http://example.com/blog/3cd84c3d.html</id>
    <published>2023-03-28T09:16:18.000Z</published>
    <updated>2023-04-19T08:01:42.463Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://docs.docker.com/reference/">Docker 命令官方文档</a></p><p><a href="http://edu.jb51.net/docker/docker-command-manual.html">Docker 命令大全 - 菜鸟学堂</a></p><p><a href="https://www.runoob.com/docker/docker-command-manual.html">Docker 命令大全 - 菜鸟教程</a></p></blockquote><h1 id="一、启动关闭命令"><a href="#一、启动关闭命令" class="headerlink" title="一、启动关闭命令"></a>一、启动关闭命令</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动Docker服务</span></span><br><span class="line">[root@localhost ~]# sudo systemctl start docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭Docker服务</span></span><br><span class="line">[root@localhost ~]# docker sudo systemctl stop docker</span><br><span class="line">[root@localhost ~]# docker sudo service docker stop</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启Docker服务</span></span><br><span class="line">[root@localhost ~]# sudo systemctl restart docker</span><br><span class="line">[root@localhost ~]# sudo service docker restart</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">守护进程重启Docker服务</span></span><br><span class="line">[root@localhost ~]# sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure><h2 id="1-1-启动-Docker-遇到的问题"><a href="#1-1-启动-Docker-遇到的问题" class="headerlink" title="1.1 启动 Docker 遇到的问题"></a>1.1 启动 Docker 遇到的问题</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# sudo systemctl start docker</span><br><span class="line">Error: Too many open files</span><br></pre></td></tr></table></figure><p>Too many open files 是 Linux 系统中常见的错误，从字面意思上看就是说程序打开的文件数量过多，不过这里的 files 不单是文件的意思，也包括打开的通讯链接（例如 socket），正在监听的端口等等，所以有时候也可以叫做句柄（handle），所以这个错误通常也可以叫做句柄数超出系统限制。引起的原因就是进程在某个时刻打开了超过系统限制的文件数量以及通讯链数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前系统设置的最大句柄数</span></span><br><span class="line">[root@localhost ~]# ulimit -a</span><br></pre></td></tr></table></figure><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1665199865772.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装lsof</span></span><br><span class="line">[root@localhost ~]# yum install lsof</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前句柄数量</span></span><br><span class="line">[root@localhost ~]# lsof|awk &#x27;&#123;print $2&#125;&#x27;|wc -l</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者（统计打开文件数量和进程pid）</span></span><br><span class="line">[root@localhost ~]# lsof|awk &#x27;&#123;print $2&#125;&#x27;|sort|uniq -c|sort -nr|more</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看某个进程下打开的文件和数量</span></span><br><span class="line">[root@localhost ~]# losf -p 进程ID</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span></span><br><span class="line">[root@localhost ~]# losf -p 进程ID |wc -l</span><br></pre></td></tr></table></figure><p>发现已建立了好多端口映射，应该是 k8s 生成的</p><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1665210387112.png"></p><p>可以考虑重启 k8s，另一个解决方法是加大系统对最大句柄数的限制，参考博客：<a href="https://blog.csdn.net/leiwuhen92/article/details/112004783">排查Too many open files问题</a></p><h1 id="二、状态查看命令"><a href="#二、状态查看命令" class="headerlink" title="二、状态查看命令"></a>二、状态查看命令</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示docker的版本信息</span></span><br><span class="line">[root@localhost ~]# docker version</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示docker的系统信息，包括镜像和容器的数量</span></span><br><span class="line">[root@localhost ~]# docker info</span><br><span class="line"></span><br><span class="line">docker 命令 --help # docker命令帮助</span><br><span class="line">docker images --help</span><br></pre></td></tr></table></figure><h1 id="三、镜像命令"><a href="#三、镜像命令" class="headerlink" title="三、镜像命令"></a>三、镜像命令</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker images # 查看所有镜像</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可选项</span></span><br><span class="line">  -a, --all             Show all images (default hides intermediate images) # 列出所有镜像</span><br><span class="line">      --digests         Show digests # 略</span><br><span class="line">  -f, --filter filter   Filter output based on conditions provided # 略</span><br><span class="line">      --format string   Pretty-print images using a Go template # 略</span><br><span class="line">      --no-trunc        Don not truncate output # 略</span><br><span class="line">  -q, --quiet           Only show image IDs # 只显示镜像的ID</span><br></pre></td></tr></table></figure><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1649487938150.png"></p><ul><li>REPOSITORY：镜像的仓库源</li><li>TAG：镜像的标签</li><li>IMAGE ID：镜像的ID</li><li>……</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">docker search # 搜索docker镜像</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可选项</span></span><br><span class="line">  -f, --filter filter   Filter output based on conditions provided</span><br><span class="line">      --format string   Pretty-print search using a Go template</span><br><span class="line">      --limit int       Max number of search results (default 25)</span><br><span class="line">      --no-trunc        Don not truncate output</span><br><span class="line"></span><br><span class="line">docker search mysql --filter=stars=3000</span><br><span class="line">docker pull # 下载镜像</span><br><span class="line">docker pull 镜像名[:tag（版本）] # 默认下载最新版</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果不写tag指定版本，默认是最新的latest</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">因此以下命令等价</span></span><br><span class="line">docker pull mysql</span><br><span class="line">docker pull mysql:latest</span><br><span class="line">docker pull docker.io/library/mysql:latest</span><br><span class="line"></span><br><span class="line">[root@localhost docker]# docker pull mysql</span><br><span class="line">Using default tag: latest # 如果不写tag指定版本，默认是最新的latest</span><br><span class="line">latest: Pulling from library/mysql</span><br><span class="line">6ec7b7d162b2: Pull complete  # 分层下载（docker image的核心 联合文件系统（UnionFS））</span><br><span class="line">fedd960d3481: Pull complete </span><br><span class="line">7ab947313861: Pull complete </span><br><span class="line">64f92f19e638: Pull complete </span><br><span class="line">3e80b17bff96: Pull complete </span><br><span class="line">014e976799f9: Pull complete </span><br><span class="line">59ae84fee1b3: Pull complete </span><br><span class="line">ffe10de703ea: Pull complete </span><br><span class="line">657af6d90c83: Pull complete </span><br><span class="line">98bfb480322c: Pull complete </span><br><span class="line">6aa3859c4789: Pull complete </span><br><span class="line">1ed875d851ef: Pull complete </span><br><span class="line">Digest: sha256:78800e6d3f1b230e35275145e657b82c3fb02a27b2d8e76aac2f5e90c1c30873 # 镜像签名（防伪）</span><br><span class="line">Status: Downloaded newer image for mysql:latest</span><br><span class="line">docker.io/library/mysql:latest # 镜像真实地址</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">分层下载：重复的层不会反复下载，提高速度，减少内存</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除镜像的时候也只会删除多余的层而不是全部删掉</span></span><br><span class="line">[root@localhost docker]# docker pull mysql:5.7</span><br><span class="line">5.7: Pulling from library/mysql</span><br><span class="line">6ec7b7d162b2: Already exists </span><br><span class="line">fedd960d3481: Already exists </span><br><span class="line">7ab947313861: Already exists </span><br><span class="line">64f92f19e638: Already exists </span><br><span class="line">3e80b17bff96: Already exists </span><br><span class="line">014e976799f9: Already exists </span><br><span class="line">59ae84fee1b3: Already exists </span><br><span class="line">7d1da2a18e2e: Pull complete </span><br><span class="line">301a28b700b9: Pull complete </span><br><span class="line">529dc8dbeaf3: Pull complete </span><br><span class="line">bc9d021dc13f: Pull complete </span><br><span class="line">Digest: sha256:c3a567d3e3ad8b05dfce401ed08f0f6bf3f3b64cc17694979d5f2e5d78e10173</span><br><span class="line">Status: Downloaded newer image for mysql:5.7</span><br><span class="line">docker.io/library/mysql:5.7</span><br><span class="line">docker rmi # 删除镜像（rmi - remove image）</span><br><span class="line">docker rmi -f 镜像ID # 删除指定镜像</span><br><span class="line">docker rmi -f 镜像ID 镜像ID # 删除指定的多个镜像</span><br><span class="line">docker rmi -f $(docker images -aq) # 递归删除全部镜像</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可通过REPOSITORY或者IMAGE ID进行删除</span></span><br><span class="line"></span><br><span class="line">[root@localhost docker]# docker rmi -f $(docker images -aq)</span><br><span class="line">Untagged: mysql:latest</span><br><span class="line">Untagged: mysql@sha256:78800e6d3f1b230e35275145e657b82c3fb02a27b2d8e76aac2f5e90c1c30873</span><br><span class="line">Deleted: sha256:a347a59280467629ae4d70ce555e3f96faca8ff2ff8c57cacc8184bebb681f66</span><br><span class="line">Deleted: sha256:8c4db4ce0f63c9eec74a2e555bb7e2fa5e2de08389cbc747793aa30bc3ac04e1</span><br><span class="line">Deleted: sha256:6179be2adc547662cd0ef2cb032b85809ac68923b7ab9c71e5a21b88bbe7f542</span><br><span class="line">Deleted: sha256:17d702350e6aa7f240ca23090d24b059f5c324e292a77b5069225e76e0b51dd6</span><br><span class="line">Deleted: sha256:5c5f95733957fd96300b5265d6b2df728415ed62e7b4b30eadd7d836d48187bf</span><br><span class="line">Deleted: sha256:fbf118fadaf5230c8df9a3b51c608393a8f3adb99c089ea2db253438efab1a0e</span><br><span class="line">Deleted: sha256:43b82d704a10e6d022fa3f31a5f827a00e339ee21dd2849a9b120ab82be9af71</span><br><span class="line">Deleted: sha256:a4994702421d2b9a74c4f3810aa7ac09990e849905f23a1d8f358c826d58501f</span><br><span class="line">Deleted: sha256:36c598c7a6f90abf6d67cde4a58b0747bfbcc7441d3b782bdeea7cda8c9ad7b6</span><br><span class="line">Deleted: sha256:86f598b4f8200bdd4ae752f916154e4e29d5b4c211bb124eb150b9957a3e0141</span><br><span class="line">Deleted: sha256:9e979d97f92bf78a225c77c6b4ba74eb2e03efb95b19b69206cd17cee15a4b26</span><br><span class="line">Deleted: sha256:aff48ce4678f78d83d7e9bfb9e88cd951c3da52da08779e99b6082edd1cc66f3</span><br><span class="line">Deleted: sha256:87c8a1d8f54f3aa4e05569e8919397b65056aa71cdf48b7f061432c98475eee9</span><br><span class="line">Untagged: hello-world:latest</span><br><span class="line">Untagged: hello-world@sha256:1a523af650137b8accdaed439c17d684df61ee4d74feac151b5b337bd29e7eec</span><br><span class="line">Deleted: sha256:bf756fb1ae65adf866bd8c456593cd24beb6a0a061dedf42b26a993176745f6b</span><br></pre></td></tr></table></figure><h1 id="四、容器命令"><a href="#四、容器命令" class="headerlink" title="四、容器命令"></a>四、容器命令</h1><p>注意：有了镜像才可以创建容器，因此需要先下载一个 centos（这种基础版本的 centos 很多命令都是不完善的） </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos</span><br></pre></td></tr></table></figure><h2 id="4-1-新建容器和启动（run）"><a href="#4-1-新建容器和启动（run）" class="headerlink" title="4.1 新建容器和启动（run）"></a>4.1 新建容器和启动（run）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">docker run [可选参数] image</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">【如果要运行的镜像不存在，docker会自动执行：docker pull 镜像名称】</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参数说明</span></span><br><span class="line">--name=&quot;Name&quot;          # 附带名字启动容器（方便区分）</span><br><span class="line">-d                     # 以后台的方式运行（docker容器使用后台运行，就必须要有一个前台进程，docker发现自己没有提供服务，就会自动停止）</span><br><span class="line">-it                    # 使用交互方式运行（即进入容器中进行操作）</span><br><span class="line">-p                     # 指定容器端口启动</span><br><span class="line">    -p ip:主机端口:容器端口</span><br><span class="line">    -p 主机端口:容器端口 # （常用）</span><br><span class="line">    -p 容器端口</span><br><span class="line">    容器端口</span><br><span class="line">-P                     # 随机指定端口</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例</span></span><br><span class="line">[root@localhost ~]# docker run -it --rm centos /bin/bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">【--<span class="built_in">rm</span>表示容器停止后即删除镜像，使用docker ps -a不会找到，这种方法一般用于测试使用】</span></span><br><span class="line">[root@localhost ~]# docker run -it centos /bin/bash</span><br><span class="line">[root@987ceaa1b6cc /]# ls</span><br><span class="line">bin  etc   lib    lost+found  mnt  proc  run   srv  tmp  var</span><br><span class="line">dev  home  lib64  media       opt  root  sbin  sys  usr</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从容器中退回主机</span></span><br><span class="line">[root@987ceaa1b6cc /]# exit</span><br><span class="line">exit</span><br><span class="line">[root@localhost /]# ls</span><br><span class="line">bin   dev  home  lib64  mnt  proc  run   srv  tmp  var</span><br><span class="line">boot  etc  lib   media  opt  root  sbin  sys  usr</span><br></pre></td></tr></table></figure><h2 id="4-2-容器查看命令（ps）"><a href="#4-2-容器查看命令（ps）" class="headerlink" title="4.2 容器查看命令（ps）"></a>4.2 容器查看命令（ps）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">docker ps [可选参数]</span><br><span class="line">      # 列出当前正在运行的容器</span><br><span class="line">-a    # 列出当前正在运行的容器 + 带出历史运行过的容器</span><br><span class="line">-n=?  # 显示最近创建的几个容器</span><br><span class="line">-q    # 只显示容器的编号</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例</span></span><br><span class="line">[root@localhost /]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line">[root@localhost /]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE          COMMAND       CREATED          STATUS                       PORTS     NAMES</span><br><span class="line">987ceaa1b6cc   centos         &quot;/bin/bash&quot;   33 minutes ago   Exited (127) 5 minutes ago             gallant_stonebraker</span><br><span class="line">0f4a68190c7a   bf756fb1ae65   &quot;/hello&quot;      8 days ago       Exited (0) 8 days ago                  recursing_lovelace</span><br><span class="line">[root@localhost /]# docker ps -n=1</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED          STATUS                       PORTS     NAMES</span><br><span class="line">987ceaa1b6cc   centos    &quot;/bin/bash&quot;   33 minutes ago   Exited (127) 5 minutes ago             gallant_stonebraker</span><br></pre></td></tr></table></figure><h2 id="4-3-容器进入命令"><a href="#4-3-容器进入命令" class="headerlink" title="4.3 容器进入命令"></a>4.3 容器进入命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it [容器ID || 容器的name] [/bin/bash || bash]</span><br><span class="line">docker attach 容器ID</span><br></pre></td></tr></table></figure><h2 id="4-4-容器退出命令（exit-p-q）"><a href="#4-4-容器退出命令（exit-p-q）" class="headerlink" title="4.4 容器退出命令（exit|^p + ^q）"></a>4.4 容器退出命令（exit|^p + ^q）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exit          # 容器停止并退出</span><br><span class="line">Ctrl + p + q  # 容器不停止退出</span><br></pre></td></tr></table></figure><h2 id="4-5-容器删除命令（rm）"><a href="#4-5-容器删除命令（rm）" class="headerlink" title="4.5 容器删除命令（rm）"></a>4.5 容器删除命令（rm）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器ID                  # 根据ID删除指定容器（如果容器正在运行，则不可删除）</span><br><span class="line">docker rm -f 容器ID               # 根据ID强制删除指定容器</span><br><span class="line">docker rm $(docker ps -aq)       # 遍历删除所有容器</span><br><span class="line">docker rm -f $(docker ps -aq)    # 遍历强制删除所有容器</span><br><span class="line">docker ps -a -q|xargs docker rm  # 删除所有容器</span><br></pre></td></tr></table></figure><h2 id="4-6-容器启动和停止（start-stop）"><a href="#4-6-容器启动和停止（start-stop）" class="headerlink" title="4.6 容器启动和停止（start|stop）"></a>4.6 容器启动和停止（start|stop）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器ID    # 启动容器</span><br><span class="line">docker restart 容器ID  # 重启容器</span><br><span class="line">docker stop 容器ID     # 停止当前容器</span><br><span class="line">docker kill 容器ID     # 强制停止当前容器</span><br><span class="line">docker pause 容器ID    # 暂停当前容器</span><br><span class="line">docker unpause 容器ID  # 启动暂停中的容器</span><br></pre></td></tr></table></figure><h1 id="五、其他常用命令"><a href="#五、其他常用命令" class="headerlink" title="五、其他常用命令"></a>五、其他常用命令</h1><h2 id="5-1-查看日志（logs）"><a href="#5-1-查看日志（logs）" class="headerlink" title="5.1 查看日志（logs）"></a>5.1 查看日志（logs）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">docker logs -t -f --detail 显示日志的条数 容器ID</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">（-t表示显示时间戳；-f表示持续显示）</span></span><br><span class="line">[root@localhost ~]# docker logs --help</span><br><span class="line"></span><br><span class="line">Usage:  docker logs [OPTIONS] CONTAINER</span><br><span class="line"></span><br><span class="line">Fetch the logs of a container</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">      --details        Show extra details provided to logs</span><br><span class="line">  -f, --follow         Follow log output</span><br><span class="line">      --since string   Show logs since timestamp (e.g. 2013-01-02T13:23:37Z)</span><br><span class="line">                       or relative (e.g. 42m for 42 minutes)</span><br><span class="line">  -n, --tail string    Number of lines to show from the end of the logs</span><br><span class="line">                       (default &quot;all&quot;)</span><br><span class="line">  -t, --timestamps     Show timestamps</span><br><span class="line">      --until string   Show logs before a timestamp (e.g.</span><br><span class="line">                       2013-01-02T13:23:37Z) or relative (e.g. 42m for 42</span><br><span class="line">                       minutes)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">先编写一段shell脚本作为测试</span></span><br><span class="line">[root@localhost ~]# docker run -d centos /bin/sh -c &quot;while true;do echo liangxj;sleep 1;done&quot;</span><br><span class="line">22b9beab5965eacb2e8f646c1e096ffd10fa7355df47f3da8ff6244ca7497bfb</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE</span><br><span class="line">22b9beab5965   centos</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示日志</span></span><br><span class="line">[root@localhost ~]# docker logs -tf --tail 10 22b9beab5965</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# docker logs -tf -n 500 服务名称</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-f：持续输出</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-t：展示时间戳</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-n：展示多少行</span></span><br></pre></td></tr></table></figure><h2 id="5-2-查看容器中的进程信息（top）"><a href="#5-2-查看容器中的进程信息（top）" class="headerlink" title="5.2 查看容器中的进程信息（top）"></a>5.2 查看容器中的进程信息（top）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker top 容器ID</span><br><span class="line">[root@localhost ~]# docker top 0388fc715003</span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY</span><br><span class="line">root                8956                8936                0                   01:38               ?</span><br><span class="line">root                9153                8956                0                   01:40               ?</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">PID：进程ID</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">PPID：父进程ID</span></span><br></pre></td></tr></table></figure><h2 id="5-3-查看进程元数据（inspect）"><a href="#5-3-查看进程元数据（inspect）" class="headerlink" title="5.3 查看进程元数据（inspect）"></a>5.3 查看进程元数据（inspect）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 容器ID</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# docker inspect --help</span><br><span class="line"></span><br><span class="line">Usage:  docker inspect [OPTIONS] NAME|ID [NAME|ID...]</span><br><span class="line"></span><br><span class="line">Return low-level information on Docker objects</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -f, --format string   Format the output using the given Go template</span><br><span class="line">  -s, --size            Display total file sizes if the type is container</span><br><span class="line">      --type string     Return JSON for specified type</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# docker inspect 0388fc715003</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: &quot;0388fc715003a52ce493ee6ee915fb670681285fe07d61d35eeed23caa505be6&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2021-01-04T06:38:39.643094366Z&quot;,</span><br><span class="line">        &quot;Path&quot;: &quot;/bin/sh&quot;,</span><br><span class="line">        &quot;Args&quot;: [</span><br><span class="line">            &quot;-c&quot;,</span><br><span class="line">            &quot;while true;do echo liangxj;sleep 1;done&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;State&quot;: &#123;</span><br><span class="line">            &quot;Status&quot;: &quot;running&quot;,</span><br><span class="line">            &quot;Running&quot;: true,</span><br><span class="line">            &quot;Paused&quot;: false,</span><br><span class="line">            &quot;Restarting&quot;: false,</span><br><span class="line">            &quot;OOMKilled&quot;: false,</span><br><span class="line">            &quot;Dead&quot;: false,</span><br><span class="line">            &quot;Pid&quot;: 8956,</span><br><span class="line">            &quot;ExitCode&quot;: 0,</span><br><span class="line">            &quot;Error&quot;: &quot;&quot;,</span><br><span class="line">            &quot;StartedAt&quot;: &quot;2021-01-04T06:38:40.052078891Z&quot;,</span><br><span class="line">            &quot;FinishedAt&quot;: &quot;0001-01-01T00:00:00Z&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Image&quot;: &quot;sha256:300e315adb2f96afe5f0b2780b87f28ae95231fe3bdd1e16b9ba606307728f55&quot;,</span><br><span class="line">        &quot;ResolvConfPath&quot;: &quot;/var/lib/docker/containers/0388fc715003a52ce493ee6ee915fb670681285fe07d61d35eeed23caa505be6/resolv.conf&quot;,</span><br><span class="line">        &quot;HostnamePath&quot;: &quot;/var/lib/docker/containers/0388fc715003a52ce493ee6ee915fb670681285fe07d61d35eeed23caa505be6/hostname&quot;,</span><br><span class="line">        &quot;HostsPath&quot;: &quot;/var/lib/docker/containers/0388fc715003a52ce493ee6ee915fb670681285fe07d61d35eeed23caa505be6/hosts&quot;,</span><br><span class="line">        &quot;LogPath&quot;: &quot;/var/lib/docker/containers/0388fc715003a52ce493ee6ee915fb670681285fe07d61d35eeed23caa505be6/0388fc715003a52ce493ee6ee915fb670681285fe07d61d35eeed23caa505be6-json.log&quot;,</span><br><span class="line">        &quot;Name&quot;: &quot;/dreamy_carson&quot;,</span><br><span class="line">        &quot;RestartCount&quot;: 0,</span><br><span class="line">        &quot;Driver&quot;: &quot;overlay2&quot;,</span><br><span class="line">        &quot;Platform&quot;: &quot;linux&quot;,</span><br><span class="line">        &quot;MountLabel&quot;: &quot;&quot;,</span><br><span class="line">        &quot;ProcessLabel&quot;: &quot;&quot;,</span><br><span class="line">        &quot;AppArmorProfile&quot;: &quot;&quot;,</span><br><span class="line">        &quot;ExecIDs&quot;: null,</span><br><span class="line">        &quot;HostConfig&quot;: &#123;</span><br><span class="line">            &quot;Binds&quot;: null,</span><br><span class="line">            &quot;ContainerIDFile&quot;: &quot;&quot;,</span><br><span class="line">            &quot;LogConfig&quot;: &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;json-file&quot;,</span><br><span class="line">                &quot;Config&quot;: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;NetworkMode&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;PortBindings&quot;: &#123;&#125;,</span><br><span class="line">            &quot;RestartPolicy&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;no&quot;,</span><br><span class="line">                &quot;MaximumRetryCount&quot;: 0</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;AutoRemove&quot;: false,</span><br><span class="line">            &quot;VolumeDriver&quot;: &quot;&quot;,</span><br><span class="line">            &quot;VolumesFrom&quot;: null,</span><br><span class="line">            &quot;CapAdd&quot;: null,</span><br><span class="line">            &quot;CapDrop&quot;: null,</span><br><span class="line">            &quot;CgroupnsMode&quot;: &quot;host&quot;,</span><br><span class="line">            &quot;Dns&quot;: [],</span><br><span class="line">            &quot;DnsOptions&quot;: [],</span><br><span class="line">            &quot;DnsSearch&quot;: [],</span><br><span class="line">            &quot;ExtraHosts&quot;: null,</span><br><span class="line">            &quot;GroupAdd&quot;: null,</span><br><span class="line">            &quot;IpcMode&quot;: &quot;private&quot;,</span><br><span class="line">            &quot;Cgroup&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Links&quot;: null,</span><br><span class="line">            &quot;OomScoreAdj&quot;: 0,</span><br><span class="line">            &quot;PidMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Privileged&quot;: false,</span><br><span class="line">            &quot;PublishAllPorts&quot;: false,</span><br><span class="line">            &quot;ReadonlyRootfs&quot;: false,</span><br><span class="line">            &quot;SecurityOpt&quot;: null,</span><br><span class="line">            &quot;UTSMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;UsernsMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;ShmSize&quot;: 67108864,</span><br><span class="line">            &quot;Runtime&quot;: &quot;runc&quot;,</span><br><span class="line">            &quot;ConsoleSize&quot;: [</span><br><span class="line">                0,</span><br><span class="line">                0</span><br><span class="line">            ],</span><br><span class="line">            &quot;Isolation&quot;: &quot;&quot;,</span><br><span class="line">            &quot;CpuShares&quot;: 0,</span><br><span class="line">            &quot;Memory&quot;: 0,</span><br><span class="line">            &quot;NanoCpus&quot;: 0,</span><br><span class="line">            &quot;CgroupParent&quot;: &quot;&quot;,</span><br><span class="line">            &quot;BlkioWeight&quot;: 0,</span><br><span class="line">            &quot;BlkioWeightDevice&quot;: [],</span><br><span class="line">            &quot;BlkioDeviceReadBps&quot;: null,</span><br><span class="line">            &quot;BlkioDeviceWriteBps&quot;: null,</span><br><span class="line">            &quot;BlkioDeviceReadIOps&quot;: null,</span><br><span class="line">            &quot;BlkioDeviceWriteIOps&quot;: null,</span><br><span class="line">            &quot;CpuPeriod&quot;: 0,</span><br><span class="line">            &quot;CpuQuota&quot;: 0,</span><br><span class="line">            &quot;CpuRealtimePeriod&quot;: 0,</span><br><span class="line">            &quot;CpuRealtimeRuntime&quot;: 0,</span><br><span class="line">            &quot;CpusetCpus&quot;: &quot;&quot;,</span><br><span class="line">            &quot;CpusetMems&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Devices&quot;: [],</span><br><span class="line">            &quot;DeviceCgroupRules&quot;: null,</span><br><span class="line">            &quot;DeviceRequests&quot;: null,</span><br><span class="line">            &quot;KernelMemory&quot;: 0,</span><br><span class="line">            &quot;KernelMemoryTCP&quot;: 0,</span><br><span class="line">            &quot;MemoryReservation&quot;: 0,</span><br><span class="line">            &quot;MemorySwap&quot;: 0,</span><br><span class="line">            &quot;MemorySwappiness&quot;: null,</span><br><span class="line">            &quot;OomKillDisable&quot;: false,</span><br><span class="line">            &quot;PidsLimit&quot;: null,</span><br><span class="line">            &quot;Ulimits&quot;: null,</span><br><span class="line">            &quot;CpuCount&quot;: 0,</span><br><span class="line">            &quot;CpuPercent&quot;: 0,</span><br><span class="line">            &quot;IOMaximumIOps&quot;: 0,</span><br><span class="line">            &quot;IOMaximumBandwidth&quot;: 0,</span><br><span class="line">            &quot;MaskedPaths&quot;: [</span><br><span class="line">                &quot;/proc/asound&quot;,</span><br><span class="line">                &quot;/proc/acpi&quot;,</span><br><span class="line">                &quot;/proc/kcore&quot;,</span><br><span class="line">                &quot;/proc/keys&quot;,</span><br><span class="line">                &quot;/proc/latency_stats&quot;,</span><br><span class="line">                &quot;/proc/timer_list&quot;,</span><br><span class="line">                &quot;/proc/timer_stats&quot;,</span><br><span class="line">                &quot;/proc/sched_debug&quot;,</span><br><span class="line">                &quot;/proc/scsi&quot;,</span><br><span class="line">                &quot;/sys/firmware&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;ReadonlyPaths&quot;: [</span><br><span class="line">                &quot;/proc/bus&quot;,</span><br><span class="line">                &quot;/proc/fs&quot;,</span><br><span class="line">                &quot;/proc/irq&quot;,</span><br><span class="line">                &quot;/proc/sys&quot;,</span><br><span class="line">                &quot;/proc/sysrq-trigger&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;GraphDriver&quot;: &#123;</span><br><span class="line">            &quot;Data&quot;: &#123;</span><br><span class="line">                &quot;LowerDir&quot;: &quot;/var/lib/docker/overlay2/e2f71bff5cc0b5e32761153742315bdba576839119902c592f601f1162b9bae1-init/diff:/var/lib/docker/overlay2/8508e4e63830c2cd44cc90e39b2bcc4aaf442f8eecf36fa7ef8a343930481fdb/diff&quot;,</span><br><span class="line">                &quot;MergedDir&quot;: &quot;/var/lib/docker/overlay2/e2f71bff5cc0b5e32761153742315bdba576839119902c592f601f1162b9bae1/merged&quot;,</span><br><span class="line">                &quot;UpperDir&quot;: &quot;/var/lib/docker/overlay2/e2f71bff5cc0b5e32761153742315bdba576839119902c592f601f1162b9bae1/diff&quot;,</span><br><span class="line">                &quot;WorkDir&quot;: &quot;/var/lib/docker/overlay2/e2f71bff5cc0b5e32761153742315bdba576839119902c592f601f1162b9bae1/work&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;Name&quot;: &quot;overlay2&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Mounts&quot;: [],</span><br><span class="line">        &quot;Config&quot;: &#123;</span><br><span class="line">            &quot;Hostname&quot;: &quot;0388fc715003&quot;,</span><br><span class="line">            &quot;Domainname&quot;: &quot;&quot;,</span><br><span class="line">            &quot;User&quot;: &quot;&quot;,</span><br><span class="line">            &quot;AttachStdin&quot;: false,</span><br><span class="line">            &quot;AttachStdout&quot;: false,</span><br><span class="line">            &quot;AttachStderr&quot;: false,</span><br><span class="line">            &quot;Tty&quot;: false,</span><br><span class="line">            &quot;OpenStdin&quot;: false,</span><br><span class="line">            &quot;StdinOnce&quot;: false,</span><br><span class="line">            &quot;Env&quot;: [</span><br><span class="line">                &quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Cmd&quot;: [</span><br><span class="line">                &quot;/bin/sh&quot;,</span><br><span class="line">                &quot;-c&quot;,</span><br><span class="line">                &quot;while true;do echo liangxj;sleep 1;done&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Image&quot;: &quot;centos&quot;,</span><br><span class="line">            &quot;Volumes&quot;: null,</span><br><span class="line">            &quot;WorkingDir&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Entrypoint&quot;: null,</span><br><span class="line">            &quot;OnBuild&quot;: null,</span><br><span class="line">            &quot;Labels&quot;: &#123;</span><br><span class="line">                &quot;org.label-schema.build-date&quot;: &quot;20201204&quot;,</span><br><span class="line">                &quot;org.label-schema.license&quot;: &quot;GPLv2&quot;,</span><br><span class="line">                &quot;org.label-schema.name&quot;: &quot;CentOS Base Image&quot;,</span><br><span class="line">                &quot;org.label-schema.schema-version&quot;: &quot;1.0&quot;,</span><br><span class="line">                &quot;org.label-schema.vendor&quot;: &quot;CentOS&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;NetworkSettings&quot;: &#123;</span><br><span class="line">            &quot;Bridge&quot;: &quot;&quot;,</span><br><span class="line">            &quot;SandboxID&quot;: &quot;bb48a599f020d56f908d78b170da712209ac5ff3a185599f21da1bfa30c77ec0&quot;,</span><br><span class="line">            &quot;HairpinMode&quot;: false,</span><br><span class="line">            &quot;LinkLocalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">            &quot;LinkLocalIPv6PrefixLen&quot;: 0,</span><br><span class="line">            &quot;Ports&quot;: &#123;&#125;,</span><br><span class="line">            &quot;SandboxKey&quot;: &quot;/var/run/docker/netns/bb48a599f020&quot;,</span><br><span class="line">            &quot;SecondaryIPAddresses&quot;: null,</span><br><span class="line">            &quot;SecondaryIPv6Addresses&quot;: null,</span><br><span class="line">            &quot;EndpointID&quot;: &quot;bca90a216e8e4eaa7c7d105652509de996a1a9a786c0717758a90db24167ec4d&quot;,</span><br><span class="line">            &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class="line">            &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">            &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">            &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,</span><br><span class="line">            &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">            &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">            &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class="line">            &quot;Networks&quot;: &#123;</span><br><span class="line">                &quot;bridge&quot;: &#123;</span><br><span class="line">                    &quot;IPAMConfig&quot;: null,</span><br><span class="line">                    &quot;Links&quot;: null,</span><br><span class="line">                    &quot;Aliases&quot;: null,</span><br><span class="line">                    &quot;NetworkID&quot;: &quot;340b9bbe55d6cd8d6879ade40a0106da1eaec688dd9ef60c74479905422ccc22&quot;,</span><br><span class="line">                    &quot;EndpointID&quot;: &quot;bca90a216e8e4eaa7c7d105652509de996a1a9a786c0717758a90db24167ec4d&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class="line">                    &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,</span><br><span class="line">                    &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">                    &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">                    &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class="line">                    &quot;DriverOpts&quot;: null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="5-4-进入当前正在运行的容器（exec-attach）"><a href="#5-4-进入当前正在运行的容器（exec-attach）" class="headerlink" title="5.4 进入当前正在运行的容器（exec|attach）"></a>5.4 进入当前正在运行的容器（exec|attach）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">一般容器都是使用后台方式运行，然后进入容器，修改配置</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式一</span></span><br><span class="line">docker exec -it 容器ID bashShell</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例</span></span><br><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS         PORTS     NAMES</span><br><span class="line">f88acc152e9e   centos    &quot;/bin/bash&quot;   4 minutes ago   Up 4 minutes             charming_jang</span><br><span class="line">[root@localhost ~]# docker exec -it f88acc152e9e /bin/bash</span><br><span class="line">[root@f88acc152e9e /]# </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式二</span></span><br><span class="line">docker attach 容器ID</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例</span></span><br><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS         PORTS     NAMES</span><br><span class="line">f88acc152e9e   centos    &quot;/bin/bash&quot;   7 minutes ago   Up 7 minutes             charming_jang</span><br><span class="line">[root@localhost ~]# docker attach f88acc152e9e</span><br><span class="line">[root@f88acc152e9e /]# </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">对比</span></span><br><span class="line">docker exec -it 容器ID bashShell  # 进入容器后开启一个新的终端，可以在里面操作（常用）</span><br><span class="line">docker attach 容器ID              # 进入容器正在执行的终端，不会启动新的进程</span><br></pre></td></tr></table></figure><h2 id="5-5-拷贝容器内的文件到主机上（cp）"><a href="#5-5-拷贝容器内的文件到主机上（cp）" class="headerlink" title="5.5 拷贝容器内的文件到主机上（cp）"></a>5.5 拷贝容器内的文件到主机上（cp）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">docker cp 容器ID:容器内路径 主机上的目标路径</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意：无论容器是后台运行抑或是停止了，都可以从容器中把文件拷贝出来</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例</span></span><br><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS         PORTS     NAMES</span><br><span class="line">f88acc152e9e   centos    &quot;/bin/bash&quot;   4 minutes ago   Up 4 minutes             charming_jang</span><br><span class="line">[root@localhost ~]# docker exec -it f88acc152e9e /bin/bash</span><br><span class="line">[root@f88acc152e9e /]# ls  </span><br><span class="line">bin  etc   lib    lost+found  mnt  proc  run   srv  tmp  var</span><br><span class="line">dev  home  lib64  media       opt  root  sbin  sys  usr</span><br><span class="line">[root@f88acc152e9e /]# cd home</span><br><span class="line">[root@f88acc152e9e home]# ls</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">容器内新建文件</span></span><br><span class="line">[root@f88acc152e9e home]# touch liangxj.txt</span><br><span class="line">[root@f88acc152e9e home]# ls</span><br><span class="line">liangxj.txt</span><br><span class="line">[root@f88acc152e9e home]# exit</span><br><span class="line">exit</span><br><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS                      PORTS     NAMES</span><br><span class="line">f88acc152e9e   centos    &quot;/bin/bash&quot;              23 minutes ago   Exited (0) 24 seconds ago             charming_jang</span><br><span class="line">[root@localhost ~]# cd /home</span><br><span class="line">[root@localhost home]# ls</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拷贝容器内的文件到主机上</span></span><br><span class="line">[root@localhost home]# docker cp f88acc152e9e:/home/liangxj.txt /home</span><br><span class="line">[root@localhost home]# ls</span><br><span class="line">liangxj.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意：这里的拷贝是一个手动的过程，还可以使用 -V 卷的技术，实现容器内的文件夹与主机上的文件夹对应起来，自动同步</span></span><br></pre></td></tr></table></figure><h2 id="5-6-查看-Docker-运行中的容器的实时数据流"><a href="#5-6-查看-Docker-运行中的容器的实时数据流" class="headerlink" title="5.6 查看 Docker 运行中的容器的实时数据流"></a>5.6 查看 Docker 运行中的容器的实时数据流</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost home]# docker stats</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以查看运行中的容器占用的CPU和内存情况，与任务管理器类似</span></span><br></pre></td></tr></table></figure><h1 id="六、命令小结"><a href="#六、命令小结" class="headerlink" title="六、命令小结"></a>六、命令小结</h1><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1649488125279.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">attach      Attach local standard input, output, and error streams to a running container # 当前shell下attach链接指定运行镜像</span><br><span class="line">build       Build an image from a Dockerfile                                              # 通过Dockerfile定制镜像</span><br><span class="line">commit      Create a new image from a container changes                                   # 提交当前容器为新的容器</span><br><span class="line">cp          Copy files/folders between a container and the local filesystem               # 从容器中拷贝指定文件或者目录到宿主机上</span><br><span class="line">create      Create a new container                                                        # 创建一个新的容器，同run，但不启动容器</span><br><span class="line">diff        Inspect changes to files or directories on a container filesystem             # 查看docker容器编号</span><br><span class="line">events      Get real time events from the server                                          # 从docker服务获取容器实时事件</span><br><span class="line">exec        Run a command in a running container                                          # 在已存在的容器上运行命令</span><br><span class="line">export      Export a container filesystem as a tar archive                                # 导出容器的内容流作为一个tar归档文件[对应import]</span><br><span class="line">history     Show the history of an image                                                  # 展示一个镜像形成历史</span><br><span class="line">images      List images                                                                   # 列出系统当前镜像</span><br><span class="line">import      Import the contents from a tarball to create a filesystem image               # 从tar包中的内容创建一个新的文件系统映像[对应export]</span><br><span class="line">info        Display system-wide information                                               # 显示系统相关信息</span><br><span class="line">inspect     Return low-level information on Docker objects                                # 查看容器详细信息</span><br><span class="line">kill        Kill one or more running containers                                           # kill指定docker容器</span><br><span class="line">load        Load an image from a tar archive or STDIN                                     # 从一个tar包中加载一个镜像[对应save]</span><br><span class="line">login       Log in to a Docker registry                                                   # 注册或者登陆一个docker源服务器</span><br><span class="line">logout      Log out from a Docker registry                                                # 从当前Docker registry退出</span><br><span class="line">logs        Fetch the logs of a container                                                 # 输出当前容器日志信息</span><br><span class="line">pause       Pause all processes within one or more containers                             # 暂停容器</span><br><span class="line">port        List port mappings or a specific mapping for the container                    # 查看映射端口对应的容器内部源端口</span><br><span class="line">ps          List containers                                                               # 列出容器列表</span><br><span class="line">pull        Pull an image or a repository from a registry                                 # 从docker镜像源服务器拉取指定镜像或者库镜像</span><br><span class="line">push        Push an image or a repository to a registry                                   # 推送指定镜像或者库镜像至docker源服务器</span><br><span class="line">rename      Rename a container                                                            # 重命名容器</span><br><span class="line">restart     Restart one or more containers                                                # 重启运行的容器</span><br><span class="line">rm          Remove one or more containers                                                 # 移除一个或者多个容器</span><br><span class="line">rmi         Remove one or more images                                                     # 移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或-f强制删除]</span><br><span class="line">run         Run a command in a new container                                              # 创建一个新的容器并运行一个命令</span><br><span class="line">save        Save one or more images to a tar archive (streamed to STDOUT by default)      # 保存一个镜像为一个tar包[对应load]</span><br><span class="line">search      Search the Docker Hub for images                                              # 在docker hub中搜索镜像</span><br><span class="line">start       Start one or more stopped containers                                          # 启动容器</span><br><span class="line">stats       Display a live stream of container(s) resource usage statistics               # 返回运行中的容器的实时数据流</span><br><span class="line">stop        Stop one or more running containers                                           # 停止容器</span><br><span class="line">tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE                         # 标记本地镜像，将其归入某一仓库</span><br><span class="line">top         Display the running processes of a container                                  # 查看容器中运行的进程信息</span><br><span class="line">unpause     Unpause all processes within one or more containers                           # 取消暂停容器</span><br><span class="line">update      Update configuration of one or more containers                                # 更新一个或多个容器的配置</span><br><span class="line">version     Show the Docker version information                                           # 查看docker版本号</span><br><span class="line">wait        Block until one or more containers stop, then print their exit codes          # 截取容器停止时的退出状态值</span><br></pre></td></tr></table></figure><h1 id="七、练习示例"><a href="#七、练习示例" class="headerlink" title="七、练习示例"></a>七、练习示例</h1><h2 id="7-1-Docker-安装-Nginx"><a href="#7-1-Docker-安装-Nginx" class="headerlink" title="7.1 Docker 安装 Nginx"></a>7.1 Docker 安装 Nginx</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、dockerhub搜索镜像信息</span></span><br><span class="line">[root@localhost /]# docker search nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、下载镜像</span></span><br><span class="line">[root@localhost /]# docker pull nginx</span><br><span class="line">Using default tag: latest</span><br><span class="line">Error response from daemon: Get &quot;https://registry-1.docker.io/v2/&quot;: net/http: TLS handshake timeout</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里可能会下载镜像失败，增加配置daemo.json，指向国内镜像网站即可</span></span><br><span class="line">[root@localhost ~]# vi /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [</span><br><span class="line">    &quot;https://registry.docker-cn.com&quot;,</span><br><span class="line">    &quot;http://hub-mirror.c.163.com&quot;,</span><br><span class="line">    &quot;https://docker.mirrors.ustc.edu.cn&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改配置后需要重启docker服务</span></span><br><span class="line">[root@localhost ~]# service docker restart</span><br><span class="line">Redirecting to /bin/systemctl restart docker.service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3、运行镜像</span></span><br><span class="line">[root@localhost /]# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED       SIZE</span><br><span class="line">nginx        latest    ae2feff98a0c   3 weeks ago   133MB</span><br><span class="line">centos       latest    300e315adb2f   4 weeks ago   209MB</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">【这里提前参考Linux之Tomcat的笔记，配置防火墙，使得主机可以联通Linux虚拟机的9999端口】</span></span><br><span class="line">[root@localhost /]# docker run -d --name nginx01 -p 9999:80 nginx</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">【-d：后台启动；--name：命名容器；-p：端口映射（宿主机端口号:容器端口号）】</span></span><br><span class="line">6956c87154b0a7ee642719ff22fcb938b8556d5966315ecac81259e3e6c04bf5</span><br><span class="line">docker: Error response from daemon: driver failed programming external connectivity on endpoint nginx01 (3ee4feb43afd6f892828259da60044b35963ff190db3288a45af4f96c14f12cd):  (iptables failed: iptables --wait -t nat -A DOCKER -p tcp -d 0/0 --dport 9999 -j DNAT --to-destination 172.17.0.2:80 ! -i docker0: iptables: No chain/target/match by that name.</span><br><span class="line">(exit status 1)).</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">【这里启动报错（driver failed programming external connectivity on endpoint nginx01），因为Linux虚拟机更新并重启了虚拟机的firewall，docker服务启动时定义的自定义链DOCKER从iptables中被清掉了，影响了docker的正常工作，这时需要重启docker（注意启动失败的容器，否则容器名称重复还是会失败）】</span></span><br><span class="line">[root@localhost /]# systemctl restart docker</span><br><span class="line">[root@localhost /]# docker rm $(docker ps -aq)</span><br><span class="line">6956c87154b0</span><br><span class="line">[root@localhost /]# docker run -d --name nginx01 -p 9999:80 nginx</span><br><span class="line">7f5bfce90a0bc1f594cf90dc853ddf898ddbda51a59da9a4bd591f10846b7a11</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4、测试容器启动情况</span></span><br><span class="line">[root@localhost /]# curl localhost:9999</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">【这时，也可以在主机通过浏览器访问到nginx欢迎页面（虚拟机IP:9999）】</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">5、进入容器</span></span><br><span class="line">[root@localhost /]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     ……     PORTS                  NAMES</span><br><span class="line">7f5bfce90a0b   nginx     ……     0.0.0.0:9999-&gt;80/tcp   nginx01</span><br><span class="line">[root@localhost /]# docker exec -it 7f5bfce90a0b /bin/bash</span><br><span class="line">root@7f5bfce90a0b:/# whereis nginx</span><br><span class="line">nginx: /usr/sbin/nginx /usr/lib/nginx /etc/nginx /usr/share/nginx</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">6、退出容器</span></span><br><span class="line">root@7f5bfce90a0b:/# exit</span><br><span class="line">exit</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">7、停止容器</span></span><br><span class="line">[root@localhost /]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     ……     PORTS                  NAMES</span><br><span class="line">7f5bfce90a0b   nginx     ……     0.0.0.0:9999-&gt;80/tcp   nginx01</span><br><span class="line">[root@localhost /]# docker stop 7f5bfce90a0b</span><br><span class="line">7f5bfce90a0b</span><br><span class="line">[root@localhost /]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     ……     PORTS                  NAMES</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">【停止容器后，在Linux虚拟机curl不可访问nginx，在主机浏览器也无法访问nginx】</span></span><br></pre></td></tr></table></figure><h2 id="7-2-Docker-安装-Tomcat"><a href="#7-2-Docker-安装-Tomcat" class="headerlink" title="7.2 Docker 安装 Tomcat"></a>7.2 Docker 安装 Tomcat</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、dockerhub搜索镜像信息</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、下载镜像</span></span><br><span class="line">[root@localhost ~]# docker pull tomcat</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">【或者下载指定的Tomcat版本镜像】</span></span><br><span class="line">[root@localhost ~]# docker pull tomcat:7.0</span><br></pre></td></tr></table></figure><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1656388454532.png"></p><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1656388832415.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3、运行镜像</span></span><br><span class="line">[root@localhost ~]# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED       SIZE</span><br><span class="line">tomcat       7.0       096d3f7bdb4a   2 weeks ago   533MB</span><br><span class="line">tomcat       latest    feba8d001e3f   2 weeks ago   649MB</span><br><span class="line">nginx        latest    ae2feff98a0c   3 weeks ago   133MB</span><br><span class="line">centos       latest    300e315adb2f   4 weeks ago   209MB</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动最新版本的tomcat镜像</span></span><br><span class="line">[root@localhost /]# docker run -d -p 9999:8080 --name tomcat01 tomcat</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者启动指定版本镜像：docker run -d -p 9999:8080 --name tomcat01 tomcat:7.0</span></span><br><span class="line">90b2563cd6b1aead7dba21718d866d6e7f46d667afd1d83441adfd4f6f8ee0e7</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入tomcat中进行查看</span></span><br><span class="line">[root@localhost /]# docker exec -it tomcat01 /bin/bash</span><br><span class="line">root@90b2563cd6b1:/usr/local/tomcat# ll</span><br><span class="line">bash: ll: command not found</span><br><span class="line">root@90b2563cd6b1:/usr/local/tomcat# ls -a</span><br><span class="line">.             CONTRIBUTING.md  README.md      bin   logs            webapps</span><br><span class="line">..            LICENSE          RELEASE-NOTES  conf  native-jni-lib  webapps.dist</span><br><span class="line">BUILDING.txt  NOTICE           RUNNING.txt    lib   temp            work</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">【注意：】</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">【1、在Tomcat容器中，发现Linux的命令少了（因为是阉割版，只保留最低需求）；】</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">【2、在Tomcat容器里，webapps是一个空的文件夹（因为阿里云里默认是最小的镜像，删除了所有不必要的东西，只保证最小的可运行环境）】</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">【第2点导致，虽然Tomcat容器启动成功了，但是在主机的浏览器中访问首页会报404，找不到目录】</span></span><br></pre></td></tr></table></figure><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1649488254408.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@90b2563cd6b1:/usr/local/tomcat# cd webapps.dist/</span><br><span class="line">root@90b2563cd6b1:/usr/local/tomcat/webapps.dist# ls</span><br><span class="line">ROOT  docs  examples  host-manager  manager</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">【要解决访问Tomcat首页报404的问题，拷贝webapps.dist文件夹里的内容，到webapps即可】</span></span><br><span class="line">root@90b2563cd6b1:/usr/local/tomcat# cp -r webapps.dist/* webapps</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">【这里有一个情况，就是Tomcat中的项目文件会经常需要修改，因此可以在容器外部提供一个映射路径，webapps，在外部放置项目，就自动同步到内部】</span></span><br></pre></td></tr></table></figure><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1649488281049.png"></p><h2 id="7-3-Docker-安装-ES-和-Kibana"><a href="#7-3-Docker-安装-ES-和-Kibana" class="headerlink" title="7.3 Docker 安装 ES 和 Kibana"></a>7.3 Docker 安装 ES 和 Kibana</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、dockerhub搜索镜像信息</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、下载镜像并启动elasticsearch</span></span><br><span class="line">[root@localhost ~]# docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; elasticsearch:7.6.2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意：es暴露的端口很多；es十分耗内存；es的数据一般需要放置到安全目录！挂载</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3、测试es是否启动成功</span></span><br><span class="line">[root@localhost ~]# curl localhost:9200</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;eaeb13f0f20a&quot;,</span><br><span class="line">  &quot;cluster_name&quot; : &quot;docker-cluster&quot;,</span><br><span class="line">  &quot;cluster_uuid&quot; : &quot;LSgGyRUQSdy_MbxUbPyLKw&quot;,</span><br><span class="line">  &quot;version&quot; : &#123;</span><br><span class="line">    &quot;number&quot; : &quot;7.6.2&quot;,</span><br><span class="line">    &quot;build_flavor&quot; : &quot;default&quot;,</span><br><span class="line">    &quot;build_type&quot; : &quot;docker&quot;,</span><br><span class="line">    &quot;build_hash&quot; : &quot;ef48eb35cf30adf4db14086e8aabd07ef6fb113f&quot;,</span><br><span class="line">    &quot;build_date&quot; : &quot;2020-03-26T06:34:37.794943Z&quot;,</span><br><span class="line">    &quot;build_snapshot&quot; : false,</span><br><span class="line">    &quot;lucene_version&quot; : &quot;8.4.0&quot;,</span><br><span class="line">    &quot;minimum_wire_compatibility_version&quot; : &quot;6.8.0&quot;,</span><br><span class="line">    &quot;minimum_index_compatibility_version&quot; : &quot;6.0.0-beta1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4、查看docker中运行镜像的状态（每秒刷新），可以看到es十分占内存</span></span><br><span class="line">[root@localhost ~]# docker stats</span><br><span class="line">CONTAINER ID   NAME            CPU %     MEM USAGE / LIMIT     MEM %     NET I/O     BLOCK I/O        PIDS</span><br><span class="line">eaeb13f0f20a   elasticsearch   0.72%     1.234GiB / 1.781GiB   69.32%    648B / 0B   401MB / 1.76MB   46</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">5、增加内存限制，一般是通过修改es配置文件实现，而在docker中则通过启动是加入-e进行环境配置修改</span></span><br><span class="line">[root@localhost ~]# docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; -e ES_JAVA_OPTS=&quot;-Xms64m -Xmx512m&quot; elasticsearch:7.6.2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">6、检查es是否启动成功</span></span><br><span class="line">[root@localhost ~]# curl localhost:9200</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;4901e48b16b2&quot;,</span><br><span class="line">  &quot;cluster_name&quot; : &quot;docker-cluster&quot;,</span><br><span class="line">  &quot;cluster_uuid&quot; : &quot;Vvn5-B7xRBquRfiUZFqI5g&quot;,</span><br><span class="line">  &quot;version&quot; : &#123;</span><br><span class="line">    &quot;number&quot; : &quot;7.6.2&quot;,</span><br><span class="line">    &quot;build_flavor&quot; : &quot;default&quot;,</span><br><span class="line">    &quot;build_type&quot; : &quot;docker&quot;,</span><br><span class="line">    &quot;build_hash&quot; : &quot;ef48eb35cf30adf4db14086e8aabd07ef6fb113f&quot;,</span><br><span class="line">    &quot;build_date&quot; : &quot;2020-03-26T06:34:37.794943Z&quot;,</span><br><span class="line">    &quot;build_snapshot&quot; : false,</span><br><span class="line">    &quot;lucene_version&quot; : &quot;8.4.0&quot;,</span><br><span class="line">    &quot;minimum_wire_compatibility_version&quot; : &quot;6.8.0&quot;,</span><br><span class="line">    &quot;minimum_index_compatibility_version&quot; : &quot;6.0.0-beta1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">7、查看es的运行状态</span></span><br><span class="line">[root@localhost ~]# docker stats 4901e48b16b2</span><br><span class="line">CONTAINER ID   NAME            CPU %     MEM USAGE / LIMIT     MEM %     NET I/O     BLOCK I/O        PIDS</span><br><span class="line">4901e48b16b2   elasticsearch   0.32%     402.6MiB / 1.781GiB   22.08%    648B / 0B   190MB / 1.75MB   47</span><br></pre></td></tr></table></figure><h2 id="7-4-打包-jar"><a href="#7-4-打包-jar" class="headerlink" title="7.4 打包 jar"></a>7.4 打包 jar</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost dockerdabao]# docker build -t target/dg-is-ga-server:30 --rm .</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">冒号后面为打包的版本号</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--<span class="built_in">rm</span>：整个构建过程成功后删除中间环节的容器</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">.：最后单独的点，意思为根据当前目录下的Dockerfile文件生成镜像</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打包前需要将Dockerfile文件放到根目录中，声明打包的规则</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将指定镜像保存成tar归档文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令：docker save [OPTIONS] IMAGE [IMAGE...]</span></span><br><span class="line">[root@localhost dockerdabao]# docker save -o my_ubuntu_v3.tar jb51/ubuntu:v3</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-o：输出到的文件</span></span><br></pre></td></tr></table></figure><h1 id="八、Docker-可视化操作"><a href="#八、Docker-可视化操作" class="headerlink" title="八、Docker 可视化操作"></a>八、Docker 可视化操作</h1><h2 id="8-1-Portainer（可视化容器管理工具）"><a href="#8-1-Portainer（可视化容器管理工具）" class="headerlink" title="8.1 Portainer（可视化容器管理工具）"></a>8.1 Portainer（可视化容器管理工具）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 9999:9000 --restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=true portainer/portainer</span><br></pre></td></tr></table></figure><p>访问测试：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">虚拟机</span></span><br><span class="line">curl localhost:9999</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">本机访问</span></span><br><span class="line">虚拟机IP:9999</span><br></pre></td></tr></table></figure><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1649488385369.png"></p><p>在界面中创建账号和密码：admin - admin@123</p><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1649488415443.png"></p><p>在界面中选择<code>Local</code>，然后点击<code>Connect</code>进入管理面板</p><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1649488465792.png"></p><p>一般不用可视化操作界面，界面信息及操作参考博客：<a href="http://www.yunweipai.com/34991.html">可视化图形工具Portainer</a></p><h2 id="8-2-Rancher（Docker-容器管理系统）"><a href="#8-2-Rancher（Docker-容器管理系统）" class="headerlink" title="8.2 Rancher（Docker 容器管理系统）"></a>8.2 Rancher（Docker 容器管理系统）</h2><blockquote><p>持续集成与持续部署（CI&#x2F;CD）</p></blockquote><p></br></br></br></br></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/reference/&quot;&gt;Docker 命令官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://edu.jb51.net/docker/docker-command-man</summary>
      
    
    
    
    <category term="编程" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Docker" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/Docker/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
    <category term="中间件" scheme="http://example.com/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Docker安装与配置_Linux</title>
    <link href="http://example.com/blog/edc3fdf.html"/>
    <id>http://example.com/blog/edc3fdf.html</id>
    <published>2023-03-28T09:12:33.000Z</published>
    <updated>2023-04-06T02:00:40.414Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://docs.docker.com/">官方在线文档</a></p></blockquote><h1 id="一、Docker-安装"><a href="#一、Docker-安装" class="headerlink" title="一、Docker 安装"></a>一、Docker 安装</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、查看</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、卸载旧版本</span></span><br><span class="line">[root@localhost ~]# yum remove docker</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">No Match for argument: docker</span><br><span class="line">No Packages marked for removal</span><br><span class="line"></span><br><span class="line">yum remove docker \</span><br><span class="line">docker-client \</span><br><span class="line">docker-client-latest \</span><br><span class="line">docker-common \</span><br><span class="line">docker-latest \</span><br><span class="line">docker-latest-logrotate \</span><br><span class="line">docker-logrotate \</span><br><span class="line">docker-engine</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、下载安装包</span></span><br><span class="line">yum install -y yum-utils</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3、设置镜像仓库</span></span><br><span class="line">yum-config-manager \</span><br><span class="line">--add-repo \</span><br><span class="line">https://download.docker.com/linux/centos/docker-ce.repo # 官网默认使用国外地址，慢</span><br><span class="line">yum-config-manager \</span><br><span class="line">--add-repo \</span><br><span class="line">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo # 国内阿里云镜像加速地址，快</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新yum软件包索引</span></span><br><span class="line">yum makecache fast</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4、安装Docker</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker-ce：ce表示社区版；ee表示企业版</span></span><br><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">5、启动Docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">6、判断Docker是否安装及启动成功</span></span><br><span class="line">docker version</span><br></pre></td></tr></table></figure><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1649487811778.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">9、查看下载的镜像</span></span><br><span class="line">[root@localhost ~]# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID   CREATED   SIZE</span><br></pre></td></tr></table></figure><h1 id="二、Docker-卸载"><a href="#二、Docker-卸载" class="headerlink" title="二、Docker 卸载"></a>二、Docker 卸载</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载docker依赖</span></span><br><span class="line">[root@localhost ~]# yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除docker环境（这里是docker的默认工作路径）</span></span><br><span class="line">[root@localhost ~]# rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure><p></br></br></br></br></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/&quot;&gt;官方在线文档&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;一、Docker-安装&quot;&gt;&lt;a href=&quot;#一、Docker-安装&quot; class=&quot;headerlin</summary>
      
    
    
    
    <category term="编程" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Docker" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/Docker/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
    <category term="中间件" scheme="http://example.com/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Docker介绍</title>
    <link href="http://example.com/blog/6489f8a9.html"/>
    <id>http://example.com/blog/6489f8a9.html</id>
    <published>2023-03-28T08:54:06.000Z</published>
    <updated>2023-04-06T02:00:52.515Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 相关网址：</p><p><a href="https://www.docker.com/">Docker 官网</a></p><p><a href="https://docs.docker.com/">Docker 文档地址</a></p><p><a href="https://hub.docker.com/">Docker 仓库地址</a></p></blockquote><h1 id="一、Docker-是什么"><a href="#一、Docker-是什么" class="headerlink" title="一、Docker 是什么"></a>一、Docker 是什么</h1><p>Docker 就像一个命令不完整的轻量级的虚拟机，它将应用程序的代码、工具库、运行环境封装在一个容器中，我们到时候只需要执行一条命令即可，因此大大减轻了测试和部署的难度。</p><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1656065889066.png"></p><h2 id="1-1-Docker-VS-VMware"><a href="#1-1-Docker-VS-VMware" class="headerlink" title="1.1 Docker VS VMware"></a>1.1 Docker VS VMware</h2><p>Docker 和 VMware 都是属于虚拟化技术</p><ul><li>VMware 虚拟的是一台或多台电脑，笨重（占用资源多，冗余步骤多【每次都要开机都要初始化】，启动速度慢）</li><li>Docker 虚拟的是镜像，镜像 &#x3D; 最核心的环境（4m）+ JDK + MySQL + ……，直接运行镜像就可以了，小巧（Docker 容器模拟的并不是一个完整的操作系统，容器运行在操作系统之上，共享系统内核，相互之间使用沙箱机制，不会有任何接口，所以一个容器崩了，其他容器不受影响，当然也可以使用 Nginx 进行跨域关联起来）</li></ul><h2 id="1-2-镜像是什么"><a href="#1-2-镜像是什么" class="headerlink" title="1.2 镜像是什么"></a>1.2 镜像是什么</h2><p>镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。</p><p>同时，就像代码可以保存到 GitHub 中开源，镜像也可以提交到 DockerHub 中</p><h2 id="1-3-镜像加载原理"><a href="#1-3-镜像加载原理" class="headerlink" title="1.3 镜像加载原理"></a>1.3 镜像加载原理</h2><h3 id="1-3-1-UnionFS（联合文件系统）"><a href="#1-3-1-UnionFS（联合文件系统）" class="headerlink" title="1.3.1 UnionFS（联合文件系统）"></a>1.3.1 UnionFS（联合文件系统）</h3><p>UnionFS（联合文件系统）是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下（unite serveral directories into a single virtual filesystem）。Union 文件系统是 Docker 镜像的基础。镜像可以通过分层来进行继承（不同镜像之间可以使用同一个底层系统，然后节省空间），基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。</p><p>特性：以此同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件叠加起来，这样最终的文件系统会包含所有底层的文件和目录。</p><h3 id="1-3-2-镜像加载原理"><a href="#1-3-2-镜像加载原理" class="headerlink" title="1.3.2 镜像加载原理"></a>1.3.2 镜像加载原理</h3><p>docker 的镜像实际上由一层一层的文件系统组成，这种层级的文件系统 UnionFS。</p><h4 id="bootfs（boot-file-system）"><a href="#bootfs（boot-file-system）" class="headerlink" title="bootfs（boot file system）"></a>bootfs（boot file system）</h4><p>bootfs 主要包含 BootLoader 和 kernel，BootLoader 主要是引导加载 kernel，Linux 刚启动时会加载 bootfs 文件系统，在 Docker 镜像的最底层是 bootfs。这一层与我们典型的 Linux&#x2F;Unix 系统是一样的，包含 boot 加载器和内核。当 boot 加载完成之后整个内核就都在内存中了，此时内存的使用权已由 bootfs 转交给内核，此时系统也会卸载 bootfs。</p><h4 id="rootfs（root-file-system）"><a href="#rootfs（root-file-system）" class="headerlink" title="rootfs（root file system）"></a>rootfs（root file system）</h4><p>rootfs 在 bootfs 之上。包含的就是典型 Linux 系统中的 &#x2F;dev、&#x2F;proc、&#x2F;bin、&#x2F;etc 等标准目录和文件。rootfs 就是各种不同的操作系统发行版，比如 Ubuntu，CentOS 等等。</p><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1656399799960.png"></p><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1649487227223.png"></p><p>例如：对于一个精简的 OS，rootfs 可以很小，只需要包含最基本的命令，工具和程序库就可以了，因为底层直接用 Host 的 kernel，自己只需要提供 rootfs 就可以了。由此可见对不同的 Linux 发行版，bootfs 基本是一致的，rootfs 会有差别，因此不同的发行版可以公用 bootfs。</p><h3 id="1-3-3-分层的理解"><a href="#1-3-3-分层的理解" class="headerlink" title="1.3.3 分层的理解"></a>1.3.3 分层的理解</h3><p>在下载镜像的时候可以观察日志输出，可以看到是一层一层的在下载。</p><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1649487257810.png"></p><p>思考：为什么 Docker 镜像要采用这种分层的结构？</p><p>最大的好处就是资源共享，比如有多个镜像都从相同的 Base 镜像构建而来，那么宿主机只需在磁盘上保留一份 base 镜像，同时内存中也只需要加载一份 base 镜像，这样就可以为所有的容器服务了，而且镜像的每一层都可以被共享。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看镜像分层</span></span><br><span class="line">[root@localhost ~]# docker image inspect tomcat:8.0</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: &quot;sha256:ef6a7c98d192507d6066dcf24e44bec66d07ec9cf7c55d8d3d1ea0a24660bdef&quot;,</span><br><span class="line">        &quot;RepoTags&quot;: [</span><br><span class="line">            &quot;tomcat:8.0&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;RepoDigests&quot;: [</span><br><span class="line">            &quot;tomcat@sha256:8ecb10948deb32c34aeadf7bf95d12a93fbd3527911fa629c1a3e7823b89ce6f&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;Parent&quot;: &quot;&quot;,</span><br><span class="line">        &quot;Comment&quot;: &quot;&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2018-09-12T20:42:22.931362721Z&quot;,</span><br><span class="line">        &quot;Container&quot;: &quot;537db43b9934d84b08d1226d9e86480c27d0e76eec5dd044cba72a8edc8e193f&quot;,</span><br><span class="line">        &quot;ContainerConfig&quot;: &#123;</span><br><span class="line">            &quot;Hostname&quot;: &quot;537db43b9934&quot;,</span><br><span class="line">            &quot;Domainname&quot;: &quot;&quot;,</span><br><span class="line">            &quot;User&quot;: &quot;&quot;,</span><br><span class="line">            &quot;AttachStdin&quot;: false,</span><br><span class="line">            &quot;AttachStdout&quot;: false,</span><br><span class="line">            &quot;AttachStderr&quot;: false,</span><br><span class="line">            &quot;ExposedPorts&quot;: &#123;</span><br><span class="line">                &quot;8080/tcp&quot;: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;Tty&quot;: false,</span><br><span class="line">            &quot;OpenStdin&quot;: false,</span><br><span class="line">            &quot;StdinOnce&quot;: false,</span><br><span class="line">            &quot;Env&quot;: [</span><br><span class="line">                &quot;PATH=/usr/local/tomcat/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;,</span><br><span class="line">                &quot;LANG=C.UTF-8&quot;,</span><br><span class="line">                &quot;JAVA_HOME=/docker-java-home/jre&quot;,</span><br><span class="line">                &quot;JAVA_VERSION=7u181&quot;,</span><br><span class="line">                &quot;JAVA_DEBIAN_VERSION=7u181-2.6.14-1~deb8u1&quot;,</span><br><span class="line">                &quot;CATALINA_HOME=/usr/local/tomcat&quot;,</span><br><span class="line">                &quot;TOMCAT_NATIVE_LIBDIR=/usr/local/tomcat/native-jni-lib&quot;,</span><br><span class="line">                &quot;LD_LIBRARY_PATH=/usr/local/tomcat/native-jni-lib&quot;,</span><br><span class="line">                &quot;OPENSSL_VERSION=1.1.0f-3+deb9u2&quot;,</span><br><span class="line">                &quot;GPG_KEYS=05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 713DA88BE50911535FE716F5208B0AB1D63011C7 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23&quot;,</span><br><span class="line">                &quot;TOMCAT_MAJOR=8&quot;,</span><br><span class="line">                &quot;TOMCAT_VERSION=8.0.53&quot;,</span><br><span class="line">                &quot;TOMCAT_SHA512=cd8a4e48a629a2f2bb4ce6b101ebcce41da52b506064396ec1b2915c0b0d8d82123091242f2929a649bcd8b65ecf6cd1ab9c7d90ac0e261821097ab6fbe22df9&quot;,</span><br><span class="line">                &quot;TOMCAT_TGZ_URLS=https://www.apache.org/dyn/closer.cgi?action=download&amp;filename=tomcat/tomcat-8/v8.0.53/bin/apache-tomcat-8.0.53.tar.gz \thttps://www-us.apache.org/dist/tomcat/tomcat-8/v8.0.53/bin/apache-tomcat-8.0.53.tar.gz \thttps://www.apache.org/dist/tomcat/tomcat-8/v8.0.53/bin/apache-tomcat-8.0.53.tar.gz \thttps://archive.apache.org/dist/tomcat/tomcat-8/v8.0.53/bin/apache-tomcat-8.0.53.tar.gz&quot;,</span><br><span class="line">                &quot;TOMCAT_ASC_URLS=https://www.apache.org/dyn/closer.cgi?action=download&amp;filename=tomcat/tomcat-8/v8.0.53/bin/apache-tomcat-8.0.53.tar.gz.asc \thttps://www-us.apache.org/dist/tomcat/tomcat-8/v8.0.53/bin/apache-tomcat-8.0.53.tar.gz.asc \thttps://www.apache.org/dist/tomcat/tomcat-8/v8.0.53/bin/apache-tomcat-8.0.53.tar.gz.asc \thttps://archive.apache.org/dist/tomcat/tomcat-8/v8.0.53/bin/apache-tomcat-8.0.53.tar.gz.asc&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Cmd&quot;: [</span><br><span class="line">                &quot;/bin/sh&quot;,</span><br><span class="line">                &quot;-c&quot;,</span><br><span class="line">                &quot;#(nop) &quot;,</span><br><span class="line">                &quot;CMD [\&quot;catalina.sh\&quot; \&quot;run\&quot;]&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;ArgsEscaped&quot;: true,</span><br><span class="line">            &quot;Image&quot;: &quot;sha256:1d3fb924acd246fd2804e5907fd81405abf7cc86072703417daf15bbf551f2e1&quot;,</span><br><span class="line">            &quot;Volumes&quot;: null,</span><br><span class="line">            &quot;WorkingDir&quot;: &quot;/usr/local/tomcat&quot;,</span><br><span class="line">            &quot;Entrypoint&quot;: null,</span><br><span class="line">            &quot;OnBuild&quot;: [],</span><br><span class="line">            &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;DockerVersion&quot;: &quot;17.06.2-ce&quot;,</span><br><span class="line">        &quot;Author&quot;: &quot;&quot;,</span><br><span class="line">        &quot;Config&quot;: &#123;</span><br><span class="line">            &quot;Hostname&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Domainname&quot;: &quot;&quot;,</span><br><span class="line">            &quot;User&quot;: &quot;&quot;,</span><br><span class="line">            &quot;AttachStdin&quot;: false,</span><br><span class="line">            &quot;AttachStdout&quot;: false,</span><br><span class="line">            &quot;AttachStderr&quot;: false,</span><br><span class="line">            &quot;ExposedPorts&quot;: &#123;</span><br><span class="line">                &quot;8080/tcp&quot;: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;Tty&quot;: false,</span><br><span class="line">            &quot;OpenStdin&quot;: false,</span><br><span class="line">            &quot;StdinOnce&quot;: false,</span><br><span class="line">            &quot;Env&quot;: [</span><br><span class="line">                &quot;PATH=/usr/local/tomcat/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;,</span><br><span class="line">                &quot;LANG=C.UTF-8&quot;,</span><br><span class="line">                &quot;JAVA_HOME=/docker-java-home/jre&quot;,</span><br><span class="line">                &quot;JAVA_VERSION=7u181&quot;,</span><br><span class="line">                &quot;JAVA_DEBIAN_VERSION=7u181-2.6.14-1~deb8u1&quot;,</span><br><span class="line">                &quot;CATALINA_HOME=/usr/local/tomcat&quot;,</span><br><span class="line">                &quot;TOMCAT_NATIVE_LIBDIR=/usr/local/tomcat/native-jni-lib&quot;,</span><br><span class="line">                &quot;LD_LIBRARY_PATH=/usr/local/tomcat/native-jni-lib&quot;,</span><br><span class="line">                &quot;OPENSSL_VERSION=1.1.0f-3+deb9u2&quot;,</span><br><span class="line">                &quot;GPG_KEYS=05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 713DA88BE50911535FE716F5208B0AB1D63011C7 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23&quot;,</span><br><span class="line">                &quot;TOMCAT_MAJOR=8&quot;,</span><br><span class="line">                &quot;TOMCAT_VERSION=8.0.53&quot;,</span><br><span class="line">                &quot;TOMCAT_SHA512=cd8a4e48a629a2f2bb4ce6b101ebcce41da52b506064396ec1b2915c0b0d8d82123091242f2929a649bcd8b65ecf6cd1ab9c7d90ac0e261821097ab6fbe22df9&quot;,</span><br><span class="line">                &quot;TOMCAT_TGZ_URLS=https://www.apache.org/dyn/closer.cgi?action=download&amp;filename=tomcat/tomcat-8/v8.0.53/bin/apache-tomcat-8.0.53.tar.gz \thttps://www-us.apache.org/dist/tomcat/tomcat-8/v8.0.53/bin/apache-tomcat-8.0.53.tar.gz \thttps://www.apache.org/dist/tomcat/tomcat-8/v8.0.53/bin/apache-tomcat-8.0.53.tar.gz \thttps://archive.apache.org/dist/tomcat/tomcat-8/v8.0.53/bin/apache-tomcat-8.0.53.tar.gz&quot;,</span><br><span class="line">                &quot;TOMCAT_ASC_URLS=https://www.apache.org/dyn/closer.cgi?action=download&amp;filename=tomcat/tomcat-8/v8.0.53/bin/apache-tomcat-8.0.53.tar.gz.asc \thttps://www-us.apache.org/dist/tomcat/tomcat-8/v8.0.53/bin/apache-tomcat-8.0.53.tar.gz.asc \thttps://www.apache.org/dist/tomcat/tomcat-8/v8.0.53/bin/apache-tomcat-8.0.53.tar.gz.asc \thttps://archive.apache.org/dist/tomcat/tomcat-8/v8.0.53/bin/apache-tomcat-8.0.53.tar.gz.asc&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Cmd&quot;: [</span><br><span class="line">                &quot;catalina.sh&quot;,</span><br><span class="line">                &quot;run&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;ArgsEscaped&quot;: true,</span><br><span class="line">            &quot;Image&quot;: &quot;sha256:1d3fb924acd246fd2804e5907fd81405abf7cc86072703417daf15bbf551f2e1&quot;,</span><br><span class="line">            &quot;Volumes&quot;: null,</span><br><span class="line">            &quot;WorkingDir&quot;: &quot;/usr/local/tomcat&quot;,</span><br><span class="line">            &quot;Entrypoint&quot;: null,</span><br><span class="line">            &quot;OnBuild&quot;: [],</span><br><span class="line">            &quot;Labels&quot;: null</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Architecture&quot;: &quot;amd64&quot;,</span><br><span class="line">        &quot;Os&quot;: &quot;linux&quot;,</span><br><span class="line">        &quot;Size&quot;: 356245923,</span><br><span class="line">        &quot;VirtualSize&quot;: 356245923,</span><br><span class="line">        &quot;GraphDriver&quot;: &#123;</span><br><span class="line">            &quot;Data&quot;: &#123;</span><br><span class="line">                &quot;LowerDir&quot;: &quot;/var/lib/docker/overlay2/5467095563d0eeb7800cbe149e38b134094b17d8aa7747a3489b3f4cceed84a8/diff:/var/lib/docker/overlay2/89de18b5ee2a1908787b40e6ad5bd86e42d33296f78800cc54db2884d5c58dd9/diff:/var/lib/docker/overlay2/cbb8e55d674460e4665642025d769aea683b17791cf63befd079ff2330b9970a/diff:/var/lib/docker/overlay2/953860e1c90c9c24927507effc2fdf1ba27d26c218e9739bca296e5104793f62/diff:/var/lib/docker/overlay2/8ddf5a9115e182e660f055eb223454d4159bf54b53258ba9d37fd3bb4369e21e/diff:/var/lib/docker/overlay2/4837f5a37d13a562d57675ee0d9c9fa1ef8edaa93b7b4a28cfce280fedcc3785/diff:/var/lib/docker/overlay2/297ed5eb5bca37cbf115cadd1c301c53b982ed69b79ddfbdbf0c54fa79fd1fcf/diff:/var/lib/docker/overlay2/b57865f8cfdecde7d7db93fe4eca53c71843206bf3299452096051233a515ac8/diff:/var/lib/docker/overlay2/0c28360e0ccb7f91776c5cc66f56b092f27618eda1f42549aac9f831ce73e3f8/diff:/var/lib/docker/overlay2/d159fa1ad10d5869ceaea96ba9b743d9ecd989431e9d9934edace1932f14826e/diff&quot;,</span><br><span class="line">                &quot;MergedDir&quot;: &quot;/var/lib/docker/overlay2/0576b5f7dd7201c4de9acdf0e52f895efe3b19c33cd4284823a009a22d9fbd86/merged&quot;,</span><br><span class="line">                &quot;UpperDir&quot;: &quot;/var/lib/docker/overlay2/0576b5f7dd7201c4de9acdf0e52f895efe3b19c33cd4284823a009a22d9fbd86/diff&quot;,</span><br><span class="line">                &quot;WorkDir&quot;: &quot;/var/lib/docker/overlay2/0576b5f7dd7201c4de9acdf0e52f895efe3b19c33cd4284823a009a22d9fbd86/work&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;Name&quot;: &quot;overlay2&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;RootFS&quot;: &#123;</span><br><span class="line">            &quot;Type&quot;: &quot;layers&quot;,</span><br><span class="line">            &quot;Layers&quot;: [</span><br><span class="line">                &quot;sha256:8c466bf4ca6ffdda8b7717b1cd6fe31109529ee64e626a003a224fb8bd2bc469&quot;,</span><br><span class="line">                &quot;sha256:daf45b2cad9af3ea091d4376d34fb597a9a67874d48fe5a485e1305df10b3157&quot;,</span><br><span class="line">                &quot;sha256:c596d5191368693d366c9b47cc20007efcedd0873691c8895d3684162d469447&quot;,</span><br><span class="line">                &quot;sha256:425325c72d902feb9c15b3c9204fc7c24435dfaea2e750db3acda5a11c569049&quot;,</span><br><span class="line">                &quot;sha256:fc6174f0df4a7466f749d9ae334872f38336bb761962ba15657b771116cb8546&quot;,</span><br><span class="line">                &quot;sha256:39a6e47c4ae6efdd2a0834d81c1bd2860a16cbe5c3c1de28934ee26721bd98c4&quot;,</span><br><span class="line">                &quot;sha256:81242e1e644e4d52602431e4c847f4e1ec599761f2ca082cfdf3c38508ddd9d4&quot;,</span><br><span class="line">                &quot;sha256:9f052711b40a241eec2783c062a743ad4f7870681024b375714cd277db497ec2&quot;,</span><br><span class="line">                &quot;sha256:f26731984f9bb4dc5f286008361729b717d51c2d60989c5e1b2d07d713d9de1f&quot;,</span><br><span class="line">                &quot;sha256:583dc95d65c92bd5b5fdb57c640f391435078ff6da2cc9653a7d32457d3cd8b7&quot;,</span><br><span class="line">                &quot;sha256:d0f3f4011f287adc910aada9e2fee49c67de366654ea7c02b47d36f9736442fc&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Metadata&quot;: &#123;</span><br><span class="line">            &quot;LastTagTime&quot;: &quot;0001-01-01T00:00:00Z&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="二、Docker-能做什么"><a href="#二、Docker-能做什么" class="headerlink" title="二、Docker 能做什么"></a>二、Docker 能做什么</h1><h2 id="2-1-多环境的部署切换"><a href="#2-1-多环境的部署切换" class="headerlink" title="2.1 多环境的部署切换"></a>2.1 多环境的部署切换</h2><p>利用 Docker 能够原封不动地将【开发环境】中的一整套东西（JAR 包 + Jdk、Redis集群、MySQL集群、Hadoop 等）迁移到【测试环境】或【生产环境】中，再配合一定的自动化流程即可实现自动发布。</p><h1 id="三、Docker-资源汇总"><a href="#三、Docker-资源汇总" class="headerlink" title="三、Docker 资源汇总"></a>三、Docker 资源汇总</h1><h2 id="Docker-官方英文资源"><a href="#Docker-官方英文资源" class="headerlink" title="Docker 官方英文资源"></a>Docker 官方英文资源</h2><ul><li><a href="http://www.docker.com/">Docker 官网</a></li><li><a href="https://docs.docker.com/windows/">Docker windows 入门</a></li><li><a href="https://docs.docker.com/linux/">Docker Linux 入门</a></li><li><a href="https://docs.docker.com/mac/">Docker mac 入门</a></li><li><a href="https://docs.docker.com/engine/userguide/">Docker 用户指引</a></li><li><a href="http://blog.docker.com/">Docker 官方博客</a></li><li><a href="https://hub.docker.com/">Docker Hub</a></li><li><a href="https://www.docker.com/open-source">Docker 开源</a></li></ul><h2 id="Docker-中文资源"><a href="#Docker-中文资源" class="headerlink" title="Docker 中文资源"></a>Docker 中文资源</h2><ul><li><a href="http://www.docker.org.cn/">Docker 中文网站</a></li><li><a href="http://www.docker.org.cn/book/install.html">Docker 安装手册</a></li><li><a href="https://blog.csphere.cn/archives/22">一小时 Docker 教程</a></li><li><a href="http://dockerpool.com/static/books/docker_practice/index.html">Docker 从入门到实践</a></li><li><a href="http://www.widuu.com/chinese_docker/index.html">Docker 中文指南</a></li></ul><h2 id="其他资源"><a href="#其他资源" class="headerlink" title="其他资源"></a>其他资源</h2><ul><li><a href="http://www.jb51.net/list/list_256_1.htm">http://www.jb51.net/list/list_256_1.htm</a></li><li><a href="https://github.com/docker/docker">https://github.com/docker/docker</a></li><li><a href="https://wiki.openstack.org/wiki/Docker">https://wiki.openstack.org/wiki/Docker</a></li><li><a href="https://wiki.archlinux.org/index.php/Docker">https://wiki.archlinux.org/index.php/Docker</a></li></ul><p></br></br></br></br></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt; 相关网址：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker 官网&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/&quot;&gt;Docker 文档地址&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="编程" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Docker" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/Docker/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
    <category term="中间件" scheme="http://example.com/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Java之String</title>
    <link href="http://example.com/blog/1f41d3c9.html"/>
    <id>http://example.com/blog/1f41d3c9.html</id>
    <published>2023-03-28T02:54:44.000Z</published>
    <updated>2023-03-28T09:38:00.333Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、特殊的-String-类"><a href="#一、特殊的-String-类" class="headerlink" title="一、特殊的 String 类"></a>一、特殊的 String 类</h1><ol><li>虽然是引用类型，但是可以像基础数据类型一样直接赋值（<code>String s = &quot;&quot;;</code>）</li><li>不可被继承，String 类被<code>final</code>修饰</li></ol><h1 id="二、String-常用方法"><a href="#二、String-常用方法" class="headerlink" title="二、String 常用方法"></a>二、String 常用方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回指定字符第一次出现的字符串内的索引，以指定的索引开始搜索</span></span><br><span class="line">String.indexOf(<span class="type">int</span> ch, <span class="type">int</span> fromIndex);</span><br><span class="line"><span class="comment">// int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回指定子字符串第一次出现的字符串内的索引</span></span><br><span class="line">String.indexOf(String str);</span><br><span class="line"><span class="comment">// int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回指定子串的第一次出现的字符串中的索引，从指定的索引开始</span></span><br><span class="line">String.indexOf(String str, <span class="type">int</span> fromIndex);</span><br><span class="line"><span class="comment">// int</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回指定字符的最后一次出现的字符串中的索引</span></span><br><span class="line">String.lastIndexOf(<span class="type">int</span> ch);</span><br><span class="line"><span class="comment">// int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回指定字符的最后一次出现的字符串中的索引，从指定的索引开始向后搜索</span></span><br><span class="line">String.lastIndexOf(<span class="type">int</span> ch, <span class="type">int</span> fromIndex);</span><br><span class="line"><span class="comment">// int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回指定子字符串最后一次出现的字符串中的索引</span></span><br><span class="line">String.lastIndexOf(String str);</span><br><span class="line"><span class="comment">// int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回指定子字符串的最后一次出现的字符串中的索引，从指定索引开始向后搜索</span></span><br><span class="line">String.lastIndexOf(String str, <span class="type">int</span> fromIndex);</span><br><span class="line"><span class="comment">// int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串是否匹配给定的正则表达式</span></span><br><span class="line">String.matches(String regex);</span><br><span class="line"><span class="comment">// boolean</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回从替换所有出现的导致一个字符串 oldChar在此字符串 newChar</span></span><br><span class="line">String.replace(<span class="type">char</span> oldChar, <span class="type">char</span> newChar);</span><br><span class="line"><span class="comment">// String</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将与字面目标序列匹配的字符串的每个子字符串替换为指定的字面替换序列</span></span><br><span class="line">String.replace(CharSequence target, CharSequence replacement);</span><br><span class="line"><span class="comment">// String</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用给定的替换替换与给定的 regular expression匹配的此字符串的每个子字符串</span></span><br><span class="line">String.replaceAll(String regex, String replacement);</span><br><span class="line"><span class="comment">// String</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用给定的替换替换与给定的 regular expression匹配的此字符串的第一个子字符串</span></span><br><span class="line">String.replaceFirst(String regex, String replacement);</span><br><span class="line"><span class="comment">// String</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将此字符串分割为给定的 regular expression的匹配</span></span><br><span class="line">String.split(String regex);</span><br><span class="line"><span class="comment">// String[]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将这个字符串拆分为给定的 regular expression的匹配</span></span><br><span class="line">String.split(String regex, <span class="type">int</span> limit);</span><br><span class="line"><span class="comment">// String[]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一个字符串，该字符串是此字符串的子字符串</span></span><br><span class="line">String.substring(<span class="type">int</span> beginIndex);</span><br><span class="line"><span class="comment">// String</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一个字符串，该字符串是此字符串的子字符串</span></span><br><span class="line">String.substring(<span class="type">int</span> beginIndex, <span class="type">int</span> endIndex);</span><br><span class="line"><span class="comment">// String</span></span><br></pre></td></tr></table></figure><h2 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> s2.intern();</span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="string">&quot;Hel&quot;</span> + <span class="string">&quot;lo&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">sa</span> <span class="operator">=</span> <span class="string">&quot;Hel&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="string">&quot;lo&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> sa + sb;</span><br><span class="line"></span><br><span class="line">System.out.println(s1 == s2);<span class="comment">// false</span></span><br><span class="line">System.out.println(s1 == s3);<span class="comment">// true</span></span><br><span class="line">System.out.println(s1 == s4);<span class="comment">// true</span></span><br><span class="line">System.out.println(s1 == s5);<span class="comment">// false</span></span><br></pre></td></tr></table></figure><ul><li>String 的 intern() 方法会查找在常量池中是否存在一份 equal 相等的字符串，如果有则返回该字符串的引用，如果没有则添加自己的字符串进入常量池。<br>(因为 s1 已经在常量池中创建了”Hello”字符串，所以 s2.intern() 的时候就去常量池中查找是否已经存在”Hello”，存在则直接&#x3D;原来的字符串，不存在则是一个新的存在，所以 s3&#x3D;s1)</li><li>虽然 s4 是动态拼接出来的，但所有参与拼接的部分都是已知的字面量，在编译期间，这种拼接会被优化，编译器直接帮你拼好，因此相等。<br>（只有使用这种全部带引号、使用“+”连接产生的新字符串对象才会被加入字符串池中）<br>（s4 在初始化的过程中，产生了一个或〇个对象，若常量池中早已存在该字符串，则直接指向常量池，否则使用字符串拼接优化，产生一个 StringBuffer 对象进行拼接，然后 toString()，存放到常量池中）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>().append(<span class="string">&quot;Hel&quot;</span>).append(<span class="string">&quot;lo&quot;</span>).toString()</span><br></pre></td></tr></table></figure><ul><li>虽然 s5 也是拼接，但 sa 和 sb 作为两个变量，都是不可预料的，并不会被优化，会存放到堆中。</li></ul><h1 id="三、Java-的字符串类比较"><a href="#三、Java-的字符串类比较" class="headerlink" title="三、Java 的字符串类比较"></a>三、Java 的字符串类比较</h1><p>String、StringBuffer、StringBuilder</p><ol><li>执行速度比较（例如字符串的组合速度）：<strong>StringBuilder &gt; StringBuffer &gt; String</strong></li><li>StringBuilder – 非线程安全；StringBuffer – 线程安全<br>（因为 StringBuffer 为保证线程安全而牺牲了性能，所以当我们在不用考虑线程的情况下，尽量使用 StringBuilder）</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>如果要操作少量的数据 → String</li><li>不考虑线程安全处理字符串缓冲区下大量数据 → StringBuilder</li><li>需考虑线程安全处理字符串缓冲区下大量数据 → StringBuffer</li></ul><h1 id="四、Java-常量池与-String-类"><a href="#四、Java-常量池与-String-类" class="headerlink" title="四、Java 常量池与 String 类"></a>四、Java 常量池与 String 类</h1><p>Java 中的常量池实际上分为两种形态：静态常量池和运行时常量池。<br>静态常量池即是 *.class 文件中的常量池，用来存放方法名称、字段名称等。<br>运行时常量池则是我们常说的常量池，用来存放常量（final 关键字修饰的变量）和字符串等，避免频繁的创建和销毁对象而影响系统性能，实现了对象的共享（即大家用的都是同一个东西）。</p><p></br></br></br></br></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、特殊的-String-类&quot;&gt;&lt;a href=&quot;#一、特殊的-String-类&quot; class=&quot;headerlink&quot; title=&quot;一、特殊的 String 类&quot;&gt;&lt;/a&gt;一、特殊的 String 类&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;虽然是引用类型，但是可以像基础数</summary>
      
    
    
    
    <category term="编程" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Java" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/Java/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java之BigDecimal</title>
    <link href="http://example.com/blog/6ff26fc7.html"/>
    <id>http://example.com/blog/6ff26fc7.html</id>
    <published>2023-03-24T02:41:58.000Z</published>
    <updated>2023-04-08T07:57:08.569Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘录自博客：<a href="https://blog.csdn.net/qq_37080455/article/details/98964856">java精确除法运算（BigDecimal）_bigdecimal 除法_Evan_su的博客-CSDN博客</a></p></blockquote><h1 id="一、BigDecimal-介绍"><a href="#一、BigDecimal-介绍" class="headerlink" title="一、BigDecimal 介绍"></a>一、BigDecimal 介绍</h1><p>Java 中提供了大数字（超过 16 位有效位）的操作类，即 java.math.BinInteger 类和 java.math.BigDecimal 类，用于高精度计算。</p><p>其中 BigInteger 类是针对大整数的处理类，而 BigDecimal 类则是针对大小数的处理类。</p><p>BigDecimal 类的实现用到了 BigInteger 类，不同的是 BigDecimal 加入了小数的概念。</p><p>float 和 Double 只能用来做科学计算或者是工程计算；在商业计算中，对数字精度要求较高，必须使用 BigInteger 类和 BigDecimal 类，它支持任何精度的定点数，可以用它来精确计算货币值。</p><p>BigDecimal 类创建的是对象，不能使用传统的 +、-、*、&#x2F; 等算术运算符直接对其进行数学运算，而必须调用其对应的方法。方法的参数也必须是 BigDecimal 类型的对象。</p><h1 id="二、BigDecimal-构造方法"><a href="#二、BigDecimal-构造方法" class="headerlink" title="二、BigDecimal 构造方法"></a>二、BigDecimal 构造方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一：不允许使用</span></span><br><span class="line">BigDecimal <span class="title function_">BigDecimal</span><span class="params">(<span class="type">double</span> d)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二：常用，推荐使用</span></span><br><span class="line">BigDecimal <span class="title function_">BigDecimal</span><span class="params">(String s)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法三：常用，推荐使用</span></span><br><span class="line"><span class="keyword">static</span> BigDecimal <span class="title function_">valueOf</span><span class="params">(<span class="type">double</span> d)</span>;</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>double 参数的构造方法，不允许使用！！！！因为它不能精确的得到相应的值，值会变大</li><li>String 构造方法是完全可预知的：写入 new BigDecimal(“0.1”) 将创建一个 BigDecimal，它正好等于预期的 0.1；因此，通常建议优先使用 String 构造方法</li><li>静态方法 valueOf(double val) 内部实现，仍是将 double 类型转为 String 类型；这通常是将 double（或 float）转化为 BigDecimal 的首选方法</li></ol><h1 id="三、BigDecimal-类型转换"><a href="#三、BigDecimal-类型转换" class="headerlink" title="三、BigDecimal 类型转换"></a>三、BigDecimal 类型转换</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">toString()    <span class="comment">// 将 BigDecimal 对象的数值转换成字符串</span></span><br><span class="line">doubleValue() <span class="comment">// 将 BigDecimal 对象中的值以双精度数返回</span></span><br><span class="line">floatValue()  <span class="comment">// 将 BigDecimal 对象中的值以单精度数返回</span></span><br><span class="line">longValue()   <span class="comment">// 将 BigDecimal 对象中的值以长整数返回</span></span><br><span class="line">intValue()    <span class="comment">// 将 BigDecimal 对象中的值以整数返回</span></span><br></pre></td></tr></table></figure><h1 id="四、BigDecimal-常用方法"><a href="#四、BigDecimal-常用方法" class="headerlink" title="四、BigDecimal 常用方法"></a>四、BigDecimal 常用方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加法，求两个 BigDecimal 类型数据的和</span></span><br><span class="line">BigDecimal <span class="title function_">add</span><span class="params">(BigDecimal value)</span>;</span><br><span class="line"><span class="comment">// 减法，求两个 BigDecimal 类型数据的差</span></span><br><span class="line">BigDecimal <span class="title function_">subtract</span><span class="params">(BigDecimal value)</span>;</span><br><span class="line"><span class="comment">// 乘法，求两个 BigDecimal 类型数据的积</span></span><br><span class="line">BigDecimal <span class="title function_">multiply</span><span class="params">(BigDecimal  value)</span>;</span><br><span class="line"><span class="comment">// 除法，求两个 BigDecimal 类型数据的商</span></span><br><span class="line">BigDecimal <span class="title function_">divide</span><span class="params">(BigDecimal divisor)</span>;</span><br><span class="line"><span class="comment">// 求余数，求 BigDecimal 类型数据除以 divisor 的余数</span></span><br><span class="line">BigDecimal <span class="title function_">remainder</span><span class="params">(BigDecimal divisor)</span>;</span><br><span class="line"><span class="comment">// 最大数，求两个 BigDecimal 类型数据的最大值</span></span><br><span class="line">BigDecimal <span class="title function_">max</span><span class="params">(BigDecimal value)</span>;</span><br><span class="line"><span class="comment">// 最小数，求两个 BigDecimal 类型数据的最小值</span></span><br><span class="line">BigDecimal <span class="title function_">min</span><span class="params">(BigDecimal value)</span>;</span><br><span class="line"><span class="comment">// 绝对值，求 BigDecimal 类型数据的绝对值</span></span><br><span class="line">BigDecimal <span class="title function_">abs</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 相反数，求 BigDecimal 类型数据的相反数</span></span><br><span class="line">BigDecimal <span class="title function_">negate</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><h1 id="五、BigDecimal-divide"><a href="#五、BigDecimal-divide" class="headerlink" title="五、BigDecimal.divide()"></a>五、BigDecimal.divide()</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> divisor      除数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> scale        小数点后保留位数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> roundingMode 取舍规则</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">BigDecimal.divide(BigDecimal divisor, <span class="type">int</span> scale, RoundingMode roundingMode);</span><br><span class="line"></span><br><span class="line">bd2.divide(bd1, <span class="number">4</span>, BigDecimal.ROUND_HALF_UP).toString(); <span class="comment">// &quot;0.0200&quot;</span></span><br><span class="line"><span class="comment">// 商的小数点后位数是固定的，如果需要去除末尾多余的0，则使用下面方法</span></span><br><span class="line">bd2.divide(bd1, <span class="number">4</span>, BigDecimal.ROUND_HALF_UP).stripTrailingZeros().toPlainString(); <span class="comment">// &quot;0.02&quot;</span></span><br></pre></td></tr></table></figure><p>因为 BigDecimal 除法可能出现不能整除的情况，比如 4.5&#x2F;1.3，这时会报错【java.lang.ArithmeticException: Non-terminating decimal expansion; no exact representable decimal result】。所以就需要用三个参数的除法方法，规定保留几位小数以及保留的方式，这样就可以避免异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">*ROUND_CEILING*</span><br><span class="line">Rounding mode to round towards positive infinity.</span><br><span class="line">向正无穷方向舍入</span><br><span class="line">正数：<span class="number">1.1</span> -&gt; <span class="number">2</span>   <span class="number">1.5</span>-&gt; <span class="number">2</span>   <span class="number">1.8</span>-&gt; <span class="number">2</span></span><br><span class="line">负数：-<span class="number">1.1</span>-&gt; -<span class="number">1</span>   -<span class="number">1.5</span>-&gt; -<span class="number">1</span>   -<span class="number">1.8</span>-&gt; -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">*ROUND_DOWN*</span><br><span class="line">Rounding mode to round towards zero.</span><br><span class="line">向零方向舍入</span><br><span class="line">正数：<span class="number">1.1</span> -&gt; <span class="number">2</span>   <span class="number">1.5</span>-&gt; <span class="number">2</span>   <span class="number">1.8</span>-&gt; <span class="number">2</span></span><br><span class="line">负数：-<span class="number">1.1</span>-&gt; -<span class="number">1</span>   -<span class="number">1.5</span>-&gt; -<span class="number">1</span>   -<span class="number">1.8</span>-&gt; -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">*ROUND_FLOOR*</span><br><span class="line">Rounding mode to round towards negative infinity.</span><br><span class="line">向负无穷方向舍入</span><br><span class="line">正数: <span class="number">1.1</span>-&gt; <span class="number">1</span>   <span class="number">1.5</span>-&gt; <span class="number">1</span>   <span class="number">1.8</span>-&gt; <span class="number">1</span></span><br><span class="line">负数: -<span class="number">1.1</span>-&gt; -<span class="number">2</span>   -<span class="number">1.5</span>-&gt; -<span class="number">2</span>   -<span class="number">1.8</span>-&gt; -<span class="number">2</span></span><br><span class="line"></span><br><span class="line">*ROUND_HALF_DOWN*</span><br><span class="line">Rounding mode to round towards <span class="string">&quot;nearest neighbor&quot;</span> unless both neighbors are equidistant, in which <span class="keyword">case</span> round down.</span><br><span class="line">向（距离）最近的一边舍入，除非两边（的距离）是相等。如果是这样，向下舍入, 例如 <span class="number">1.55</span> 保留一位小数结果为 <span class="number">1.5</span></span><br><span class="line">正数：<span class="number">1.5</span>-&gt; <span class="number">1</span>   <span class="number">1.6</span>-&gt; <span class="number">2</span></span><br><span class="line">负数：-<span class="number">1.5</span>-&gt; -<span class="number">1</span>   -<span class="number">1.6</span>-&gt; -<span class="number">2</span></span><br><span class="line"></span><br><span class="line">*ROUND_HALF_EVEN* </span><br><span class="line">Rounding mode to round towards the <span class="string">&quot;nearest neighbor&quot;</span> unless both neighbors are equidistant, in which <span class="keyword">case</span>, round towards the even neighbor.</span><br><span class="line">向（距离）最近的一边舍入，除非两边（的距离）是相等。如果是这样，如果保留位数是奇数，使用 ROUND_HALF_UP，如果是偶数，使用*ROUND_HALF_DOWN*（以 <span class="number">5</span> 为分界线，如果是 <span class="number">5</span>，则前一位变偶数）</span><br><span class="line"><span class="number">1.15</span>-&gt; <span class="number">1.2</span>   <span class="number">1.16</span>-&gt; <span class="number">1.2</span>   <span class="number">1.25</span>-&gt; <span class="number">1.2</span>   <span class="number">1.26</span>-&gt; <span class="number">1.3</span></span><br><span class="line"></span><br><span class="line">*ROUND_HALF_UP*</span><br><span class="line">Rounding mode to round towards <span class="string">&quot;nearest neighbor&quot;</span> unless both neighbors are equidistant, in which <span class="keyword">case</span> round up.</span><br><span class="line">向（距离）最近的一边舍入，除非两边（的距离）是相等。如果是这样，向上舍入, <span class="number">1.55</span> 保留一位小数结果为 <span class="number">1.6</span></span><br><span class="line">【四舍五入】</span><br><span class="line"></span><br><span class="line">*ROUND_UNNECESSARY*</span><br><span class="line">Rounding mode to <span class="keyword">assert</span> that the requested operation has an exact result, hence no rounding is necessary.</span><br><span class="line">计算结果是精确的，不需要舍入模式</span><br><span class="line"></span><br><span class="line">*ROUND_UP*</span><br><span class="line">Rounding mode to round away from zero.</span><br><span class="line">向远离 <span class="number">0</span> 的方向舍入</span><br><span class="line">正数：<span class="number">1.1</span>-&gt; <span class="number">2</span>   <span class="number">1.5</span>-&gt; <span class="number">2</span>   <span class="number">1.8</span>-&gt; <span class="number">2</span></span><br><span class="line">负数：-<span class="number">1.1</span>-&gt; -<span class="number">2</span>   -<span class="number">1.5</span>-&gt; -<span class="number">2</span>   -<span class="number">1.8</span>-&gt; -<span class="number">2</span></span><br></pre></td></tr></table></figure><h1 id="六、BigDecimal-setScale"><a href="#六、BigDecimal-setScale" class="headerlink" title="六、BigDecimal.setScale()"></a>六、BigDecimal.setScale()</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">BigDecimal <span class="title function_">setScale</span><span class="params">(<span class="type">int</span> newScale, RoundingMode roundingMode)</span>;</span><br><span class="line"></span><br><span class="line">BigDecimal <span class="title function_">setScale</span><span class="params">(<span class="type">int</span> newScale, <span class="type">int</span> roundingMode)</span>;</span><br><span class="line"></span><br><span class="line">BigDecimal <span class="title function_">setScale</span><span class="params">(<span class="type">int</span> newScale)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestBigDecimal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;123.564&quot;</span>);</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;3.3&quot;</span>);</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">divide</span> <span class="operator">=</span> b1.divide(b2, <span class="number">10</span>, RoundingMode.HALF_UP);</span><br><span class="line">        System.out.println(divide);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></br></br></br></br></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;摘录自博客：&lt;a href=&quot;https://blog.csdn.net/qq_37080455/article/details/98964856&quot;&gt;java精确除法运算（BigDecimal）_bigdecimal 除法_Evan_su的博客-C</summary>
      
    
    
    
    <category term="编程" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Java" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/Java/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>MySQL之Date</title>
    <link href="http://example.com/blog/3ebaa5b9.html"/>
    <id>http://example.com/blog/3ebaa5b9.html</id>
    <published>2023-03-24T02:16:14.000Z</published>
    <updated>2023-04-06T02:02:56.991Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>天 - 周 - 月 - 季度 - 年</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> NOW(); <span class="comment">-- 2021-02-20 18:21:22</span></span><br><span class="line"><span class="keyword">SELECT</span> CURDATE(); <span class="comment">-- 2021-02-20</span></span><br><span class="line"><span class="keyword">SELECT</span> CURTIME(); <span class="comment">-- 18:21:22</span></span><br><span class="line">DATE_FORMAT <span class="comment">-- 日期格式化</span></span><br><span class="line">DATE_SUB <span class="comment">-- 日期减去指定的时间间隔</span></span><br><span class="line">DATE_ADD <span class="comment">-- 日期添加指定的时间间隔</span></span><br><span class="line"><span class="comment">-- 今天</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> TO_DAYS(column_name) <span class="operator">=</span> TO_DAYS(NOW());</span><br><span class="line"><span class="comment">-- 昨天</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> TO_DAYS(NOW()) <span class="operator">-</span> TO_DAYS(column_name) <span class="operator">&lt;=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 七天内的数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> DATE_SUB(CURDATE(), <span class="type">INTERVAL</span> <span class="number">7</span> <span class="keyword">DAY</span>) <span class="operator">&lt;=</span> <span class="type">DATE</span>(column_name);</span><br><span class="line"><span class="comment">-- 30天内的数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> DATE_SUB(CURDATE(), <span class="type">INTERVAL</span> <span class="number">30</span> <span class="keyword">DAY</span>) <span class="operator">&lt;=</span> <span class="type">DATE</span>(column_name);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询本周的数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> YEARWEEK(DATE_FORMAT(column_name, <span class="string">&#x27;%Y-%m-%d&#x27;</span>)) <span class="operator">=</span> YEARWEEK(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> WEEKOFYEAR(DATE_FORMAT(column_name, <span class="string">&#x27;%y-%m-%d&#x27;</span>)) <span class="operator">=</span> WEEKOFYEAR(NOW())</span><br><span class="line"><span class="comment">-- 查询上周的数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> YEARWEEK(DATE_FORMAT(column_name, <span class="string">&#x27;%Y-%m-%d&#x27;</span>)) <span class="operator">=</span> YEARWEEK(NOW()) <span class="operator">-</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询本月的数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> DATE_FORMAT(column_name, <span class="string">&#x27;%Y%m&#x27;</span>) <span class="operator">=</span> DATE_FORMAT(CURDATE(), <span class="string">&#x27;%Y%m&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> DATE_FORMAT(column_name, <span class="string">&#x27;%Y-%m&#x27;</span>) <span class="operator">=</span> DATE_FORMAT(NOW(), <span class="string">&#x27;%Y-%m&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="keyword">YEAR</span>(DATE_FORMAT(column_name, <span class="string">&#x27;%y-%m-%d&#x27;</span>)) <span class="operator">=</span> <span class="keyword">YEAR</span>(NOW()) <span class="keyword">AND</span> <span class="keyword">MONTH</span>(DATE_FORMAT(column_name, <span class="string">&#x27;%y-%m-%d&#x27;</span>)) <span class="operator">=</span> <span class="keyword">MONTH</span>(NOW());</span><br><span class="line"><span class="comment">-- 查询本月的数据（忽略年度的月度数据）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="keyword">MONTH</span>(DATE_FORMAT(column_name, <span class="string">&#x27;%y-%m-%d&#x27;</span>)) <span class="operator">=</span> <span class="keyword">MONTH</span>(NOW());</span><br><span class="line"><span class="comment">-- 查询上个月的数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> PERIOD_DIFF(DATE_FORMAT(NOW(), <span class="string">&#x27;%Y%m&#x27;</span>), DATE_FORMAT(column_name, <span class="string">&#x27;%Y%m&#x27;</span>)) <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> DATE_FORMAT(column_name, <span class="string">&#x27;%Y-%m&#x27;</span>) <span class="operator">=</span> DATE_FORMAT(DATE_SUB(CURDATE(), <span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">MONTH</span>), <span class="string">&#x27;%Y-%m&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> DATE_FORMAT(column_name, <span class="string">&#x27;%Y%m&#x27;</span>) <span class="operator">=</span> DATE_FORMAT(DATE_SUB(CURDATE(), <span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">MONTH</span>), <span class="string">&#x27;%Y%m&#x27;</span>);</span><br><span class="line"><span class="comment">-- 查询某年某月数据（2017年10月份）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> DATE_FORMAT(column_name, <span class="string">&#x27;%Y-%m&#x27;</span>) <span class="operator">=</span> <span class="string">&#x27;2017-10&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> DATE_FORMAT(column_name, <span class="string">&#x27;%Y-%m&#x27;</span>) <span class="operator">=</span> DATE_FORMAT(<span class="string">&#x27;2017-10-05&#x27;</span>, <span class="string">&#x27;%Y-%m&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询本季度数据（忽略年度的季度数据）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> QUARTER(column_name) <span class="operator">=</span> QUARTER(NOW());</span><br><span class="line"><span class="comment">-- 查询上季度数据（忽略年度的季度数据）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> QUARTER(column_name) <span class="operator">=</span> QUARTER(DATE_SUB(NOW(), <span class="type">INTERVAL</span> <span class="number">1</span> QUARTER));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询半年内的数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> column_name <span class="keyword">BETWEEN</span> DATE_SUB(NOW(), <span class="type">INTERVAL</span> <span class="number">6</span> <span class="keyword">MONTH</span>) <span class="keyword">AND</span> NOW();</span><br><span class="line"><span class="comment">-- 查询本年的数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="keyword">YEAR</span>(column_name) <span class="operator">=</span> <span class="keyword">YEAR</span>(NOW());</span><br><span class="line"><span class="comment">-- 查询去年的数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="keyword">YEAR</span>(column_name) <span class="operator">=</span> <span class="keyword">YEAR</span>(DATE_SUB(NOW(), <span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">YEAR</span>));</span><br></pre></td></tr></table></figure><p></br></br></br></br></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;天 - 周 - 月 - 季度 - 年&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/</summary>
      
    
    
    
    <category term="编程" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="MySQL" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/MySQL/"/>
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
    <category term="Database" scheme="http://example.com/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>MySQL之CRUD</title>
    <link href="http://example.com/blog/45b6c374.html"/>
    <id>http://example.com/blog/45b6c374.html</id>
    <published>2023-03-24T02:15:18.000Z</published>
    <updated>2023-04-06T02:02:50.660Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、查询库中所有表和表中所有字段"><a href="#一、查询库中所有表和表中所有字段" class="headerlink" title="一、查询库中所有表和表中所有字段"></a>一、查询库中所有表和表中所有字段</h1><h2 id="查询中所有的表和表注释"><a href="#查询中所有的表和表注释" class="headerlink" title="查询中所有的表和表注释"></a>查询中所有的表和表注释</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TABLE_NAME, TABLE_COMMENT</span><br><span class="line"><span class="keyword">FROM</span> INFORMATION_SCHEMA.TABLES</span><br><span class="line"><span class="keyword">WHERE</span> table_schema <span class="operator">=</span> <span class="string">&#x27;库名&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="查询表中所有字段和注释"><a href="#查询表中所有字段和注释" class="headerlink" title="查询表中所有字段和注释"></a>查询表中所有字段和注释</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name, column_comment</span><br><span class="line"><span class="keyword">FROM</span> INFORMATION_SCHEMA.COLUMNS</span><br><span class="line"><span class="keyword">WHERE</span> table_name <span class="operator">=</span> <span class="string">&#x27;表名&#x27;</span> <span class="keyword">AND</span> table_schema <span class="operator">=</span> <span class="string">&#x27;库名&#x27;</span>;</span><br></pre></td></tr></table></figure><h1 id="二、对数据的增删改"><a href="#二、对数据的增删改" class="headerlink" title="二、对数据的增删改"></a>二、对数据的增删改</h1><h2 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tabel_name(column_a, column_b, ...) <span class="keyword">VALUES</span>(value_a, value_b, ...);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> newemp(empno, ename, job, mgr, hiredate, sal, comm, deptno) <span class="keyword">VALUES</span>(<span class="number">7933</span>, <span class="string">&#x27;zs&#x27;</span>, <span class="string">&#x27;CLERK&#x27;</span>, <span class="string">&#x27;7902&#x27;</span>, <span class="string">&#x27;1982-01-24&#x27;</span>, <span class="number">2000</span>, <span class="keyword">NULL</span>, <span class="number">30</span>);</span><br></pre></td></tr></table></figure><h2 id="批量插入"><a href="#批量插入" class="headerlink" title="批量插入"></a>批量插入</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> newemp(empno, ename, job, mgr, hiredate, sal, comm, deptno) </span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">7933</span>, <span class="string">&#x27;zs&#x27;</span>, <span class="string">&#x27;CLERK&#x27;</span>, <span class="string">&#x27;7902&#x27;</span>, <span class="string">&#x27;1982-01-24&#x27;</span>, <span class="number">2000</span>, <span class="keyword">NULL</span>, <span class="number">30</span>),</span><br><span class="line">      (<span class="number">7934</span>, <span class="string">&#x27;ls&#x27;</span>, <span class="string">&#x27;CLERK&#x27;</span>, <span class="string">&#x27;7903&#x27;</span>, <span class="string">&#x27;1983-10-24&#x27;</span>, <span class="number">2000</span>, <span class="keyword">NULL</span>, <span class="number">30</span>),</span><br><span class="line">      (<span class="number">7935</span>, <span class="string">&#x27;ww&#x27;</span>, <span class="string">&#x27;CLERK&#x27;</span>, <span class="string">&#x27;7904&#x27;</span>, <span class="string">&#x27;1984-01-24&#x27;</span>, <span class="number">2000</span>, <span class="keyword">NULL</span>, <span class="number">30</span>);</span><br></pre></td></tr></table></figure><h2 id="避免重复值插入"><a href="#避免重复值插入" class="headerlink" title="避免重复值插入"></a>避免重复值插入</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- ON DUPLICATE KEY：针对 id 和 唯一索引。插入失败则会更新原数据</span></span><br><span class="line"><span class="comment">-- 依赖索引，跳过且update重复数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">table</span> (a,b,c) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) <span class="keyword">ON</span> DUPLICATE KEY <span class="keyword">UPDATE</span> c<span class="operator">=</span>c<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- insert ignore：判断的是主键或者索引是否重复，重复着不处理（不会报错）</span></span><br><span class="line"><span class="comment">-- 依赖索引，跳过</span></span><br><span class="line"><span class="keyword">INSERT</span> IGNORE <span class="keyword">INTO</span> log_domain (id) <span class="keyword">VALUES</span>(<span class="number">45</span>);</span><br><span class="line"><span class="keyword">INSERT</span> IGNORE <span class="keyword">INTO</span> `student` (`id`, `sno`, `sname`, `birthday`) <span class="keyword">VALUES</span>(<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;2018005&#x27;</span>,<span class="string">&#x27;Amy&#x27;</span>,<span class="string">&#x27;2011-11-11&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- replace into：等同于先删除再插入，所以每一次影响记录为两条。也是针对索引</span></span><br><span class="line"><span class="comment">-- 依赖索引，删除重复数据然后insert新数据</span></span><br><span class="line">REPLACE <span class="keyword">INTO</span> log_domain (NAME) <span class="keyword">VALUES</span>(&quot;aaa&quot;);</span><br></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> ...;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> newemp <span class="keyword">WHERE</span> empno<span class="operator">=</span><span class="number">7899</span>;</span><br></pre></td></tr></table></figure><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> table_name <span class="keyword">SET</span> column_a<span class="operator">=</span>value_a, column_b<span class="operator">=</span>value_b, ... <span class="keyword">WHERE</span> ...;</span><br><span class="line"><span class="keyword">UPDATE</span> newemp <span class="keyword">SET</span> SAL<span class="operator">=</span>SAL<span class="operator">+</span><span class="number">5000</span> <span class="keyword">WHERE</span> ENAME<span class="operator">=</span><span class="string">&#x27;梁%&#x27;</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">month</span>(BIR);</span><br></pre></td></tr></table></figure><h1 id="三、对数据表的增删改"><a href="#三、对数据表的增删改" class="headerlink" title="三、对数据表的增删改"></a>三、对数据表的增删改</h1><h2 id="增加-1"><a href="#增加-1" class="headerlink" title="增加"></a>增加</h2><ul><li>增加数据表字段</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> 新字段名称 数据类型;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> fasp_t_pm_dept_agency <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> IS_DELETED <span class="type">INTEGER</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;0-未删除；1-删除&#x27;</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> (</span><br><span class="line">    username <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>, </span><br><span class="line">    address <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;地址&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>增加主键约束</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 主键名称 <span class="keyword">PRIMARY</span> KEY(设主键的列名);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> pk_eno <span class="keyword">PRIMARY</span> KEY(eno);</span><br></pre></td></tr></table></figure><ul><li>增加外键约束</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 建表前</span></span><br><span class="line"><span class="keyword">FOREIGN</span> KEY(从表字段名) <span class="keyword">REFERENCES</span> 主表名(主表字段名);</span><br><span class="line"><span class="comment">-- 建表后</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 从表名 <span class="keyword">CONSTRAINT</span> 外键名 <span class="keyword">FOREIGN</span> KEY(从表字段) <span class="keyword">REFERENCES</span> 主表名(主表字段名);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> dept <span class="keyword">CONSTRAINT</span> fk_employee_dept <span class="keyword">FOREIGN</span> KEY(dept_no) <span class="keyword">REFERENCES</span> employee(dept_no);</span><br></pre></td></tr></table></figure><h2 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h2><ul><li>删除数据表字段</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> 字段名;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp <span class="keyword">DROP</span> tel;</span><br></pre></td></tr></table></figure><ul><li>删除主键约束</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY 外键约束名称;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY fk_emp_dept;</span><br></pre></td></tr></table></figure><ul><li>删除外键约束</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> 字段名;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> employee <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> fk_employee_dept;</span><br></pre></td></tr></table></figure><h2 id="修改-1"><a href="#修改-1" class="headerlink" title="修改"></a>修改</h2><p>注：如果 UPDATE 语句中 WHERE 条件走的是索引，则对该表施加的就是行锁；如果 SQL 语句没有走索引，则会全表扫描，行锁无法实现（行锁是通过索引加载的），取而代之的是表锁，即在此 UPDATE  语句执行完之前，任何对该表的 UPDATE 操作都是不允许的</p><ul><li>修改表名</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 旧表名称 RENAME 新表名称;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> employee RENAME emp;</span><br></pre></td></tr></table></figure><ul><li>修改字段的数据类型</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 MODIFY 字段名称 新数据类型;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp MODIFY salary <span class="type">INT</span>(<span class="number">11</span>);</span><br></pre></td></tr></table></figure><ul><li>修改字段名称</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 CHANGE 旧字段名称  新字段名称  新数据类型;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp CHANGE name empName <span class="type">VARCHAR</span>(<span class="number">20</span>);</span><br></pre></td></tr></table></figure><p></br></br></br></br></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、查询库中所有表和表中所有字段&quot;&gt;&lt;a href=&quot;#一、查询库中所有表和表中所有字段&quot; class=&quot;headerlink&quot; title=&quot;一、查询库中所有表和表中所有字段&quot;&gt;&lt;/a&gt;一、查询库中所有表和表中所有字段&lt;/h1&gt;&lt;h2 id=&quot;查询中所有的表和表</summary>
      
    
    
    
    <category term="编程" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="MySQL" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/MySQL/"/>
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
    <category term="Database" scheme="http://example.com/tags/Database/"/>
    
  </entry>
  
</feed>
