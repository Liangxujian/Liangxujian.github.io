<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Liangxj</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-08-07T07:27:14.160Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Liangxj</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Scrcpy手机投屏</title>
    <link href="http://example.com/blog/7b850af8.html"/>
    <id>http://example.com/blog/7b850af8.html</id>
    <published>2023-08-07T07:23:56.000Z</published>
    <updated>2023-08-07T07:27:14.160Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.yuque.com/liangxujian/rfusnk/gv83t6">Scrcpy手机投屏 (yuque.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.yuque.com/liangxujian/rfusnk/gv83t6&quot;&gt;Scrcpy手机投屏 (yuque.com)&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="生活" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="学习" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="玩机" scheme="http://example.com/tags/%E7%8E%A9%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>MQTT协议</title>
    <link href="http://example.com/blog/f7cf4724.html"/>
    <id>http://example.com/blog/f7cf4724.html</id>
    <published>2023-08-03T03:33:00.000Z</published>
    <updated>2023-08-07T01:51:20.101Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>参考自博客：<a href="https://zhuanlan.zhihu.com/p/421109780">MQTT协议，终于有人讲清楚了 - 知乎 (zhihu.com)</a></p></blockquote><h1 id="一、什么是-MQTT"><a href="#一、什么是-MQTT" class="headerlink" title="一、什么是 MQTT"></a>一、什么是 MQTT</h1><p>MQTT（Message Queuing Telemetry Transport，消息队列遥测传输协议），是一种基于发布&#x2F;订阅（publish&#x2F;subscribe）模式的“轻量级”通讯协议，该协议构建于 TCP&#x2F;IP 协议上，由 IBM 在 1999 年发布。</p><p>MQTT 最大优点在于，用极少的代码和有限的带宽，为连接远程设备提供实时可靠的消息服务。</p><p>作为一种低开销、低带宽占用的即时通讯协议，使其在物联网、小型设备、移动应用等方面有较广泛的应用。</p><h1 id="二、MQTT-相关名词"><a href="#二、MQTT-相关名词" class="headerlink" title="二、MQTT 相关名词"></a>二、MQTT 相关名词</h1><h2 id="2-1-订阅和发布"><a href="#2-1-订阅和发布" class="headerlink" title="2.1 订阅和发布"></a>2.1 订阅和发布</h2><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/e07f45c8a11e4d29a68d303532ebf0d7.png" alt="MQTT消息传递示例"></p><p>MQTT 使用的是发布&#x2F;订阅消息模式，它提供了一对多的消息分发机制，从而实现与应用程序的解耦。</p><p>这是一种消息传递模式，消息不是直接从发送器发送到接收器（即点对点），而是由 MQTT server（或称为 MQTT Broker）分发的。</p><ul><li>MQTT 服务器负责消息的分发，因此必须是发布者（**<code>Publisher</code>**），而绝不是订阅者！</li><li>客户端可以发布消息（发送方）、订阅消息（接收方）或两者兼而有之</li></ul><h2 id="2-2-QoS"><a href="#2-2-QoS" class="headerlink" title="2.2 QoS"></a>2.2 QoS</h2><p>QoS（Quality of Service levels）服务质量是 MQTT 的一个重要特性。当我们使用 TCP&#x2F;IP 时，连接已经在一定程度上受到保护。但是在无线网络中，中断和干扰很频繁，MQTT 在这里帮助避免信息丢失及其服务质量水平。这些级别在发布时使用。如果客户端发布到 MQTT 服务器，则客户端将是发送者，MQTT 服务器将是接收者。当 MQTT 服务器向客户端发布消息时，服务器是发送者，客户端是接收者。</p><h3 id="QoS-0"><a href="#QoS-0" class="headerlink" title="QoS 0"></a>QoS 0</h3><p>“<strong>至多一次</strong>”，消息发布依赖于底层TCP&#x2F;IP网络。这一级别会发生消息丢失或重复，即：&lt;&#x3D;1。</p><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/image-20230804110705781.png" alt="QoS 0"></p><h3 id="QoS-1"><a href="#QoS-1" class="headerlink" title="QoS 1"></a>QoS 1</h3><p>“<strong>至少一次</strong>”，承诺消息将至少传送一次给订阅者，但消息重复可能会发生。</p><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/image-20230804110216578.png" alt="QoS 1"></p><h3 id="QoS-2"><a href="#QoS-2" class="headerlink" title="QoS 2"></a>QoS 2</h3><p>“<strong>只有一次</strong>”，消息仅传送到目的地一次。为此，带有唯一消息 ID 的消息会存储两次，首先来自发送者，然后是接收者。QoS 2 在网络中具有最高的开销，因为在发送方和接收方之间需要两个流。这一级别可用于如下情况，在计费系统中，消息重复或丢失会导致不正确的结果。</p><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/image-20230804110311518.png" alt="QoS 2"></p><h2 id="2-3-MQTT-数据包"><a href="#2-3-MQTT-数据包" class="headerlink" title="2.3 MQTT 数据包"></a>2.3 MQTT 数据包</h2><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/6edadebd6ef74a05a76166bb4ad66215.png" alt="MQTT 数据包"></p><h3 id="2-3-1-固定头（Fixed-header）"><a href="#2-3-1-固定头（Fixed-header）" class="headerlink" title="2.3.1 固定头（Fixed header）"></a>2.3.1 固定头（Fixed header）</h3><p>存在于所有 MQTT 数据包中，表示数据包类型及数据包的分组类标识。</p><h4 id="消息类型【byte-1（bits-7-4）】"><a href="#消息类型【byte-1（bits-7-4）】" class="headerlink" title="消息类型【byte 1（bits 7~4）】"></a>消息类型【byte 1（bits 7~4）】</h4><table><thead><tr><th>名称</th><th>值</th><th>报文流动方向</th><th>描述</th></tr></thead><tbody><tr><td>Reserved</td><td>0</td><td>不可用</td><td>保留位</td></tr><tr><td>CONNECT</td><td>1</td><td>客户端到服务器</td><td>客户端请求连接服务器</td></tr><tr><td>CONNACK</td><td>2</td><td>服务器到客户端</td><td>连接报文确认</td></tr><tr><td>PUBLISH</td><td>3</td><td>双向</td><td>发布消息</td></tr><tr><td>PUBACK</td><td>4</td><td>双向</td><td>QoS 1 消息发布收到确认</td></tr><tr><td>PUBREC</td><td>5</td><td>双向</td><td>发布收到（保证第一部分）</td></tr><tr><td>PUBREL</td><td>6</td><td>双向</td><td>发布释放（保证第二部分）</td></tr><tr><td>PUBCOMP</td><td>7</td><td>双向</td><td>QoS 2 消息发布完成（保证第三部分）</td></tr><tr><td>SUBSCRIBE</td><td>8</td><td>客户端到服务器</td><td>客户端请求订阅</td></tr><tr><td>SUBACK</td><td>9</td><td>服务器到客户端</td><td>订阅请求报文确认</td></tr><tr><td>UNSUBSCRIBE</td><td>10</td><td>客户端到服务器</td><td>客户端请求取消订阅</td></tr><tr><td>UNSUBACK</td><td>11</td><td>服务器到客户端</td><td>取消订阅报文确认</td></tr><tr><td>PINGREQ</td><td>12</td><td>客户端到服务器</td><td>PING 请求（心跳请求）</td></tr><tr><td>PINGRESP</td><td>13</td><td>服务器到客户端</td><td>PING 应答（心跳请求）</td></tr><tr><td>DISCONNECT</td><td>14</td><td>客户端到服务器</td><td>客户端断开连接</td></tr><tr><td>Reserved</td><td>15</td><td>不可用</td><td>保留位</td></tr></tbody></table><h4 id="标识位【byte-1（bits-3-0）】"><a href="#标识位【byte-1（bits-3-0）】" class="headerlink" title="标识位【byte 1（bits 3~0）】"></a>标识位【byte 1（bits 3~0）】</h4><ul><li>DUP：控制报文的重复分发标志</li><li>QoS：PUBLISH 报文的服务质量等级（00、01、10、11）</li><li>RETAIN：PUBLISH 报文的保留标志</li></ul><table><thead><tr><th>控制报文</th><th>固定报头标志</th><th>Bit 3</th><th>bit 2</th><th>bit 1</th><th>bit 0</th></tr></thead><tbody><tr><td>Reserved</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>CONNECT</td><td>Reserved</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>CONNACK</td><td>Reserved</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>PUBLISH</td><td>Used in MQTT 3.1.1</td><td>DUP</td><td>QoS</td><td>QoS</td><td>RETAIN</td></tr><tr><td>PUBACK</td><td>Reserved</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>PUBREC</td><td>Reserved</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>PUBREL</td><td>Reserved</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>PUBCOMP</td><td>Reserved</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>SUBSCRIBE</td><td>Reserved</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>SUBACK</td><td>Reserved</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>UNSUBSCRIBE</td><td>Reserved</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>UNSUBACK</td><td>Reserved</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>PINGREQ</td><td>Reserved</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>PINGRESP</td><td>Reserved</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>DISCONNECT</td><td>Reserved</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>Reserved</td><td>Reserved</td><td></td><td></td><td></td><td></td></tr></tbody></table><h4 id="剩余长度"><a href="#剩余长度" class="headerlink" title="剩余长度"></a>剩余长度</h4><p>剩余长度是一个可变字节整数，表示当前控制报文中剩余的字节数，包括可变报头和有效载荷中的数据。</p><h3 id="2-3-2-可变头（Variable-header）"><a href="#2-3-2-可变头（Variable-header）" class="headerlink" title="2.3.2 可变头（Variable header）"></a>2.3.2 可变头（Variable header）</h3><p>可变报头位于固定报头和有效载荷之间，可变报头的内容根据报文类型的不同而不同。通常都包括一个 2 字节的数据包标识字段，这些类型的包有：PUBLISH (QoS &gt; 0)、PUBACK、PUBREC、PUBREL、PUBCOMP、SUBSCRIBE、SUBACK、UNSUBSCRIBE、UNSUBACK</p><h3 id="2-3-3-消息体（Payload）"><a href="#2-3-3-消息体（Payload）" class="headerlink" title="2.3.3 消息体（Payload）"></a>2.3.3 消息体（Payload）</h3><p>Payload 有效载荷位于 MQTT 数据包的第三部分，CONNECT、SUBSCRIBE、SUBACK、UNSUBSCRIBE 这四种类型包含有效载荷。</p><ul><li>CONNECT 有效载荷内容主要是：客户端的 ClientID、订阅的主题、Message 以及用户名和密码</li><li>SUBSCRIBE 有效载荷内容是：主题过滤器指明需要订阅的 Topic 以及 QoS</li><li>SUBACK 有效载荷内容是：服务器对于 SUBSCRIBE 所申请的主题及 QoS 进行确认和回复</li><li>UNSUBSCRIBE 有效载荷内容是：客户端想要取消订阅的主题过滤器</li></ul><h1 id="三、MQTT-工作流程"><a href="#三、MQTT-工作流程" class="headerlink" title="三、MQTT 工作流程"></a>三、MQTT 工作流程</h1><h1 id="四、MQTT-VS-Socket"><a href="#四、MQTT-VS-Socket" class="headerlink" title="四、MQTT VS Socket"></a>四、MQTT VS Socket</h1><p>WebSocket 是一种网络传输协议，位于 OSI 模型的**<code>应用层</code><strong>。可在单个 TCP 连接上进行全双工通信，能更好的节省服务器资源和带宽并达到实时通信，客户端和服务器只需要完成</strong><code>一次握手</code><strong>，两者之间就可以创建持久性的连接，并进行</strong><code>双向数据传输</code>**。</p><p>MQTT 协议是一种消息队列传输协议，位于 OSI 模型的**<code>应用层</code>**。采用订阅、发布机制，订阅者只接收自己已经订阅的数据，非订阅数据则不接收，既保证了必要的数据的交换，又避免了无效数据造成的储存与处理。</p><h2 id="4-1-通信模型不同"><a href="#4-1-通信模型不同" class="headerlink" title="4.1 通信模型不同"></a>4.1 通信模型不同</h2><p>MQTT 和 WebSocket 的底层都是使用 TCP 协议确保可靠传输数据，都支撑双向通信。但 WebSocket 是一种简单的报文协议，仅仅定义了<code>会话的发起方式</code>和<code>报文格式及类型</code>，只是在 TCP 协议之上实现了简单的报文通信。而 MQTT 则是一种比较复杂的消息协议，MQTT 不仅规定了具体的协议编码，还规定了客户端和服务器的通信模型。从这个意义上讲，MQTT over WebSocket，即 MQTT 可以工作在 WebSocket 之上。</p><h2 id="4-2-报文结构不同"><a href="#4-2-报文结构不同" class="headerlink" title="4.2 报文结构不同"></a>4.2 报文结构不同</h2><p>MQTT 和 WebSocket 都使用二进制编码（有别于 HTTP 这一类基于文本编码的协议），但 WebSocket 的报文要远比 MQTT 的简单。</p><h2 id="4-3-使用场景不同"><a href="#4-3-使用场景不同" class="headerlink" title="4.3 使用场景不同"></a>4.3 使用场景不同</h2><p>MQTT 是为了物联网场景设计的，基于 TCP 的 Pub&#x2F;Sub（订阅&#x2F;发布）协议，有许多为物联网优化的特性，比如适应不同网络的 QoS、层级主题、遗言等等。</p><p>WebSocket 是为了 HTML5 应用方便与服务器双向通讯而设计的协议，HTTP 握手然后转 TCP 协议，用于取代之前的 Server Push、Comet、长轮询等老旧实现。</p><p>两者的交集在于，如何通过 HTML5 应用来作为 MQTT 的客户端，以便接受设备消息或者向设备发送信息。那么此时，MQTT over WebSocket 自然成了最合理的途径了。</p><p></br></br></br></br></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;参考自博客：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/421109780&quot;&gt;MQTT协议，终于有人讲清楚了 - 知乎 (zhihu.com)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;一、什么是-</summary>
      
    
    
    
    <category term="协议" scheme="http://example.com/categories/%E5%8D%8F%E8%AE%AE/"/>
    
    <category term="物联网" scheme="http://example.com/categories/%E5%8D%8F%E8%AE%AE/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
    
    <category term="物联网" scheme="http://example.com/tags/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>豆腐萝卜菌菇汤</title>
    <link href="http://example.com/blog/d2066371.html"/>
    <id>http://example.com/blog/d2066371.html</id>
    <published>2023-07-28T10:27:50.000Z</published>
    <updated>2023-07-28T10:38:47.990Z</updated>
    
    <content type="html"><![CDATA[<h1 id="材料"><a href="#材料" class="headerlink" title="材料"></a>材料</h1><h2 id="主料"><a href="#主料" class="headerlink" title="主料"></a>主料</h2><ul><li><input disabled="" type="checkbox"> 白萝卜</li><li><input disabled="" type="checkbox"> 老豆腐</li><li><input disabled="" type="checkbox"> 金针菇</li><li><input disabled="" type="checkbox"> 海鲜菇</li><li><input disabled="" type="checkbox"> 鸡蛋</li></ul><ul><li>虾皮 or 虾米</li></ul><h2 id="配料"><a href="#配料" class="headerlink" title="配料"></a>配料</h2><ul><li><input disabled="" type="checkbox"> 葱</li></ul><h2 id="调味料"><a href="#调味料" class="headerlink" title="调味料"></a>调味料</h2><ul><li><input disabled="" type="checkbox"> 盐</li></ul><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li>烧开水</li><li>金针菇、海鲜菇清洗</li><li>白萝卜去皮切粗条</li><li>老豆腐对角切三角形，太厚的话继续切薄</li><li>2 个鸡蛋打鸡蛋液淋到切好的豆腐上</li><li>下油煎豆腐至两面金黄，然后加入开水（，加虾皮 or 虾米）</li><li>加入金针菇 + 蟹味菇 + 白萝卜条，上盖中大火 10 分钟</li><li>葱切葱花</li><li>放盐调味，葱花点缀 End</li></ol><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/%E6%B5%B7%E9%B2%9C%E8%8F%87.jpg" alt="海鲜菇"></p><p></br></br></br></br></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;材料&quot;&gt;&lt;a href=&quot;#材料&quot; class=&quot;headerlink&quot; title=&quot;材料&quot;&gt;&lt;/a&gt;材料&lt;/h1&gt;&lt;h2 id=&quot;主料&quot;&gt;&lt;a href=&quot;#主料&quot; class=&quot;headerlink&quot; title=&quot;主料&quot;&gt;&lt;/a&gt;主料&lt;/h2&gt;&lt;ul&gt;
&lt;</summary>
      
    
    
    
    <category term="生活" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="汤水" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB/%E6%B1%A4%E6%B0%B4/"/>
    
    
    <category term="汤水" scheme="http://example.com/tags/%E6%B1%A4%E6%B0%B4/"/>
    
  </entry>
  
  <entry>
    <title>虾仁菌菇汤.md</title>
    <link href="http://example.com/blog/7353ca67.html"/>
    <id>http://example.com/blog/7353ca67.html</id>
    <published>2023-07-28T10:24:17.000Z</published>
    <updated>2023-07-28T10:39:48.945Z</updated>
    
    <content type="html"><![CDATA[<h1 id="材料"><a href="#材料" class="headerlink" title="材料"></a>材料</h1><h2 id="主料"><a href="#主料" class="headerlink" title="主料"></a>主料</h2><ul><li><input disabled="" type="checkbox"> 娃娃菜（1 颗）</li><li><input disabled="" type="checkbox"> 新鲜虾仁（150g）</li><li><input disabled="" type="checkbox"> 番茄（1-2 个）</li><li><input disabled="" type="checkbox"> 金针菇</li><li><input disabled="" type="checkbox"> 香菇（2-3 个）</li></ul><h2 id="配料"><a href="#配料" class="headerlink" title="配料"></a>配料</h2><ul><li><input disabled="" type="checkbox"> 葱</li><li><input disabled="" type="checkbox"> 蒜</li></ul><h2 id="调味料"><a href="#调味料" class="headerlink" title="调味料"></a>调味料</h2><ul><li><input disabled="" type="checkbox"> 油</li><li><input disabled="" type="checkbox"> 盐</li><li><input disabled="" type="checkbox"> 胡椒粉</li></ul><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li>娃娃菜切掉根部，对半切开</li><li>番茄去皮六等分切，再切半</li><li>葱切葱花，蒜切蒜片</li><li>热油下一半葱花、蒜片、虾仁，炒至虾仁变色，装好备用</li><li>下油炒番茄，炒至出汁（可考虑加番茄酱）</li><li>放入金针菇、娃娃菜、香菇、清水，盖盖煮5分钟</li><li>放入虾仁，1勺盐+ 1勺胡椒粉调味</li><li>葱花点缀 End</li></ol><p></br></br></br></br></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;材料&quot;&gt;&lt;a href=&quot;#材料&quot; class=&quot;headerlink&quot; title=&quot;材料&quot;&gt;&lt;/a&gt;材料&lt;/h1&gt;&lt;h2 id=&quot;主料&quot;&gt;&lt;a href=&quot;#主料&quot; class=&quot;headerlink&quot; title=&quot;主料&quot;&gt;&lt;/a&gt;主料&lt;/h2&gt;&lt;ul&gt;
&lt;</summary>
      
    
    
    
    <category term="生活" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="汤水" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB/%E6%B1%A4%E6%B0%B4/"/>
    
    
    <category term="汤水" scheme="http://example.com/tags/%E6%B1%A4%E6%B0%B4/"/>
    
  </entry>
  
  <entry>
    <title>Netty学习</title>
    <link href="http://example.com/blog/cfd68dd0.html"/>
    <id>http://example.com/blog/cfd68dd0.html</id>
    <published>2023-07-18T10:00:38.000Z</published>
    <updated>2023-07-19T02:53:58.551Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、Buffer（缓冲区）"><a href="#一、Buffer（缓冲区）" class="headerlink" title="一、Buffer（缓冲区）"></a>一、Buffer（缓冲区）</h1><p>IO 面向流（Stream oriented），NIO 面向缓冲区（Buffer oriented）。</p><p>Buffer 是一个对象，它包含一些要写入或者要读出的数据。在面向流的 I&#x2F;O 中可以将数据直接写入或者将数据直接读到 Stream 对象中。虽然 Stream 中也有 Buffer 开头的扩展类，但只是流的包装类，还是从流读到缓冲区，而 NIO 却是直接读到 Buffer 中进行操作。</p><p>在 NIO 厍中，所有数据都是用缓冲区处理的。在读取数据时，它是直接读到缓冲区中的；在写入数据时，写入到缓冲区中。任何时候访问 NIO 中的数据，都是通过缓冲区进行操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Buffer</span> &#123;</span><br><span class="line">    <span class="comment">// 关系: mark &lt;= position &lt;= limit &lt;= capacity</span></span><br><span class="line">    <span class="comment">// 标记字节内容中的某个元素，配合reset()方法可以从这个标记的位置反复读取内容</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">mark</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 下一个要被读写的byte元素的下标索引</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">position</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 缓冲区中第一个不能读写的元素的数组下标索引，也可以认为是缓冲区中实际元素的数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> limit;</span><br><span class="line">    <span class="comment">// 缓冲区能够容纳元素的最大数量，这个值在缓冲区创建时被设定，而且不能够改变</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> capacity;</span><br><span class="line">    <span class="type">long</span> address; <span class="comment">// Used only by direct buffers，直接内存的地址</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ……</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-1-ByteBuffer"><a href="#1-1-ByteBuffer" class="headerlink" title="1.1 ByteBuffer"></a>1.1 ByteBuffer</h2><p>最常用的缓冲区是 ByteBuffer，一个 ByteBuffer 提供了一组功能用于操作 byte 数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ByteBuffer</span> <span class="keyword">extends</span> <span class="title class_">Buffer</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;ByteBuffer&gt; &#123;</span><br><span class="line">    <span class="comment">// 仅限堆内内存使用</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">byte</span>[] hb;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> offset;</span><br><span class="line">    <span class="type">boolean</span> isReadOnly;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-ByteBuffer-API"><a href="#1-2-ByteBuffer-API" class="headerlink" title="1.2 ByteBuffer.API"></a>1.2 ByteBuffer.API</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 申请堆外内存（直接内存，少一次拷贝，读写效率高，分配效率低，不受 GC 影响）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ByteBuffer <span class="title function_">allocateDirect</span><span class="params">(<span class="type">int</span> capacity)</span></span><br><span class="line"><span class="comment">// 申请堆内内存（读写效率低，分配效率高，受到 GC 的影响）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ByteBuffer <span class="title function_">allocate</span><span class="params">(<span class="type">int</span> capacity)</span> </span><br><span class="line"><span class="comment">// 原始字节包装成ByteBuffer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ByteBuffer <span class="title function_">wrap</span><span class="params">(<span class="type">byte</span>[] array, <span class="type">int</span> offset, <span class="type">int</span> length)</span></span><br><span class="line"><span class="comment">// 原始字节包装成ByteBuffer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ByteBuffer <span class="title function_">wrap</span><span class="params">(<span class="type">byte</span>[] array)</span></span><br><span class="line"><span class="comment">// 创建共享此缓冲区内容的新字节缓冲区</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title function_">duplicate</span><span class="params">()</span></span><br><span class="line"><span class="comment">// 分片，创建一个新的字节缓冲区</span></span><br><span class="line"><span class="comment">// 新ByteBuffer的开始位置是此缓冲区的当前位置position</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title function_">slice</span><span class="params">()</span></span><br><span class="line"><span class="comment">// 获取字节内容</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">byte</span> <span class="title function_">get</span><span class="params">()</span></span><br><span class="line"><span class="comment">// 从ByteBuffer偏移offset的位置，获取length长的字节数组，然后返回当前ByteBuffer对象</span></span><br><span class="line"><span class="keyword">public</span> ByteBuffer <span class="title function_">get</span><span class="params">(<span class="type">byte</span>[] dst, <span class="type">int</span> offset, <span class="type">int</span> length)</span></span><br><span class="line"><span class="comment">// 设置byte内存</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title function_">put</span><span class="params">(<span class="type">byte</span> b)</span>;</span><br><span class="line"><span class="comment">// 以offset为起始位置设置length长src的内容，并返回当前ByteBuffer对象</span></span><br><span class="line"><span class="keyword">public</span> ByteBuffer <span class="title function_">put</span><span class="params">(<span class="type">byte</span>[] src, <span class="type">int</span> offset, <span class="type">int</span> length)</span>;</span><br><span class="line"><span class="comment">// 将没有读完的数据移到到缓冲区的初始位置，position设置为最后一没读字节数据的下个索引，limit重置为capacity</span></span><br><span class="line"><span class="comment">// 读-&gt;写模式，相当于flip的反向操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title function_">compact</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 是否是直接内存</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">boolean</span> <span class="title function_">isDirect</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 转换缓冲区为写模式</span></span><br><span class="line"><span class="keyword">public</span> ByteBuffer <span class="title function_">clear</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><ol><li>创建大小为 10 的 ByteBuffer 对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ByteBuffer</span> <span class="variable">bf</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1943529272.jpg"></p><ol start="2"><li>写入数据</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ByteBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">buf.put(<span class="string">&quot;csc&quot;</span>.getBytes());</span><br></pre></td></tr></table></figure><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/2064948393.jpg"></p><ol start="3"><li>调用 flip 转换缓冲区为读模式</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buf.flip();</span><br></pre></td></tr></table></figure><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/L2RlZmF1bHQvaW5.jpg"></p><ol start="4"><li>读取缓冲区中到内容，buf.get()</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println((<span class="type">char</span>) buf.get());</span><br></pre></td></tr></table></figure><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/EwTmpOa09HRmhZVG.jpg"></p><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/pT0RJME5qSm1Zemsw.jpg"></p><ol start="5"><li>调用 clear() 或 compact() 转换缓冲区为写模式，循环至步骤 1</li></ol><p>除了 ByteBuffer，还有其他的一些缓冲区，事实上，每一种 Java 基本类型（除了 Boolean 类型）都对应有一种缓冲区。</p><h2 id="1-3-Scattering-Reads（分散读取）"><a href="#1-3-Scattering-Reads（分散读取）" class="headerlink" title="1.3 Scattering Reads（分散读取）"></a>1.3 Scattering Reads（分散读取）</h2><p>需要在已知所需文本信息长度的前提下，将文本分割后，分散填充至不同的 buffer 中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读取一个文本文件 HelloWord.txt，然后将数据填充至多个 buffer</span></span><br><span class="line"><span class="keyword">try</span> (<span class="type">RandomAccessFile</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="string">&quot;HelloWorld.txt&quot;</span>, <span class="string">&quot;rw&quot;</span>)) &#123;</span><br><span class="line"><span class="type">FileChannel</span> <span class="variable">channel</span> <span class="operator">=</span> file.getChannel();</span><br><span class="line"><span class="type">ByteBuffer</span> <span class="variable">bba</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">3</span>);</span><br><span class="line"><span class="type">ByteBuffer</span> <span class="variable">bbb</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">3</span>);</span><br><span class="line"><span class="type">ByteBuffer</span> <span class="variable">bbc</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">5</span>);</span><br><span class="line">channel.read(<span class="keyword">new</span> <span class="title class_">ByteBuffer</span>[]&#123;bba, bbb, bbc&#125;);</span><br><span class="line">bba.flip();</span><br><span class="line">bbb.flip();</span><br><span class="line">bbc.flip();</span><br><span class="line">debugAll(bba);</span><br><span class="line">debugAll(bbb);</span><br><span class="line">debugAll(bbc);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-4-Gatering-Writes（集中写入）"><a href="#1-4-Gatering-Writes（集中写入）" class="headerlink" title="1.4 Gatering Writes（集中写入）"></a>1.4 Gatering Writes（集中写入）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ByteBuffer</span> <span class="variable">bba</span> <span class="operator">=</span> StandardCharsets.UTF_8.encode(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="type">ByteBuffer</span> <span class="variable">bbb</span> <span class="operator">=</span> StandardCharsets.UTF_8.encode(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"><span class="type">ByteBuffer</span> <span class="variable">bbc</span> <span class="operator">=</span> StandardCharsets.UTF_8.encode(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> (<span class="type">FileChannel</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="string">&quot;HelloWorld.txt&quot;</span>, <span class="string">&quot;rw&quot;</span>).getChannel()) &#123;</span><br><span class="line">file.write(<span class="keyword">new</span> <span class="title class_">ByteBuffer</span>[]&#123;bba, bbb, bbc&#125;);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-5-综合案例"><a href="#1-5-综合案例" class="headerlink" title="1.5 综合案例"></a>1.5 综合案例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line"><span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">buffer.put(<span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>, <span class="number">100</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">网络上有多条数据发送给服务器，数据之间使用 \n 进行分离</span></span><br><span class="line"><span class="comment">但由于某种原因这些数据在接收时，被进行了重新组合，例如原始数据有3条为</span></span><br><span class="line"><span class="comment">Hello,world\n</span></span><br><span class="line"><span class="comment">I&#x27;m zhangsan\n</span></span><br><span class="line"><span class="comment">How are you?\n</span></span><br><span class="line"><span class="comment">变成了下面的两个 byteBuffer（黏包，半包）</span></span><br><span class="line"><span class="comment">Hello,world\nI&#x27;m zhangsan\nHo</span></span><br><span class="line"><span class="comment">w are you?\n</span></span><br><span class="line"><span class="comment">现在要求变写程序，将错乱的数据恢复成原始的按 \n 分隔的数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">ByteBuffer</span> <span class="variable">source</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">64</span>);</span><br><span class="line">source.put(<span class="string">&quot;Hello,world\nI&#x27;m zhangsan\nHo&quot;</span>.getBytes());</span><br><span class="line">split(source);</span><br><span class="line">source.put(<span class="string">&quot;w are you?\n&quot;</span>.getBytes());</span><br><span class="line">split(source);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">split</span><span class="params">(ByteBuffer source)</span> &#123;</span><br><span class="line">source.flip();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; source.limit(); i++) &#123;</span><br><span class="line"><span class="comment">// 找到一条完整的消息</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">new</span> <span class="title class_">String</span>(<span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;source.get(i)&#125;).equals(<span class="string">&quot;\n&quot;</span>)) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> i + <span class="number">1</span> - source.position();</span><br><span class="line"><span class="type">ByteBuffer</span> <span class="variable">target</span> <span class="operator">=</span> ByteBuffer.allocate(length);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; length; j++) &#123;</span><br><span class="line">target.put(source.get());</span><br><span class="line">&#125;</span><br><span class="line">debugAll(target);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">source.compact();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、Channel（通道）"><a href="#二、Channel（通道）" class="headerlink" title="二、Channel（通道）"></a>二、Channel（通道）</h1><p>NIO 通过 Channel（通道）进行读写。</p><p>通道是双向的，可读也可写，而流的读写是单向的。</p><p>无论读写，通道只能和 Buffer 交互。因为 Buffer，通道可以异步地读写。</p><h2 id="2-1-FileChannel"><a href="#2-1-FileChannel" class="headerlink" title="2.1 FileChannel"></a>2.1 FileChannel</h2><blockquote><p>FileChannel 只能工作在阻塞模式下</p></blockquote><h3 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h3><p>不能直接打开 FileChannel，必须通过 FileInputStream、FileOutputStream 或者 RandomAccessFile 来获取 FileChannel，它们都有 getChannel 方法。</p><ul><li>通过 FileInputStream 获取的 channel 只能读</li><li>通过 FileOutputStream 获取的 channel 只能写</li><li>通过 RandomAccessFile 获取的 channel 是否能读写，根据构造时的传入读写模式参数决定</li></ul><h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><p>会从 channel 读取数据填充 ByteBuffer，返回值表示读到了多少字节，-1 表示到达了文件的末尾</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">readBytes</span> <span class="operator">=</span> channel.read(buffer);</span><br></pre></td></tr></table></figure><h3 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h3><p>SocketChannel</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ...;</span><br><span class="line">buffer.put(...); <span class="comment">// 存入数据</span></span><br><span class="line">buffer.flip();   <span class="comment">// 切换读模式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测 buffer 中还有没有剩余数据</span></span><br><span class="line"><span class="keyword">while</span>(buffer.hasRemaining) &#123;</span><br><span class="line">    channel.write(buffer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 while 中调用 channel.write 是因为 write 方法并不能保证一次将 buffer 中的内容全部写入 channel</p><h3 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h3><p>channel 必须关闭，不过调用了 FileInputStream、FileOutputStream 或者 RandomAccessFile 的 close 方法会间接地调用 channel 的 close 方法。</p><h3 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取当前位置</span></span><br><span class="line"><span class="type">long</span> <span class="variable">pos</span> <span class="operator">=</span> channel.position();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置当前位置</span></span><br><span class="line"><span class="type">long</span> <span class="variable">newPos</span> <span class="operator">=</span> ...;</span><br><span class="line">channel.position(newPos);</span><br></pre></td></tr></table></figure><p>设置当前位置时，如果设置为文件的末尾</p><ul><li>这时读取会返回 -1</li><li>这时写入，会追加内容，但要注意如果 position 超过了文件末尾，再写入时在新内容和原末尾之间会有空洞(00)</li></ul><h1 id="三、Selector（选择器）"><a href="#三、Selector（选择器）" class="headerlink" title="三、Selector（选择器）"></a>三、Selector（选择器）</h1><p>NIO 有选择器，而 IO 没有。</p><p>选择器满足了单个线程处理多个通道的效果，因此大大减少了线程的数量。</p><p>因为线程之间的切换对于操作系统来说是昂贵的（每次切换线程都要重新读取线程之前的状态、值、上下文等信息），因此选择器提高了系统的效率。</p><h1 id="三、一些关键类"><a href="#三、一些关键类" class="headerlink" title="三、一些关键类"></a>三、一些关键类</h1><h2 id="ServerBootstrap"><a href="#ServerBootstrap" class="headerlink" title="ServerBootstrap"></a>ServerBootstrap</h2><p>Netty 建立服务端的辅助类。</p><h2 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h2><p>频道、通道的意思。</p><p>是传入（入站）或者传出（出站）数据的载体。</p><p>可以被打开或者被关闭，连接或者断开连接。</p><p>在内部会为每个 Channel 分配一个 EventLoop，用以处理所有事件。</p><h2 id="EventLoop"><a href="#EventLoop" class="headerlink" title="EventLoop"></a>EventLoop</h2><h2 id="EventLoopGroup"><a href="#EventLoopGroup" class="headerlink" title="EventLoopGroup"></a>EventLoopGroup</h2><p>是一组 EventLoop</p><h2 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h2><h2 id="ChannelHandle"><a href="#ChannelHandle" class="headerlink" title="ChannelHandle"></a>ChannelHandle</h2><p>通道处理者，是所有处理入站和出站数据的应用程序逻辑的容器。</p><h3 id="ChannelHandlerAdapter"><a href="#ChannelHandlerAdapter" class="headerlink" title="ChannelHandlerAdapter"></a>ChannelHandlerAdapter</h3><h3 id="ChannelInboundHandlerAdapter"><a href="#ChannelInboundHandlerAdapter" class="headerlink" title="ChannelInboundHandlerAdapter"></a>ChannelInboundHandlerAdapter</h3><p>Netty 接收数据 Handler 处理器。</p><p></br></br></br></br></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、Buffer（缓冲区）&quot;&gt;&lt;a href=&quot;#一、Buffer（缓冲区）&quot; class=&quot;headerlink&quot; title=&quot;一、Buffer（缓冲区）&quot;&gt;&lt;/a&gt;一、Buffer（缓冲区）&lt;/h1&gt;&lt;p&gt;IO 面向流（Stream oriented），NI</summary>
      
    
    
    
    <category term="编程" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Netty" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/Netty/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="Netty" scheme="http://example.com/tags/Netty/"/>
    
  </entry>
  
  <entry>
    <title>Nginx配置</title>
    <link href="http://example.com/blog/ad720447.html"/>
    <id>http://example.com/blog/ad720447.html</id>
    <published>2023-07-17T03:57:02.000Z</published>
    <updated>2023-07-18T01:40:08.001Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘录自博客：</p><p><a href="https://www.cnblogs.com/jingmoxukong/p/5945200.html">Nginx 简易教程</a></p><p><a href="https://www.jianshu.com/p/bed000e1830b">WEB请求处理二：Nginx请求反向代理</a></p></blockquote><h1 id="一、预热"><a href="#一、预热" class="headerlink" title="一、预热"></a>一、预热</h1><h2 id="1-1-反向代理是什么？"><a href="#1-1-反向代理是什么？" class="headerlink" title="1.1 反向代理是什么？"></a>1.1 反向代理是什么？</h2><p>反向代理（Reverse Proxy）是指以代理服务器来接受 internet 上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给 internet 上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。</p><h2 id="1-2-正向代理是什么？"><a href="#1-2-正向代理是什么？" class="headerlink" title="1.2 正向代理是什么？"></a>1.2 正向代理是什么？</h2><p>正向代理（Forward Proxy）又称转发代理，是一个位于客户端和原始服务器（origin server）之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标（原始服务器），然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端必须要进行一些特别的设置才能使用正向代理。</p><p><strong>客户端必须设置正向代理服务器，当然前提是要知道正向代理服务器的IP地址，还有代理程序的端口。</strong></p><h2 id="1-3-正向代理和反向代理区别"><a href="#1-3-正向代理和反向代理区别" class="headerlink" title="1.3 正向代理和反向代理区别"></a>1.3 正向代理和反向代理区别</h2><ul><li>正向代理：客户端 &lt;一&gt; 代理 一&gt;服务端</li><li>反向代理：客户端 一&gt; 代理 &lt;一&gt;服务端</li></ul><h1 id="二、http-反向代理配置"><a href="#二、http-反向代理配置" class="headerlink" title="二、http 反向代理配置"></a>二、http 反向代理配置</h1><h2 id="2-1-解析域名反向代理到-webapp"><a href="#2-1-解析域名反向代理到-webapp" class="headerlink" title="2.1 解析域名反向代理到 webapp"></a>2.1 解析域名反向代理到 webapp</h2><h3 id="2-1-1-配置-nginx-conf"><a href="#2-1-1-配置-nginx-conf" class="headerlink" title="2.1.1 配置 nginx.conf"></a>2.1.1 配置 nginx.conf</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx //进入nginx安装目录</span><br><span class="line">cd conf //进入conf目录</span><br><span class="line">mkdir vhost //创建vhost文件夹</span><br><span class="line">vim nginx.conf //修改nginx的配置文件cd /usr/local/nginx //进入nginx安装目录</span><br><span class="line">cd conf //进入conf目录</span><br><span class="line">mkdir vhost //创建vhost文件夹</span><br><span class="line">vim nginx.conf //修改nginx的配置文件</span><br></pre></td></tr></table></figure><p>在配置文件中添加该语句：include vhost&#x2F;*.conf；（不能漏分号）</p><blockquote><p>这语句的意思是把 vhost 文件夹下的所有 .conf 文件加载过来（注意是 .conf 后缀名的文件），这么做的原因是方便以后维护，把每个域名做成一个 .conf 文件，通过主配置 include 进来，这样以后想维护某个域名，就只需直接对那个对应的 .conf 进行操作，而不会影响到其它的域名，且文件不会过于臃肿。这跟 Spring 的配置文件类似，Spring 配置文件通过把负责各个模块功能的文件 include 进去，从而避免配置文件过于复杂臃肿。</p></blockquote><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1564556248956.png" alt="1564556248956"></p><h3 id="2-1-2-添加一些域名来测试"><a href="#2-1-2-添加一些域名来测试" class="headerlink" title="2.1.2 添加一些域名来测试"></a>2.1.2 添加一些域名来测试</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hosts //编辑hosts文件</span><br></pre></td></tr></table></figure><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1564557183237.png" alt="1564557183237"></p><p>IP 地址为本机 IP，后面的域名按需修改</p><h3 id="2-1-3-创建-conf-文件"><a href="#2-1-3-创建-conf-文件" class="headerlink" title="2.1.3 创建 .conf 文件"></a>2.1.3 创建 .conf 文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd vhost //进入vhost文件夹，刚才在上文已经创建了的，里面没有内容，现在要添加内容</span><br><span class="line">vim www.taobao.com.conf //创建该文件并添加内容</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    autoindex on;</span><br><span class="line">    server_name www.taobao.com;</span><br><span class="line">    access_log /usr/local/nginx/logs/access.log combined;</span><br><span class="line">    index index.html index.htm index.jsp index.php;</span><br><span class="line">    <span class="comment">#error_page 404 /404.html;</span></span><br><span class="line">    <span class="keyword">if</span> ( <span class="variable">$query_string</span> ~* <span class="string">&quot;.*[\;&#x27;\&lt;\&gt;].*&quot;</span> )&#123;</span><br><span class="line">    <span class="built_in">return</span> 404;</span><br><span class="line">    &#125;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:9999;</span><br><span class="line">        add_header Access-Control-Allow-Origin *;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1564557524022.png" alt="1564557524022"></p><p><em>其功能是当本机访问</em> <code>www.taobao.com</code> <em>域名时，将跳转到本地的 9999 端口的程序上，即 tomcat 欢迎页面</em></p><h3 id="2-1-4-刷新-Nginx-服务器配置"><a href="#2-1-4-刷新-Nginx-服务器配置" class="headerlink" title="2.1.4 刷新 Nginx 服务器配置"></a>2.1.4 刷新 Nginx 服务器配置</h3><p>esc + :wq 保存并退出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">../../sbin/nginx -s reload../../sbin/nginx -s reload</span><br></pre></td></tr></table></figure><p>如果配置刷新失败，可以重启 Nginx</p><h3 id="2-1-5-测试效果"><a href="#2-1-5-测试效果" class="headerlink" title="2.1.5 测试效果"></a>2.1.5 测试效果</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl www.taobao.com</span><br></pre></td></tr></table></figure><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1564558238760.png" alt="1564558238760"></p><p>反向代理成功！</p><h2 id="2-2-解析域名反向代理到本地文件"><a href="#2-2-解析域名反向代理到本地文件" class="headerlink" title="2.2 解析域名反向代理到本地文件"></a>2.2 解析域名反向代理到本地文件</h2><h3 id="2-2-1-hosts-添加域名"><a href="#2-2-1-hosts-添加域名" class="headerlink" title="2.2.1 hosts 添加域名"></a>2.2.1 hosts 添加域名</h3><h3 id="2-2-2-创建-conf-文件"><a href="#2-2-2-创建-conf-文件" class="headerlink" title="2.2.2 创建 .conf 文件"></a>2.2.2 创建 .conf 文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim image.baidu.com.conf //创建该文件并编辑</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    autoindex off;</span><br><span class="line">    server_name image.baidu.com;</span><br><span class="line">    access_log /usr/local/nginx/logs/access.log combined;</span><br><span class="line">    index index.html index.htm index.jsp index.php;</span><br><span class="line">    <span class="comment">#error_page 404 /404.html;</span></span><br><span class="line">    <span class="keyword">if</span> ( <span class="variable">$query_string</span> ~* <span class="string">&quot;.*[\;&#x27;\&lt;\&gt;].*&quot;</span> )&#123;</span><br><span class="line">    <span class="built_in">return</span> 404;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ /(mmall_fe|mmall_admin_fe)/dist/view/* &#123;</span><br><span class="line">    deny all;</span><br><span class="line">    &#125;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root /ftpfile/;</span><br><span class="line">        add_header Access-Control-Allow-Origin *;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1564560275807.png" alt="1564560275807"></p><p>功能是当用户输入 <code>image.baidu.com</code> 的时候，转发到本地的 <code>/ftpfile/</code> 文件。</p><h3 id="2-2-3-刷新-Nginx-服务器配置"><a href="#2-2-3-刷新-Nginx-服务器配置" class="headerlink" title="2.2.3 刷新 Nginx 服务器配置"></a>2.2.3 刷新 Nginx 服务器配置</h3><h3 id="2-2-4-测试效果（略）"><a href="#2-2-4-测试效果（略）" class="headerlink" title="2.2.4 测试效果（略）"></a>2.2.4 测试效果（略）</h3><h1 id="三、负载均衡配置"><a href="#三、负载均衡配置" class="headerlink" title="三、负载均衡配置"></a>三、负载均衡配置</h1><p>负载均衡是干嘛的？举个例子：我们的小网站，刚开始就一台 nginx 服务器，后来，随着业务量增大，用户增多，一台服务器已经不够用了，我们就又多加了几台服务器。那么这几台服务器如何调度？如何均匀的提供访问？这就是负载均衡。</p><p><strong>负载均衡的目的是为了解决单个节点压力过大，造成 Web 服务响应过慢，甚至严重的情况下导致服务瘫痪，无法正常提供服务。其好处是可以集群多台机器一起工作，并且对外的 IP 和域名是一样的，外界看起来就好像一台机器一样。</strong></p><h2 id="3-1-基于-weight-权重的负载"><a href="#3-1-基于-weight-权重的负载" class="headerlink" title="3.1 基于 weight 权重的负载"></a>3.1 基于 weight 权重的负载</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ... 省略其它配置</span></span><br><span class="line"></span><br><span class="line">    upstream webservers&#123;</span><br><span class="line">        server 192.168.33.11 weight=10;</span><br><span class="line">        server 192.168.33.12 weight=10;</span><br><span class="line">        server 192.168.33.13 weight=10;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://tomcats;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ... 省略其它配置</span></span><br><span class="line">&#125;http &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ... 省略其它配置</span></span><br><span class="line"></span><br><span class="line">    upstream webservers&#123;</span><br><span class="line">        server 192.168.33.11 weight=10;</span><br><span class="line">        server 192.168.33.12 weight=10;</span><br><span class="line">        server 192.168.33.13 weight=10;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://tomcats;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ... 省略其它配置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数：<code>max_fails</code>和<code>fail_timeout</code></p><ul><li>max_fails：允许请求失败的次数，默认为 1。当超过最大次数时，返回 proxy_next_upstream 模块定义的错误。</li><li>fail_timeout：在经历了 max_fails 次失败后，暂停服务的时间。max_fails 可以和 fail_timeout 一起使用，进行健康状态检查。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">upstream webservers&#123;</span><br><span class="line">    server 192.168.33.11 weight=10 max_fails=2 fail_timeout=30s;</span><br><span class="line">    server 192.168.33.12 weight=10 max_fails=2 fail_timeout=30s;</span><br><span class="line">    server 192.168.33.13 weight=10 max_fails=2 fail_timeout=30s;</span><br><span class="line">&#125;upstream webservers&#123;</span><br><span class="line">    server 192.168.33.11 weight=10 max_fails=2 fail_timeout=30s;</span><br><span class="line">    server 192.168.33.12 weight=10 max_fails=2 fail_timeout=30s;</span><br><span class="line">    server 192.168.33.13 weight=10 max_fails=2 fail_timeout=30s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数：<code>down</code>和<code>backup</code></p><ul><li>down：表示这台机器暂时不参与负载均衡。相当于注释掉了。</li><li>backup：表示这台机器是备用机器，是其他的机器不能用的时候，这台机器才会被使用，俗称备胎。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream webservers&#123;</span><br><span class="line">    server 192.168.33.11 down;</span><br><span class="line">    server 192.168.33.12 weight=10 max_fails=2 fail_timeout=30s;</span><br><span class="line">    server 192.168.33.13 backup;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/150410643.png" alt="150410643"></p><h2 id="3-2-基于-ip-hash-的负载"><a href="#3-2-基于-ip-hash-的负载" class="headerlink" title="3.2 基于 ip_hash 的负载"></a>3.2 基于 ip_hash 的负载</h2><p>这种分配方式，<strong>每个请求按访问 IP 的 hash 结果分配</strong>，这样来自同一个 IP 的访客固定访问一个后端服务器，有效解决了动态网页存在的 session 共享问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">upstream webservers&#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    server 192.168.33.11 weight=1 max_fails=2 fail_timeout=30s;</span><br><span class="line">    server 192.168.33.12 weight=1 max_fails=2 fail_timeout=30s;</span><br><span class="line">    server 192.168.33.13 down;</span><br><span class="line">&#125;upstream webservers&#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    server 192.168.33.11 weight=1 max_fails=2 fail_timeout=30s;</span><br><span class="line">    server 192.168.33.12 weight=1 max_fails=2 fail_timeout=30s;</span><br><span class="line">    server 192.168.33.13 down;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ip_hash 模式下，最好不要设置 weight 参数</strong>，因为你设置了，就相当于手动设置了，将会导致很多的流量分配不均匀。</p><p><strong>ip_hash 模式下，backup 参数不可用</strong>，加了会报错，为啥呢？因为，本身我们的访问就是固定的了，其实，备用已经不管什么作用了。</p><h1 id="四、网站有多个-webapp-配置"><a href="#四、网站有多个-webapp-配置" class="headerlink" title="四、网站有多个 webapp 配置"></a>四、网站有多个 webapp 配置</h1><h1 id="五、https-反向代理配置"><a href="#五、https-反向代理配置" class="headerlink" title="五、https 反向代理配置"></a>五、https 反向代理配置</h1><h1 id="六、静态站点配置"><a href="#六、静态站点配置" class="headerlink" title="六、静态站点配置"></a>六、静态站点配置</h1><h1 id="七、搭建文件服务器"><a href="#七、搭建文件服务器" class="headerlink" title="七、搭建文件服务器"></a>七、搭建文件服务器</h1><h1 id="八、跨域解决方案"><a href="#八、跨域解决方案" class="headerlink" title="八、跨域解决方案"></a>八、跨域解决方案</h1><h2 id="8-1-Nginx-反向代理解决跨域"><a href="#8-1-Nginx-反向代理解决跨域" class="headerlink" title="8.1 Nginx 反向代理解决跨域"></a>8.1 Nginx 反向代理解决跨域</h2><h3 id="8-1-1-Nginx-处理跨域原理"><a href="#8-1-1-Nginx-处理跨域原理" class="headerlink" title="8.1.1 Nginx 处理跨域原理"></a>8.1.1 Nginx 处理跨域原理</h3><p>a 网站向 b 网站请求 1.js 文件时，向 b 网站发送一个获取的请求，nginx 根据配置文件接收这个请求，代替 a 网站向 b 网站来请求这个资源，nginx 拿到这个资源后再返回给 a 网站，以此来解决了跨域问题。</p><h3 id="8-1-2-具体操作"><a href="#8-1-2-具体操作" class="headerlink" title="8.1.2 具体操作"></a>8.1.2 具体操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx //进入nginx安装\目录</span><br><span class="line">cd conf //进入conf目录</span><br><span class="line">vim nginx.conf //修改nginx的配置文件</span><br></pre></td></tr></table></figure><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1564649559457.png" alt="1564649559457"></p><p>其中 server 代表启动的一个服务，location 是一个定位规则。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 所有以/开头的地址，表示是所有请求</span></span><br><span class="line">location / &#123;</span><br><span class="line"><span class="comment"># 去请求../html文件夹里的文件,其中..的路径在nginx里面有定义，安装的时候会有默认路径</span></span><br><span class="line">    root   html;</span><br><span class="line">    <span class="comment"># 首页响应地址 </span></span><br><span class="line">    index  index.html index.htm;</span><br><span class="line">&#125;<span class="comment"># 所有以/开头的地址，表示是所有请求</span></span><br><span class="line">location / &#123;</span><br><span class="line"><span class="comment"># 去请求../html文件夹里的文件,其中..的路径在nginx里面有定义，安装的时候会有默认路径</span></span><br><span class="line">    root   html;</span><br><span class="line">    <span class="comment"># 首页响应地址 </span></span><br><span class="line">    index  index.html index.htm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由此可知，location 是 nginx 用来路由的入口，所以接下来要在 location 里面完成反向代理的配置。</p><p>现在假设是 <code>www.a.com/html/msg.html</code> 想请求 <code>www.b.com/api/?method=1&amp;para=2</code>；</p><p>ajax：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="string">&#x27;http://www.b.com/api/msg?method=1&amp;para=2&#x27;</span>;</span><br><span class="line">$.ajax (&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">    <span class="attr">url</span>: url,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>)&#123;..&#125;,</span><br><span class="line">    ....</span><br><span class="line">&#125;)<span class="keyword">var</span> url = <span class="string">&#x27;http://www.b.com/api/msg?method=1&amp;para=2&#x27;</span>;</span><br><span class="line">$.ajax (&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">    <span class="attr">url</span>: url,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>)&#123;..&#125;,</span><br><span class="line">    ....</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这时会出现跨域的问题，所以修改一下请求的 url，让请求发在 nginx 的一个 url 下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="string">&#x27;http://www.b.com/api/msg?method=1&amp;para=2&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> proxyurl = <span class="string">&#x27;msg?method=1&amp;para=2&#x27;</span>;</span><br><span class="line"><span class="comment">// 假如实际地址是：www.c.com/proxy/html/api/msg?method=1&amp;para=2;其中www.c.com是nginx主机地址</span></span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">    <span class="attr">url</span>: proxyurl,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>)&#123;..&#125;,</span><br><span class="line">    ....</span><br><span class="line">&#125;)<span class="keyword">var</span> url = <span class="string">&#x27;http://www.b.com/api/msg?method=1&amp;para=2&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> proxyurl = <span class="string">&#x27;msg?method=1&amp;para=2&#x27;</span>;</span><br><span class="line"><span class="comment">// 假如实际地址是：www.c.com/proxy/html/api/msg?method=1&amp;para=2;其中www.c.com是nginx主机地址</span></span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">    <span class="attr">url</span>: proxyurl,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>)&#123;..&#125;,</span><br><span class="line">    ....</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>再在刚才的路径中匹配到这个请求，我们在 location 下面再添加一个 location。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># &#x27;^~/proxy/html/&#x27;是一个匹配规则，用于拦截请求，匹配任何以 /proxy/html/开头的地址，匹配符合以后，停止往下搜索正则</span></span><br><span class="line">location ^~/proxy/html/&#123;</span><br><span class="line"><span class="comment"># 代表重写拦截进来的请求，并且只能对域名后边的除去传递的参数外的字符串起作用。例如www.c.com/proxy/html/api/msg?method=1&amp;para=2中只对/proxy/html/api/msg重写</span></span><br><span class="line"><span class="comment"># rewrite后面的参数是一个简单的正则：^/proxy/html/(.*)$，$1代表正则中的第一个()，$2代表第二个()的值,以此类推</span></span><br><span class="line"><span class="comment"># break代表匹配一个之后停止匹配</span></span><br><span class="line">    rewrite ^/proxy/html/(.*)$ /<span class="variable">$1</span> <span class="built_in">break</span>;</span><br><span class="line">    <span class="comment"># proxy_pass表示把请求代理到其他主机</span></span><br><span class="line">    proxy_pass http://www.b.com/;</span><br><span class="line">&#125;<span class="comment"># &#x27;^~/proxy/html/&#x27;是一个匹配规则，用于拦截请求，匹配任何以 /proxy/html/开头的地址，匹配符合以后，停止往下搜索正则</span></span><br><span class="line">location ^~/proxy/html/&#123;</span><br><span class="line"><span class="comment"># 代表重写拦截进来的请求，并且只能对域名后边的除去传递的参数外的字符串起作用。例如www.c.com/proxy/html/api/msg?method=1&amp;para=2中只对/proxy/html/api/msg重写</span></span><br><span class="line"><span class="comment"># rewrite后面的参数是一个简单的正则：^/proxy/html/(.*)$，$1代表正则中的第一个()，$2代表第二个()的值,以此类推</span></span><br><span class="line"><span class="comment"># break代表匹配一个之后停止匹配</span></span><br><span class="line">    rewrite ^/proxy/html/(.*)$ /<span class="variable">$1</span> <span class="built_in">break</span>;</span><br><span class="line">    <span class="comment"># proxy_pass表示把请求代理到其他主机</span></span><br><span class="line">    proxy_pass http://www.b.com/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-2-Nginx-配置-CORS-实现指定子域名跨域"><a href="#8-2-Nginx-配置-CORS-实现指定子域名跨域" class="headerlink" title="8.2 Nginx 配置 CORS 实现指定子域名跨域"></a>8.2 Nginx 配置 CORS 实现指定子域名跨域</h2><h3 id="8-2-1-什么是-CORS"><a href="#8-2-1-什么是-CORS" class="headerlink" title="8.2.1 什么是 CORS"></a>8.2.1 什么是 CORS</h3><p>CORS 是一个 W3C 标准，全称是跨域资源共享（Cross-Origin Resource Sharing）。它允许浏览器向跨源服务器，发出 XMLHttpRequest 请求，从而克服了 AJAX 请求只能同源使用的限制。</p><p>当前几乎所有的浏览器（Internet Explorer 8+，Firefox 3.5+，Safari 4+ 和 Chrome 3+）都可通过名为跨域资源共享（Cross-Origin Resource Sharing）的协议支持 AJAX 跨域调用。</p><p>Chrome，Firefox，Opera，Safari 都使用的是 XMLHttpRequest2 对象，IE 使用 XDomainRequest。</p><p>简单来说就是跨域的目标服务器要返回一系列的 Headers，通过这些 Headers 来控制是否同意跨域。跨域资源共享（CORS）也是未来的跨域问题的标准解决方案。</p><p>CORS 提供如下 Headers，Request 包和 Response 包中都有一部分。</p><h4 id="HTTP-Response-Header"><a href="#HTTP-Response-Header" class="headerlink" title="HTTP Response Header"></a>HTTP Response Header</h4><ul><li>Access-Control-Allow-Origin</li><li>Access-Control-Allow-Credentials</li><li>Access-Control-Allow-Methods</li><li>Access-Control-Allow-Headers</li><li>Access-Control-Expose-Headers</li><li>Access-Control-Max-Age</li></ul><h4 id="HTTP-Request-Header"><a href="#HTTP-Request-Header" class="headerlink" title="HTTP Request Header"></a>HTTP Request Header</h4><ul><li>Access-Control-Request-Method</li><li>Access-Control-Request-Headers</li></ul><p>其中最敏感的就是 Access-Control-Allow-Origin 这个 Header，它是 W3C 标准里用来检查该跨域请求是否可以被通过（Access Control Check）。如果需要跨域，解决方法就是在资源的头中加入 Access-Control-Allow-Origin 指定你授权的域。</p><p></br></br></br></br></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;摘录自博客：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/jingmoxukong/p/5945200.html&quot;&gt;Nginx 简易教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jians</summary>
      
    
    
    
    <category term="编程" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Nginx" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/Nginx/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="Nginx" scheme="http://example.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx安装与使用</title>
    <link href="http://example.com/blog/c3825a32.html"/>
    <id>http://example.com/blog/c3825a32.html</id>
    <published>2023-07-17T03:43:49.000Z</published>
    <updated>2023-07-18T01:40:25.786Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>参考自博客：<a href="https://blog.csdn.net/w410589502/article/details/70787468">linux nginx安装以及配置</a></p></blockquote><h1 id="一、Nginx-Linux-版本的基本使用"><a href="#一、Nginx-Linux-版本的基本使用" class="headerlink" title="一、Nginx Linux 版本的基本使用"></a>一、Nginx Linux 版本的基本使用</h1><p>下载地址：<a href="http://nginx.org/">Nginx官方网址</a></p><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1565086188620.png" alt="1565086188620"></p><p><em>其中，mainline 表示主线（最新）版本；stable 表示稳定版本</em></p><p>或者</p><p>在 Linux 中使用 wget 命令下载：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -c https://nginx.org/download/nginx-1.16.0.tar.gz</span><br></pre></td></tr></table></figure><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1565086440569.png" alt="1565086440569"></p><h1 id="二-安装步骤"><a href="#二-安装步骤" class="headerlink" title="二 安装步骤"></a>二 安装步骤</h1><h2 id="2-1-解压安装包"><a href="#2-1-解压安装包" class="headerlink" title="2.1 解压安装包"></a>2.1 解压安装包</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nginx-1.16.0.tar.gztar -zxvf nginx-1.16.0.tar.gz</span><br></pre></td></tr></table></figure><h2 id="2-2-进入安装目录"><a href="#2-2-进入安装目录" class="headerlink" title="2.2 进入安装目录"></a>2.2 进入安装目录</h2><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1564470825825.png" alt="1564470825825"></p><h2 id="2-3-Nginx-配置"><a href="#2-3-Nginx-配置" class="headerlink" title="2.3 Nginx 配置"></a>2.3 Nginx 配置</h2><h3 id="2-3-1-使用默认配置（推荐）"><a href="#2-3-1-使用默认配置（推荐）" class="headerlink" title="2.3.1 使用默认配置（推荐）"></a>2.3.1 使用默认配置（推荐）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure./configure</span><br></pre></td></tr></table></figure><p>这时一般会出现错误，提示我们添加 gcc 环境</p><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1564471268289.png" alt="1564471268289"></p><h4 id="2-3-1-1-安装-gcc-环境"><a href="#2-3-1-1-安装-gcc-环境" class="headerlink" title="2.3.1.1 安装 gcc 环境"></a>2.3.1.1 安装 gcc 环境</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc-c++yum install gcc-c++</span><br></pre></td></tr></table></figure><p><em>注：若 Linux 系统版本是 aliyun，一般已经安装了 gcc 环境；而 centos7 等系统大都需要用户安装</em></p><h4 id="2-3-1-2-继续使用默认配置"><a href="#2-3-1-2-继续使用默认配置" class="headerlink" title="2.3.1.2 继续使用默认配置"></a>2.3.1.2 继续使用默认配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装到指定路径</span></span><br><span class="line">./configure --prefix=/usr/local/nginx./configure</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装到指定路径</span></span><br><span class="line">./configure --prefix=/usr/local/nginx</span><br></pre></td></tr></table></figure><p>这里提示我们需要安装 PCRE 依赖库：</p><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1564473284232.png" alt="1564473284232"></p><h4 id="2-3-1-3-安装-PCRE-依赖库"><a href="#2-3-1-3-安装-PCRE-依赖库" class="headerlink" title="2.3.1.3 安装 PCRE 依赖库"></a>2.3.1.3 安装 PCRE 依赖库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y pcre pcre-develyum install -y pcre pcre-devel</span><br></pre></td></tr></table></figure><p><em>PCRE（Perl Compatible Regular Expressions）是一个 Perl 库，包括 perl 兼容的</em>***正则表达式库***<em>。nginx 的 http 模块使用 pcre 来解析正则表达式，所以需要在 linux 上安装 pcre 库，pcre-devel 是使用 pcre 开发的一个二次开发库。</em></p><h4 id="2-3-1-4-安装-zlib-依赖库"><a href="#2-3-1-4-安装-zlib-依赖库" class="headerlink" title="2.3.1.4 安装 zlib 依赖库"></a>2.3.1.4 安装 zlib 依赖库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y zlib zlib-develyum install -y zlib zlib-devel</span><br></pre></td></tr></table></figure><p><em>zlib 库提供了很多种压缩和解压缩的方式， nginx 使用 zlib 对 http 包的内容进行 gzip ，所以需要在 Centos 上安装 zlib 库。</em></p><h4 id="2-3-1-5-安装-OpenSSL-安全套接字层密码库"><a href="#2-3-1-5-安装-OpenSSL-安全套接字层密码库" class="headerlink" title="2.3.1.5 安装 OpenSSL 安全套接字层密码库"></a>2.3.1.5 安装 OpenSSL 安全套接字层密码库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y openssl openssl-develyum install -y openssl openssl-devel</span><br></pre></td></tr></table></figure><p><em>OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及 SSL 协议，并提供丰富的应用程序供测试或其它目的使用。</em></p><p><em>nginx 不仅支持 http 协议，还支持 https（即在 ssl 协议上传输 http），所以需要在 Centos 安装 OpenSSL 库。</em></p><h4 id="2-3-1-6-最后再次执行默认配置"><a href="#2-3-1-6-最后再次执行默认配置" class="headerlink" title="2.3.1.6 最后再次执行默认配置"></a>2.3.1.6 最后再次执行默认配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br></pre></td></tr></table></figure><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1564473993088.png" alt="1564473993088"></p><p>成功！</p><p>同时，<code>./configure</code>命令会创建一个 Makefile 文件，为 C 语言提供编译需要</p><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1564474485304.png" alt="1564474485304"></p><h4 id="1-2-3-2-自定义配置（不推荐）"><a href="#1-2-3-2-自定义配置（不推荐）" class="headerlink" title="1.2.3.2 自定义配置（不推荐）"></a>1.2.3.2 自定义配置（不推荐）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">./configure \</span><br><span class="line">--prefix=/usr/local/nginx \</span><br><span class="line">--conf-path=/usr/local/nginx/conf/nginx.conf \</span><br><span class="line">--pid-path=/usr/local/nginx/conf/nginx.pid \</span><br><span class="line">--lock-path=/var/lock/nginx.lock \</span><br><span class="line">--error-log-path=/var/log/nginx/error.log \</span><br><span class="line">--http-log-path=/var/log/nginx/access.log \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">--http-client-body-temp-path=/var/temp/nginx/client \</span><br><span class="line">--http-proxy-temp-path=/var/temp/nginx/proxy \</span><br><span class="line">--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \</span><br><span class="line">--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \</span><br><span class="line">--http-scgi-temp-path=/var/temp/nginx/scgi./configure \</span><br><span class="line">--prefix=/usr/local/nginx \</span><br><span class="line">--conf-path=/usr/local/nginx/conf/nginx.conf \</span><br><span class="line">--pid-path=/usr/local/nginx/conf/nginx.pid \</span><br><span class="line">--lock-path=/var/lock/nginx.lock \</span><br><span class="line">--error-log-path=/var/log/nginx/error.log \</span><br><span class="line">--http-log-path=/var/log/nginx/access.log \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">--http-client-body-temp-path=/var/temp/nginx/client \</span><br><span class="line">--http-proxy-temp-path=/var/temp/nginx/proxy \</span><br><span class="line">--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \</span><br><span class="line">--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \</span><br><span class="line">--http-scgi-temp-path=/var/temp/nginx/scgi</span><br></pre></td></tr></table></figure><p><em>注：将临时文件目录指定为：&#x2F;var&#x2F;temp&#x2F;nginx，需要在 &#x2F;var 下创建 temp 及 nginx 目录</em></p><h4 id="1-2-3-3-编译并安装-Nginx"><a href="#1-2-3-3-编译并安装-Nginx" class="headerlink" title="1.2.3.3 编译并安装 Nginx"></a>1.2.3.3 编译并安装 Nginx</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">make install</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span></span><br><span class="line">make &amp;&amp; make installmake install</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>make ：编译，它从 Makefile 中读取指令，然后编译。</p><p>make install ：安装，它从 Makefile 中读取指令，安装到指定的位置。</p><h4 id="1-2-3-4-查看安装路径"><a href="#1-2-3-4-查看安装路径" class="headerlink" title="1.2.3.4 查看安装路径"></a>1.2.3.4 查看安装路径</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis nginx</span><br></pre></td></tr></table></figure><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1564474774892.png" alt="1564474774892"></p><h4 id="1-2-3-5-安装目录文件分析"><a href="#1-2-3-5-安装目录文件分析" class="headerlink" title="1.2.3.5 安装目录文件分析"></a>1.2.3.5 安装目录文件分析</h4><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1565089768083.png" alt="1565089768083"></p><ul><li>conf：配置文件</li><li>html：网页文件</li><li>logs：日志文件</li><li>sbin：主要二进制程序</li></ul><h2 id="2-4-启动、停止-Nginx"><a href="#2-4-启动、停止-Nginx" class="headerlink" title="2.4 启动、停止 Nginx"></a>2.4 启动、停止 Nginx</h2><p>进入 Nginx 安装目录（并不是 Nginx 的解压目录），执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">./sbin/nginx # 启动</span><br><span class="line">./nginx # 启动</span><br><span class="line">./nginx -s stop # 停止（此方式相当于先查出nginx进程id再使用kill命令强制杀掉进程）</span><br><span class="line">./nginx -s quit # 停止（此方式停止步骤是待nginx进程处理任务完毕进行停止）</span><br><span class="line">./nginx -s reload # 在提供服务的时候，重新刷新配置文件</span><br><span class="line">kill -INT 5531 # 其中5531就是nginx的主进程号，这种方法叫做nginx信号控制</span><br><span class="line">kill -HUP 5531 # 软重启</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">其实在nginx启动后，会在logs下有一个nginx.pid文件用于记录主进程号</span></span><br><span class="line">kill -INT &#x27;cat logs/nginx.pid&#x27;</span><br><span class="line">kill -HUP &#x27;cat logs/nginx.pid&#x27;./sbin/nginx # 启动</span><br><span class="line">./nginx # 启动</span><br><span class="line">./nginx -s stop # 停止（此方式相当于先查出nginx进程id再使用kill命令强制杀掉进程）</span><br><span class="line">./nginx -s quit # 停止（此方式停止步骤是待nginx进程处理任务完毕进行停止）</span><br><span class="line">./nginx -s reload # 在提供服务的时候，重新刷新配置文件</span><br><span class="line">kill -INT 5531 # 其中5531就是nginx的主进程号，这种方法叫做nginx信号控制</span><br><span class="line">kill -HUP 5531 # 软重启</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">其实在nginx启动后，会在logs下有一个nginx.pid文件用于记录主进程号</span></span><br><span class="line">kill -INT &#x27;cat logs/nginx.pid&#x27;</span><br><span class="line">kill -HUP &#x27;cat logs/nginx.pid&#x27;</span><br></pre></td></tr></table></figure><h3 id="2-4-1-Nginx-信号控制"><a href="#2-4-1-Nginx-信号控制" class="headerlink" title="2.4.1 Nginx 信号控制"></a>2.4.1 Nginx 信号控制</h3><table><thead><tr><th>信号</th><th>信号说明</th></tr></thead><tbody><tr><td>TERM, INT</td><td>Quick shutdown</td></tr><tr><td>QUIT</td><td>Graceful shutdown 优雅地关闭线程，即等请求结束后再关闭</td></tr><tr><td>KILL</td><td>Halts a stubborn process 停止一个顽固的过程</td></tr><tr><td>HUP</td><td>Configuration reload 配置重新加载 Start the new worker processes with a new configuration 使用新配置启动新的工作进程 Gracefully shutdown the old worker processes 优雅地关闭旧的工作进程，即工作中的暂时不变，先变工作中的进程 该命令也称为：软重启</td></tr><tr><td>USR1</td><td>Reopen the log files 重新打开日志文件 重读日志，在日志按月&#x2F;日分割时有用 例如我需要每天一个日志文件，但nginx认的并不是文件名，而是内存节点 就算重命名或新建名称一致的文件，还是一直往旧日志文件上写，这时就用USER1</td></tr><tr><td>USR2</td><td>Upgrade Executable on the fly 动态升级可执行文件（平滑地升级）</td></tr><tr><td>WINCH</td><td>Gracefully shutdown the worker processes 正常关闭工作进程（配合USER2来进行升级）</td></tr></tbody></table><h3 id="2-4-2-查看-Nginx-配置是否有误"><a href="#2-4-2-查看-Nginx-配置是否有误" class="headerlink" title="2.4.2 查看 Nginx 配置是否有误"></a>2.4.2 查看 Nginx 配置是否有误</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./sbin/nginx -t./sbin/nginx -t</span><br></pre></td></tr></table></figure><h3 id="2-4-3-查看-Nginx-是否启动成功"><a href="#2-4-3-查看-Nginx-是否启动成功" class="headerlink" title="2.4.3 查看 Nginx 是否启动成功"></a>2.4.3 查看 Nginx 是否启动成功</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps aux|grep nginx</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">这里能够看到，nginx分为两个进程：主进程-子进程，子进程负责工作，主进程负责管控子进程</span></span><br></pre></td></tr></table></figure><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1564475996668.png" alt="1564475996668"></p><p>或者</p><p>看能不能访问 Nginx 欢迎首页</p><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1564479236790.png" alt="1564479236790"></p><p>同时，也可以在外部局域网内使用浏览器进行访问欢迎页面</p><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1564479385795.png" alt="1564479385795"></p><p><em>PS：如果 curl 访问成功了，但在外部访问失败，则应该是 Linux 防火墙对端口进行了拦截</em></p><h2 id="2-5-修改-Nginx-端口号"><a href="#2-5-修改-Nginx-端口号" class="headerlink" title="2.5 修改 Nginx 端口号"></a>2.5 修改 Nginx 端口号</h2><p>Nginx 的默认端口号为：80</p><h3 id="2-5-1-进入配置文件文件夹"><a href="#2-5-1-进入配置文件文件夹" class="headerlink" title="2.5.1 进入配置文件文件夹"></a>2.5.1 进入配置文件文件夹</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx/confcd /usr/local/nginx/conf</span><br></pre></td></tr></table></figure><p><em>注：这里是usr下的安装路径，不是我们解压的安装包路径</em></p><h3 id="2-5-2-备份配置文件（可略）"><a href="#2-5-2-备份配置文件（可略）" class="headerlink" title="2.5.2 备份配置文件（可略）"></a>2.5.2 备份配置文件（可略）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp nginx.conf nginx.conf.backcp nginx.conf nginx.conf.back</span><br></pre></td></tr></table></figure><h3 id="2-5-3-编辑-nginx-conf-配置文件"><a href="#2-5-3-编辑-nginx-conf-配置文件" class="headerlink" title="2.5.3 编辑 nginx.conf 配置文件"></a>2.5.3 编辑 nginx.conf 配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi nginx.conf</span><br></pre></td></tr></table></figure><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1564475593864.png" alt="1564475593864"></p><p>将端口号修改为 81（自定）；Esc + :wq（保存并退出）</p><p>记住需要重新启动（推荐）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./nginx -s quit</span><br><span class="line">./nginx./nginx -s quit</span><br><span class="line">./nginx</span><br></pre></td></tr></table></figure><p>或者</p><p>重新刷新配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx -s reload./nginx -s reload</span><br></pre></td></tr></table></figure><h2 id="2-6-设置-Nginx-开机自启动"><a href="#2-6-设置-Nginx-开机自启动" class="headerlink" title="2.6 设置 Nginx 开机自启动"></a>2.6 设置 Nginx 开机自启动</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/rc.localvi /etc/rc.local</span><br></pre></td></tr></table></figure><h3 id="2-6-1-添加语句"><a href="#2-6-1-添加语句" class="headerlink" title="2.6.1 添加语句"></a>2.6.1 添加语句</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1564476563993.png" alt="1564476563993"></p><h3 id="2-6-2-设置权限"><a href="#2-6-2-设置权限" class="headerlink" title="2.6.2 设置权限"></a>2.6.2 设置权限</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 755 /etc/rc.local</span><br></pre></td></tr></table></figure><p></br></br></br></br></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;参考自博客：&lt;a href=&quot;https://blog.csdn.net/w410589502/article/details/70787468&quot;&gt;linux nginx安装以及配置&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;一、</summary>
      
    
    
    
    <category term="编程" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Nginx" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/Nginx/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="Nginx" scheme="http://example.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>nginx.conf文件解析</title>
    <link href="http://example.com/blog/b54088f4.html"/>
    <id>http://example.com/blog/b54088f4.html</id>
    <published>2023-07-17T03:42:15.000Z</published>
    <updated>2023-07-18T01:40:30.943Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">全局区</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">user  nobody;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">表示有1个工作的子进程，可以自行修改，但太大无益，因为都需要争夺CPU，设置为 CPU数*核数 最优</span></span><br><span class="line">worker_processes  1;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">error_log  logs/error.log;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">error_log  logs/error.log  info;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">一般是配置nginx进程与连接的特性，如几个同事工作</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里表示一个子进程worker最大允许有1024个连接</span></span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里配置http服务器的主要段</span></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line">    </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这是虚拟主机段</span></span><br><span class="line">    server &#123;</span><br><span class="line">    # nginx监听哪个端口</span><br><span class="line">        listen       8081;</span><br><span class="line">        # nginx监听哪个域名</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定位，把特殊的路径或文件再次定位，如image目录单独处理；.php单独处理等</span></span><br><span class="line">        location / &#123;</span><br><span class="line">        # 默认</span><br><span class="line">            root   html;</span><br><span class="line">            # 默认主页</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    proxy_pass   http://127.0.0.1;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class="line">        # concurs with nginx&#x27;s one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       8000;</span><br><span class="line">    #    listen       somename:8080;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line">    include vhost/*.conf;</span><br><span class="line"></span><br><span class="line">    # HTTPS server</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       443 ssl;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #    ssl_certificate      cert.pem;</span><br><span class="line">    #    ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></br></br></br></br></p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class</summary>
      
    
    
    
    <category term="编程" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Nginx" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/Nginx/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="Nginx" scheme="http://example.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx介绍</title>
    <link href="http://example.com/blog/deab9856.html"/>
    <id>http://example.com/blog/deab9856.html</id>
    <published>2023-07-17T03:37:10.000Z</published>
    <updated>2023-07-18T01:40:16.087Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、Nginx-是什么"><a href="#一、Nginx-是什么" class="headerlink" title="一、Nginx 是什么"></a>一、Nginx 是什么</h1><p>Nginx 是一个 web 服务器，也可以用来做【负载均衡】及【反向代理】使用，目前使用最多的就是负载均衡。</p><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>负载均衡就是把请求分摊到集群的多个服务上执行，例如在那个集约化改造项目的时候，我们就使用了 Nginx 的负载均衡功能，然后使用的是 ip_hash 的策略，保证每个访客访问的是同一个服务器，由此解决了 session 的问题。</p><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p>反向代理就是用户只需要把请求发给特定的反向代理服务器，由 Nginx 完成对请求的分发处理，例如一个商场项目，分为商品（shopping）、订单（order）、交易（business）等服务，但是对客户端来说只需要正常的访问，然后在 url 中标识要请求的服务即可。</p><p></br></br></br></br></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、Nginx-是什么&quot;&gt;&lt;a href=&quot;#一、Nginx-是什么&quot; class=&quot;headerlink&quot; title=&quot;一、Nginx 是什么&quot;&gt;&lt;/a&gt;一、Nginx 是什么&lt;/h1&gt;&lt;p&gt;Nginx 是一个 web 服务器，也可以用来做【负载均衡】及【反向</summary>
      
    
    
    
    <category term="编程" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Nginx" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/Nginx/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="Nginx" scheme="http://example.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>ONE DAY-The ROOTLESS</title>
    <link href="http://example.com/blog/29bc4ab0.html"/>
    <id>http://example.com/blog/29bc4ab0.html</id>
    <published>2023-07-11T09:43:42.000Z</published>
    <updated>2023-07-28T10:19:43.038Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ONE-DAY-The-ROOTLESS"><a href="#ONE-DAY-The-ROOTLESS" class="headerlink" title="ONE DAY - The ROOTLESS"></a>ONE DAY - The ROOTLESS</h1><p><ruby><rt></rt>雨<rp>（</rp><rt>あめ</rt><rp>）</rp><rt></rt>上<rp>（</rp><rt>あ</rt><rp>）</rp></ruby>がりの<ruby><rt></rt>空<rp>（</rp><rt>そら</rt><rp>）</rp></ruby>を<ruby><rt></rt>仰<rp>（</rp><rt>あお</rt><rp>）</rp></ruby>ぐ<ruby><rt></rt>度<rp>（</rp><rt>たび</rt><rp>）</rp></ruby><br>每当仰望雨后的天空</p><p><ruby><rt></rt>泣<rp>（</rp><rt>な</rt><rp>）</rp></ruby>き<ruby><rt></rt>虫<rp>（</rp><rt>むし</rt><rp>）</rp></ruby>だった<ruby><rt></rt>頃<rp>（</rp><rt>ころ</rt><rp>）</rp></ruby>の<ruby><rt></rt>僕<rp>（</rp><rt>ぼく</rt><rp>）</rp></ruby>を<ruby><rt></rt>想<rp>（</rp><rt>おも</rt><rp>）</rp></ruby>う<br>就会浮现出那个爱哭的自己</p><p><ruby><rt></rt>誰<rp>（</rp><rt>たれ</rt><rp>）</rp></ruby>かの<ruby><rt></rt>背<rp>（</rp><rt>せ</rt><rp>）</rp><rt></rt>中<rp>（</rp><rt>なが</rt><rp>）</rp></ruby>を<br>某人的背影</p><p>がむしゃらに<ruby><rt></rt>追<rp>（</rp><rt>お</rt><rp>）</rp></ruby>いかけた<br>曾经疯狂地追赶着某个人</p><p>「<ruby><rt></rt>強<rp>（</rp><rt>つよ</rt><rp>）</rp></ruby>くなりたい」って<br>曾经希望能变得更强大</p><p><ruby><rt></rt>今<rp>（</rp><rt>いま</rt><rp>）</rp></ruby>は<ruby><rt></rt>風<rp>（</rp><rt>かぜ</rt><rp>）</rp></ruby>に<ruby><rt></rt>消<rp>（</rp><rt>き</rt><rp>）</rp></ruby>えた「ありがとう」<br>现在消失在风中的那声谢谢你</p><p><ruby><rt></rt>僕<rp>（</rp><rt>ぼく</rt><rp>）</rp></ruby>は<ruby><rt></rt>強<rp>（</rp><rt>つよ</rt><rp>）</rp></ruby>くなれているのかな?<br>我到底成长了没有呢</p><p><ruby><rt></rt>答<rp>（</rp><rt>こた</rt><rp>）</rp></ruby>えはまだ<ruby><rt></rt>出<rp>（</rp><rt>で</rt><rp>）</rp></ruby>そうにないからさ<br>这个问题还没有确切的答案</p><p>やっぱりまだ<br>还需要继续</p><p><ruby><rt></rt>歩<rp>（</rp><rt>ある</rt><rp>）</rp></ruby>いていくよ<br>努力向前</p><p>さあ<ruby><rt></rt>行<rp>（</rp><rt>ゆ</rt><rp>）</rp></ruby>こう<br>出发吧</p><p><ruby><rt></rt>立<rp>（</rp><rt>た</rt><rp>）</rp></ruby>ち<ruby><rt></rt>止<rp>（</rp><rt>ど</rt><rp>）</rp></ruby>まることなく<br>永不停息</p><p><ruby><rt></rt>流<rp>（</rp><rt>なが</rt><rp>）</rp></ruby>れる<ruby><rt></rt>時<rp>（</rp><rt>とき</rt><rp>）</rp></ruby>に<ruby><rt></rt>負<rp>（</rp><rt>ま</rt><rp>）</rp></ruby>けないように<br>为了不输给时代的浪潮</p><p><ruby><rt></rt>何度<rp>（</rp><rt>なんど</rt><rp>）</rp></ruby>も<ruby><rt></rt>立<rp>（</rp><rt>た</rt><rp>）</rp></ruby>ち<ruby><rt></rt>向<rp>（</rp><rt>む</rt><rp>）</rp></ruby>かい<ruby><rt></rt>続<rp>（</rp><rt>つづ</rt><rp>）</rp></ruby>けよう<br>一次又一次奋勇向前</p><p><ruby><rt></rt>大<rp>（</rp><rt>たい</rt><rp>）</rp><rt></rt>切<rp>（</rp><rt>せつ</rt><rp>）</rp></ruby>なもの<ruby><rt></rt>失<rp>（</rp><rt>うしな</rt><rp>）</rp></ruby> いたくないから<br>不想再失去重要的人</p><p><ruby><rt></rt>夕暮<rp>（</rp><rt>ゆうぐ</rt><rp>）</rp></ruby>れに<ruby><rt></rt>舞<rp>（</rp><rt>ま</rt><rp>）</rp></ruby>う<ruby><rt></rt>鳥<rp>（</rp><rt></rt><rp>）</rp></ruby>の<ruby><rt></rt>様<rp>（</rp><rt>よう</rt><rp>）</rp></ruby>に<br>宛如夕阳下起舞的鸟儿</p><p><ruby><rt></rt>見<rp>（</rp><rt>み</rt><rp>）</rp></ruby>えない<ruby><rt></rt>明日<rp>（</rp><rt>あす</rt><rp>）</rp></ruby>を<ruby><rt></rt>探<rp>（</rp><rt>さが</rt><rp>）</rp></ruby>してる<br>奋力追寻着未知的明日</p><p><ruby><rt></rt>躓<rp>（</rp><rt>つまず</rt><rp>）</rp></ruby>きながら <ruby><rt></rt>怖<rp>（</rp><rt>こわ</rt><rp>）</rp></ruby>くても<br>纵使害怕受到挫折</p><p><ruby><rt></rt>足元<rp>（</rp><rt>あしもと</rt><rp>）</rp></ruby>に<ruby><rt></rt>目<rp>（</rp><rt>め</rt><rp>）</rp></ruby>は<ruby><rt></rt>落<rp>（</rp><rt>お</rt><rp>）</rp></ruby>と  さないよ<br>也绝不付下视线  勇敢面对</p><p><ruby><rt></rt>諦<rp>（</rp><rt>あきら</rt><rp>）</rp></ruby>める<ruby><rt></rt>言葉<rp>（</rp><rt>ことば</rt><rp>）</rp></ruby>は<br>虽然泄气的话</p><p><ruby><rt></rt>転<rp>（</rp><rt>こ</rt><rp>）</rp></ruby>がってるけど<br>满口尽是</p><p><ruby><rt></rt>諦<rp>（</rp><rt>あきら</rt><rp>）</rp></ruby>めないゴールは<ruby><rt></rt>一<rp>（</rp><rt>ひと</rt><rp>）</rp></ruby>つだけ<br>然而不愿放弃的目标唯有一个</p><p><ruby><rt></rt>喜<rp>（</rp><rt>よろこ</rt><rp>）</rp></ruby>び<ruby><rt></rt>悲<rp>（</rp><rt>かな</rt><rp>）</rp></ruby>しみ<ruby><rt></rt>乗<rp>（</rp><rt>の</rt><rp>）</rp></ruby>り<ruby><rt></rt>越<rp>（</rp><rt>こ</rt><rp>）</rp></ruby>えては<br>经历过种种喜怒哀乐之后</p><p><ruby><rt></rt>少<rp>（</rp><rt>そこ</rt><rp>）</rp></ruby>しずつ<ruby><rt></rt>歩<rp>（</rp><rt>ある</rt><rp>）</rp></ruby>いてくよ<br>再一步步稳定向前</p><p><ruby><rt></rt>果<rp>（</rp><rt>は</rt><rp>）</rp></ruby>てしない<ruby><rt></rt>空<rp>（</rp><rt>そら</rt><rp>）</rp></ruby>に<br>把手伸向</p><p><ruby><rt></rt>手<rp>（</rp><rt>て</rt><rp>）</rp></ruby>をかざそう<br>无边无际的天空吧</p><p>たった<ruby><rt></rt>一<rp>（</rp><rt>ひと</rt><rp>）</rp></ruby>つの<ruby><rt></rt>未来<rp>（</rp><rt>みらい</rt><rp>）</rp></ruby>を<ruby><rt></rt>信<rp>（</rp><rt>しん</rt><rp>）</rp></ruby>じながら<br>内心坚信着唯独仅有的未来</p><p><ruby><rt></rt>戾<rp>（</rp><rt>もと</rt><rp>）</rp></ruby>らない <ruby><rt></rt>時<rp>（</rp><rt>とき</rt><rp>）</rp></ruby>は<ruby><rt></rt>移<rp>（</rp><rt>うつ</rt><rp>）</rp></ruby>ろうけど<br>哪怕宝贵的时光已轻逝</p><p><ruby><rt></rt>大切<rp>（</rp><rt>たいせつ</rt><rp>）</rp></ruby>なもの<ruby><rt></rt>失<rp>（</rp><rt>うしな</rt><rp>）</rp></ruby> いたくないから<br>我亦不愿再失去重要的人</p><p><ruby><rt></rt>僕<rp>（</rp><rt>ぼく</rt><rp>）</rp></ruby>の<ruby><rt></rt>中<rp>（</rp><rt>なか</rt><rp>）</rp></ruby>に<ruby><rt></rt>流<rp>（</rp><rt>なが</rt><rp>）</rp></ruby>れる<ruby><rt></rt>声<rp>（</rp><rt>かえ</rt><rp>）</rp></ruby>は<br>响彻我胸口的声音</p><p>ずっとずっと<ruby><rt></rt>僕<rp>（</rp><rt>ぼく</rt><rp>）</rp></ruby>を<ruby><rt></rt>支<rp>（</rp><rt>ささ</rt><rp>）</rp></ruby>えてる<br>一直一直都支撑着我</p><p>イタズラな<ruby><rt></rt>雨<rp>（</rp><rt>あめ</rt><rp>）</rp></ruby>が<ruby><rt></rt>邪魔<rp>（</rp><rt>じゃま</rt><rp>）</rp></ruby>するけど<br>虽然那淘气的雨前来阻止</p><p><ruby><rt></rt>逃<rp>（</rp><rt>に</rt><rp>）</rp></ruby>げ<ruby><rt></rt>出<rp>（</rp><rt>だ</rt><rp>）</rp></ruby>さないから<br>我也再不会逃避了</p><p>Oh</p><p>さあ<ruby><rt></rt>行<rp>（</rp><rt>ゆ</rt><rp>）</rp></ruby>こう<br>好了出发吧</p><p><ruby><rt></rt>立<rp>（</rp><rt>た</rt><rp>）</rp></ruby>ち<ruby><rt></rt>止<rp>（</rp><rt>ど</rt><rp>）</rp></ruby>まることなく<br>永不停息</p><p><ruby><rt></rt>流<rp>（</rp><rt>なが</rt><rp>）</rp></ruby>れる<ruby><rt></rt>時<rp>（</rp><rt>とき</rt><rp>）</rp></ruby>に<ruby><rt></rt>負<rp>（</rp><rt>ま</rt><rp>）</rp></ruby>けないように<br>为了不输给时代的潮流</p><p><ruby><rt></rt>何度<rp>（</rp><rt>なんど</rt><rp>）</rp></ruby>も<ruby><rt></rt>立<rp>（</rp><rt>た</rt><rp>）</rp></ruby>ち<ruby><rt></rt>向<rp>（</rp><rt>む</rt><rp>）</rp></ruby>かい<ruby><rt></rt>続<rp>（</rp><rt>つづ</rt><rp>）</rp></ruby>けよう<br>无论几度亦奋勇面对</p><p><ruby><rt></rt>大切<rp>（</rp><rt>たいせつ</rt><rp>）</rp></ruby>なもの<ruby><rt></rt>失<rp>（</rp><rt>うしな</rt><rp>）</rp></ruby> いたくないから<br>只因不愿再失去重要的人</p><p><ruby><rt></rt>信<rp>（</rp><rt>しん</rt><rp>）</rp></ruby>じたその<ruby><rt></rt>先<rp>（</rp><rt>さき</rt><rp>）</rp></ruby>へと<br>迈向深信的未来</p><p>【<ruby>终<rp>（</rp><rt>お</rt><rp>）</rp></ruby>わった】</p><p></br></br></br></br></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ONE-DAY-The-ROOTLESS&quot;&gt;&lt;a href=&quot;#ONE-DAY-The-ROOTLESS&quot; class=&quot;headerlink&quot; title=&quot;ONE DAY - The ROOTLESS&quot;&gt;&lt;/a&gt;ONE DAY - The ROOTLESS&lt;/</summary>
      
    
    
    
    <category term="生活" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="学习" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>JDK1.8之Lambda表达式</title>
    <link href="http://example.com/blog/77a7a861.html"/>
    <id>http://example.com/blog/77a7a861.html</id>
    <published>2023-07-06T07:41:30.000Z</published>
    <updated>2023-07-18T01:41:01.479Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、Lambda-表达式"><a href="#一、Lambda-表达式" class="headerlink" title="一、Lambda 表达式"></a>一、Lambda 表达式</h1><h2 id="1-1-基本格式"><a href="#1-1-基本格式" class="headerlink" title="1.1 基本格式"></a>1.1 基本格式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(参数列表)-&gt;&#123;代码&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-匿名内部类方式"><a href="#1-2-匿名内部类方式" class="headerlink" title="1.2 匿名内部类方式"></a>1.2 匿名内部类方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 传统写法需要传参</span></span><br><span class="line">        <span class="type">RunnableRealization</span> <span class="variable">runnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RunnableRealization</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread01</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(runnable);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         稍微优化的【匿名内部类】写法，进一步优化就是lambda写法了</span></span><br><span class="line"><span class="comment">         匿名内部类的作用：</span></span><br><span class="line"><span class="comment">             1.避免匿名内部类定义过多；</span></span><br><span class="line"><span class="comment">             2.使代码看起来简洁</span></span><br><span class="line"><span class="comment">             3.简化代码，只留下核心逻辑</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread02</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * When an object implementing interface &lt;code&gt;Runnable&lt;/code&gt; is used</span></span><br><span class="line"><span class="comment">             * to create a thread, starting the thread causes the object&#x27;s</span></span><br><span class="line"><span class="comment">             * &lt;code&gt;run&lt;/code&gt; method to be called in that separately executing</span></span><br><span class="line"><span class="comment">             * thread.</span></span><br><span class="line"><span class="comment">             * &lt;p&gt;</span></span><br><span class="line"><span class="comment">             * The general contract of the method &lt;code&gt;run&lt;/code&gt; is that it may</span></span><br><span class="line"><span class="comment">             * take any action whatsoever.</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@see</span> Thread#run()</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;祖安狂人蒙多&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一次性的类，用在new Thread中充当Runnable对的实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RunnableRealization</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;祖安狂人蒙多&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="示例一"><a href="#示例一" class="headerlink" title="示例一"></a>示例一</h2><p>在创建线程并启动时可以使用匿名内部类的写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure><p>可以使用 Lambda 的格式对其进行修改。修改后如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;).start();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最简写法</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; System.out.println(<span class="string">&quot;hello world&quot;</span>)).start();</span><br></pre></td></tr></table></figure><h2 id="示例二"><a href="#示例二" class="headerlink" title="示例二"></a>示例二</h2><p>现有方法定义如下，其中 IntBinaryOperator 是一个接口。先使用匿名内部类的写法调用该方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">calculateNum(<span class="keyword">new</span> <span class="title class_">IntBinaryOperator</span>() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">applyAsInt</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> left + right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">calculateNum</span><span class="params">(IntBinaryOperator operator)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="keyword">return</span> operator.applyAsInt(a, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Lambda 写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">calculateNum((left, right) -&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> left + right;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最简写法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">calculateNum((left, right) -&gt; left + right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="示例三"><a href="#示例三" class="headerlink" title="示例三"></a>示例三</h2><p>现有方法定义如下，其中 IntPredicate 是一个接口。先使用匿名内部类的写法调用该方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">printNum(<span class="keyword">new</span> <span class="title class_">IntPredicate</span>() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> value%<span class="number">2</span> == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printNum</span><span class="params">(IntPredicate predicate)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i : arr) &#123;</span><br><span class="line"><span class="keyword">if</span> (predicate.test(i)) &#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Lambda 写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">printNum((value) -&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> value%<span class="number">2</span> == <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最简写法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">printNum(value -&gt; value%<span class="number">2</span> == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="示例四"><a href="#示例四" class="headerlink" title="示例四"></a>示例四</h2><p>现有方法定义如下，其中 Function 是一个接口。先使用匿名内部类的写法调用该方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">typeConver(<span class="keyword">new</span> <span class="title class_">Function</span>&lt;String, Integer&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Integer <span class="title function_">apply</span><span class="params">(String s)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> Integer.valueOf(s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;R&gt; R <span class="title function_">typeConver</span><span class="params">(Function&lt;String, R&gt; function)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"><span class="type">R</span> <span class="variable">result</span> <span class="operator">=</span> function.apply(str);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Lambda 写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">typeConver((s) -&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> Integer.valueOf(s);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最简写法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">typeConver(Integer::valueOf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="示例五"><a href="#示例五" class="headerlink" title="示例五"></a>示例五</h2><p>现有方法定义如下，其中 Int 是一个接口。先使用匿名内部类的写法调用该方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">foreachArr(<span class="keyword">new</span> <span class="title class_">IntConsumer</span>() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">System.out.println(value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">foreachArr</span><span class="params">(IntConsumer consumer)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i : arr) &#123;</span><br><span class="line">consumer.accept(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Lambda 写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">foreachArr((value) -&gt; &#123;</span><br><span class="line">System.out.println(value);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最简写法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">foreachArr(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、Stream-流"><a href="#二、Stream-流" class="headerlink" title="二、Stream 流"></a>二、Stream 流</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">streamDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Stream</span> <span class="variable">stream</span> <span class="operator">=</span> Stream.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">    String[] strArray = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>&#125;;</span><br><span class="line">    stream = Stream.of(strArray);</span><br><span class="line">    stream = Arrays.stream(strArray);</span><br><span class="line">    List&lt;String&gt; list = Arrays.asList(strArray);</span><br><span class="line">    stream = list.stream();</span><br><span class="line">    <span class="comment">// 一个Stream流只可以使用一次，这段代码为了简洁而重复使用了数次，因此会抛出 stream has already been operated upon or closed 异常</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Stream&lt;String&gt; stream2 = Stream.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">        <span class="comment">// 转换成 Array</span></span><br><span class="line">        String[] strArray1 = stream2.toArray(String[]::<span class="keyword">new</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转换成 Collection</span></span><br><span class="line">        List&lt;String&gt; list1 = stream2.collect(Collectors.toList());</span><br><span class="line">        List&lt;String&gt; list2 = stream2.collect(Collectors.toCollection(ArrayList::<span class="keyword">new</span>));</span><br><span class="line">        <span class="type">Set</span> <span class="variable">set1</span> <span class="operator">=</span> stream2.collect(Collectors.toSet());</span><br><span class="line">        <span class="type">Stack</span> <span class="variable">stack1</span> <span class="operator">=</span> stream2.collect(Collectors.toCollection(Stack::<span class="keyword">new</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转换成 String</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> stream.collect(Collectors.joining()).toString();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-1-Stream-中间操作符"><a href="#2-1-Stream-中间操作符" class="headerlink" title="2.1 Stream 中间操作符"></a>2.1 Stream 中间操作符</h2><table><thead><tr><th>流方法</th><th>含义</th></tr></thead><tbody><tr><td>filter</td><td>用于通过设置的条件过滤出元素</td></tr><tr><td>distinct</td><td>返回一个元素各异（根据流所生成元素的hashCode和equals方法实现）的流</td></tr><tr><td>limit</td><td>会返回一个不超过给定长度的流</td></tr><tr><td>skip</td><td>返回一个扔掉了前n个元素的流</td></tr><tr><td>map</td><td>接受一个函数作为参数。这个函数会被应用到每个元素上，并将其映射成一个新的元素（使用映射一词，是因为它和转换类似，但其中的细微差别在于它是“创建一个新版本”而不是去“修改”）</td></tr><tr><td>flatMap</td><td>使用flatMap方法的效果是，各个数组并不是分别映射成一个流，而是映射成流的内容。所有使用map(Arrays::stream)时生成的单个流都被合并起来，即扁平化为一个流</td></tr><tr><td>sorted</td><td>返回排序后的流</td></tr></tbody></table><h3 id="stream-filter"><a href="#stream-filter" class="headerlink" title="stream().filter()"></a>stream().filter()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">filterListDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;String&gt; accountList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    accountList.add(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">    accountList.add(<span class="string">&quot;jerry&quot;</span>);</span><br><span class="line">    accountList.add(<span class="string">&quot;beita&quot;</span>);</span><br><span class="line">    accountList.add(<span class="string">&quot;shuke&quot;</span>);</span><br><span class="line">    accountList.add(<span class="string">&quot;damu&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.1 业务要求：长度大于等于5的有效账号</span></span><br><span class="line">    <span class="keyword">for</span> (String account : accountList) &#123;</span><br><span class="line">        <span class="keyword">if</span> (account.length() &gt;= <span class="number">5</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;有效账号：&quot;</span> + account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.2 迭代方式进行操作</span></span><br><span class="line">    Iterator&lt;String&gt; it = accountList.iterator();</span><br><span class="line">    <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">account</span> <span class="operator">=</span> it.next();</span><br><span class="line">        <span class="keyword">if</span> (account.length() &gt;= <span class="number">5</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;it有效账号：&quot;</span> + account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.3 Stream结合lambda表达式，完成业务处理</span></span><br><span class="line">    List&lt;String&gt; validAccounts = accountList.stream().filter(s -&gt; s.length() &gt;= <span class="number">5</span>).collect(Collectors.toList());</span><br><span class="line">    System.out.println(validAccounts);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">filterArrayDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// arrays -&gt; stream</span></span><br><span class="line">    Integer[] nums = <span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;;</span><br><span class="line">    System.out.println(Arrays.asList(nums));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// filter(Predicate(T t)-&gt;Boolean) 接受一个参数，验证参数是否符合设置的条件</span></span><br><span class="line">    <span class="comment">// toArray() 从Stream类型抽取数据转换成数组</span></span><br><span class="line">    Integer[] nums2 = Stream.of(nums).filter(x -&gt; x % <span class="number">2</span> == <span class="number">0</span>).toArray(Integer[]::<span class="keyword">new</span>);</span><br><span class="line">    System.out.println(Arrays.asList(nums2));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="stream-distinct"><a href="#stream-distinct" class="headerlink" title="stream().distinct()"></a>stream().distinct()</h3><h3 id="stream-min-：取最小值"><a href="#stream-min-：取最小值" class="headerlink" title="stream().min()：取最小值"></a>stream().min()：取最小值</h3><h3 id="stream-max-：取最大值"><a href="#stream-max-：取最大值" class="headerlink" title="stream().max()：取最大值"></a>stream().max()：取最大值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reduceDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; numList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    numList.add(<span class="number">1</span>);</span><br><span class="line">    numList.add(<span class="number">3</span>);</span><br><span class="line">    numList.add(<span class="number">2</span>);</span><br><span class="line">    numList.add(<span class="number">5</span>);</span><br><span class="line">    numList.add(<span class="number">4</span>);</span><br><span class="line">    numList.add(<span class="number">6</span>);</span><br><span class="line">    numList.add(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// min/max/distinct</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">minNum1</span> <span class="operator">=</span> numList.stream().min((o1, o2) -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> o1 - o2;</span><br><span class="line">    &#125;).get();</span><br><span class="line">    System.out.println(minNum1);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">minNum2</span> <span class="operator">=</span> numList.stream().min(Comparator.comparingInt(o -&gt; o)).get();</span><br><span class="line">    System.out.println(minNum2);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">maxNum</span> <span class="operator">=</span> numList.stream().max((o1, o2) -&gt; o1 - o2).get();</span><br><span class="line">    System.out.println(maxNum);</span><br><span class="line">    numList.stream().distinct().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="stream-limit"><a href="#stream-limit" class="headerlink" title="stream().limit()"></a>stream().limit()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reduceDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; numList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    numList.add(<span class="number">1</span>);</span><br><span class="line">    numList.add(<span class="number">3</span>);</span><br><span class="line">    numList.add(<span class="number">2</span>);</span><br><span class="line">    numList.add(<span class="number">5</span>);</span><br><span class="line">    numList.add(<span class="number">4</span>);</span><br><span class="line">    numList.add(<span class="number">6</span>);</span><br><span class="line">    numList.add(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// limit</span></span><br><span class="line">    List&lt;Integer&gt; limitNum = numList.stream().limit(<span class="number">2</span>).collect(Collectors.toList());</span><br><span class="line">    System.out.println(limitNum);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="stream-skip"><a href="#stream-skip" class="headerlink" title="stream().skip()"></a>stream().skip()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reduceDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; numList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    numList.add(<span class="number">1</span>);</span><br><span class="line">    numList.add(<span class="number">3</span>);</span><br><span class="line">    numList.add(<span class="number">2</span>);</span><br><span class="line">    numList.add(<span class="number">5</span>);</span><br><span class="line">    numList.add(<span class="number">4</span>);</span><br><span class="line">    numList.add(<span class="number">6</span>);</span><br><span class="line">    numList.add(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// skip</span></span><br><span class="line">    List&lt;Integer&gt; limitNum2 = numList.stream().skip(<span class="number">2</span>).collect(Collectors.toList());</span><br><span class="line">    System.out.println(limitNum2);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="stream-map"><a href="#stream-map" class="headerlink" title="stream().map()"></a>stream().map()</h3><p>接受一个函数作为参数。这个函数会被应用到每个元素上，并将其映射成一个新的元素。</p><p>（使用映射一词，是因为它和转换类似，但其中的细微差别在于它是“创建一个新版本”而不是去“修改”） </p><p><strong>map 是对流中的每一个元素进行处理。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mapDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="comment">// list -&gt; stream</span></span><br><span class="line">    System.out.println(list);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// map(Function(T, R)-&gt; R) 接受一个参数，通过运算得到转换后的数据</span></span><br><span class="line">    <span class="comment">// collect()</span></span><br><span class="line">    List&lt;Double&gt; list2 = list.stream().map(x -&gt; Math.pow(x, <span class="number">2</span>)).collect(Collectors.toList());</span><br><span class="line">    System.out.println(list2);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; nameList = Arrays.asList(<span class="string">&quot;zs&quot;</span>, <span class="string">&quot;ls&quot;</span>, <span class="string">&quot;ww&quot;</span>, <span class="string">&quot;zl&quot;</span>);</span><br><span class="line">    <span class="comment">// 字母转大写</span></span><br><span class="line">    nameList.stream().map(String::toUpperCase).collect(Collectors.toList()).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转换数据类型</span></span><br><span class="line">    list.stream().map(String::valueOf).collect(Collectors.toList()).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取平方</span></span><br><span class="line">    list.stream().map(n -&gt; n*n).collect(Collectors.toList()).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    List&lt;String&gt; strList = Arrays.asList(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;abc&quot;</span>, <span class="string">&quot;bc&quot;</span>, <span class="string">&quot;efg&quot;</span>, <span class="string">&quot;abcd&quot;</span>, <span class="string">&quot;jkl&quot;</span>, <span class="string">&quot;jkl&quot;</span>);</span><br><span class="line">    List&lt;String&gt; resultList = strList.stream().map(str -&gt; str + <span class="string">&quot;-itcast&quot;</span>).collect(Collectors.toList());</span><br><span class="line">    System.out.println(resultList);</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="stream-flatMap"><a href="#stream-flatMap" class="headerlink" title="stream().flatMap()"></a>stream().flatMap()</h3><p>使用 flatMap 方法的效果是，各个数组并不是分别映射成一个流，而是映射成流的内容。所有使用 map(Arrays::stream) 时生成的单个流都被合并起来，即扁平化为一个流。</p><p><strong>flatMap 流扁平化，就是把流中的每一个元素都转化成另一个流，然后把所有流汇聚起来成一个流。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">flatMapDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;String&gt; strList = Arrays.asList(<span class="string">&quot;a bc&quot;</span>, <span class="string">&quot;ab c&quot;</span>, <span class="string">&quot;b c&quot;</span>, <span class="string">&quot;efg&quot;</span>, <span class="string">&quot;abcd&quot;</span>, <span class="string">&quot;jkl&quot;</span>, <span class="string">&quot;jkl&quot;</span>);</span><br><span class="line">    <span class="comment">// List&lt;String&gt; resultList = strList.stream().flatMap(x -&gt; Arrays.asList(x.split(&quot; &quot;)).stream()).collect(Collectors.toList());</span></span><br><span class="line">    List&lt;String&gt; resultList = strList.stream().flatMap(x -&gt; Arrays.stream(x.split(<span class="string">&quot; &quot;</span>))).collect(Collectors.toList());</span><br><span class="line">    System.out.println(resultList);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="stream-sorted"><a href="#stream-sorted" class="headerlink" title="stream().sorted()"></a>stream().sorted()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reduceDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; numList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    numList.add(<span class="number">1</span>);</span><br><span class="line">    numList.add(<span class="number">3</span>);</span><br><span class="line">    numList.add(<span class="number">2</span>);</span><br><span class="line">    numList.add(<span class="number">5</span>);</span><br><span class="line">    numList.add(<span class="number">4</span>);</span><br><span class="line">    numList.add(<span class="number">6</span>);</span><br><span class="line">    numList.add(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// sorted().一般在skip/limit或者filter之后进行</span></span><br><span class="line">    List&lt;Integer&gt; sortedNum = numList.stream().skip(<span class="number">2</span>).limit(<span class="number">5</span>).sorted().collect(Collectors.toList());</span><br><span class="line">    System.out.println(sortedNum);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-Stream-终止操作符"><a href="#2-2-Stream-终止操作符" class="headerlink" title="2.2 Stream 终止操作符"></a>2.2 Stream 终止操作符</h2><table><thead><tr><th>流方法</th><th>含义</th></tr></thead><tbody><tr><td>anyMatch</td><td>检查是否至少匹配一个元素，返回boolean</td></tr><tr><td>allMatch</td><td>检查是否匹配所有元素，返回boolean</td></tr><tr><td>noneMatch</td><td>检查是否没有匹配所有元素，返回boolean</td></tr><tr><td>findAny</td><td>将返回当前流中的任意元素</td></tr><tr><td>findFirst</td><td>返回第一个元素</td></tr><tr><td>forEach</td><td>遍历流</td></tr><tr><td>collect</td><td>收集器，将流转换为其他形式</td></tr><tr><td>reduce</td><td>可以将流中元素反复结合起来，得到一个值</td></tr><tr><td>count</td><td>返回流中元素总数</td></tr></tbody></table><h3 id="stream-anyMatch"><a href="#stream-anyMatch" class="headerlink" title="stream().anyMatch()"></a>stream().anyMatch()</h3><h3 id="stream-allMatch"><a href="#stream-allMatch" class="headerlink" title="stream().allMatch()"></a>stream().allMatch()</h3><h3 id="stream-noneMatch"><a href="#stream-noneMatch" class="headerlink" title="stream().noneMatch()"></a>stream().noneMatch()</h3><h3 id="stream-findAny"><a href="#stream-findAny" class="headerlink" title="stream().findAny()"></a>stream().findAny()</h3><h3 id="stream-findFirst"><a href="#stream-findFirst" class="headerlink" title="stream().findFirst()"></a>stream().findFirst()</h3><h3 id="stream-forEach"><a href="#stream-forEach" class="headerlink" title="stream().forEach()"></a>stream().forEach()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">forEachDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="comment">// forEach: 接受一个lambda表达式，在Stream每个元素上执行指定的操作</span></span><br><span class="line">    list.stream().filter(n -&gt; n % <span class="number">2</span> == <span class="number">0</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;b&quot;</span>, <span class="string">&quot;b&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;c&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;d&quot;</span>, <span class="string">&quot;d&quot;</span>);</span><br><span class="line">    map.forEach((k, v) -&gt; System.out.println(<span class="string">&quot;k=&quot;</span> + k + <span class="string">&quot;，v=&quot;</span> + v));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="stream-collect"><a href="#stream-collect" class="headerlink" title="stream().collect()"></a>stream().collect()</h3><h3 id="stream-reduce"><a href="#stream-reduce" class="headerlink" title="stream().reduce()"></a>stream().reduce()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reduceDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; numList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    numList.add(<span class="number">1</span>);</span><br><span class="line">    numList.add(<span class="number">3</span>);</span><br><span class="line">    numList.add(<span class="number">2</span>);</span><br><span class="line">    numList.add(<span class="number">5</span>);</span><br><span class="line">    numList.add(<span class="number">4</span>);</span><br><span class="line">    numList.add(<span class="number">6</span>);</span><br><span class="line">    numList.add(<span class="number">6</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// reduce</span></span><br><span class="line">    Optional&lt;Integer&gt; sum1 = numList.stream().reduce((x, y) -&gt; x + y);</span><br><span class="line">    System.out.println(sum1.get());</span><br><span class="line">    Optional&lt;Integer&gt; sum2 = numList.stream().reduce(Integer::sum);</span><br><span class="line">    System.out.println(sum2.get());</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~ * ~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="stream-count"><a href="#stream-count" class="headerlink" title="stream().count()"></a>stream().count()</h3><h1 id="三、Lambda：函数式接口"><a href="#三、Lambda：函数式接口" class="headerlink" title="三、Lambda：函数式接口"></a>三、Lambda：函数式接口</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaDemo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        MobilePhone phone;</span><br><span class="line">        <span class="comment">// 所有的Lambda的类型都是一个接口，而Lambda表达式本身，就是这个接口的实现</span></span><br><span class="line">        phone = () -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;开机！&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        phone.powerOn();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MobilePhone</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">powerOn</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OppoPhone</span> <span class="keyword">implements</span> <span class="title class_">MobilePhone</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">powerOn</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Oppo手机开机！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>如果定义成实现类，就会报错</strong></p><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1655199527943-7baca5ca-351d-4d7d-b004-583907ca7170.png"></p><h1 id="四、Lambda：方法与构造函数引用"><a href="#四、Lambda：方法与构造函数引用" class="headerlink" title="四、Lambda：方法与构造函数引用"></a>四、Lambda：方法与构造函数引用</h1><h2 id="4-1-实例对象-实例方法（类名-方法名）"><a href="#4-1-实例对象-实例方法（类名-方法名）" class="headerlink" title="4.1 实例对象::实例方法（类名::方法名）"></a>4.1 实例对象::实例方法（类名::方法名）</h2><p>如果两个方法，除了方法名之外，方法参数和返回类型都一致，就称为：方法签名一致</p><p>如果某个方法和接口里定义的函数恰好一致，就可以直接传入方法引用。</p><p>有点接口方法懒得实现了，然后直接借用其他方法的意思</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaDemo03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 原始的lambda写法</span></span><br><span class="line">        <span class="type">parseIntNum</span> <span class="variable">parseIntNum1</span> <span class="operator">=</span> (str) -&gt; Integer.parseInt(str);</span><br><span class="line">        System.out.println(parseIntNum1.pass(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">        <span class="comment">// 改进型lambda写法</span></span><br><span class="line">        <span class="type">parseIntNum</span> <span class="variable">parseIntNum2</span> <span class="operator">=</span> Integer::parseInt;</span><br><span class="line">        System.out.println(parseIntNum2.pass(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口定义</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">parseIntNum</span> &#123;</span><br><span class="line">    <span class="comment">// 定义一个String转化成Integer的方法</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">pass</span><span class="params">(String s)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果接口中存在有多个抽象方法，那么就不能直接通过接口来匹配到具体的函数，报错：is not a functional interface</p><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1655203558293-07ec7c2e-d5c3-4f87-a3b6-e581ec8163af.png"></p><h2 id="4-2-数据类型-new（方法返回值-new）"><a href="#4-2-数据类型-new（方法返回值-new）" class="headerlink" title="4.2 数据类型::new（方法返回值::new）"></a>4.2 数据类型::new（方法返回值::new）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaDemo04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建长度为10的数组</span></span><br><span class="line">        <span class="comment">// 原始的lambda写法</span></span><br><span class="line">        IntFunction&lt;<span class="type">int</span>[]&gt; arr1 = <span class="keyword">new</span> <span class="title class_">IntFunction</span>&lt;<span class="type">int</span>[]&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span>[] apply(<span class="type">int</span> num) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[num];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        arr1.apply(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">// 改进型lambda写法</span></span><br><span class="line">        IntFunction&lt;<span class="type">int</span>[]&gt; arr2 = <span class="type">int</span>[]::<span class="keyword">new</span>;</span><br><span class="line">        arr2.apply(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五、Lambda：作用域"><a href="#五、Lambda：作用域" class="headerlink" title="五、Lambda：作用域"></a>五、Lambda：作用域</h1><h2 id="5-1-基础类型变量"><a href="#5-1-基础类型变量" class="headerlink" title="5.1 基础类型变量"></a>5.1 基础类型变量</h2><p>传入 lambda 的变量被隐式 final 所修饰，不能被修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaDemo05</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="string">&quot;666&quot;</span>;</span><br><span class="line">        <span class="type">StrToInt05</span> <span class="variable">sti</span> <span class="operator">=</span> (str -&gt; Integer.parseInt(str + temp));</span><br><span class="line">        System.out.println(sti.change(temp));</span><br><span class="line"><span class="comment">//        temp = &quot;000&quot;;</span></span><br><span class="line"><span class="comment">//        System.out.println(sti.change(temp));</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口定义</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">StrToInt05</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个String转化成Integer的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">change</span><span class="params">(String s)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1655462587971-b10e98a3-899e-4a54-90d4-d234e602c434.png"></p><h2 id="5-2-引用类型变量"><a href="#5-2-引用类型变量" class="headerlink" title="5.2 引用类型变量"></a>5.2 引用类型变量</h2><p>如果是引用类型的话就不会报错，因为 Lambda 能够感知外部对引用类型变量的改变，不会出现数据不同步的问题（静态变量和实例变量也是不会报错）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaDemo06</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;111&quot;</span>);</span><br><span class="line">        <span class="type">StrToInt06</span> <span class="variable">sti</span> <span class="operator">=</span> (str -&gt; Integer.parseInt(list.get(<span class="number">0</span>)));</span><br><span class="line">        System.out.println(sti.change(<span class="string">&quot;000&quot;</span>));</span><br><span class="line">        list.set(<span class="number">0</span>, <span class="string">&quot;666&quot;</span>);</span><br><span class="line">        System.out.println(sti.change(<span class="string">&quot;000&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口定义</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">StrToInt06</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个String转化成Integer的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">change</span><span class="params">(String s)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="六、Lambda：访问局部变量"><a href="#六、Lambda：访问局部变量" class="headerlink" title="六、Lambda：访问局部变量"></a>六、Lambda：访问局部变量</h1><h1 id="七、Lambda：访问对象字段与静态变量"><a href="#七、Lambda：访问对象字段与静态变量" class="headerlink" title="七、Lambda：访问对象字段与静态变量"></a>七、Lambda：访问对象字段与静态变量</h1><h1 id="八、Lambda：访问接口的默认方法"><a href="#八、Lambda：访问接口的默认方法" class="headerlink" title="八、Lambda：访问接口的默认方法"></a>八、Lambda：访问接口的默认方法</h1><p></br></br></br></br></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、Lambda-表达式&quot;&gt;&lt;a href=&quot;#一、Lambda-表达式&quot; class=&quot;headerlink&quot; title=&quot;一、Lambda 表达式&quot;&gt;&lt;/a&gt;一、Lambda 表达式&lt;/h1&gt;&lt;h2 id=&quot;1-1-基本格式&quot;&gt;&lt;a href=&quot;#1-1-基</summary>
      
    
    
    
    <category term="编程" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Java" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/Java/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch</title>
    <link href="http://example.com/blog/d32d37e5.html"/>
    <id>http://example.com/blog/d32d37e5.html</id>
    <published>2023-07-04T07:28:35.000Z</published>
    <updated>2023-07-18T01:41:23.478Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘录自博客：<a href="https://www.cnblogs.com/wupeixuan/tag/ElasticSearch/">ElasticSearch - 标签 - 武培轩 - 博客园 (cnblogs.com)</a></p></blockquote><h1 id="Elasticsearch-术语"><a href="#Elasticsearch-术语" class="headerlink" title="Elasticsearch 术语"></a>Elasticsearch 术语</h1><h2 id="索引（Index）"><a href="#索引（Index）" class="headerlink" title="索引（Index）"></a>索引（Index）</h2><p>索引是相似结构的文档的集合，索引中的数据分散在分片上，类似于关系型数据库中的表（Table）</p><h2 id="类型（Type）"><a href="#类型（Type）" class="headerlink" title="类型（Type）"></a>类型（Type）</h2><p>在 ES6.0 版本中已经废除</p><h2 id="文档（Document）"><a href="#文档（Document）" class="headerlink" title="文档（Document）"></a>文档（Document）</h2><p>文档是所有可搜索数据的最小单位，类似于关系型数据库中的记录（Row）</p><h2 id="集群（Cluster）"><a href="#集群（Cluster）" class="headerlink" title="集群（Cluster）"></a>集群（Cluster）</h2><p>一个集群可以有一个或多个节点</p><h3 id="集群的状态"><a href="#集群的状态" class="headerlink" title="集群的状态"></a>集群的状态</h3><ul><li>Green：主分片与副本都正常分配</li><li>Yellow：主分片全部正常分配，有副本分配未能正常分配</li><li>Red：有主分片未能分配</li></ul><h2 id="节点（Node）"><a href="#节点（Node）" class="headerlink" title="节点（Node）"></a>节点（Node）</h2><p>节点其实就是一个 ES 实例，本质上是一个 Java 进程</p><h3 id="节点类型"><a href="#节点类型" class="headerlink" title="节点类型"></a>节点类型</h3><ul><li>主节点（Master Node）</li><li>候选主节点（Master-eligible Node）</li><li>数据节点（Data Node）</li><li>协调节点（Coordinating Node）</li><li>冷热节点（Hot &amp; Warm Node）</li><li>机器学习节点（Machine Learning Node）</li><li>部落节点（Tribe Node）</li><li>预处理节点（Ingest Node）</li></ul><h2 id="映射（Mapping）"><a href="#映射（Mapping）" class="headerlink" title="映射（Mapping）"></a>映射（Mapping）</h2><p>类似于关系型数据库中的表定义（Schema）</p><h2 id="字段（Field）"><a href="#字段（Field）" class="headerlink" title="字段（Field）"></a>字段（Field）</h2><p>类似于关系型数据库中的字段（Column）</p><h2 id="分片（Shard）"><a href="#分片（Shard）" class="headerlink" title="分片（Shard）"></a>分片（Shard）</h2><p>ES 可以将一个索引中的数据切分为多个分片</p><h3 id="分片类型"><a href="#分片类型" class="headerlink" title="分片类型"></a>分片类型</h3><ul><li>主分片（Primary Shard）</li><li>副本分配（Replica Shard）</li></ul><h1 id="Elasticsearch-Json-结构"><a href="#Elasticsearch-Json-结构" class="headerlink" title="Elasticsearch Json 结构"></a>Elasticsearch Json 结构</h1><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;KJTnBYkB5GK1mQJI5u1p&quot;</span><span class="punctuation">,</span>            <span class="comment">// 文档唯一ID</span></span><br><span class="line">    <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;properties_camera_gn_2023_06&quot;</span><span class="punctuation">,</span> <span class="comment">// 文档所属索引名</span></span><br><span class="line">    <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span>                          <span class="comment">// 文档所属类型名</span></span><br><span class="line">    <span class="attr">&quot;_version&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span>                            <span class="comment">// 文档的版本信息</span></span><br><span class="line">    <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span>                              <span class="comment">// 评分，为相关打分，是这个文档在这次查询中的算分（暂时理解为与查询条件的相关性）</span></span><br><span class="line">    <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>                              <span class="comment">// 文档元素json数据，当搜索文档的时候，默认返回的就是_source这个字段</span></span><br><span class="line">        <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="number">1688021231207</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;deviceId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7a367c995e8044f8bd4fe3a042be789c&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;intValue&quot;</span><span class="punctuation">:</span> <span class="number">333</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;messageId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;871806074498596864&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;messageType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;system&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;property&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fdsa&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;propertyType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;int&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;timestamp&quot;</span><span class="punctuation">:</span> <span class="number">1688021231161</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;built-in&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;2023-06-29T06:47:11.207Z&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;deviceId&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;7a367c995e8044f8bd4fe3a042be789c&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;intValue&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">333</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;messageId&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;871806074498596864&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;messageType&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;system&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;property&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;fdsa&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;property.keyword&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;fdsa&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;propertyType&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;int&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;propertyType.keyword&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;int&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;timestamp&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;2023-06-29T06:47:11.161Z&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;built-in&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="Elasticsearch-CRUD"><a href="#Elasticsearch-CRUD" class="headerlink" title="Elasticsearch CRUD"></a>Elasticsearch CRUD</h1><h2 id="增"><a href="#增" class="headerlink" title="增"></a>增</h2><h3 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PUT my_index/_doc/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;user&quot;</span><span class="punctuation">:</span><span class="string">&quot;mike&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;comment&quot;</span><span class="punctuation">:</span><span class="string">&quot;You know, for search&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PUT my_index/_create/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;user&quot;</span><span class="punctuation">:</span><span class="string">&quot;mike&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;comment&quot;</span><span class="punctuation">:</span><span class="string">&quot;You know, for search&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">POST my_index/_doc（不指定 ID，则会自动生成）</span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;user&quot;</span><span class="punctuation">:</span><span class="string">&quot;mike&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;comment&quot;</span><span class="punctuation">:</span><span class="string">&quot;You know, for search&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Index-VS-Create"><a href="#Index-VS-Create" class="headerlink" title="Index VS Create"></a>Index VS Create</h3><p>Index 和 Create 插入时都会检测 _version，即通过 id 得出文档的版本号（只获取版本而不是 doc 的全部内容，能够从一定程度上减少系统的开销）。如果没有指定文档 id 直接 add 固然最好，但如果指定了文档 id，那么就要进行更耗时的 update 操作，不同的是：</p><ul><li>Index 如果没有指定 version，那对于已有的 doc，_version 会递增，并对文档进行覆盖。如果指定了 _version，但与已有文档的 _version 对不上，则插入失败；如果对得上，则覆盖，_version 递增。</li><li>Create 通过 version，判断出文档已存在，则直接插入失败，抛出一个已经存在的异常。</li></ul><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><p>在批量请求的时候最好使用 create 方式进行导入。</p><p>假如你批量导入一个大小为 500MB 的文件，中途突然网络中断，可能其中有 5 万条数据已经导入，那么第二次尝试导入的时候，如果选用 index 方式，那么前 5 万条数据又会重复导入，增加了很多额外的开销，如果是 create 的话，elasticsearch 针对 bulk 操作机制是忽略已经存在的（当然在 bulk 完成后会返回哪些数据是重复的），这样就不会重复被导入了。</p><h2 id="删（Delete）"><a href="#删（Delete）" class="headerlink" title="删（Delete）"></a>删（Delete）</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE my_index/_doc/<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="改（Update）"><a href="#改（Update）" class="headerlink" title="改（Update）"></a>改（Update）</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">POST my_index/_update/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;user&quot;</span><span class="punctuation">:</span><span class="string">&quot;mike&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;comment&quot;</span><span class="punctuation">:</span><span class="string">&quot;You know, Elesticsearch&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>由于 Lucene 中的 update 其实就是覆盖替换，并不支持针对特定 Field 进行修改，Elasticsearch 中的 update 为了实现针对特定字段修改，在 Lucene 的基础上做了一些改动。</p><p>每次 update 都会调用 InternalEngine 中的 get 方法，来获取整个文档信息，从而实现针对特定字段进行修改，这也就导致了每次更新要获取一遍原始文档，性能上会有很大影响。</p><p>所以根据使用场景，有时候使用 index 会比 update 好很多。</p><h2 id="查（Read）"><a href="#查（Read）" class="headerlink" title="查（Read）"></a>查（Read）</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET my_index/_doc/<span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="Elasticsearch-Bulk-API"><a href="#Elasticsearch-Bulk-API" class="headerlink" title="Elasticsearch Bulk API"></a>Elasticsearch Bulk API</h1><p>在一个 REST 请求中，重新建立网络开销十分损耗性能，因此 ES 提供 Bulk API，支持在一次 API 调用中，对不同的索引进行操作，从而减少网络传输开销，提升写入速率。</p><p>它支持 Index、Create、Update、Delete 四种类型操作，可以在 URI 中指定索引，也可以在请求的方法体中进行。</p><p>同时多条操作中如果其中有一条失败，也不会影响其他的操作，并且返回的结果包括每一条操作执行的结果。</p><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST _bulk</span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span><span class="string">&quot;users&quot;</span><span class="punctuation">,</span><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span><span class="string">&quot;3&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;username&quot;</span><span class="punctuation">:</span><span class="string">&quot;wumx&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;delete&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span><span class="string">&quot;users&quot;</span><span class="punctuation">,</span><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span><span class="string">&quot;1&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;update&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span><span class="string">&quot;users&quot;</span><span class="punctuation">,</span><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span><span class="string">&quot;2&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="string">&quot;12&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;took&quot;</span><span class="punctuation">:</span> <span class="number">126</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;errors&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;items&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;users&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_version&quot;</span><span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;result&quot;</span><span class="punctuation">:</span> <span class="string">&quot;updated&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_shards&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;successful&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;failed&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_seq_no&quot;</span><span class="punctuation">:</span> <span class="number">28</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_primary_term&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">200</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;delete&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;users&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_version&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;result&quot;</span><span class="punctuation">:</span> <span class="string">&quot;deleted&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_shards&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;successful&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;failed&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_seq_no&quot;</span><span class="punctuation">:</span> <span class="number">29</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_primary_term&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">200</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;update&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;users&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">404</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;error&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;document_missing_exception&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;reason&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[_doc][2]: document missing&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;index_uuid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;r6N_mV8VRwmxfc4TyoKIqA&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;shard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;users&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>took 表示消耗了 93 毫秒，errors 为 true 表示在这些操作中错误发生，发现是 update 操作发生了错误，id 为 2 的文档不存在，所以报错了。</p><p>在使用 Bulk API 的时候，当 errors 为 true 时，需要把错误的操作修改掉，防止存到 ES 的数据有缺失。</p><h1 id="Elasticsearch-mget-API"><a href="#Elasticsearch-mget-API" class="headerlink" title="Elasticsearch _mget API"></a>Elasticsearch _mget API</h1><p>批量查询需要指明要查询文档的 id，可以在一个 _mget 操作里查询不同索引的数据，可以减少网络连接所产生的开销，提高性能。</p><p>下面我们来实际操作下，输入以下代码执行，就可以得到文档 id 为 1,3 的数据。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET /_mget</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;docs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;users&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;users&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;docs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;users:&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_version&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_seq_no&quot;</span><span class="punctuation">:</span> <span class="number">27</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_primary_term&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;found&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;wupx&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="string">&quot;18&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;job&quot;</span><span class="punctuation">:</span> <span class="string">&quot;coder&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;users&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_version&quot;</span><span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_seq_no&quot;</span><span class="punctuation">:</span> <span class="number">24</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_primary_term&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;found&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;wumx&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p></br></br></br></br></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;摘录自博客：&lt;a href=&quot;https://www.cnblogs.com/wupeixuan/tag/ElasticSearch/&quot;&gt;ElasticSearch - 标签 - 武培轩 - 博客园 (cnblogs.com)&lt;/a&gt;&lt;/p&gt;
&lt;/</summary>
      
    
    
    
    <category term="编程" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Elasticsearch" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/Elasticsearch/"/>
    
    
    <category term="中间件" scheme="http://example.com/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    <category term="Elasticsearch" scheme="http://example.com/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>NodeJS安装</title>
    <link href="http://example.com/blog/a3f5c67b.html"/>
    <id>http://example.com/blog/a3f5c67b.html</id>
    <published>2023-06-09T09:46:19.000Z</published>
    <updated>2023-07-18T01:39:49.561Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NodeJS-下载"><a href="#NodeJS-下载" class="headerlink" title="NodeJS 下载"></a>NodeJS 下载</h1><p><a href="https://nodejs.org/en/">下载 NodeJS 的长期支持版本</a></p><p><a href="https://nodejs.org/en/about/releases/">查看 NodeJS 长期支持版本的生命周期</a></p><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1671692583874-b094e213-b87b-4954-8775-efbc1d91ff24.png"></p><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1671692611593-ae3989db-654e-4cc6-b36c-5e123ae233bd.png"></p><h1 id="NodeJS-安装"><a href="#NodeJS-安装" class="headerlink" title="NodeJS 安装"></a>NodeJS 安装</h1><p>一直 next 直至安装完成，安装位置建议：D:&#x2F;nodejs&#x2F;</p><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1671692749278-1f23235d-a537-45ce-9c76-ca2de0bf3900.png"></p><h1 id="NodeJS-安装完成检查"><a href="#NodeJS-安装完成检查" class="headerlink" title="NodeJS 安装完成检查"></a>NodeJS 安装完成检查</h1><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1671692930610-af309999-e17a-4346-b17a-b8e0f21e4c9a.png"></p><p></br></br></br></br></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;NodeJS-下载&quot;&gt;&lt;a href=&quot;#NodeJS-下载&quot; class=&quot;headerlink&quot; title=&quot;NodeJS 下载&quot;&gt;&lt;/a&gt;NodeJS 下载&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://nodejs.org/en/&quot;&gt;下载 NodeJS</summary>
      
    
    
    
    <category term="编程" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="NodeJS" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/NodeJS/"/>
    
    
    <category term="NodeJS" scheme="http://example.com/tags/NodeJS/"/>
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>NodeJS简介</title>
    <link href="http://example.com/blog/ff8c64c0.html"/>
    <id>http://example.com/blog/ff8c64c0.html</id>
    <published>2023-06-09T03:33:37.000Z</published>
    <updated>2023-07-18T01:39:45.743Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>参考自博客：</p><p><a href="https://www.cnblogs.com/yinzhengjie/p/14219259.html">NodeJS简介</a></p><p><a href="https://nodejs.org/zh-cn/docs/">NodeJS doc</a></p></blockquote><h1 id="关于-NodeJS"><a href="#关于-NodeJS" class="headerlink" title="关于 NodeJS"></a>关于 NodeJS</h1><p>Node.js 是一个大部分基本模块都用 JavaScript 编写的，能够在服务器端运行的 JavaScript 的开放源代码，跨平台 JavaScript 运行环境。</p><p>Node.js 采用 Google 的 V8 引擎运行 JS 代码，使用事件驱动，非阻塞和异步 I&#x2F;O 模型等技术来提高性能，可优化应用程序的传输量和规模。</p><h1 id="NodeJS-可以做什么"><a href="#NodeJS-可以做什么" class="headerlink" title="NodeJS 可以做什么"></a>NodeJS 可以做什么</h1><ol><li>Web服务API，比如REST；</li><li>实时多人游戏；</li><li>后端的Web服务，例如跨域，服务器端的请求；</li><li>基于Web的应用；</li><li>多客户端的通信，如即时通信</li></ol><p>Node.js 是基于单线程实现的，但是后台拥有一个 I&#x2F;O 线程池。可以说 Node.js 成也单线程，败也单线程，尽管单线程的处理效率很高，但也是有极限的。不过值得庆幸的是，Node.js 支持分布式，即单节点性能达到瓶颈，我们可以增加机器来解决性能问题。</p><p>综上所述，在超大并发的场景下，Node.js 并不太适合做后端的服务器开发语言，建议还是选择支持高并发的语言，比如 Java，C++，Golang 等。当然，Python 也是可以的，但由于 GIL 的存在，因此它在后端开发能力上相比 Java 和 Go，并没有特别可圈可点的地方。</p><h1 id="NodeJS-VS-JavaScript"><a href="#NodeJS-VS-JavaScript" class="headerlink" title="NodeJS VS JavaScript"></a>NodeJS VS JavaScript</h1><p>JavaScript 是在浏览器中运行的代码，他的作用域只在浏览器中，并不能超出浏览器所有的权限，而 Node.js 则跳出了浏览器的限制，可以像 Java，Python，Golang 这样的编程语言一样，可以直接和操作系统进行交互。</p><p>从 C&#x2F;S 架构来说，JavaScript 是在客户端浏览器上渲染的程序，而 Node.js 既可以充当 Client 角色，也可以充当 Server 端角色。</p><h1 id="关于-npm"><a href="#关于-npm" class="headerlink" title="关于 npm"></a>关于 npm</h1><p>npm 是 Node 的包管理器。</p><h1 id="关于-yarn"><a href="#关于-yarn" class="headerlink" title="关于 yarn"></a>关于 yarn</h1><p></br></br></br></br></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;参考自博客：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/yinzhengjie/p/14219259.html&quot;&gt;NodeJS简介&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://nodejs.org/</summary>
      
    
    
    
    <category term="编程" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="NodeJS" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/NodeJS/"/>
    
    
    <category term="NodeJS" scheme="http://example.com/tags/NodeJS/"/>
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>nvm使用与报错</title>
    <link href="http://example.com/blog/dd102d8e.html"/>
    <id>http://example.com/blog/dd102d8e.html</id>
    <published>2023-06-09T03:32:21.000Z</published>
    <updated>2023-07-18T01:39:42.037Z</updated>
    
    <content type="html"><![CDATA[<p>nvm 安装后建议修改镜像地址，否则 nodejs 下载会很慢</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\Windows\system32&gt; nvm node_mirror https://npm.taobao.org/mirrors/node/</span><br><span class="line"><span class="built_in">PS</span> C:\Windows\system32&gt; nvm npm_mirror https://npm.taobao.org/mirrors/npm/</span><br></pre></td></tr></table></figure><h1 id="nvm-list"><a href="#nvm-list" class="headerlink" title="nvm list"></a>nvm list</h1><p>查看已安装的 nodejs版本</p><h1 id="nvm-install"><a href="#nvm-install" class="headerlink" title="nvm install"></a>nvm install</h1><h1 id="nvm-uninstall"><a href="#nvm-uninstall" class="headerlink" title="nvm uninstall"></a>nvm uninstall</h1><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\Windows\system32&gt; nvm list</span><br><span class="line"></span><br><span class="line">  * <span class="number">16.18</span>.<span class="number">0</span> (Currently <span class="keyword">using</span> 64-bit executable)</span><br><span class="line">    <span class="number">12.22</span>.<span class="number">12</span></span><br><span class="line"><span class="built_in">PS</span> C:\Windows\system32&gt; nvm install <span class="number">12.22</span>.<span class="number">12</span></span><br><span class="line">Downloading node.js version <span class="number">12.22</span>.<span class="number">12</span> (<span class="number">64</span><span class="literal">-bit</span>)...</span><br><span class="line">Complete</span><br><span class="line">Creating D:\nvm\temp</span><br><span class="line"></span><br><span class="line">Downloading npm version <span class="number">6.14</span>.<span class="number">16</span>... Complete</span><br><span class="line">Installing npm v6.<span class="number">14.16</span>...</span><br><span class="line"></span><br><span class="line">Installation complete. <span class="keyword">If</span> you want to use this version, <span class="built_in">type</span></span><br><span class="line"></span><br><span class="line">nvm use <span class="number">12.22</span>.<span class="number">12</span></span><br></pre></td></tr></table></figure><h1 id="nvm-use-报错"><a href="#nvm-use-报错" class="headerlink" title="nvm use 报错"></a>nvm use 报错</h1><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\Windows\system32&gt; nvm list</span><br><span class="line"></span><br><span class="line">  * <span class="number">16.18</span>.<span class="number">0</span> (Currently <span class="keyword">using</span> 64-bit executable)</span><br><span class="line">    <span class="number">12.22</span>.<span class="number">12</span></span><br><span class="line"><span class="built_in">PS</span> C:\Windows\system32&gt; nvm use <span class="number">12.22</span>.<span class="number">12</span></span><br><span class="line"><span class="keyword">exit</span> status <span class="number">145</span>: Ŀ¼���ǿյġ�</span><br><span class="line"></span><br><span class="line"><span class="keyword">exit</span> status <span class="number">1</span>: ���ļ��Ѵ���ʱ���޷��������ļ���</span><br></pre></td></tr></table></figure><h2 id="exit-status-1-乱码"><a href="#exit-status-1-乱码" class="headerlink" title="exit status 1: 乱码"></a>exit status 1: 乱码</h2><p>报错原因：当前的CMD窗口没有执行该命令的权限，需要使用管理员权限打开的窗口执行nvm use命令</p><p>报错原因：之前多次安装 node，出错了就删除包，再次安装，在 C:\Program Files 下是有一个 nodejs 的，但是由于已经删除了 node 的包，所以这个 nodejs 是个无效文件</p><p>报错解决：重新安装该版本 nodejs</p><h2 id="exit-status-5-乱码"><a href="#exit-status-5-乱码" class="headerlink" title="exit status 5: 乱码"></a>exit status 5: 乱码</h2><p>报错原因：nvm 不是安装在 C 盘，且当前命令提示符窗口是 user 权限</p><p>报错解决：cmd 窗口使用管理员权限打开即可</p><h2 id="exit-status-145-乱码"><a href="#exit-status-145-乱码" class="headerlink" title="exit status 145: 乱码"></a>exit status 145: 乱码</h2><p>报错原因：安装 nvm 或 nodejs 的文件本身或路径有误</p><p>报错解决：如果是覆盖旧的 nvm 安装，建议删除 nvm 文件夹，然后重新安装 nvm</p><ol><li>检查安装 nvm 路径与设置放置 nodejs 的路径或文件，是否出现空格或中文，比如默认安装路径 C:\Program Files 中出现了空格。如果有，更改路径或文件夹名称后再使用 nvm use</li><li>安装 nvm 前是否原本就有 nodejs 其它版本。如果有，且安装过程中选择合并了以前版本，可以删除 nvm 中所有 nodejs 版本（主要是安装 nvm 前就有的版本），重新安装所需 nodejs，再运行 nvm use</li></ol><p></br></br></br></br></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;nvm 安装后建议修改镜像地址，否则 nodejs 下载会很慢&lt;/p&gt;
&lt;figure class=&quot;highlight powershell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;b</summary>
      
    
    
    
    <category term="编程" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="NodeJS" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/NodeJS/"/>
    
    
    <category term="NodeJS" scheme="http://example.com/tags/NodeJS/"/>
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Lombok注解记录</title>
    <link href="http://example.com/blog/47f664bf.html"/>
    <id>http://example.com/blog/47f664bf.html</id>
    <published>2023-06-09T03:29:49.000Z</published>
    <updated>2023-07-18T01:40:47.353Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Setter"><a href="#Setter" class="headerlink" title="@Setter"></a>@Setter</h1><p>自动添加类中所有属性相关的 set() 方法</p><h1 id="Getter"><a href="#Getter" class="headerlink" title="@Getter"></a>@Getter</h1><p>自动添加类中所有属性相关的 get() 方法</p><h1 id="Builder"><a href="#Builder" class="headerlink" title="@Builder"></a>@Builder</h1><p>使得该类可以通过 builder（建造者模式）构建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Student.builder().sno(<span class="string">&quot;001&quot;</span>).sname(<span class="string">&quot;admin&quot;</span>).sage(<span class="number">18</span>).sphone(<span class="string">&quot;110&quot;</span>).build();</span><br></pre></td></tr></table></figure><h1 id="RequiredArgsConstructor"><a href="#RequiredArgsConstructor" class="headerlink" title="@RequiredArgsConstructor"></a>@RequiredArgsConstructor</h1><p>生成一个该类的构造方法，禁止无参构造</p><h1 id="ToString"><a href="#ToString" class="headerlink" title="@ToString"></a>@ToString</h1><p>重写该类的 toString() 方法</p><h1 id="EqualsAndHashCode"><a href="#EqualsAndHashCode" class="headerlink" title="@EqualsAndHashCode"></a>@EqualsAndHashCode</h1><p>重写该类的 equals() 和 hashCode() 方法</p><h2 id="callSuper-x3D-true"><a href="#callSuper-x3D-true" class="headerlink" title="callSuper &#x3D; true"></a>callSuper &#x3D; true</h2><p>根据（子类自身的字段值 + 从父类继承的字段值）生成 hashcode</p><p>当两个子类对象比较时，如果生成的 hashcode 相同，equals() 返回 true。</p><h2 id="callSuper-x3D-false"><a href="#callSuper-x3D-false" class="headerlink" title="callSuper &#x3D; false"></a>callSuper &#x3D; false</h2><p>根据（子类自身的字段值）生成 hashcode</p><p>当两个子类对象比较时，如果只有子类对象的本身的字段值相同，equals() 就返回 true（父类字段值可以不同）</p><h1 id="Data"><a href="#Data" class="headerlink" title="@Data"></a>@Data</h1><p>&#x3D; @Setter + @Getter + @RequiredArgsConstructor + @ToString + @EqualsAndHashCode</p><p>@Data 默认比较两个对象的 hashCode，需要依据业务要求显式重写 equals() 方法，或者类上加上注解：@EqualsAndHashCode(onlyExplicitlyIncluded &#x3D; true)，然后为每一个需要比较的属性加上注解：@EqualsAndHashCode.Include</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(onlyExplicitlyIncluded = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cs</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="meta">@EqualsAndHashCode</span>.Include</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cs</span><span class="params">(<span class="type">int</span> id, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="NoArgsConstructor"><a href="#NoArgsConstructor" class="headerlink" title="@NoArgsConstructor"></a>@NoArgsConstructor</h1><p>生成无参的构造方法。</p><h2 id="staticName"><a href="#staticName" class="headerlink" title="staticName"></a>staticName</h2><p>staticName 代表的是是否生成静态构造方法，也就是说当 staticName 属性有值时则会生成一个静态构造方法，这时无参构造方法会被私有，然后创建一个指定名称的静态构造方法，并且是公有的，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编译前代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor(staticName = &quot;UserStatic&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfo</span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编译后代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfo</span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">UserInfo</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserStatic</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserStatic</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="onConstructor"><a href="#onConstructor" class="headerlink" title="onConstructor"></a>onConstructor</h2><p>经常写 Spring 或者 SpringBoot 代码的人应该知道，Spring 对于依赖注入提供了三种写法，分别是属性注入、Setter 方法注入以及构造器注入，但是在日常工作中我们更多采用的是依赖于 @Autowired 注解方式进行依赖注入，不过过多的依赖注入会使我们的代码过于冗长，甚至 Spring4.0 起就已经开始不推荐这种写法了，而是推荐使用 Setter 方法注入以及构造器注入，lombok 的生成构造器的方法就可以很方便的实现这种写法。</p><p>举一个通过构造器注入的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysLoginController</span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TokenUtils tokenUtils;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SysLoginService sysLoginService;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在这里 <span class="doctag">@Autowired</span> 是可以省略的，在这里使用只是为了介绍 onConstructor 参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SysLoginController</span> <span class="params">(TokenUtils tokenUtils, SysLoginService sysLoginService)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="built_in">this</span>.tokenUtils = tokenUtils;</span><br><span class="line">        <span class="built_in">this</span>.sysLoginService = sysLoginService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样注入 Bean 在数量较多时我们仍需编写大量代码，这个时候就可以使用 @RequiredArgsConstructor 注解来解决这个问题，至于为什么不使用 @AllArgsConstructor 注解是因为这个注解是针对所有参数的，而在这个情境下，我们只需构造 Bean 所对应的属性而不是非 Bean，所以我们只需在 Bean 对应的属性前加上 final 关键字进行修饰就可以只生成需要的有参构造函数，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编译前</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor(onConstructor = @__(@Autowired))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysLoginController</span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TokenUtils tokenUtils;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SysLoginService sysLoginService;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编译后</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysLoginController</span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TokenUtils tokenUtils;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SysLoginService sysLoginService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SysLoginController</span> <span class="params">(TokenUtils tokenUtils, SysLoginService sysLoginService)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="built_in">this</span>.tokenUtils = tokenUtils;</span><br><span class="line">        <span class="built_in">this</span>.sysLoginService = sysLoginService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="access"><a href="#access" class="headerlink" title="access"></a>access</h2><p>有的时候我们会使用单例模式，这个时候需要我们创造一个私有的无参构造方法，那么就可以使用 access 这样一个属性来设置构造起的权限，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编译前代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor(access = AccessLevel.PRIVATE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfo</span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编译后代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfo</span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">UserInfo</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>access 可选等级：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">AccessLevel</span> &#123;</span><br><span class="line">    PUBLIC,</span><br><span class="line">    MODULE,</span><br><span class="line">    PROTECTED,</span><br><span class="line">    PACKAGE,</span><br><span class="line">    PRIVATE,</span><br><span class="line">    NONE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">AccessLevel</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="force"><a href="#force" class="headerlink" title="force"></a>force</h2><p>当类中有被 final 关键字修饰的字段未被初始化时，编译器会报错，这时也可以设置 force 属性为 true 来为字段根据类型生成一个默认值 0&#x2F;false&#x2F;null，这样编译器就不会再报错了，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编译前代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor(force = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfo</span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String gender;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编译后代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfo</span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">UserInfo</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="AllArgsConstructor"><a href="#AllArgsConstructor" class="headerlink" title="@AllArgsConstructor"></a>@AllArgsConstructor</h1><p>生成全参的构造方法。</p><p></br></br></br></br></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Setter&quot;&gt;&lt;a href=&quot;#Setter&quot; class=&quot;headerlink&quot; title=&quot;@Setter&quot;&gt;&lt;/a&gt;@Setter&lt;/h1&gt;&lt;p&gt;自动添加类中所有属性相关的 set() 方法&lt;/p&gt;
&lt;h1 id=&quot;Getter&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="编程" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Lombok" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/Lombok/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="Lombok" scheme="http://example.com/tags/Lombok/"/>
    
  </entry>
  
  <entry>
    <title>Lombok介绍</title>
    <link href="http://example.com/blog/b369cd6a.html"/>
    <id>http://example.com/blog/b369cd6a.html</id>
    <published>2023-06-09T03:27:08.000Z</published>
    <updated>2023-07-18T01:40:50.568Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、Lombok-是什么"><a href="#一、Lombok-是什么" class="headerlink" title="一、Lombok 是什么"></a>一、Lombok 是什么</h1><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/1672124784402-4a31184d-a98c-4c97-a15c-d0a900b54c4f.png"></p><p>Lombok 项目是一个 <strong>Java 库</strong>，它可以自动插入到编辑器和构建工具中，增强 Java 的性能。不需要再写 getter、setter 或 equals方法，只要有一个注解，你的类就有一个功能齐全的构建器、自动记录变量等等。</p><p></br></br></br></br></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、Lombok-是什么&quot;&gt;&lt;a href=&quot;#一、Lombok-是什么&quot; class=&quot;headerlink&quot; title=&quot;一、Lombok 是什么&quot;&gt;&lt;/a&gt;一、Lombok 是什么&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://md-pic-liang</summary>
      
    
    
    
    <category term="编程" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Lombok" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/Lombok/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="Lombok" scheme="http://example.com/tags/Lombok/"/>
    
  </entry>
  
  <entry>
    <title>JDK1.8之Lambda写法记录</title>
    <link href="http://example.com/blog/c0ad33ff.html"/>
    <id>http://example.com/blog/c0ad33ff.html</id>
    <published>2023-06-09T00:51:04.000Z</published>
    <updated>2023-07-18T01:40:54.310Z</updated>
    
    <content type="html"><![CDATA[<h1 id="List-转-Set"><a href="#List-转-Set" class="headerlink" title="List 转 Set"></a>List 转 Set</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; userList = Lists.newArrayList();</span><br><span class="line">Set&lt;String&gt; userNameSet1 = userList.stream().map(User::getUserName).collect(Collectors.toSet());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先过滤，再转Set</span></span><br><span class="line">Set&lt;String&gt; userNameSet2 = userList.stream().filter(u -&gt; u.getAge() &gt;= <span class="number">20</span>).map(User::getUserName).collect(Collectors.toSet());</span><br></pre></td></tr></table></figure><h1 id="List-转-Map"><a href="#List-转-Map" class="headerlink" title="List 转 Map"></a>List 转 Map</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; userList = Lists.newArrayList();</span><br><span class="line">Map&lt;String, List&lt;User&gt;&gt; userMap1 = userList.stream().collect(Collectors.groupingBy(User::getUserId));</span><br><span class="line"></span><br><span class="line">Map&lt;String, User&gt; userMap2 = userList.stream().collect(Collectors.toMap(User::getUserId, Function.identity()));</span><br><span class="line"></span><br><span class="line">Map&lt;String, User&gt; userMap3 = userList.stream().collect(Collectors.toMap(User::getUserId, User::getUserName));</span><br></pre></td></tr></table></figure><h1 id="List-过滤"><a href="#List-过滤" class="headerlink" title="List 过滤"></a>List 过滤</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; userList = Lists.newArrayList();</span><br><span class="line">List&lt;String&gt; schoolIdList = Lists.newArrayList();</span><br><span class="line">List&lt;User&gt; stuUserList = userList.stream().filter(u -&gt; schoolIdList.contains(u.getSchoolId())).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><h1 id="根据实体类某个属性去重"><a href="#根据实体类某个属性去重" class="headerlink" title="根据实体类某个属性去重"></a>根据实体类某个属性去重</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Collectors.collectingAndThen</span></span><br><span class="line">List&lt;User&gt; distinctList = userList.stream().collect(Collectors.collectingAndThen(Collectors.toCollection(() -&gt; <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(Comparator.comparing(User::getName))), ArrayList::<span class="keyword">new</span>));</span><br></pre></td></tr></table></figure><h1 id="Map-取-Key-补集和差集"><a href="#Map-取-Key-补集和差集" class="headerlink" title="Map 取 Key 补集和差集"></a>Map 取 Key 补集和差集</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.common.collect.Maps;</span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Sets;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NapUtil</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取Map集合的差集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S,T&gt; Map&lt;S, T&gt; <span class="title function_">getDifferenceSetByGuava</span><span class="params">(Map&lt;S, T&gt; leftMap, Map&lt;S, T&gt; rightMap)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != leftMap &amp;&amp; <span class="literal">null</span> != rightMap) &#123;</span><br><span class="line"></span><br><span class="line">            Set&lt;S&gt; leftMapKey = leftMap.keySet();</span><br><span class="line">            Set&lt;S&gt; rightMapKey = rightMap.keySet();</span><br><span class="line">            Set&lt;S&gt; differenceSet = Sets.difference(leftMapKey, rightMapKey);</span><br><span class="line">            Map&lt;S, T&gt; result = Maps.newHashMap();</span><br><span class="line">            <span class="keyword">for</span> (S key : differenceSet) &#123;</span><br><span class="line">                result.put(key, leftMap.get(key));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取Map集合的并集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S,T&gt; Map&lt;S, T&gt; <span class="title function_">getUnionSetByGuava</span><span class="params">(Map&lt;S, T&gt; leftMap, Map&lt;S, T&gt; rightMap)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != leftMap &amp;&amp; <span class="literal">null</span> != rightMap) &#123;</span><br><span class="line"></span><br><span class="line">            Set&lt;S&gt; leftMapKey = leftMap.keySet();</span><br><span class="line">            Set&lt;S&gt; rightMapKey = rightMap.keySet();</span><br><span class="line">            Set&lt;S&gt; differenceSet = Sets.union(leftMapKey, rightMapKey);</span><br><span class="line">            Map&lt;S, T&gt; result = Maps.newHashMap();</span><br><span class="line">            <span class="keyword">for</span> (S key : differenceSet) &#123;</span><br><span class="line">                <span class="keyword">if</span> (leftMap.containsKey(key)) &#123;</span><br><span class="line">                    result.put(key, leftMap.get(key));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result.put(key, rightMap.get(key));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取Map集合的交集（String,String）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S,T&gt; Map&lt;S, T&gt; <span class="title function_">getIntersectionSetByGuava</span><span class="params">(Map&lt;S, T&gt; leftMap, Map&lt;S, T&gt; rightMap)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != leftMap &amp;&amp; <span class="literal">null</span> != rightMap) &#123;</span><br><span class="line"></span><br><span class="line">            Set&lt;S&gt; leftMapKey = leftMap.keySet();</span><br><span class="line">            Set&lt;S&gt; rightMapKey = rightMap.keySet();</span><br><span class="line">            Set&lt;S&gt; differenceSet = Sets.intersection(leftMapKey, rightMapKey);</span><br><span class="line">            Map&lt;S, T&gt; result = Maps.newHashMap();</span><br><span class="line">            <span class="keyword">for</span> (S key : differenceSet) &#123;</span><br><span class="line">                result.put(key, leftMap.get(key));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Map&lt;String, Person&gt; map1 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map1.put(<span class="string">&quot;a&quot;</span>, <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">1</span>));</span><br><span class="line">        map1.put(<span class="string">&quot;b&quot;</span>, <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">2</span>));</span><br><span class="line">        map1.put(<span class="string">&quot;c&quot;</span>, <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Person&gt; map2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map2.put(<span class="string">&quot;c&quot;</span>, <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">3</span>));</span><br><span class="line">        map2.put(<span class="string">&quot;d&quot;</span>, <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">4</span>));</span><br><span class="line">        map2.put(<span class="string">&quot;e&quot;</span>, <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Map&lt;String, Person&gt; diffMap1 = getDifferenceSetByGuava(map1, map2);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------差集结果,入参:A,B  出参:A-B后A中剩余的  -----------&quot;</span>);</span><br><span class="line">        diffMap1.forEach((k, v) -&gt; System.out.println(k + <span class="string">&quot;:&quot;</span> + v));</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Person&gt; diffMap2 = getDifferenceSetByGuava(map2, map1);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------差集结果,入参:B,A  出参:B-A后B中剩余的  -----------&quot;</span>);</span><br><span class="line">        diffMap2.forEach((k, v) -&gt; System.out.println(k + <span class="string">&quot;:&quot;</span> + v));</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Person&gt; unionMap = getUnionSetByGuava(map1, map2);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------并集结果-----------&quot;</span>);</span><br><span class="line">        unionMap.forEach((k, v) -&gt; System.out.println(k + <span class="string">&quot;:&quot;</span> + v));</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Person&gt; intersectionMap = getIntersectionSetByGuava(map1, map2);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------交结果-----------&quot;</span>);</span><br><span class="line">        intersectionMap.forEach((k, v) -&gt; System.out.println(k + <span class="string">&quot;:&quot;</span> + v));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></br></br></br></br></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;List-转-Set&quot;&gt;&lt;a href=&quot;#List-转-Set&quot; class=&quot;headerlink&quot; title=&quot;List 转 Set&quot;&gt;&lt;/a&gt;List 转 Set&lt;/h1&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr</summary>
      
    
    
    
    <category term="编程" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Java" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/Java/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Memories-大槻真希(大槻マキ)</title>
    <link href="http://example.com/blog/f3109477.html"/>
    <id>http://example.com/blog/f3109477.html</id>
    <published>2023-06-01T08:57:56.000Z</published>
    <updated>2023-07-18T01:39:33.361Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Memories-大槻（おおつき）真希（まき）（大槻マキ）"><a href="#Memories-大槻（おおつき）真希（まき）（大槻マキ）" class="headerlink" title="Memories - 大槻（おおつき）真希（まき）（大槻マキ）"></a>Memories - <ruby>大槻<rp>（</rp><rt>おおつき</rt><rp>）</rp></ruby><ruby>真希<rp>（</rp><rt>まき</rt><rp>）</rp></ruby>（大槻マキ）</h1><p><ruby>小<rp>（</rp><rt>ちい</rt><rp>）</rp></ruby>さな<ruby>頃<rp>（</rp><rt>ころ</rt><rp>）</rp></ruby>には<ruby>宝<rp>（</rp><rt>たから</rt><rp>）</rp></ruby>の<ruby>地図<rp>（</rp><rt>ちず</rt><rp>）</rp></ruby>が<br>小时候藏宝图</p><p><ruby>頭<rp>（</rp><rt>あたま</rt><rp>）</rp></ruby>の<ruby>中<rp>（</rp><rt>なか</rt><rp>）</rp></ruby>に<ruby>浮<rp>（</rp><rt>う</rt><rp>）</rp></ruby>かんでいて<br>总是浮现在脑海中</p><p>いつでも<ruby>探<rp>（</rp><rt>さが</rt><rp>）</rp></ruby>した<ruby>キセキ<rp>（</rp><rt>きせき</rt><rp>）</rp></ruby>の<ruby>場所<rp>（</rp><rt>ばしょ</rt><rp>）</rp></ruby>を<br>永远在寻找奇迹之地</p><p><ruby>知<rp>（</rp><rt>し</rt><rp>）</rp></ruby>らない<ruby>誰<rp>（</rp><rt>だれ</rt><rp>）</rp></ruby>かに<ruby>負<rp>（</rp><rt>ま</rt><rp>）</rp></ruby>けないよに<br>不输给远方的某人</p><p><ruby>今<rp>（</rp><rt>いま</rt><rp>）</rp></ruby>ではほこりだらけの<ruby>毎日<rp>（</rp><rt>まいにち</rt><rp>）</rp></ruby><br>现在的每一天都充满尘埃</p><p>いつの<ruby>日<rp>（</rp><rt>ひ</rt><rp>）</rp></ruby>かすべての<br>等到哪一天这所有的一切</p><p><ruby>時<rp>（</rp><rt>とき</rt><rp>）</rp></ruby>に<ruby>身<rp>（</rp><rt>み</rt><rp>）</rp></ruby>を<ruby>委<rp>（</rp><rt>まか</rt><rp>）</rp></ruby>せるだけ<br>都随风逝去</p><p>もしも<ruby>世界<rp>（</rp><rt>せかい</rt><rp>）</rp></ruby>が<ruby>変<rp>（</rp><rt>か</rt><rp>）</rp></ruby>わるのなら<br>如果世界能够改变</p><p><ruby>何<rp>（</rp><rt>なに</rt><rp>）</rp></ruby>も<ruby>知<rp>（</rp><rt>し</rt><rp>）</rp></ruby>らない<ruby>頃<rp>（</rp><rt>ころ</rt><rp>）</rp></ruby>の<ruby>私<rp>（</rp><rt>わたし</rt><rp>）</rp></ruby>に<br>请带着我回到</p><p><ruby>連<rp>（</rp><rt>つ</rt><rp>）</rp></ruby>れていって<br>一无所知的过去</p><p><ruby>思<rp>（</rp><rt>おも</rt><rp>）</rp></ruby>い<ruby>出<rp>（</rp><rt>で</rt><rp>）</rp></ruby>が<ruby>色<rp>（</rp><rt>いろ</rt><rp>）</rp></ruby>あせないように<br>但愿美好回忆永不退色</p><p><ruby>小<rp>（</rp><rt>ちい</rt><rp>）</rp></ruby>さな<ruby>頃<rp>（</rp><rt>ころ</rt><rp>）</rp></ruby>から<ruby>歌<rp>（</rp><rt>うた</rt><rp>）</rp></ruby>を<ruby>唄<rp>（</rp><rt>うた</rt><rp>）</rp></ruby>って<br>小时候唱起的歌</p><p><ruby>夢見<rp>（</rp><rt>ゆめみ</rt><rp>）</rp></ruby>る<ruby>心<rp>（</rp><rt>こころ</rt><rp>）</rp></ruby>あたためてた<br>温暖着梦想的心</p><p>みんなで<ruby>真似<rp>（</rp><rt>まね</rt><rp>）</rp></ruby>した<br>大家模仿过的</p><p><ruby>秘密<rp>（</rp><rt>ひみつ</rt><rp>）</rp></ruby>の<ruby>メロディー<rp>（</rp><rt>めろでぃー</rt><rp>）</rp></ruby><br>秘密的旋律</p><p><ruby>今度<rp>（</rp><rt>こんど</rt><rp>）</rp></ruby>は<ruby>上手<rp>（</rp><rt>じょうず</rt><rp>）</rp></ruby>に<ruby>聞<rp>（</rp><rt>き</rt><rp>）</rp></ruby>こえるように<br>下一次一定会更加的动听</p><p><ruby>今<rp>（</rp><rt>いま</rt><rp>）</rp></ruby>ではため<ruby>息<rp>（</rp><rt>いき</rt><rp>）</rp></ruby>ついてばかりで<br>现在的我仍在不断叹息</p><p><ruby>誰<rp>（</rp><rt>だれ</rt><rp>）</rp></ruby>もまだ<ruby>本当<rp>（</rp><rt>ほんとう</rt><rp>）</rp></ruby>の<br>我们都还未抓住</p><p><ruby>夢<rp>（</rp><rt>ゆめ</rt><rp>）</rp></ruby>さえつかめないまま<br>各自真正的梦想</p><p>もしも<ruby>時代<rp>（</rp><rt>じだい</rt><rp>）</rp></ruby>が<ruby>戻<rp>（</rp><rt>もど</rt><rp>）</rp></ruby>るのなら<br>如果时间可以倒流</p><p><ruby>涙<rp>（</rp><rt>なみだ</rt><rp>）</rp></ruby>を<ruby>知<rp>（</rp><rt>し</rt><rp>）</rp></ruby>った<ruby>頃<rp>（</rp><rt>ころ</rt><rp>）</rp></ruby>の<ruby>私<rp>（</rp><rt>わたし</rt><rp>）</rp></ruby>に<br>请带着我回到</p><p><ruby>連<rp>（</rp><rt>つ</rt><rp>）</rp></ruby>れていって<br>初识泪水的那一刻</p><p>せつなさが<ruby>追<rp>（</rp><rt>お</rt><rp>）</rp></ruby>いつかないように<br>但愿可以成功摆脱悲伤</p><p>もしも<ruby>世界<rp>（</rp><rt>せかい</rt><rp>）</rp></ruby>が<ruby>変<rp>（</rp><rt>か</rt><rp>）</rp></ruby>わるのなら<br>如果世界能够改变</p><p><ruby>何<rp>（</rp><rt>なに</rt><rp>）</rp></ruby>も<ruby>知<rp>（</rp><rt>し</rt><rp>）</rp></ruby>らない<ruby>頃<rp>（</rp><rt>ころ</rt><rp>）</rp></ruby>の<ruby>私<rp>（</rp><rt>わたし</rt><rp>）</rp></ruby>に<br>请带着我回到</p><p><ruby>連<rp>（</rp><rt>つ</rt><rp>）</rp></ruby>れていって<br>一无所知的过去</p><p><ruby>思<rp>（</rp><rt>おも</rt><rp>）</rp></ruby>い<ruby>出<rp>（</rp><rt>で</rt><rp>）</rp></ruby>が<ruby>色<rp>（</rp><rt>いろ</rt><rp>）</rp></ruby>あせないように<br>但愿美好回忆永不退色</p><p><ruby>連<rp>（</rp><rt>つ</rt><rp>）</rp></ruby>れていって<br>请带我走吧</p><p>せつなさが<ruby>追<rp>（</rp><rt>お</rt><rp>）</rp></ruby>いつかないように<br>但愿可以成功摆脱悲伤</p><p>【<ruby>终<rp>（</rp><rt>お</rt><rp>）</rp></ruby>わった】</p><p></br></br></br></br></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Memories-大槻（おおつき）真希（まき）（大槻マキ）&quot;&gt;&lt;a href=&quot;#Memories-大槻（おおつき）真希（まき）（大槻マキ）&quot; class=&quot;headerlink&quot; title=&quot;Memories - 大槻（おおつき）真希（まき）（大槻マキ）&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="生活" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="学习" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>数据库事务</title>
    <link href="http://example.com/blog/587418e1.html"/>
    <id>http://example.com/blog/587418e1.html</id>
    <published>2023-04-24T03:37:42.000Z</published>
    <updated>2023-04-24T05:05:31.449Z</updated>
    
    <content type="html"><![CDATA[<p>数据库事务就是一组 SQL 语句，这组 SQL 语句是一个逻辑工作单元。该单元<strong>作为一个整体永久性地修改</strong>或<strong>作为一个整体取消</strong>对数据库的修改。</p><p>定义事务的语句一般有三条：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span> TRANSACTION; <span class="comment">-- 表示事务开始</span></span><br><span class="line"><span class="keyword">COMMIT</span>;            <span class="comment">-- 表示事务提交</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;          <span class="comment">-- 表示事务回滚</span></span><br></pre></td></tr></table></figure><h1 id="一、-当前读和快照读"><a href="#一、-当前读和快照读" class="headerlink" title="一、 当前读和快照读"></a>一、 当前读和快照读</h1><h2 id="1-1-当前读"><a href="#1-1-当前读" class="headerlink" title="1.1 当前读"></a>1.1 当前读</h2><p>当前读<strong>读取的是数据的最新版本</strong>，要保证其他并发事务不能修改当前记录，所以会对读取的记录进行加锁。</p><p>像 select …… lock in share mode（共享锁）；select …… for update，update，insert，delete（排他锁）这些操作都会触发当前读。</p><h2 id="1-2-快照读"><a href="#1-2-快照读" class="headerlink" title="1.2 快照读"></a>1.2 快照读</h2><p>像不加锁的 select …… 操作就是快照读，即不加锁的非阻塞读。</p><p>快照读的前提是：<strong>隔离级别不是串行级别</strong>，串行级别下的快照读会退化成当前读。</p><p>之所以出现快照读的情况，是基于提高并发性能的考虑，快照读的实现是基于多版本并发控制，即 MVCC，可以认为 MVCC 是行锁的一个变种，但它在很多情况下，避免了加锁操作，降低了开销；既然是基于多版本，即快照读<strong>可能读到的并不一定是数据的最新版本，而有可能是之前的历史版本</strong>。</p><h1 id="二、MVCC（多版本并发控制）"><a href="#二、MVCC（多版本并发控制）" class="headerlink" title="二、MVCC（多版本并发控制）"></a>二、MVCC（多版本并发控制）</h1><p>MVCC（Multi-Version Concurrency Control），即多版本并发控制，是 MySQL 事务隔离级别中的一个重要概念。</p><p>这是一种并发控制的方法，一般在数据库管理系统中，实现对数据库的并发访问，在编程语言中实现事务内存。</p><p>MVCC 在 MySQL InnoDB 中的实现主要是为了提高数据库并发性能，用更好的方式去处理读-写冲突，做到即使有读写冲突时，也能做到不加锁，非阻塞并发读。</p><p>这仅仅只是一种理想的概念，即：维持一个数据的多个版本，使得读写操作没有冲突。</p><p>快照读就是 MySQL 为了实现 MVCC 理想模型，的其中一个具体非阻塞读功能。</p><h2 id="2-1-MVCC-实现原理"><a href="#2-1-MVCC-实现原理" class="headerlink" title="2.1 MVCC 实现原理"></a>2.1 MVCC 实现原理</h2><p>MySQL 4.1开始支持每个 InnoDB 引擎的表单独放到一个表空间里。InnoDB 通过使用 MVCC 来获取高并发性，并且实现 SQL 标准的 4 种隔离级别，同时使用一种被称为 next-key locking 的策略来避免幻读（phantom）现象。</p><p>除此之外 InnoDB 引擎还提供了插入缓存（insert buffer）、二次写（double write）、自适应哈西索引（adaptive hash index）、预读（read ahead）等高性能技术。</p><h3 id="2-1-1-隐式字段"><a href="#2-1-1-隐式字段" class="headerlink" title="2.1.1 隐式字段"></a>2.1.1 隐式字段</h3><ul><li>DB_TRX_ID：6byte，创建或者最后一次修改该记录的事务 ID</li><li>DB_ROW_ID：6byte，隐藏主键【如果当前表有主键，则隐藏主键&#x3D;主键；如果没有主键，则 InnoDB 会自动以 DB_ROW_ID 产生一个聚簇索引】</li><li>DB_ROLL_PTR：7byte，回滚指针【如果是新插入的数据，回滚指针为null】</li></ul><p>例如：insert 一条数据</p><table border="1" style="table-layout:fixed;">    <tr>        <th style="text-align:center" bgcolor="#91d5ff">name</th>        <th style="text-align:center" bgcolor="#91d5ff">age</th>        <th style="text-align:center" bgcolor="#91d5ff">gender</th>        <th style="text-align:center" bgcolor="#ffa940">DB_TRX_ID</th>        <th style="text-align:center" bgcolor="#ffa940">DB_ROLL_PTR</th>        <th style="text-align:center" bgcolor="#ffa940">DB_ROW_ID</th>    </tr>    <tr align="center">        <td bgcolor="#91d5ff">李四</td>        <td bgcolor="#91d5ff">12</td>        <td bgcolor="#91d5ff">man</td>        <td bgcolor="#ffa940">1</td>        <td bgcolor="#ffa940">1</td>        <td bgcolor="#ffa940">null</td>    </tr>    <tr align="center">        <td colspan="3">对用户可见</td>        <td colspan="3">对用户不可见</td>    </tr></table><h3 id="2-1-2-undolog（回滚日志）"><a href="#2-1-2-undolog（回滚日志）" class="headerlink" title="2.1.2 undolog（回滚日志）"></a>2.1.2 undolog（回滚日志）</h3><p>同一条数据，多次修改会存在多个历史版本，保存在 undolog 中，形成一个<strong>线性表（链表）</strong>。其中链首存储的是最新的历史记录，链尾是最早的历史记录。</p><p>数据表中有多条数据，多条数据发生了多次修改，那么则会存在多个链表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> table_a <span class="keyword">SET</span> name <span class="operator">=</span> &quot;李四&quot;;</span><br></pre></td></tr></table></figure><table border="1" style="table-layout:fixed;">    <tr>        <th style="text-align:center" bgcolor="#40a9ff">name</th>        <th style="text-align:center" bgcolor="#40a9ff">age</th>        <th style="text-align:center" bgcolor="#40a9ff">gender</th>        <th style="text-align:center" bgcolor="#ffa940">DB_TRX_ID</th>        <th style="text-align:center" bgcolor="#ffa940">DB_ROLL_PTR</th>        <th style="text-align:center" bgcolor="#ffa940">DB_ROW_ID</th>    </tr>    <tr align="center">        <td bgcolor="#40a9ff">李四</td>        <td bgcolor="#40a9ff">12</td>        <td bgcolor="#40a9ff">man</td>        <td bgcolor="#ffa940">2</td>        <td bgcolor="#ffa940">1</td>        <td bgcolor="#ffa940">0x123</td>    </tr>    <tr align="center">        <td colspan="3">对用户可见</td>        <td colspan="3">对用户不可见</td>    </tr></table>这时旧数据会保存到 undolog 中，新数据的【回滚指针（DB_ROLL_PTR）】指向 undolog 中旧数据的【回滚指针（DB_ROLL_PTR）】<h3 id="2-1-3-readview（读视图）"><a href="#2-1-3-readview（读视图）" class="headerlink" title="2.1.3 readview（读视图）"></a>2.1.3 readview（读视图）</h3><p>事务在进行快照读（select ……）的时候，会产生【readview（读视图）】</p><p>事务在执行快照读的那一刻，会生成数据库系统当前的一个快照。记录并维护系统当前活跃事务的ID（当每个事务开启时，都会被分配一个ID, 这个ID是递增的，所以最新的事务，ID值越大）</p><ul><li>trx_list：系统活跃的事务 ID</li><li>up_limit_id：列表中事务最小的 ID</li><li>low_limit_id：系统尚未分配的下一个事务 ID</li></ul><p>当一个事务在进行快照读时，能否读取到其他事务刚刚 update 并 commit 的记录？</p><ol><li>首先判断 DB_TRX_ID 和 update_limit_id 的关系。如果 DB_TRX_ID &lt; update_limit_id，则当前事务能看到 DB_TRX_ID 所 commit 的记录；否则进入下个判断</li><li>接着判断 DB_TRX_ID 和 low_limit_id 的关系。如果 DB_TRX_ID &gt;&#x3D; low_limit_id，则代表 DB_TRX_ID 所 commit 的记录是在生成 readview 之后，对于当前事务肯定是不可见的；反之进入下个判断</li><li>最后判断 DB_TRX_ID 和 trx_list 的关系。如果 DB_TRX_ID 存在于 【活跃事务（trx_list）】中，则代表在生成 readview 的时候，DB_TRX_ID 还是处在活跃状态，还没有 commit，因此 DB_TRX_ID update 的数据在当前事务是看不到的；如果不在，则说明这个事务在 readview 生成之前就已经 commit 了，那么DB_TRX_ID update 的结果是能够看见的</li></ol><h4 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h4><table border="1" style="table-layout:fixed;">    <tr align="center">        <td>事务1</td>        <td>事务2</td>        <td>事务3</td>        <td>事务4</td>    </tr>    <tr align="center">        <td>begin（开启）</td>        <td>begin（开启）</td>        <td>begin（开启）</td>        <td>begin（开启）</td>    </tr>    <tr align="center">        <td></td>        <td></td>        <td></td>        <td>update<br>commit</td>    </tr>    <tr align="center">        <td></td>        <td>select ……（快照读）</td>        <td></td>        <td></td>    </tr></table><p>此时事务2能不能读取到事务4 commit 的记录？</p><p>分析：事务2 select ……（快照读）产生的 readview</p><table border="1" style="table-layout:fixed;">    <tr>        <td>low_limit_id</td>        <td>1，2，3（因为4已经 commit，因此不是活跃事务）</td>    </tr>    <tr>        <td>up_limit_id</td>        <td>1</td>    </tr>    <tr>        <td>low_limit_id</td>        <td>5</td>    </tr></table><table border="1" style="table-layout:fixed;">    <tr>        <td>DB_TRX_ID</td>        <td>4</td>    </tr></table><ol><li>4 &gt; 1（DB_TRX_ID &gt; update_limit_id），进入下个判断</li><li>4 &lt; 5（DB_TRX_ID &lt; low_limit_id），进入下个判断</li><li>4 不存在于 trx_list 中，事务2 select ……（快照读）能够看到事务4 commit 的记录。</li></ol><p>实际测试：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;autocommit&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="operator">|</span> autocommit    <span class="operator">|</span> <span class="keyword">ON</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> autocommit<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;autocommit&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="operator">|</span> autocommit    <span class="operator">|</span> OFF   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><table border="1" style="table-layout:fixed;">    <tr>        <th style="text-align:center">窗口1</th>        <th style="text-align:center">窗口2</th>    </tr>    <tr>        <td>mysql> begin;<br>Query OK, 0 rows affected (0.00 sec)</td>        <td>mysql> begin;<br>Query OK, 0 rows affected (0.00 sec)</td>    </tr>    <tr>        <td>mysql> select * from tt17;<br>+----+------+------+<br>| id | name | age  |<br>+----+------+------+<br>|  1 | 1    |    1 |<br>|  2 | 2    |    2 |<br>|  3 | 3    |    3 |<br>+----+------+------+<br>3 rows in set (0.00 sec)</td>        <td>mysql> select * from tt17;<br>+----+------+------+<br>| id | name | age  |<br>+----+------+------+<br>|  1 | 1    |    1 |<br>|  2 | 2    |    2 |<br>|  3 | 3    |    3 |<br>+----+------+------+<br>3 rows in set (0.00 sec)</td>    </tr>    <tr>        <td></td>        <td>mysql> update tt17 set name = "zhangsan";<br>Query OK, 3 rows affected (0.00 sec)<br>Rows matched: 3  Changed: 3  Warnings: 0<br><br>mysql> commit;<br>Query OK, 0 rows affected (0.04 sec)</td>    </tr>    <tr>        <td>mysql> select * from tt17;<br>+----+------+------+<br>| id | name | age  |<br>+----+------+------+<br>|  1 | 1    |    1 |<br>|  2 | 2    |    2 |<br>|  3 | 3    |    3 |<br>+----+------+------+<br>3 rows in set (0.00 sec)</td>        <td>mysql> select * from tt17;<br>+----+------+------+<br>| id | name | age  |<br>+----+------+------+<br>|  1 | 1    |    1 |<br>|  2 | 2    |    2 |<br>|  3 | 3    |    3 |<br>+----+------+------+<br>3 rows in set (0.00 sec)</td>    </tr></table><p>此时，在实际测试中，事务2 select ……（快照读）看不到事务4 commit 的记录，与分析结果相反！(╬￣皿￣)</p><p>继续冷静分析：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> @<span class="variable">@transaction</span>_isolation;</span><br><span class="line">ERROR <span class="number">1193</span> (HY000): <span class="literal">Unknown</span> <span class="keyword">system</span> variable <span class="string">&#x27;transaction_isolation&#x27;</span></span><br><span class="line"><span class="comment">-- 这里可能会遇到 mysql-connector-java 的 jar 包版本高，而 mysql 版本低的情况。低版本的 mysql 只识别 tx_isolation，不识别 transaction_isolation</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> @<span class="variable">@tx</span>_isolation;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@tx</span>_isolation  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+</span></span><br><span class="line"><span class="operator">|</span> REPEATABLE<span class="operator">-</span>READ <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>可知当前数据的隔离级别为默认的可重复读（RR）。</p><p>因为<strong>可重复读（RR）和读已提交（RC）生成 readview 的时机是不同的</strong>。</p><ul><li>读已提交（RC）每次在进行 select ……（快照读）的时候都会生成新的 readview；</li><li>可重复读（RR）只有在第一次进行 select ……（快照读）的时候才会生成 readview，之后的读操作都只会用第一次生成的 readview</li></ul><p>在实际测试时，是先进行了一次 select ……（快照读），生成了 readview，与分析案例有出入，此时事务4仍然在 trx_list 中，在第三步判断时，commit 发生于生成快照读之后，因此看不到是正常现象。</p><p>总结：</p><ul><li>隔离级别为读已提交（RC）的时候，事务2 select ……（快照读）可以看到事务4 commit 的记录；</li><li>隔离级别为可重复读（RR）的时候，事务2 select ……（快照读）看不到事务4 commit 的记录</li></ul><h1 id="三、事务的-ACID-特性"><a href="#三、事务的-ACID-特性" class="headerlink" title="三、事务的 ACID 特性"></a>三、事务的 ACID 特性</h1><h2 id="3-1-A【Atomicity（原子性）】"><a href="#3-1-A【Atomicity（原子性）】" class="headerlink" title="3.1 A【Atomicity（原子性）】"></a>3.1 A【Atomicity（原子性）】</h2><p>一个事务中所包含的全部 SQL 语句是一个执行整体，不可分割，要么全执行，要么全取消。</p><p><strong>通过【回滚日志（undolog）】来实现</strong></p><h2 id="3-2-C【Consistency（一致性）】"><a href="#3-2-C【Consistency（一致性）】" class="headerlink" title="3.2 C【Consistency（一致性）】"></a>3.2 C【Consistency（一致性）】</h2><p>即数据库在事务操作前和事务处理后，其中的数据必须都要满足业务规范约束。如果在事务中出现错误，那么系统中的所有变化将自动地回滚，系统返回到原始状态。</p><p>（例如：银行转账，应先减后加，如果减后断电没有加上，不满足业务规范的约束，事务就要回滚，转账取消）</p><p><strong>依赖于其他三个特性来实现</strong></p><h2 id="3-3-I【-Isolation（隔离性）】"><a href="#3-3-I【-Isolation（隔离性）】" class="headerlink" title="3.3 I【 Isolation（隔离性）】"></a>3.3 I【 Isolation（隔离性）】</h2><p>指的是多个事务并发地独立运行，而不能互相干扰，事务提交时根据当前数据库状态进行操作。</p><p><strong>通过【MVCC】来实现</strong></p><h3 id="3-3-1-四种隔离级别"><a href="#3-3-1-四种隔离级别" class="headerlink" title="3.3.1 四种隔离级别"></a>3.3.1 四种隔离级别</h3><p><a href="https://liangxujian.github.io/blog/ebc52c.html">事务的四种隔离级别</a></p><h3 id="3-3-2-RR-和-RC"><a href="#3-3-2-RR-和-RC" class="headerlink" title="3.3.2 RR 和 RC"></a>3.3.2 RR 和 RC</h3><p>MVCC 只在 RR 和 RC 两个隔离级别下工作。</p><ol><li>在 RR 隔离级别下，【事务A】对某些记录的第一次查询会生成一个【快照（readview）】，此后【事务A】对这些记录的查询会继续使用这个【快照（readview）】。这会导致在生成【快照（readview）】之后，其他事务对这些记录的修改对【事务A】不可见；</li><li>在 RC 隔离级别下，【事务B】对某些记录的第一次查询会生成一个【快照（readview）】，但是【事务B】之后对这些记录的查询都会重新生成一个【快照（readview）】。也就是说，其他事务对这些记录的修改对【事务B】可见；</li><li>RC 的性能比 RR 好，因为 RC 允许【不可重复读】和【幻读】。</li></ol><h3 id="3-3-3-怎么处理幻读"><a href="#3-3-3-怎么处理幻读" class="headerlink" title="3.3.3 怎么处理幻读"></a>3.3.3 怎么处理幻读</h3><p>处理幻读有两种方案：</p><ul><li>将隔离级别提高到 Serializable 级别</li><li>加 Next-Key Lock 锁</li></ul><p>一般不会将数据库的隔离级别设置为 Serializable，加 Next-Key Lock 锁是比较常用的方法。</p><p>InnoDB 有三种锁算法：</p><ul><li>记录锁（Record Lock）：单个行记录加锁</li><li>间隙锁（Gap Lock）：锁定一个范围，但不含记录本身</li><li>临键锁（Next-Key Lock）：Record Lock + Gap Lock</li></ul><p>table_a 表中有如下数据：</p><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230423170339990.png"></p><p>这里可知有：</p><ul><li>间隙锁：（-∞，1）</li><li>记录锁：1</li><li>间隙锁：（1，10）</li><li>记录锁：10</li><li>间隙锁：（10，30）</li><li>记录锁：30</li><li>间隙锁：（30，+∞）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- uid列为主键</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_a <span class="keyword">WHERE</span> uid <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="comment">-- 主键uid=10记录存在，只对id=10的记录加Record Lock</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_a <span class="keyword">WHERE</span> uid <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"><span class="comment">-- 主键uid=8记录不存在，加间隙锁Gap Lock：（1, 10）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_a <span class="keyword">WHERE</span> uid <span class="operator">&gt;</span> <span class="number">12</span>;</span><br><span class="line"><span class="comment">-- 主键使用范围查询，上锁范围为：（10,30）∪30∪（30，+∞）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- age列为索引列</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_a <span class="keyword">WHERE</span> age <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line"><span class="comment">-- 条件过滤对应记录存在，除了会对主键uid=10的记录加Record Lock，</span></span><br><span class="line"><span class="comment">-- 还会对普通索引字段加锁：[10，50]</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_a <span class="keyword">WHERE</span> age <span class="operator">=</span> <span class="number">40</span>;</span><br><span class="line"><span class="comment">-- 条件过滤对应记录不存在，只会对普通索引字段加锁：(30，50]</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_a <span class="keyword">WHERE</span> age <span class="operator">&gt;</span> <span class="number">40</span>;</span><br><span class="line"><span class="comment">-- 普通索引使用范围查询，上锁范围为：（30，+∞）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_a <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;AAA&#x27;</span>;</span><br><span class="line"><span class="comment">-- name列没有索引，则会进行全表扫描，所有记录都会加上临键锁，相当于锁表</span></span><br></pre></td></tr></table></figure><h2 id="3-4-D【Durability（持久性）】"><a href="#3-4-D【Durability（持久性）】" class="headerlink" title="3.4 D【Durability（持久性）】"></a>3.4 D【Durability（持久性）】</h2><p>也称为永久性，指的是事务在处理结束后，对数据库的修改是永久性的，即使系统故障也不会丢失。</p><p><strong>通过【redolog】来实现</strong></p><h3 id="3-4-1-数据更新流程"><a href="#3-4-1-数据更新流程" class="headerlink" title="3.4.1 数据更新流程"></a>3.4.1 数据更新流程</h3><p><img src="https://md-pic-liangxj.oss-cn-guangzhou.aliyuncs.com/20230423170339991.png"></p><ol><li>执行器先从 InnoDB 引擎中找到数据，如果在 Buffer Pool 内存中则直接返回；如果不在则【随机读】查询磁盘文件后返回</li><li>执行器拿到数据之后会先修改数据，然后调用 InnoDB 引擎接口重新写入数据</li><li>InnoDB 引擎将数据更新到内存，同时【顺序写】数据到 redolog 中，此时 redolog 状态为 prepare</li><li>执行器生成这个操作的 binlog</li><li>执行器调用 InnoDB 引擎的事务提交接口，InnoDB 引擎把刚刚写完的 redolog 状态改为 commit，数据更新完成</li></ol><h3 id="3-4-2-【随机读写】和【顺序读写】"><a href="#3-4-2-【随机读写】和【顺序读写】" class="headerlink" title="3.4.2 【随机读写】和【顺序读写】"></a>3.4.2 【随机读写】和【顺序读写】</h3><p>因为，【顺序读写】的效率远远高于【随机读写】。</p><p>所以，为了保证数据的一致性，会先将数据的更新结果【顺序写】入到 redolog 日志文件中，然后再将数据写入到对应的磁盘文件中【WAL（write ahead log）机制：先写日志，再写数据】。这样的设计，其效率优于直接随机读写磁盘文件。</p><p>由此可知，如果发生异常情况，导致实际数据未能写入到磁盘，只要日志文件保存成功了，那么数据就不会丢失，可以根据日志来进行数据恢复。</p><h3 id="3-4-3-数据恢复分析"><a href="#3-4-3-数据恢复分析" class="headerlink" title="3.4.3 数据恢复分析"></a>3.4.3 数据恢复分析</h3><ul><li>redolog 处于 prepare 状态，binlog 未写入，干掉 redolog 的 prepare 状态，数据更新操作丢失、回滚；</li><li>redolog 处于 prepare 状态，binlog 已写入，redolog 的 prepare 状态改为 commit，更新数据提交</li></ul><h1 id="四、不能用于事务的操作"><a href="#四、不能用于事务的操作" class="headerlink" title="四、不能用于事务的操作"></a>四、不能用于事务的操作</h1><ul><li>创建数据库（create database）</li><li>修改数据库（alter database）</li><li>删除数据库（drop database）</li><li>恢复数据库（restore database）</li><li>加载数据库（load database）</li><li>备份日志文件（backup log）</li><li>恢复日志文件（restore log）</li><li>更新统计数据（update statitics）</li><li>授权操作（grant）</li><li>复制事务日志（dump tran）</li><li>磁盘初始化（disk init）</li><li>更新使用sp_configure后的系统配置（reconfigure）</li></ul><p></br></br></br></br></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;数据库事务就是一组 SQL 语句，这组 SQL 语句是一个逻辑工作单元。该单元&lt;strong&gt;作为一个整体永久性地修改&lt;/strong&gt;或&lt;strong&gt;作为一个整体取消&lt;/strong&gt;对数据库的修改。&lt;/p&gt;
&lt;p&gt;定义事务的语句一般有三条：&lt;/p&gt;
&lt;figure c</summary>
      
    
    
    
    <category term="编程" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="MySQL" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/MySQL/"/>
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
    <category term="Database" scheme="http://example.com/tags/Database/"/>
    
  </entry>
  
</feed>
